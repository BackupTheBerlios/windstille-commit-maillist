From grumbel at mail.berlios.de  Sat Dec  9 18:22:13 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 09 Dec 2006 17:22:13 -0000
Subject: [Windstille-commit] r1286 - trunk/windstille/src
Message-ID: <200612091721.kB9HLCaM004552@sheep.berlios.de>

Author: grumbel
Date: 2006-12-09 18:21:11 +0100 (Sat, 09 Dec 2006)
New Revision: 1286

Modified:
   trunk/windstille/src/SConscript
Log:
- added some code for ResponseCurves

Modified: trunk/windstille/src/SConscript
===================================================================
--- trunk/windstille/src/SConscript	2006-09-13 02:23:05 UTC (rev 1285)
+++ trunk/windstille/src/SConscript	2006-12-09 17:21:11 UTC (rev 1286)
@@ -63,6 +63,7 @@
 'pda.cpp',
 'physics.cpp',
 'pistol.cpp',
+'response_curve.cpp',
 'player.cpp',
 'random.cpp',
 'display/render_buffer.cpp',



From grumbel at mail.berlios.de  Tue Dec 19 05:28:07 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 19 Dec 2006 05:28:07 +0100
Subject: [Windstille-commit] r1287 - in trunk: . txt2png
Message-ID: <200612190428.kBJ4S7IR028840@sheep.berlios.de>

Author: grumbel
Date: 2006-12-19 05:28:06 +0100 (Tue, 19 Dec 2006)
New Revision: 1287

Added:
   trunk/txt2png/
   trunk/txt2png/SConstruct
   trunk/txt2png/bitmap.cpp
   trunk/txt2png/bitmap.hpp
   trunk/txt2png/text_renderer.hpp
   trunk/txt2png/ttf_font.cpp
   trunk/txt2png/ttf_font.hpp
   trunk/txt2png/txt2png.cpp
Log:
- little utility app to convert ascii text to png

Added: trunk/txt2png/SConstruct
===================================================================
--- trunk/txt2png/SConstruct	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/SConstruct	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,10 @@
+# -*- python -*-
+
+env = Environment()
+env.ParseConfig('freetype-config --libs --cflags')
+env.Program('txt2png', ['txt2png.cpp',
+                        'bitmap.cpp',
+                        'ttf_font.cpp'],
+            CXXFLAGS="-g -O0 -Wall")
+
+# EOF #

Added: trunk/txt2png/bitmap.cpp
===================================================================
--- trunk/txt2png/bitmap.cpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/bitmap.cpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,105 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <algorithm>
+#include <fstream>
+#include <string.h>
+#include "bitmap.hpp"
+
+Bitmap::Bitmap(int width_, int height_)
+  : width(width_),
+    height(height_),
+    buffer(new unsigned char[width * height])
+{
+  memset(buffer, 0, width * height);
+}
+
+Bitmap::~Bitmap()
+{
+  delete[] buffer;
+}
+
+void
+Bitmap::clear()
+{
+  memset(buffer, 0, width * height);
+}
+
+void
+Bitmap::blit(const Bitmap& source, int x_pos, int y_pos)
+{
+  int start_x = std::max(0, -x_pos);
+  int start_y = std::max(0, -y_pos);
+  
+  int end_x = std::min(source.width,  width  - x_pos);
+  int end_y = std::min(source.height, height - y_pos);
+ 
+  for(int y = start_y; y < end_y; ++y)
+    for(int x = start_x; x < end_x; ++x)
+      { // opaque blit, could use alpha/add blit instead
+        buffer[(y + y_pos) * width + (x + x_pos)] = source.buffer[y * source.width + x];
+      }
+}
+
+void 
+Bitmap::write_pgm(const std::string& filename)
+{
+  std::ofstream out(filename.c_str());
+  
+  out << "P2" << std::endl;
+  out << "# txt2png" << std::endl;
+  out << get_width() << " " << get_height() << std::endl;
+  out << "255" << std::endl;
+  for(int y = 0; y < get_height(); ++y)
+    for(int x = 0; x < get_width(); ++x)
+      {
+        out << 255 - int(at(x, y)) << " ";
+      }
+  out << std::endl;
+}
+
+unsigned char
+Bitmap::at(int x, int y)
+{
+  return buffer[y * width + x];
+}
+
+void
+Bitmap::invert(int x1, int y1, int x2, int y2)
+{
+  x1 = std::max(0, x1);
+  y1 = std::max(0, y1);
+
+  x2 = std::min(width,  x2);
+  y2 = std::min(height, y2);
+
+  for(int y = y1; y < y2; ++y)
+    for(int x = x1; x < x2; ++x)
+      {
+        buffer[y * width + x] = 255 - buffer[y * width + x];
+      }
+}
+
+/* EOF */

Added: trunk/txt2png/bitmap.hpp
===================================================================
--- trunk/txt2png/bitmap.hpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/bitmap.hpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,61 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_BITMAP_HPP
+#define HEADER_BITMAP_HPP
+
+/** */
+class Bitmap
+{
+private:
+  int width;
+  int height;
+  unsigned char* buffer;
+
+public:
+  Bitmap(int width, int height);
+  ~Bitmap();
+
+  int get_width() { return width; }
+  int get_height() { return height; }
+
+  unsigned char at(int x, int y);
+
+  void blit(const Bitmap& source, int x, int y);
+  unsigned char* get_data() { return buffer; }
+  void clear();
+  void write_pgm(const std::string& filename);
+
+  /** Invert the given region */
+  void invert(int x1, int y1, int x2, int y2);
+
+private:
+  Bitmap (const Bitmap&);
+  Bitmap& operator= (const Bitmap&);
+};
+
+#endif
+
+/* EOF */

Added: trunk/txt2png/text_renderer.hpp
===================================================================
--- trunk/txt2png/text_renderer.hpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/text_renderer.hpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,46 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TEXT_RENDERER_HPP
+#define HEADER_TEXT_RENDERER_HPP
+
+/** */
+class TextRenderer
+{
+private:
+public:
+  TextRenderer();
+  ~TextRenderer();
+  
+  void render(Bitmap* canvas, std::string text, )
+
+private:
+  TextRenderer (const TextRenderer&);
+  TextRenderer& operator= (const TextRenderer&);
+};
+
+#endif
+
+/* EOF */

Added: trunk/txt2png/ttf_font.cpp
===================================================================
--- trunk/txt2png/ttf_font.cpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/ttf_font.cpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,165 @@
+/*  $Id: ttf_font.cpp 1274 2006-09-05 19:10:18Z grumbel $
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+*/
+
+#include <iostream>
+#include <iomanip>
+#include <fstream>
+#include <assert.h>
+#include <vector>
+#include <stdexcept>
+#include <sstream>
+
+#include <ft2build.h>
+#include FT_FREETYPE_H
+#include FT_GLYPH_H
+
+#include "ttf_font.hpp"
+
+TTFCharacter::TTFCharacter(FT_GlyphSlot glyph)
+{
+  x_offset =  glyph->bitmap_left;
+  y_offset = -glyph->bitmap_top;
+
+  advance = (glyph->advance.x >> 6);
+
+  bitmap = new Bitmap(glyph->bitmap.width, glyph->bitmap.rows);
+
+  for(int y = 0; y < bitmap->get_height(); ++y)
+    for(int x = 0; x < bitmap->get_width(); ++x)
+      {
+        bitmap->get_data()[y * bitmap->get_width() + x] = glyph->bitmap.buffer[y * glyph->bitmap.pitch + x];
+      }
+}
+
+class TTFFontImpl
+{
+public:
+  /// the global FreeType library handle
+  static FT_Library      library;
+
+  /** Array of characters available in this font, current limited to
+      256 characters, no full unicode */
+  std::vector<TTFCharacter*> characters;
+
+  /** The original size of the font in pixels */
+  int size;
+
+  /** The amount of pixels to advance in y direction after a finished
+      line, this can be transformed by FontEffect */
+  int height;
+
+  ~TTFFontImpl()
+  {
+    for(std::vector<TTFCharacter*>::size_type i = 0; i < characters.size(); ++i)
+      delete characters[i];
+  }
+};
+
+FT_Library TTFFontImpl::library;
+
+TTFFont::TTFFont(const std::string& filename, int size_)
+  : impl(new TTFFontImpl())
+{
+  assert(size_ > 0);
+
+  impl->size = size_;
+
+  // Read the TTF font file content into buffer
+  std::ifstream fin(filename.c_str());
+  std::istreambuf_iterator<char> first(fin), last;
+  std::vector<char> buffer(first, last); 
+
+  FT_Face face;
+  if (FT_New_Memory_Face(TTFFontImpl::library, 
+                         reinterpret_cast<FT_Byte*>(&*buffer.begin()), buffer.size(), 
+                         0, &face))
+    {
+      throw std::runtime_error("Couldn't load font: '" + filename + "'");
+    }
+  
+  FT_Set_Pixel_Sizes(face, impl->size, impl->size);
+
+  FT_Select_Charmap(face,  FT_ENCODING_UNICODE);
+
+  impl->height = impl->size;
+
+  // We limit ourself to 256 characters for the momemnt
+  for(int glyph_index = 0; glyph_index < 256; glyph_index += 1)
+    {
+      if (FT_Load_Char( face,  glyph_index, FT_LOAD_RENDER))
+        {
+          // FIXME: happens when character is not in font, should be handled more gentle
+          throw std::runtime_error("couldn't load char");
+        }
+            
+      impl->characters.push_back(new TTFCharacter(face->glyph));
+    }
+
+  FT_Done_Face(face);
+}
+
+TTFFont::~TTFFont()
+{
+  delete impl;
+}
+
+const TTFCharacter&
+TTFFont::get_character(int c) const
+{
+  assert(c >= 0 && c < 256);
+  return *impl->characters[c];
+}
+
+int
+TTFFont::get_height() const
+{
+  return impl->size;
+}
+
+int
+TTFFont::get_width(const std::string& text) const
+{
+  int width = 0;
+  for(std::string::const_iterator i = text.begin(); i != text.end(); ++i)
+    width += impl->characters[*i]->advance;
+  return width;
+}
+
+void
+TTFFont::init()
+{
+  FT_Error  error;
+  
+  error = FT_Init_FreeType( &TTFFontImpl::library );
+  if ( error )
+    throw std::runtime_error( "could not initialize FreeType" );
+}
+
+void
+TTFFont::deinit()
+{
+  FT_Done_FreeType( TTFFontImpl::library );
+}
+
+/* EOF */

Added: trunk/txt2png/ttf_font.hpp
===================================================================
--- trunk/txt2png/ttf_font.hpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/ttf_font.hpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,86 @@
+/*  $Id: ttf_font.hpp 1274 2006-09-05 19:10:18Z grumbel $
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TTF_FONT_HXX
+#define HEADER_TTF_FONT_HXX
+
+#include <string>
+#include "bitmap.hpp"
+
+struct FT_GlyphSlotRec_;
+typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;
+
+class TTFCharacter
+{
+public:
+  /** The position of the image, relative to the current cursor
+      position in screen coordinates */
+  int x_offset;
+  int y_offset;
+
+  /** Amount of pixels that the cursor will advance after having
+      printed this character (FIXME: could use kerning instead) */
+  int advance;
+
+  Bitmap* bitmap;
+
+  TTFCharacter(FT_GlyphSlot glyph);
+};
+
+class TTFFontImpl;
+
+/** */
+class TTFFont
+{
+public:
+  static void init();
+  static void deinit();
+
+  TTFFont(const std::string& file, int size);
+  ~TTFFont();
+
+  /** The height of the font */
+  int get_height() const;
+
+  /** Returns the width of a given piece of text, doesn't take
+      newlines into account */
+  int get_width(const std::string& text) const;
+
+  /** Returns the height as given in the constructor, this does *not*
+      take into account any possible resize effects done by
+      FontEffoct */
+  int get_size() const;
+
+  const TTFCharacter& get_character(int c) const;
+
+  //void draw(float x_pos, float y_pos, const std::string& str, const Color& color = Color(1.0f, 1.0f, 1.0f));
+  //void draw_center(float x_pos, float y_pos, const std::string& str, const Color& color = Color(1.0f, 1.0f, 1.0f));
+private:
+  TTFFontImpl* impl;
+};
+
+#endif
+
+/* EOF */

Added: trunk/txt2png/txt2png.cpp
===================================================================
--- trunk/txt2png/txt2png.cpp	2006-12-09 17:21:11 UTC (rev 1286)
+++ trunk/txt2png/txt2png.cpp	2006-12-19 04:28:06 UTC (rev 1287)
@@ -0,0 +1,113 @@
+#include <string>
+#include <iostream>
+#include <iomanip>
+#include <sstream>
+#include <fstream>
+#include "ttf_font.hpp"
+
+void render(Bitmap& canvas, TTFFont& font, const std::string& text)
+{
+  int start_x = 4;
+  int start_y = 4+10;
+
+  int page = 0;
+  int x = start_x;
+  int y = start_y; // <- refers to the baseline of the font!
+
+  for(std::string::size_type i = 0; i < text.size(); ++i)
+    {
+      if (text[i] == '\n')
+        {
+          x = start_x;
+          y += font.get_height();
+
+          if (y >= canvas.get_height() - start_y + font.get_height())
+            { // FIXME :Duplicate code
+              y = start_y;
+              x = start_x;
+
+              std::ostringstream str;
+              str << "out/page" << std::setfill('0') << std::setw(3) << page << ".pgm";
+              std::cout << "Writing: " << str.str() << std::endl;
+              canvas.write_pgm(str.str());
+              canvas.clear();
+
+              page += 1;
+            }
+        }
+      else if (text[i] == '\r')
+        {
+          // ignore
+        }
+      else if (text[i] == '\t')
+        {
+          int cw = font.get_character(' ').advance * 8;
+          x = start_x + ((((x-start_x)/cw) + 1) * cw);
+        }
+      else
+        {
+          const TTFCharacter& glyph = font.get_character(text[i]);
+
+          canvas.blit(*glyph.bitmap, 
+                      x + glyph.x_offset,
+                      y + glyph.y_offset);
+
+          x += glyph.advance;
+
+          if (x >= canvas.get_width())
+            {
+              std::cout << "Illegal line break on page " << page << std::endl;
+              x = start_x;
+              y += font.get_height();              
+            }
+
+          if (y >= canvas.get_height() - start_y + font.get_height())
+            {
+              y = start_y;
+              x = start_x;
+
+              std::ostringstream str;
+              str << "out/page" << std::setfill('0') << std::setw(3) << page << ".pgm";
+              std::cout << "Writing: " << str.str() << std::endl;
+              canvas.write_pgm(str.str());
+              canvas.clear();
+
+              page += 1;
+            }
+        }
+    }
+}
+
+int main(int argc, char** argv)
+{
+  if (argc != 4)
+    {
+      std::cout << "Usage: " << argv[0] << " FONT SIZE TEXT" << std::endl;
+    }
+  else
+    {
+      std::string font_filename = argv[1];
+      int font_size = atoi(argv[2]);
+      std::string text_filename = argv[3];
+
+      TTFFont::init();
+
+      //std::cout << "Load font" << std::endl;
+      TTFFont font(font_filename, font_size);
+
+      //  std::cout << "Create bitmap" << std::endl;
+      Bitmap  bitmap(480, 272);
+
+      std::ifstream fin(text_filename.c_str());
+      std::istreambuf_iterator<char> first(fin), last;
+      std::string text(first, last); 
+
+      //std::cout << "Render..." << std::endl;
+      render(bitmap, font, text);
+  
+      TTFFont::deinit();
+    }
+  return 0;
+}
+
+/* EOF */



From grumbel at mail.berlios.de  Tue Dec 19 19:33:14 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 19 Dec 2006 19:33:14 +0100
Subject: [Windstille-commit] r1288 - trunk/txt2png
Message-ID: <200612191833.kBJIXEGJ006747@sheep.berlios.de>

Author: grumbel
Date: 2006-12-19 19:33:13 +0100 (Tue, 19 Dec 2006)
New Revision: 1288

Added:
   trunk/txt2png/command_line.cpp
   trunk/txt2png/command_line.hpp
   trunk/txt2png/command_line_generic.cpp
   trunk/txt2png/command_line_generic.hpp
Modified:
   trunk/txt2png/SConstruct
   trunk/txt2png/bitmap.cpp
   trunk/txt2png/bitmap.hpp
   trunk/txt2png/ttf_font.cpp
   trunk/txt2png/txt2png.cpp
Log:
- added some proper commandline options

Modified: trunk/txt2png/SConstruct
===================================================================
--- trunk/txt2png/SConstruct	2006-12-19 04:28:06 UTC (rev 1287)
+++ trunk/txt2png/SConstruct	2006-12-19 18:33:13 UTC (rev 1288)
@@ -2,9 +2,13 @@
 
 env = Environment()
 env.ParseConfig('freetype-config --libs --cflags')
+env['LIBS'] += ['jpeg']
+env['CXXFLAGS'] += ['-g', '-O0', '-Wall']
 env.Program('txt2png', ['txt2png.cpp',
                         'bitmap.cpp',
-                        'ttf_font.cpp'],
-            CXXFLAGS="-g -O0 -Wall")
+                        'ttf_font.cpp',
+                        'command_line.cpp',
+                        'command_line_generic.cpp'
+                        ])
 
 # EOF #

Modified: trunk/txt2png/bitmap.cpp
===================================================================
--- trunk/txt2png/bitmap.cpp	2006-12-19 04:28:06 UTC (rev 1287)
+++ trunk/txt2png/bitmap.cpp	2006-12-19 18:33:13 UTC (rev 1288)
@@ -23,6 +23,9 @@
 **  02111-1307, USA.
 */
 
+#include <stdio.h>
+#include <jpeglib.h>
+#include <iostream>
 #include <algorithm>
 #include <fstream>
 #include <string.h>
@@ -33,7 +36,7 @@
     height(height_),
     buffer(new unsigned char[width * height])
 {
-  memset(buffer, 0, width * height);
+  memset(buffer, 255, width * height);
 }
 
 Bitmap::~Bitmap()
@@ -44,7 +47,7 @@
 void
 Bitmap::clear()
 {
-  memset(buffer, 0, width * height);
+  memset(buffer, 255, width * height);
 }
 
 void
@@ -75,11 +78,61 @@
   for(int y = 0; y < get_height(); ++y)
     for(int x = 0; x < get_width(); ++x)
       {
-        out << 255 - int(at(x, y)) << " ";
+        out << int(at(x, y)) << " ";
       }
   out << std::endl;
 }
 
+void
+Bitmap::write_jpg(const std::string& filename)
+{
+  struct jpeg_compress_struct cinfo;
+  struct jpeg_error_mgr jerr;
+  
+  /* More stuff */
+  FILE * outfile;		/* target file */
+
+  cinfo.err = jpeg_std_error(&jerr);
+  /* Now we can initialize the JPEG compression object. */
+  jpeg_create_compress(&cinfo);
+
+  if ((outfile = fopen(filename.c_str(), "wb")) == NULL)
+    {
+      std::cerr << "can't open "  << filename << std::endl;
+      return;
+    }
+  jpeg_stdio_dest(&cinfo, outfile);
+
+  cinfo.image_width  = get_width();
+  cinfo.image_height = get_height();
+  cinfo.input_components = 1;	//3	/* # of color components per pixel */
+  cinfo.in_color_space = JCS_GRAYSCALE; /* colorspace of input image */
+
+  jpeg_set_defaults(&cinfo);
+
+  jpeg_set_quality(&cinfo, 85, TRUE /* limit to baseline-JPEG values */);
+
+  /* TRUE ensures that we will write a complete interchange-JPEG file.
+   * Pass TRUE unless you are very sure of what you're doing. */
+  jpeg_start_compress(&cinfo, TRUE);
+
+  JSAMPROW row_pointer[get_height()];	/* pointer to JSAMPLE row[s] */
+
+  for(int y = 0; y < get_height(); ++y)
+    row_pointer[y] = &buffer[y * get_width()];
+
+  while (cinfo.next_scanline < cinfo.image_height) 
+    {
+      jpeg_write_scanlines(&cinfo, row_pointer, get_height());
+    }
+
+  jpeg_finish_compress(&cinfo);
+
+  fclose(outfile);
+
+  jpeg_destroy_compress(&cinfo);
+}
+
 unsigned char
 Bitmap::at(int x, int y)
 {
@@ -102,4 +155,20 @@
       }
 }
 
+void
+Bitmap::fill(int x1, int y1, int x2, int y2, unsigned char c)
+{  
+  x1 = std::max(0, x1);
+  y1 = std::max(0, y1);
+
+  x2 = std::min(width,  x2);
+  y2 = std::min(height, y2);
+
+  for(int y = y1; y < y2; ++y)
+    for(int x = x1; x < x2; ++x)
+      {
+        buffer[y * width + x] = c;
+      }
+}
+
 /* EOF */

Modified: trunk/txt2png/bitmap.hpp
===================================================================
--- trunk/txt2png/bitmap.hpp	2006-12-19 04:28:06 UTC (rev 1287)
+++ trunk/txt2png/bitmap.hpp	2006-12-19 18:33:13 UTC (rev 1288)
@@ -47,10 +47,14 @@
   unsigned char* get_data() { return buffer; }
   void clear();
   void write_pgm(const std::string& filename);
+  void write_jpg(const std::string& filename);
+  
 
   /** Invert the given region */
   void invert(int x1, int y1, int x2, int y2);
 
+  /** Fill the given region with color \a c */
+  void fill(int x1, int y1, int x2, int y2, unsigned char c);
 private:
   Bitmap (const Bitmap&);
   Bitmap& operator= (const Bitmap&);

Copied: trunk/txt2png/command_line.cpp (from rev 1276, trunk/windstille/src/command_line.cpp)

Copied: trunk/txt2png/command_line.hpp (from rev 1276, trunk/windstille/src/command_line.hpp)

Copied: trunk/txt2png/command_line_generic.cpp (from rev 1276, trunk/windstille/src/command_line_generic.cpp)

Copied: trunk/txt2png/command_line_generic.hpp (from rev 1276, trunk/windstille/src/command_line_generic.hpp)

Modified: trunk/txt2png/ttf_font.cpp
===================================================================
--- trunk/txt2png/ttf_font.cpp	2006-12-19 04:28:06 UTC (rev 1287)
+++ trunk/txt2png/ttf_font.cpp	2006-12-19 18:33:13 UTC (rev 1288)
@@ -48,7 +48,7 @@
   for(int y = 0; y < bitmap->get_height(); ++y)
     for(int x = 0; x < bitmap->get_width(); ++x)
       {
-        bitmap->get_data()[y * bitmap->get_width() + x] = glyph->bitmap.buffer[y * glyph->bitmap.pitch + x];
+        bitmap->get_data()[y * bitmap->get_width() + x] = 255 - glyph->bitmap.buffer[y * glyph->bitmap.pitch + x];
       }
 }
 
@@ -104,16 +104,27 @@
 
   impl->height = impl->size;
 
+  std::cout << "BBox: " << impl->size << " "
+            << impl->size * face->bbox.xMin/face->units_per_EM << " " 
+            << impl->size * face->bbox.yMin/face->units_per_EM << " " 
+            << impl->size * face->bbox.xMax/face->units_per_EM << " " 
+            << impl->size * face->bbox.yMax/face->units_per_EM << " " 
+            << face->units_per_EM
+            << std::endl;
+
   // We limit ourself to 256 characters for the momemnt
   for(int glyph_index = 0; glyph_index < 256; glyph_index += 1)
     {
-      if (FT_Load_Char( face,  glyph_index, FT_LOAD_RENDER))
+      if (FT_Load_Char( face,  glyph_index, FT_LOAD_RENDER))//| FT_LOAD_FORCE_AUTOHINT))
         {
-          // FIXME: happens when character is not in font, should be handled more gentle
-          throw std::runtime_error("couldn't load char");
+          std::cerr << "couldn't load char: " << glyph_index << " '" << char(glyph_index) << "'" << std::endl;
+          impl->characters.push_back(0);
         }
-            
-      impl->characters.push_back(new TTFCharacter(face->glyph));
+      else
+        {
+          impl->characters.push_back(new TTFCharacter(face->glyph));
+        }
+      //std::cout << "Char: " << int(glyph_index) << " " << face->glyph->bitmap_top << std::endl;
     }
 
   FT_Done_Face(face);
@@ -128,7 +139,10 @@
 TTFFont::get_character(int c) const
 {
   assert(c >= 0 && c < 256);
-  return *impl->characters[c];
+  if (impl->characters[c] == 0)
+    return *impl->characters['?'];
+  else
+    return *impl->characters[c];
 }
 
 int
@@ -142,7 +156,7 @@
 {
   int width = 0;
   for(std::string::const_iterator i = text.begin(); i != text.end(); ++i)
-    width += impl->characters[*i]->advance;
+    width += get_character(*i).advance;
   return width;
 }
 

Modified: trunk/txt2png/txt2png.cpp
===================================================================
--- trunk/txt2png/txt2png.cpp	2006-12-19 04:28:06 UTC (rev 1287)
+++ trunk/txt2png/txt2png.cpp	2006-12-19 18:33:13 UTC (rev 1288)
@@ -3,33 +3,90 @@
 #include <iomanip>
 #include <sstream>
 #include <fstream>
+#include "command_line.hpp"
 #include "ttf_font.hpp"
 
-void render(Bitmap& canvas, TTFFont& font, const std::string& text)
+struct Options {
+  std::string font_file;
+  int font_size;
+  std::string output_file;
+  std::string text_file;
+  std::string type;
+  std::string title;
+  bool status;
+  int canvas_width;
+  int canvas_height;
+  int text_x;
+  int text_y;
+  int text_w;
+  int text_h;
+  bool area_set;
+  bool break_lines;
+  bool info_mode;
+
+  Options()
+  {
+    font_file = "VeraMono.ttf";
+    font_size = 10;
+    output_file = "out/page";
+    type = "jpg";
+      
+    status = false;
+      
+    canvas_width  = 480;
+    canvas_height = 272;
+      
+    text_x = -1;
+    text_y = -1;
+    text_w = -1;
+    text_h = -1;
+    area_set = false;
+    
+    break_lines = false;
+    info_mode   = false;
+  }
+};
+
+Options options;
+
+void render(Bitmap& canvas, TTFFont& font, const std::string& text, 
+            int start_x, int start_y,
+            int text_width, int text_height)
 {
-  int start_x = 4;
-  int start_y = 4+10;
-
   int page = 0;
-  int x = start_x;
-  int y = start_y; // <- refers to the baseline of the font!
+  int x = 0;
+  int y = 0; // <- refers to the baseline of the font!
 
   for(std::string::size_type i = 0; i < text.size(); ++i)
     {
       if (text[i] == '\n')
         {
-          x = start_x;
+          x = 0;
           y += font.get_height();
 
-          if (y >= canvas.get_height() - start_y + font.get_height())
+          if (y >= text_height)
             { // FIXME :Duplicate code
-              y = start_y;
-              x = start_x;
+              y = 0;
+              x = 0;
+              
+              std::ostringstream tstr;
+              if (!options.title.empty())
+                tstr << options.title << " ";
 
+              tstr << "Page "
+                   << std::setfill('0') << std::setw(2) << page << "/21 - " 
+                   << std::setw(3) << 100 * page / 21 << "%";
+              render(canvas, font, tstr.str(),
+                     canvas.get_width()/2 - font.get_width(tstr.str())/2, 
+                     canvas.get_height() - font.get_height() + font.get_character('M').bitmap->get_height()+2,
+                     canvas.get_width(), canvas.get_height());
+              canvas.invert(0, canvas.get_height() - font.get_height(),
+                            canvas.get_width(), canvas.get_height());
+
               std::ostringstream str;
-              str << "out/page" << std::setfill('0') << std::setw(3) << page << ".pgm";
+              str << "out/page" << std::setfill('0') << std::setw(3) << page << ".jpg";
               std::cout << "Writing: " << str.str() << std::endl;
-              canvas.write_pgm(str.str());
+              canvas.write_jpg(str.str());
               canvas.clear();
 
               page += 1;
@@ -37,35 +94,39 @@
         }
       else if (text[i] == '\r')
         {
-          // ignore
+          // ignore so both DOS and Unix files look fine
         }
       else if (text[i] == '\t')
         {
           int cw = font.get_character(' ').advance * 8;
-          x = start_x + ((((x-start_x)/cw) + 1) * cw);
+          x = (x/cw + 1) * cw;
         }
       else
         {
           const TTFCharacter& glyph = font.get_character(text[i]);
 
           canvas.blit(*glyph.bitmap, 
-                      x + glyph.x_offset,
-                      y + glyph.y_offset);
+                      x + glyph.x_offset + start_x,
+                      y + glyph.y_offset + start_y);
 
           x += glyph.advance;
 
-          if (x >= canvas.get_width())
+          if (x >= text_width)
             {
               std::cout << "Illegal line break on page " << page << std::endl;
-              x = start_x;
+              x = 0;
               y += font.get_height();              
             }
 
-          if (y >= canvas.get_height() - start_y + font.get_height())
+          if (y >= text_height)
             {
-              y = start_y;
-              x = start_x;
+              y = 0;
+              x = 0;
 
+              canvas.invert(0, canvas.get_height() - font.get_height(),
+                            canvas.get_width(), canvas.get_height());
+
+
               std::ostringstream str;
               str << "out/page" << std::setfill('0') << std::setw(3) << page << ".pgm";
               std::cout << "Writing: " << str.str() << std::endl;
@@ -78,35 +139,154 @@
     }
 }
 
+void parse_args(int argc, char** argv, Options& options)
+{
+  CommandLine argp;
+
+  argp.set_help_indent(24);
+  argp.add_usage ("[OPTION]... TEXTFILE");
+  argp.add_doc   ("text2image converts ascii text files to images");
+
+  argp.add_group("Options:");
+  argp.add_option('f', "font",      "FONT",    "Use FONT for rendering the text, must be a ttf font (default: VerdanaMono.ttf)");
+  argp.add_option('s',  "size",     "NUM",     "Set the font size to NUM (default: 12)");
+  argp.add_option('o', "output",    "FILE",    "Write the rendered image to file");
+  argp.add_option('t',  "type",     "TYPE",    "Use TYPE format when writing the file, can be 'jpg' or 'pgm'");
+  argp.add_option('l',  "status-line",   "",        "Add a statusbar to the rendering output");
+  argp.add_option('a',  "area", "WxH+X+Y","limit text rendering to the given area");
+  argp.add_option('n',  "title",    "NAME",    "Use NAME as title in the status line");
+  argp.add_option('c',  "canvas",   "WxH",      "Use a canvas for size WxH+X+Y");
+  argp.add_option('b',  "break",    "",        "Break long lines");
+  argp.add_option('i',  "info",     "",        "Print information about the text");
+  argp.add_option('h',  "help",     "",        "Display this help");
+  
+  argp.parse_args(argc, argv);
+
+  while (argp.next())
+    {
+      switch (argp.get_key())
+        {
+        case 'f': // font
+          options.font_file = argp.get_argument();
+          break;
+
+        case 'o': // output
+          options.output_file = argp.get_argument();
+          break;
+
+        case 't': // type
+          if (argp.get_argument() != "jpg" || argp.get_argument() != "pgm")
+            {
+              std::cerr << "Only 'pgm' or 'jpg' allowed as format type options" << std::endl;
+              exit(EXIT_FAILURE);              
+            }
+          options.type = argp.get_argument();
+          break;
+
+        case 'a': // area
+          if (sscanf(argp.get_argument().c_str(), "%dx%d+%d+%d",
+                     &options.text_w,
+                     &options.text_h,
+                     &options.text_x,
+                     &options.text_y) != 4)
+            {
+              std::cerr << "Expected WIDTHxHEIGHT+X+Y as argument" << std::endl;
+              exit(EXIT_FAILURE);
+            }
+
+          options.area_set = true;
+          break;
+
+        case 'c': // canvas
+          if (sscanf(argp.get_argument().c_str(), "%dx%d", &options.canvas_width, &options.canvas_height) != 2)
+            {
+              std::cerr << "Expected WIDTHxHEIGHT as argument" << std::endl;
+              exit(EXIT_FAILURE);
+            }
+          break;
+
+        case 'i': // info
+          options.info_mode = true;
+          break;
+
+        case 'n': // title
+          options.title = argp.get_argument();
+          break;
+
+        case 'b': // break
+          options.break_lines = true;
+          break;
+
+        case 'l': // status-line
+          options.status = true;
+          break;
+
+        case 's': // size
+          if (sscanf(argp.get_argument().c_str(), "%d", &options.font_size) != 1)
+            {
+              std::cerr << "Expected Integer as argument for --size" << std::endl;
+              exit(EXIT_FAILURE);
+            }
+
+          break;
+
+        case 'h':
+          argp.print_help();
+          exit(EXIT_SUCCESS);
+          break;
+
+        case CommandLine::REST_ARG:
+          if (options.text_file.empty())
+            {
+              options.text_file = argp.get_argument();
+            }
+          else
+            {
+              std::cerr << "Only one text file can be given" << std::endl;
+              exit(EXIT_FAILURE); 
+            }
+          break;
+
+        default: 
+          std::cerr << "Unknown argument: " << argp.get_key() << std::endl;
+          exit(EXIT_FAILURE);
+        }
+    }
+}
+
 int main(int argc, char** argv)
 {
-  if (argc != 4)
+  parse_args(argc, argv, options);
+
+  if (options.text_file.empty())
     {
-      std::cout << "Usage: " << argv[0] << " FONT SIZE TEXT" << std::endl;
+      std::cout << "Usage: " << argv[0] << " [OPTION]... TEXTFILE" << std::endl;
     }
   else
     {
-      std::string font_filename = argv[1];
-      int font_size = atoi(argv[2]);
-      std::string text_filename = argv[3];
-
       TTFFont::init();
 
       //std::cout << "Load font" << std::endl;
-      TTFFont font(font_filename, font_size);
+      TTFFont font(options.font_file, options.font_size);
 
       //  std::cout << "Create bitmap" << std::endl;
-      Bitmap  bitmap(480, 272);
+      Bitmap  bitmap(options.canvas_width, options.canvas_height);
 
-      std::ifstream fin(text_filename.c_str());
+      std::ifstream fin(options.text_file.c_str());
       std::istreambuf_iterator<char> first(fin), last;
       std::string text(first, last); 
 
       //std::cout << "Render..." << std::endl;
-      render(bitmap, font, text);
+
+      if (options.area_set)
+        render(bitmap, font, text, options.text_x, options.text_y, options.text_w, options.text_h);
+      else
+        render(bitmap, font, text,
+               4, font.get_height(), bitmap.get_width() - 4, bitmap.get_height() - font.get_height()*2);
   
       TTFFont::deinit();
     }
+
   return 0;
 }
 



From grumbel at mail.berlios.de  Tue Dec 19 19:33:45 2006
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 19 Dec 2006 19:33:45 +0100
Subject: [Windstille-commit] r1289 - trunk/txt2png
Message-ID: <200612191833.kBJIXjvV006793@sheep.berlios.de>

Author: grumbel
Date: 2006-12-19 19:33:43 +0100 (Tue, 19 Dec 2006)
New Revision: 1289

Added:
   trunk/txt2png/VeraMono.ttf
Log:
- added font

Added: trunk/txt2png/VeraMono.ttf
===================================================================
(Binary files differ)


Property changes on: trunk/txt2png/VeraMono.ttf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



