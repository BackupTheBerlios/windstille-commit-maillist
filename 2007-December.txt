From grumbel at mail.berlios.de  Sun Dec  2 14:48:43 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 2 Dec 2007 14:48:43 +0100
Subject: [Windstille-commit] r1569 - trunk/griv
Message-ID: <200712021348.lB2DmhIj029267@sheep.berlios.de>

Author: grumbel
Date: 2007-12-02 14:48:42 +0100 (Sun, 02 Dec 2007)
New Revision: 1569

Modified:
   trunk/griv/README
   trunk/griv/TODO
   trunk/griv/cache.cpp
   trunk/griv/cache.hpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
Log:
- moved resolution tracking back into Image

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/README	2007-12-02 13:48:42 UTC (rev 1569)
@@ -2,19 +2,31 @@
 =====
 
 griv is a image viewer that allows you to directly zoom into
-thumbnails. Its goal is to allow its viewer to view 100'000 images
-fluently.
+thumbnails. Its goal is to allow its viewer to view 100'000 images at
+once fluently without any noticable load times.
 
 Usage:
 ======
 
 You can view any collectino of files in a directory by:
 
- ./griv [PATHNAME]...
+ $ ./griv [PATHNAME]...
 
 Optionally you can pre-generate the thumbnails, which results in
 a smoother experience by calling:
 
- ./thumbgen -s 16,32,64,128,256,512,1024 [PATHNAME]...
+ $ ./thumbgen -s 16,32,64,128,256,512,1024 [PATHNAME]...
 
+For very large image collections it is recomment that you pregenerate
+the URL list to avoid slow startup due to file-io:
+
+ $ find  PATH -type f -name "*.jpg" | sed "s/^/file:\/\//" > /tmp/url.lst
+ $ ./griv -f /tmp/url.lst
+
+Things you shouldn't do:
+========================
+
+Avoid running two instances at once, griv doesn't do any filelocking,
+so you my end up trashing your cache.
+
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/TODO	2007-12-02 13:48:42 UTC (rev 1569)
@@ -1,9 +1,7 @@
 ToDo:
 =====
 
-- store 16x16 thumbnails in a container format, simple uncompressed
-  RGB, store filenames in a simple linear list, stuff them into a
-  map/hash on load
+- store all thumbnails in a container format
 
 - implement Surface class that handles images larger then the maximum
   texture size
@@ -11,22 +9,23 @@
 - remove round_res(), replace it with something else to allow images
   in original size
 
-- added support for ~/.thumbnails/ to get the smaller mipmaps faster
-
 - create two OpenGL context to allow better multithreading use (any
-  way to do it portable?)
+  way to do it portable?) or move loading out of draw() and into
+  load(), only call load() till a time slice has run out, so that
+  drawing can take place again without interruption
 
 - move over input code from Pingus to support Spacenavigator and such
 
-- implement faster realpath(), i.e. no link resolution
+- Way to speed thumbnail directory creation up? -> use Thumbcache
+  for all files
 
-- cache file sets
+Less Important:
+===============
 
-- write fast file system routines, use readdir(), d_type instead of
-  stat to check for a directory
+- added support for ~/.thumbnails/ to get the smaller mipmaps faster
 
-- add support for filesets, i.e. files that contain a list of urls
-
+- write fast file system routines, use readdir(), d_type instead of
+  stat to check for a directory -> only works on EXT3
 
 Cache Files:
 ============

Modified: trunk/griv/cache.cpp
===================================================================
--- trunk/griv/cache.cpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/cache.cpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -44,7 +44,6 @@
           FileEntry entry;
       
           in.read(entry.url_md5,  sizeof(char) * 33);
-          in.read(entry.md5,           sizeof(char) * 33);
           in.read((char*)(&entry.mtime),        sizeof(unsigned int));
           in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
           in.read((char*)(&entry.width),        sizeof(unsigned int));
@@ -72,7 +71,6 @@
         {
           const FileEntry& entry = i->second;
           out.write(entry.url_md5,  sizeof(char) * 33);
-          out.write(entry.md5,      sizeof(char) * 33);
           out.write((char*)(&entry.mtime),        sizeof(unsigned int));
           out.write((char*)(&entry.thumbnail_id), sizeof(unsigned int));
           out.write((char*)(&entry.width),        sizeof(unsigned int));
@@ -92,7 +90,6 @@
       FileEntry entry;
       try { 
         strcpy(entry.url_md5, url_md5.c_str());
-        strcpy(entry.md5, "<empty>");
         entry.mtime = Filesystem::get_mtime(url.substr(7));
         entry.thumbnail_id = 0;
         JPEG::get_size(url.substr(7), entry.width, entry.height);

Modified: trunk/griv/cache.hpp
===================================================================
--- trunk/griv/cache.hpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/cache.hpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -31,7 +31,6 @@
 
 struct FileEntry {
   char url_md5[33];
-  char md5[33];
   int  mtime;  // mtime at which the thumbnail was done
   int  thumbnail_id; // offset into the thumbnail database
   int  width;  // image width

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/griv.cpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -127,7 +127,12 @@
                 for(int i = 0; i < int(workspace->images.size()); ++i)
                   {
                     if (workspace->images[i]->is_visible())
-                      std::cout << workspace->images[i]->url << std::endl;
+                      {
+                        std::cout << workspace->images[i]->url << "\t"
+                                  << workspace->images[i]->original_width << "x"
+                                  << workspace->images[i]->original_height
+                                  << std::endl;
+                      }
                   }
                 std::cout << "---------------------------------------------------------" << std::endl;
               }

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/image.cpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -42,6 +42,7 @@
     received_surface(0),
     received_surface_res(0),
 
+    surface_resolution(0),
     surface(0),
     surface_16x16(0),
 
@@ -76,7 +77,7 @@
 
 void
 Image::receive(SDL_Surface* new_surface, int r)
-{ 
+{
   SDL_LockMutex(mutex);
   
   if (new_surface)
@@ -106,7 +107,7 @@
       y < -res)
     { // Image out of screen
       visible = false;
-      if (surface && surface->get_resolution() >= 512) // keep small images around a while longer
+      if (surface && surface_resolution >= 512) // keep small images around a while longer
         {
           delete surface;
           surface = 0;
@@ -117,7 +118,7 @@
       visible = true;
       // Handle loading when resolution changed
       if (surface == 0 || 
-          round_res(int(res)) != surface->get_resolution())
+          round_res(int(res)) != surface_resolution)
         {
           if (round_res(int(res)) != requested_res)
             {    
@@ -132,12 +133,13 @@
           if (!surface_16x16)
             { // Use surface as the smallest possible surface
               // FIXME: When somebody is fast this could mean a non 16x16 surface
-              surface_16x16 = new Surface(received_surface, received_surface_res);
+              surface_16x16 = new Surface(received_surface);
             }
           else
             { // Replace the current surface
               delete surface;
-              surface = new Surface(received_surface, received_surface_res);
+              surface = new Surface(received_surface);
+              surface_resolution = received_surface_res;
             }
 
           received_surface     = 0;

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/image.hpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -47,6 +47,7 @@
   SDL_Surface* received_surface;
   int          received_surface_res;
   
+  int          surface_resolution;
   Surface*     surface;
   Surface*     surface_16x16;
 

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/loader.cpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -106,7 +106,7 @@
       jobs.pop_back();
 
       if (!job.image->surface ||
-          job.image->surface->get_resolution() != job.image->requested_res)
+          job.image->surface_resolution != job.image->requested_res)
         {
           SDL_Surface* img = store->get_by_url(job.image->url, job.image->requested_res);
           if (img)

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/surface.cpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -29,9 +29,8 @@
 #include "math.hpp"
 #include "surface.hpp"
 
-Surface::Surface(SDL_Surface* surface, int res)
+Surface::Surface(SDL_Surface* surface)
   : surface(surface),
-    res(res),
     texture(0)
 {
   assert(surface);

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-11-23 15:07:08 UTC (rev 1568)
+++ trunk/griv/surface.hpp	2007-12-02 13:48:42 UTC (rev 1569)
@@ -35,7 +35,6 @@
 private:
   /** Software backstore for the image */
   SDL_Surface* surface;
-  int res;
   
   Texture* texture;
   int tex_w;
@@ -47,12 +46,11 @@
   float aspect;
 
 public:
-  Surface(SDL_Surface* surface, int res);
+  Surface(SDL_Surface* surface);
   ~Surface();
 
   void draw(float x, float y, float w, float h);
-
-  int get_resolution() const { return res; }
+  
 private:
   Surface (const Surface&);
   Surface& operator= (const Surface&);



From grumbel at mail.berlios.de  Sun Dec  2 15:56:06 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 2 Dec 2007 15:56:06 +0100
Subject: [Windstille-commit] r1570 - trunk/griv
Message-ID: <200712021456.lB2Eu6Ac000146@sheep.berlios.de>

Author: grumbel
Date: 2007-12-02 15:56:06 +0100 (Sun, 02 Dec 2007)
New Revision: 1570

Added:
   trunk/griv/grid.hpp
   trunk/griv/large_surface.cpp
   trunk/griv/large_surface.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/texture.cpp
Log:
- added large surface class

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/SConstruct	2007-12-02 14:56:06 UTC (rev 1570)
@@ -17,6 +17,7 @@
                           'loader.cpp',
                           'image.cpp',
                           'surface.cpp',
+                          'large_surface.cpp',
                           'thumbnail_store.cpp',
                           'display.cpp', 
                           'texture.cpp', 

Added: trunk/griv/grid.hpp
===================================================================
--- trunk/griv/grid.hpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/grid.hpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -0,0 +1,74 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_GRID_HPP
+#define HEADER_GRID_HPP
+
+#include <vector>
+
+/** */
+template<typename T>
+class Grid
+{
+private:
+  typedef std::vector<T> Columns;
+  typedef std::vector<Columns> Rows;
+
+  int width;
+  int height;
+  Rows rows;
+
+public:
+  Grid(int w, int h) 
+    : width(w),
+      height(h)
+  {
+    for(int y = 0; y < height; ++y)
+      rows.push_back(Columns(width));
+  }
+  
+  int get_width()  const { return width; }
+  int get_height() const { return height; }
+
+  const T& operator()(int x, int y) const {
+    return rows[y][x];
+  }
+
+  T& operator()(int x, int y) {
+    return rows[y][x];
+  }
+
+  void resize(int w, int h)
+  {
+    rows.resize(h);
+
+    width  = w;
+    height = h;
+  }
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/grid.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/image.cpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -32,6 +32,7 @@
 #include "jpeg.hpp"
 #include "cache.hpp"
 #include "surface.hpp"
+#include "large_surface.hpp"
 
 Image::Image(const std::string& url)
   : url(url), 
@@ -138,7 +139,7 @@
           else
             { // Replace the current surface
               delete surface;
-              surface = new Surface(received_surface);
+              surface = new LargeSurface(received_surface);
               surface_resolution = received_surface_res;
             }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/image.hpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -32,6 +32,7 @@
 #include "griv.hpp"
 
 class Surface;
+class LargeSurface;
 
 class Image
 {
@@ -48,8 +49,8 @@
   int          received_surface_res;
   
   int          surface_resolution;
-  Surface*     surface;
-  Surface*     surface_16x16;
+  LargeSurface*     surface;
+  Surface*    surface_16x16;
 
   SDL_mutex* mutex;
 

Added: trunk/griv/large_surface.cpp
===================================================================
--- trunk/griv/large_surface.cpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/large_surface.cpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -0,0 +1,48 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "surface.hpp"
+#include "large_surface.hpp"
+
+LargeSurface::LargeSurface(SDL_Surface* surface)
+  : grid(1,1)
+{
+  grid(0,0) = new Surface(surface);
+}
+
+LargeSurface::~LargeSurface()
+{
+  for(int y = 0; y < grid.get_height(); ++y)
+    for(int x = 0; x < grid.get_width(); ++x)
+      delete grid(x,y);
+}
+
+void
+LargeSurface::draw(float x, float y, float w, float h)
+{
+  grid(0,0)->draw(x, y, w, h);
+}
+
+/* EOF */


Property changes on: trunk/griv/large_surface.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/large_surface.hpp
===================================================================
--- trunk/griv/large_surface.hpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/large_surface.hpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -0,0 +1,52 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_LARGE_SURFACE_HPP
+#define HEADER_LARGE_SURFACE_HPP
+
+#include "grid.hpp"
+
+class Surface;
+
+/** A LargeSurface is build out of multiple smaller ones */
+class LargeSurface
+{
+private:
+  Grid<Surface*> grid;
+
+public:
+  LargeSurface(SDL_Surface* surface);
+  ~LargeSurface();
+
+  void draw(float x, float y, float w, float h);  
+
+private:
+  LargeSurface (const LargeSurface&);
+  LargeSurface& operator= (const LargeSurface&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/large_surface.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-12-02 13:48:42 UTC (rev 1569)
+++ trunk/griv/texture.cpp	2007-12-02 14:56:06 UTC (rev 1570)
@@ -21,7 +21,7 @@
 **  along with this program; if not, write to the Free Software
 **  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
 **  02111-1307, USA.
-*/
+7*/
 
 #include <assert.h>
 #include <iostream>



From grumbel at mail.berlios.de  Sun Dec  2 17:05:54 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 2 Dec 2007 17:05:54 +0100
Subject: [Windstille-commit] r1571 - trunk/griv
Message-ID: <200712021605.lB2G5s5i003398@sheep.berlios.de>

Author: grumbel
Date: 2007-12-02 17:05:52 +0100 (Sun, 02 Dec 2007)
New Revision: 1571

Added:
   trunk/griv/software_surface.cpp
   trunk/griv/software_surface.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/image.cpp
   trunk/griv/large_surface.cpp
   trunk/griv/large_surface.hpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
Log:
- wrapped SDL_Surface and added some ref counting

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/SConstruct	2007-12-02 16:05:52 UTC (rev 1571)
@@ -18,6 +18,7 @@
                           'image.cpp',
                           'surface.cpp',
                           'large_surface.cpp',
+                          'software_surface.cpp',
                           'thumbnail_store.cpp',
                           'display.cpp', 
                           'texture.cpp', 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/image.cpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -28,6 +28,7 @@
 #include "filesystem.hpp"
 #include "SDL_image.h"
 #include "texture.hpp"
+#include "software_surface.hpp"
 #include "image.hpp"
 #include "jpeg.hpp"
 #include "cache.hpp"
@@ -134,12 +135,12 @@
           if (!surface_16x16)
             { // Use surface as the smallest possible surface
               // FIXME: When somebody is fast this could mean a non 16x16 surface
-              surface_16x16 = new Surface(received_surface);
+              surface_16x16 = new Surface(boost::shared_ptr<SoftwareSurface>(new SoftwareSurface(received_surface)));
             }
           else
             { // Replace the current surface
               delete surface;
-              surface = new LargeSurface(received_surface);
+              surface = new LargeSurface(boost::shared_ptr<SoftwareSurface>(new SoftwareSurface(received_surface)));
               surface_resolution = received_surface_res;
             }
 

Modified: trunk/griv/large_surface.cpp
===================================================================
--- trunk/griv/large_surface.cpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/large_surface.cpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -26,7 +26,7 @@
 #include "surface.hpp"
 #include "large_surface.hpp"
 
-LargeSurface::LargeSurface(SDL_Surface* surface)
+LargeSurface::LargeSurface(boost::shared_ptr<SoftwareSurface> surface)
   : grid(1,1)
 {
   grid(0,0) = new Surface(surface);

Modified: trunk/griv/large_surface.hpp
===================================================================
--- trunk/griv/large_surface.hpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/large_surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -37,7 +37,7 @@
   Grid<Surface*> grid;
 
 public:
-  LargeSurface(SDL_Surface* surface);
+  LargeSurface(boost::shared_ptr<SoftwareSurface> surface);
   ~LargeSurface();
 
   void draw(float x, float y, float w, float h);  

Added: trunk/griv/software_surface.cpp
===================================================================
--- trunk/griv/software_surface.cpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/software_surface.cpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -0,0 +1,49 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <stdexcept>
+#include "SDL_image.h"
+#include "software_surface.hpp"
+
+SoftwareSurface::SoftwareSurface(const std::string& name)
+{
+  surface = IMG_Load(name.c_str());
+  if (!surface)
+    throw std::runtime_error("SoftwareSurface: Couldn't load " + name);
+}
+
+SoftwareSurface::SoftwareSurface(SDL_Surface* swsurface)
+{
+  surface = swsurface;
+  if (!surface)
+    throw std::runtime_error("SoftwareSurface: SoftwareSurface() called with a NULL pointer");
+}
+
+SoftwareSurface::~SoftwareSurface()
+{
+  SDL_FreeSurface(surface);
+}
+
+/* EOF */


Property changes on: trunk/griv/software_surface.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/software_surface.hpp
===================================================================
--- trunk/griv/software_surface.hpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/software_surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -0,0 +1,54 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SOFTWARE_SURFACE_HPP
+#define HEADER_SOFTWARE_SURFACE_HPP
+
+#include "SDL.h"
+#include <string>
+
+/** */
+class SoftwareSurface
+{
+private:
+  SDL_Surface* surface;
+  
+public:
+  SoftwareSurface(const std::string& name);
+  SoftwareSurface(SDL_Surface* swsurface);
+  ~SoftwareSurface();
+
+  int get_width() const { return surface->w; }
+  int get_height() const { return surface->h; }
+ 
+  SDL_Surface* get_surface() const { return surface; }
+private:
+  SoftwareSurface(const SoftwareSurface&);
+  SoftwareSurface& operator= (const SoftwareSurface&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/software_surface.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/surface.cpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -27,38 +27,39 @@
 #include <assert.h>
 #include "display.hpp"
 #include "math.hpp"
+#include "software_surface.hpp"
 #include "surface.hpp"
 
-Surface::Surface(SDL_Surface* surface)
+Surface::Surface(boost::shared_ptr<SoftwareSurface> surface)
   : surface(surface),
     texture(0)
 {
   assert(surface);
 
-  tex_w = Math::round_to_power_of_two(surface->w);
-  tex_h = Math::round_to_power_of_two(surface->h);
+  tex_w = Math::round_to_power_of_two(surface->get_width());
+  tex_h = Math::round_to_power_of_two(surface->get_height());
 
   if (tex_w <= 1024 && tex_h <= 1024)
     {
       texture = new Texture(tex_w, tex_h, 
-                            surface, 
-                            0, 0, surface->w, surface->h);
+                            surface->get_surface(), 
+                            0, 0, surface->get_width(), surface->get_height());
     
-      u = float(surface->w) / tex_w;
-      v = float(surface->h) / tex_h;
+      u = float(surface->get_width()) / tex_w;
+      v = float(surface->get_height()) / tex_h;
 
-      aspect = float(surface->w) / surface->h;
+      aspect = float(surface->get_width()) / surface->get_height();
     }
   else
     {
-      std::cout << "Image violates maximum texture size: " << surface->w << "x" << surface->h << std::endl;
+      std::cout << "Image violates maximum texture size: "
+                << surface->get_width() << "x" << surface->get_height() << std::endl;
     }
 }
 
 Surface::~Surface()
 {
   delete texture;
-  SDL_FreeSurface(surface);
 }
 
 void

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-12-02 14:56:06 UTC (rev 1570)
+++ trunk/griv/surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
@@ -27,14 +27,17 @@
 #define HEADER_SURFACE_HPP
 
 #include "SDL.h"
+#include <boost/smart_ptr.hpp>
 #include "texture.hpp"
 
+class SoftwareSurface;
+
 /** */
 class Surface
 {
 private:
   /** Software backstore for the image */
-  SDL_Surface* surface;
+  boost::shared_ptr<SoftwareSurface> surface;
   
   Texture* texture;
   int tex_w;
@@ -46,7 +49,7 @@
   float aspect;
 
 public:
-  Surface(SDL_Surface* surface);
+  Surface(boost::shared_ptr<SoftwareSurface>);
   ~Surface();
 
   void draw(float x, float y, float w, float h);



From grumbel at mail.berlios.de  Sun Dec  2 21:32:00 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 2 Dec 2007 21:32:00 +0100
Subject: [Windstille-commit] r1572 - trunk/griv
Message-ID: <200712022032.lB2KW0pm008826@sheep.berlios.de>

Author: grumbel
Date: 2007-12-02 21:32:00 +0100 (Sun, 02 Dec 2007)
New Revision: 1572

Modified:
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/large_surface.hpp
   trunk/griv/loader.cpp
   trunk/griv/software_surface.hpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Log:
- replaced SDL_Surface with SoftwareSurface

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/image.cpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -78,14 +78,17 @@
 }
 
 void
-Image::receive(SDL_Surface* new_surface, int r)
+Image::receive(SoftwareSurface* new_surface, int r)
 {
   SDL_LockMutex(mutex);
   
   if (new_surface)
     {
       if (received_surface)
-        SDL_FreeSurface(received_surface);
+        {
+          delete received_surface;
+          received_surface = 0;
+        }
 
       received_surface     = new_surface;
       received_surface_res = r;
@@ -135,12 +138,12 @@
           if (!surface_16x16)
             { // Use surface as the smallest possible surface
               // FIXME: When somebody is fast this could mean a non 16x16 surface
-              surface_16x16 = new Surface(boost::shared_ptr<SoftwareSurface>(new SoftwareSurface(received_surface)));
+              surface_16x16 = new Surface(SWSurfaceHandle(received_surface));
             }
           else
             { // Replace the current surface
               delete surface;
-              surface = new LargeSurface(boost::shared_ptr<SoftwareSurface>(new SoftwareSurface(received_surface)));
+              surface = new LargeSurface(SWSurfaceHandle(received_surface));
               surface_resolution = received_surface_res;
             }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/image.hpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -32,6 +32,7 @@
 #include "griv.hpp"
 
 class Surface;
+class SoftwareSurface;
 class LargeSurface;
 
 class Image
@@ -45,8 +46,8 @@
   int  requested_res;
 
   /** Newly received surface */
-  SDL_Surface* received_surface;
-  int          received_surface_res;
+  SoftwareSurface* received_surface;
+  int              received_surface_res;
   
   int          surface_resolution;
   LargeSurface*     surface;
@@ -70,7 +71,7 @@
   Image(const std::string& url);
   ~Image();
 
-  void receive(SDL_Surface* new_surface, int r);
+  void receive(SoftwareSurface* new_surface, int r);
   void draw(float x_offset, float y_offset, float res);
   void update(float delta);
 

Modified: trunk/griv/large_surface.hpp
===================================================================
--- trunk/griv/large_surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/large_surface.hpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -37,7 +37,7 @@
   Grid<Surface*> grid;
 
 public:
-  LargeSurface(boost::shared_ptr<SoftwareSurface> surface);
+  LargeSurface(SWSurfaceHandle surface);
   ~LargeSurface();
 
   void draw(float x, float y, float w, float h);  

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/loader.cpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -108,7 +108,7 @@
       if (!job.image->surface ||
           job.image->surface_resolution != job.image->requested_res)
         {
-          SDL_Surface* img = store->get_by_url(job.image->url, job.image->requested_res);
+          SoftwareSurface* img = store->get_by_url(job.image->url, job.image->requested_res);
           if (img)
             {
               job.image->receive(img, job.image->requested_res);
@@ -117,13 +117,16 @@
             {
               // No thumbnail, assuming we need the original
               std::cout << "Loading original: " << job.image->url << std::endl;
-                { 
-                  img = IMG_Load(job.image->url.substr(7).c_str()); // cut file:// part
-                  std::cout << "Loading: " << job.image->requested_res << " " << img << " " 
-                            << img->w << "x" << img->h << " "
-                            << job.image->url.substr(7) << std::endl;
-                  job.image->receive(img, job.image->requested_res);
-                }
+              try { 
+                img = new SoftwareSurface(job.image->url.substr(7)); // cut file:// part
+                std::cout << "Loading: " << job.image->requested_res << " " << img << " " 
+                          << img->get_width() << "x" << img->get_height() << " "
+                          << job.image->url.substr(7) << std::endl;
+              } catch(std::exception& err) {
+                std::cout << "Loader: " << err.what() << std::endl;
+                img = 0;
+              }
+              job.image->receive(img, job.image->requested_res);
             }
         }
     }

Modified: trunk/griv/software_surface.hpp
===================================================================
--- trunk/griv/software_surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/software_surface.hpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -28,6 +28,7 @@
 
 #include "SDL.h"
 #include <string>
+#include <boost/shared_ptr.hpp>
 
 /** */
 class SoftwareSurface
@@ -49,6 +50,8 @@
   SoftwareSurface& operator= (const SoftwareSurface&);
 };
 
+typedef boost::shared_ptr<SoftwareSurface> SWSurfaceHandle;
+
 #endif
 
 /* EOF */

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/surface.cpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -30,7 +30,7 @@
 #include "software_surface.hpp"
 #include "surface.hpp"
 
-Surface::Surface(boost::shared_ptr<SoftwareSurface> surface)
+Surface::Surface(SWSurfaceHandle surface)
   : surface(surface),
     texture(0)
 {

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/surface.hpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -29,15 +29,14 @@
 #include "SDL.h"
 #include <boost/smart_ptr.hpp>
 #include "texture.hpp"
+#include "software_surface.hpp"
 
-class SoftwareSurface;
-
 /** */
 class Surface
 {
 private:
   /** Software backstore for the image */
-  boost::shared_ptr<SoftwareSurface> surface;
+  SWSurfaceHandle surface;
   
   Texture* texture;
   int tex_w;
@@ -49,7 +48,7 @@
   float aspect;
 
 public:
-  Surface(boost::shared_ptr<SoftwareSurface>);
+  Surface(SWSurfaceHandle surface);
   ~Surface();
 
   void draw(float x, float y, float w, float h);

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/thumbnail_store.cpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -30,6 +30,7 @@
 #include "SDL_image.h"
 #include "filesystem.hpp"
 #include "md5.hpp"
+#include "software_surface.hpp"
 #include "thumbnail_store.hpp"
 
 ThumbnailStore::ThumbnailStore()
@@ -41,7 +42,7 @@
 {
 }
 
-SDL_Surface* 
+SoftwareSurface* 
 ThumbnailStore::get_by_url(const std::string& url, int thumb_size) // URL is file://... *not* just a pathname
 {
   std::string md5 = MD5::md5_string(url);
@@ -51,10 +52,13 @@
       << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
   
   std::string thumb_filename = out.str();
-  SDL_Surface* img = IMG_Load(thumb_filename.c_str());
-
-  if (!img)
+  
+  try 
     {
+      return new SoftwareSurface(thumb_filename);
+    }
+  catch(std::exception& err) 
+    {
       // Try to generate the thumbnail
       try {
         generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
@@ -63,10 +67,8 @@
         return 0;
       }
 
-      img = IMG_Load(thumb_filename.c_str());
+      return new SoftwareSurface(thumb_filename.c_str());
     }
-
-  return img;
 }
 
 void

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-12-02 16:05:52 UTC (rev 1571)
+++ trunk/griv/thumbnail_store.hpp	2007-12-02 20:32:00 UTC (rev 1572)
@@ -29,6 +29,8 @@
 #include "SDL.h"
 #include <string>
 
+class SoftwareSurface;
+
 /** */
 class ThumbnailStore
 {
@@ -38,7 +40,7 @@
   ThumbnailStore();
   ~ThumbnailStore();
 
-  SDL_Surface* get_by_url(const std::string& url, int thumb_size);
+  SoftwareSurface* get_by_url(const std::string& url, int thumb_size);
   
   void generate(const std::string& filename, const std::string& thumb_location, int thumb_size);
 



From grumbel at mail.berlios.de  Sun Dec  2 22:32:36 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 2 Dec 2007 22:32:36 +0100
Subject: [Windstille-commit] r1573 - trunk/griv
Message-ID: <200712022132.lB2LWaBC014087@sheep.berlios.de>

Author: grumbel
Date: 2007-12-02 22:32:36 +0100 (Sun, 02 Dec 2007)
New Revision: 1573

Modified:
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/large_surface.cpp
   trunk/griv/loader.cpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/thumbnail_store.cpp
Log:
- implemented original loading again, LargeSurface not yet fully implemented

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/image.cpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -100,16 +100,16 @@
 }
 
 void
-Image::draw(float x_offset, float y_offset, float res)
+Image::draw(float x_offset, float y_offset, float zoom)
 {
-  float x = x_pos * res + x_offset;
-  float y = y_pos * res + y_offset;
+  float x = x_pos * zoom + x_offset;
+  float y = y_pos * zoom + y_offset;
 
   SDL_LockMutex(mutex);
   if (x > Framebuffer::get_width() ||
       y > Framebuffer::get_height() ||
-      x < -res || 
-      y < -res)
+      x < -zoom || 
+      y < -zoom)
     { // Image out of screen
       visible = false;
       if (surface && surface_resolution >= 512) // keep small images around a while longer
@@ -122,13 +122,12 @@
     { // image on screen
       visible = true;
       // Handle loading when resolution changed
-      if (surface == 0 || 
-          round_res(int(res)) != surface_resolution)
+      if (surface == 0 || zoom2res(zoom) != surface_resolution)
         {
-          if (round_res(int(res)) != requested_res)
+          if (zoom2res(zoom) != requested_res)
             {    
               loader.request(this);
-              requested_res = round_res(int(res));
+              requested_res = zoom2res(zoom);
             }
         }
       
@@ -138,7 +137,7 @@
           if (!surface_16x16)
             { // Use surface as the smallest possible surface
               // FIXME: When somebody is fast this could mean a non 16x16 surface
-              surface_16x16 = new Surface(SWSurfaceHandle(received_surface));
+              surface_16x16 = new LargeSurface(SWSurfaceHandle(received_surface)); // FIXME: could use Surface instead
             }
           else
             { // Replace the current surface
@@ -153,49 +152,53 @@
 
       // Handle drawing
       if (surface)
-        surface->draw(x, y, res, res);
+        surface->draw(x, y, zoom, zoom);
       else if (surface_16x16)
-        surface_16x16->draw(x, y, res, res);
+        surface_16x16->draw(x, y, zoom, zoom);
     }
   SDL_UnlockMutex(mutex);
 }
 
 int
-Image::round_res(int r)
+Image::zoom2res(float z)
 {
   if (!highquality)
     { // low quality
-      if (r < 32)
+      if (z < 32)
         return 16;
-      else if (r < 64)
+      else if (z < 64)
         return 32;
-      else if (r < 128)
+      else if (z < 128)
         return 64;
-      else if (r < 256)
+      else if (z < 256)
         return 128;
-      else if (r < 512)
+      else if (z < 512)
         return 256;
-      else if (r < 1024)
+      else if (z < 1024)
         return 512;
-      else // if (r < 1024) // zoom limit, 2048 textures make the thing crash
+      else if (z < 1024)
         return 1024;
+      else
+        return -1;
     }
   else
     { // high quality
-      if (r <= 16)
+      if (z <= 16)
         return 16;
-      else if (r <= 32)
+      else if (z <= 32)
         return 32;
-      else if (r <= 64)
+      else if (z <= 64)
         return 64;
-      else if (r <= 128)
+      else if (z <= 128)
         return 128;
-      else if (r <= 256)
+      else if (z <= 256)
         return 256;
-      else if (r < 512)
+      else if (z < 512)
         return 512;
-      else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
+      else if (z <= 1024)
         return 1024;      
+      else
+        return -1;
     }
 }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/image.hpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -50,8 +50,8 @@
   int              received_surface_res;
   
   int          surface_resolution;
-  LargeSurface*     surface;
-  Surface*    surface_16x16;
+  LargeSurface* surface;
+  LargeSurface* surface_16x16;
 
   SDL_mutex* mutex;
 
@@ -75,7 +75,7 @@
   void draw(float x_offset, float y_offset, float res);
   void update(float delta);
 
-  int round_res(int res);
+  int  zoom2res(float res);
   void set_pos(float x, float y);
 
   bool is_visible() const { return visible; }

Modified: trunk/griv/large_surface.cpp
===================================================================
--- trunk/griv/large_surface.cpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/large_surface.cpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -26,10 +26,12 @@
 #include "surface.hpp"
 #include "large_surface.hpp"
 
-LargeSurface::LargeSurface(boost::shared_ptr<SoftwareSurface> surface)
+LargeSurface::LargeSurface(SWSurfaceHandle surface)
   : grid(1,1)
 {
-  grid(0,0) = new Surface(surface);
+  grid(0,0) = new Surface(surface, 0, 0, 
+                          std::min(1024, surface->get_width()), 
+                          std::min(1024, surface->get_height()));
 }
 
 LargeSurface::~LargeSurface()

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/loader.cpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -108,25 +108,16 @@
       if (!job.image->surface ||
           job.image->surface_resolution != job.image->requested_res)
         {
-          SoftwareSurface* img = store->get_by_url(job.image->url, job.image->requested_res);
-          if (img)
+          if (job.image->original_width  <= job.image->requested_res ||
+              job.image->original_height <= job.image->requested_res)
             {
-              job.image->receive(img, job.image->requested_res);
+              job.image->receive(store->get_by_url(job.image->url, -1),
+                                 -1);
             }
           else
             {
-              // No thumbnail, assuming we need the original
-              std::cout << "Loading original: " << job.image->url << std::endl;
-              try { 
-                img = new SoftwareSurface(job.image->url.substr(7)); // cut file:// part
-                std::cout << "Loading: " << job.image->requested_res << " " << img << " " 
-                          << img->get_width() << "x" << img->get_height() << " "
-                          << job.image->url.substr(7) << std::endl;
-              } catch(std::exception& err) {
-                std::cout << "Loader: " << err.what() << std::endl;
-                img = 0;
-              }
-              job.image->receive(img, job.image->requested_res);
+              job.image->receive(store->get_by_url(job.image->url, job.image->requested_res),
+                                 job.image->requested_res);
             }
         }
     }

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/surface.cpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -30,20 +30,20 @@
 #include "software_surface.hpp"
 #include "surface.hpp"
 
-Surface::Surface(SWSurfaceHandle surface)
+Surface::Surface(SWSurfaceHandle surface, int x, int y, int w, int h)
   : surface(surface),
     texture(0)
 {
   assert(surface);
 
-  tex_w = Math::round_to_power_of_two(surface->get_width());
-  tex_h = Math::round_to_power_of_two(surface->get_height());
+  tex_w = Math::round_to_power_of_two(w);
+  tex_h = Math::round_to_power_of_two(h);
 
   if (tex_w <= 1024 && tex_h <= 1024)
     {
       texture = new Texture(tex_w, tex_h, 
                             surface->get_surface(), 
-                            0, 0, surface->get_width(), surface->get_height());
+                            x, y, w, h);
     
       u = float(surface->get_width()) / tex_w;
       v = float(surface->get_height()) / tex_h;

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/surface.hpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -48,7 +48,7 @@
   float aspect;
 
 public:
-  Surface(SWSurfaceHandle surface);
+  Surface(SWSurfaceHandle surface, int x, int y, int w, int h);
   ~Surface();
 
   void draw(float x, float y, float w, float h);

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/thumbnail_store.cpp	2007-12-02 21:32:36 UTC (rev 1573)
@@ -45,29 +45,45 @@
 SoftwareSurface* 
 ThumbnailStore::get_by_url(const std::string& url, int thumb_size) // URL is file://... *not* just a pathname
 {
-  std::string md5 = MD5::md5_string(url);
-
-  std::ostringstream out;
-  out << Filesystem::get_home() << "/.griv/cache/by_url/"
-      << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
-  
-  std::string thumb_filename = out.str();
-  
-  try 
+  if (thumb_size == -1) // load original
     {
-      return new SoftwareSurface(thumb_filename);
+      std::cout << "Loading original: " << url << std::endl;
+      try 
+        { 
+          return  new SoftwareSurface(url.substr(7)); // cut file:// part
+        }
+      catch(std::exception& err) 
+        {
+          std::cout << "Loader: " << err.what() << std::endl;
+          return 0;
+        }
     }
-  catch(std::exception& err) 
+  else
     {
-      // Try to generate the thumbnail
-      try {
-        generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
-      } catch (std::exception& err) {
-        std::cout << err.what() << std::endl;
-        return 0;
-      }
+      std::string md5 = MD5::md5_string(url);
 
-      return new SoftwareSurface(thumb_filename.c_str());
+      std::ostringstream out;
+      out << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
+  
+      std::string thumb_filename = out.str();
+  
+      try 
+        {
+          return new SoftwareSurface(thumb_filename);
+        }
+      catch(std::exception& err) 
+        {
+          // Try to generate the thumbnail
+          try {
+            generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
+          } catch (std::exception& err) {
+            std::cout << err.what() << std::endl;
+            return 0;
+          }
+
+          return new SoftwareSurface(thumb_filename.c_str());
+        }
     }
 }
 



From grumbel at mail.berlios.de  Mon Dec  3 02:26:17 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 3 Dec 2007 02:26:17 +0100
Subject: [Windstille-commit] r1574 - trunk/griv
Message-ID: <200712030126.lB31QH2S016837@sheep.berlios.de>

Author: grumbel
Date: 2007-12-03 02:26:15 +0100 (Mon, 03 Dec 2007)
New Revision: 1574

Modified:
   trunk/griv/grid.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/large_surface.cpp
   trunk/griv/large_surface.hpp
   trunk/griv/loader.cpp
   trunk/griv/software_surface.cpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/texture.cpp
   trunk/griv/thumbnail_store.cpp
Log:
- fixed aspect ration, large image/originals work now

Modified: trunk/griv/grid.hpp
===================================================================
--- trunk/griv/grid.hpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/grid.hpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -53,17 +53,33 @@
   int get_height() const { return height; }
 
   const T& operator()(int x, int y) const {
+    assert(y >= 0 && y < rows.size());
+    assert(x >= 0 && x < rows[y].size());
     return rows[y][x];
   }
 
   T& operator()(int x, int y) {
+    assert(y >= 0 && y < int(rows.size()));
+    assert(x >= 0 && x < int(rows[y].size()));
     return rows[y][x];
   }
 
-  void resize(int w, int h)
+  void resize(int w, int h, const T& t = T())
   {
-    rows.resize(h);
+    for(typename Rows::iterator i = rows.begin(); i != rows.end(); ++i)
+      i->resize(w);
+    rows.resize(h, Columns(w, t));
 
+    if (0)
+      {
+        std::cout << "Resize: " << w << "x" << h << std::endl;
+        std::cout << "Rows: " << rows.size() << std::endl;
+        for(int y = 0; y < int(rows.size()); ++y)
+          {
+            std::cout << "Column: " << y << " -> " << rows[y].size() << std::endl;
+          }
+      }
+
     width  = w;
     height = h;
   }

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/griv.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -486,8 +486,13 @@
 
 int main(int argc, char** argv)
 {
-  Griv griv;
-  return griv.main(argc, argv);
+  try {
+    Griv griv;
+    return griv.main(argc, argv);
+  } catch(std::exception& err) {
+    std::cout << "Griv: uncatched exception: " << err.what() << std::endl;
+    return EXIT_FAILURE;
+  }
 }
 
 /* EOF */

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/griv.hpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -59,6 +59,7 @@
   bool grid_color;
   bool drag_toggle;
   float gamma;
+
 public:
   Griv();
   ~Griv();

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/image.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -150,11 +150,32 @@
           received_surface_res = 0;
         }
 
+      // Detect aspect ration
+      float aspect = float(original_width)/float(original_height);
+      float dw, dh;
+      if (aspect > 1.0f)
+        {
+          dw = zoom;
+          dh = zoom / aspect;
+        }
+      else
+        {
+          dw = zoom * aspect;
+          dh = zoom;
+        }
+
+      x += (zoom - dw)/2;
+      y += (zoom - dh)/2;
+
       // Handle drawing
       if (surface)
-        surface->draw(x, y, zoom, zoom);
+        {
+          surface->draw(x, y, dw, dh);
+        }
       else if (surface_16x16)
-        surface_16x16->draw(x, y, zoom, zoom);
+        {
+          surface_16x16->draw(x, y, dw, dh);
+        }
     }
   SDL_UnlockMutex(mutex);
 }

Modified: trunk/griv/large_surface.cpp
===================================================================
--- trunk/griv/large_surface.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/large_surface.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -23,15 +23,86 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include "surface.hpp"
 #include "large_surface.hpp"
 
+const int max_texture_size = 1024;
+
+void find_splice(int& rest, int& chunk)
+{
+  do
+    {
+      if (rest - chunk >= 0)
+        {
+          rest -= chunk;
+          return;
+        }
+      else
+        {
+          chunk /= 2;
+        }
+    }
+  while(chunk >= 16);
+  
+  // Don't create slices smaller then 16px
+  chunk = rest;
+  rest  = 0;
+}
+
+void make_splices(int width, std::vector<int>& slices)
+{
+  int chunk = max_texture_size;
+  while(width > 0)
+    {
+      find_splice(width, chunk);
+      slices.push_back(chunk);
+    }
+}
+
 LargeSurface::LargeSurface(SWSurfaceHandle surface)
-  : grid(1,1)
+  : grid(1,1),
+    width(surface->get_width()),
+    height(surface->get_height())
 {
-  grid(0,0) = new Surface(surface, 0, 0, 
-                          std::min(1024, surface->get_width()), 
-                          std::min(1024, surface->get_height()));
+  if (surface->get_width()  > max_texture_size ||
+      surface->get_height() > max_texture_size)
+    { // Large Surface, splice into small chunks
+      std::vector<int> width_splices;
+      make_splices(surface->get_width(), width_splices);
+
+      std::vector<int> height_splices;
+      make_splices(surface->get_height(), height_splices);
+
+      grid.resize(width_splices.size(), height_splices.size());
+
+      int x_pos = 0;
+      int y_pos = 0;
+      for(int iy = 0; iy < int(height_splices.size()); ++iy)
+        {
+          for(int ix = 0; ix < int(width_splices.size()); ++ix)
+            {
+              if (0)
+                std::cout << x_pos << "+" << y_pos << " - " << width_splices[ix] << "x" << height_splices[iy] 
+                          << " -> " << ix << "x" << iy 
+                          << std::endl;
+            
+              grid(ix, iy) = new Surface(surface, x_pos, y_pos, 
+                                         width_splices[ix], height_splices[iy]);
+              x_pos += width_splices[ix];
+            }
+          x_pos = 0;
+          y_pos += height_splices[iy];
+        }
+      if (0)
+        std::cout << "------------------: " << grid.get_width() << "x" << grid.get_height() << std::endl;
+    }
+  else
+    {
+      grid(0,0) = new Surface(surface, 0, 0, 
+                              surface->get_width(), 
+                              surface->get_height());
+    }
 }
 
 LargeSurface::~LargeSurface()
@@ -42,9 +113,34 @@
 }
 
 void
-LargeSurface::draw(float x, float y, float w, float h)
+LargeSurface::draw(float orig_x_pos, float y_pos, float w, float h)
 {
-  grid(0,0)->draw(x, y, w, h);
+  float x_pos = orig_x_pos;
+  Surface* sur = 0;
+  for(int y = 0; y < grid.get_height(); ++y)
+    {
+      for(int x = 0; x < grid.get_width(); ++x)
+        {
+          sur = grid(x,y);
+          if (sur)
+            {
+              if (0)
+              std::cout << "draw: " << x << "+" << y << " - " << w << "x" << h << " - " 
+                        << sur->get_width() << "x" << sur->get_height() << " - " 
+                        << get_width() << "x" << get_height() << std::endl;
+              
+              sur->draw(x_pos, y_pos, 
+                        w * sur->get_width() / get_width(),
+                        h * sur->get_height() / get_height());
+              x_pos += w * sur->get_width() / get_width();
+            }
+        }
+      if (sur)
+        {
+          y_pos += h * sur->get_height() / get_height();
+          x_pos = orig_x_pos;
+        }
+    }
 }
 
 /* EOF */

Modified: trunk/griv/large_surface.hpp
===================================================================
--- trunk/griv/large_surface.hpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/large_surface.hpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -35,6 +35,8 @@
 {
 private:
   Grid<Surface*> grid;
+  int width;
+  int height;
 
 public:
   LargeSurface(SWSurfaceHandle surface);
@@ -42,6 +44,9 @@
 
   void draw(float x, float y, float w, float h);  
 
+  int get_width()  const { return width; }
+  int get_height() const { return height; }
+
 private:
   LargeSurface (const LargeSurface&);
   LargeSurface& operator= (const LargeSurface&);

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/loader.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -53,13 +53,18 @@
 int
 Loader::thread_func(void*)
 {
-  while(loader.keep_thread_running)
-    {
-      loader.process_job();
+  try {
+    while(loader.keep_thread_running)
+      {
+        loader.process_job();
 
-      if (loader.empty())
-        SDL_Delay(100);
-    }
+        if (loader.empty())
+          SDL_Delay(100);
+      }
+  } catch(std::exception& err) {
+    std::cout << "Loader Thread error: " << err.what() << std::endl;
+    exit(1);
+  }
   return 0;
 }
 
@@ -108,9 +113,13 @@
       if (!job.image->surface ||
           job.image->surface_resolution != job.image->requested_res)
         {
-          if (job.image->original_width  <= job.image->requested_res ||
-              job.image->original_height <= job.image->requested_res)
+          if (job.image->requested_res == -1)
             {
+              if (0)
+                std::cout << "Loading original: "
+                          << job.image->original_width  << "x"
+                          << job.image->original_height << " " 
+                          << job.image->url << std::endl;
               job.image->receive(store->get_by_url(job.image->url, -1),
                                  -1);
             }

Modified: trunk/griv/software_surface.cpp
===================================================================
--- trunk/griv/software_surface.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/software_surface.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -43,7 +43,8 @@
 
 SoftwareSurface::~SoftwareSurface()
 {
-  SDL_FreeSurface(surface);
+  if (surface)
+    SDL_FreeSurface(surface);
 }
 
 /* EOF */

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/surface.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -45,10 +45,13 @@
                             surface->get_surface(), 
                             x, y, w, h);
     
-      u = float(surface->get_width()) / tex_w;
-      v = float(surface->get_height()) / tex_h;
+      u = float(w) / tex_w;
+      v = float(h) / tex_h;
 
-      aspect = float(surface->get_width()) / surface->get_height();
+      aspect = float(w) / h;
+
+      width  = w;
+      height = h;
     }
   else
     {
@@ -71,21 +74,26 @@
       
       glColor3f(1.0f, 1.0f, 1.0f);
 
-      float w, h;
-      if (aspect > 1.0f)
-        { // FIXME: This only works as long as w == h
-          w = orig_w;
-          h = orig_h / aspect;
-        }
-      else
+      if (0)
         {
-          w = orig_w * aspect;
-          h = orig_h;
+          float w, h;
+          if (aspect > 1.0f)
+            { // FIXME: This only works as long as w == h
+              w = orig_w;
+              h = orig_h / aspect;
+            }
+          else
+            {
+              w = orig_w * aspect;
+              h = orig_h;
+            }
+
+          x += (orig_w - w)/2;
+          y += (orig_h - h)/2;
         }
+      float w = orig_w;
+      float h = orig_h;
 
-      x += (orig_w - w)/2;
-      y += (orig_h - h)/2;
-     
       glBegin(GL_QUADS);
       glTexCoord2f(0,0);
       glVertex2f(x, y);

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/surface.hpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -47,12 +47,18 @@
 
   float aspect;
 
+  int width;
+  int height;
+  
 public:
   Surface(SWSurfaceHandle surface, int x, int y, int w, int h);
   ~Surface();
 
   void draw(float x, float y, float w, float h);
-  
+
+  int get_width()  const { return width; }
+  int get_height() const { return height; }
+
 private:
   Surface (const Surface&);
   Surface& operator= (const Surface&);

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/texture.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -106,7 +106,7 @@
 
   { // Create the texture
     unsigned char dummy[width*height*3];
-    memset(dummy, 100, width*height*3);
+    memset(dummy, 150, width*height*3);
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
                  width,
                  height,

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-02 21:32:36 UTC (rev 1573)
+++ trunk/griv/thumbnail_store.cpp	2007-12-03 01:26:15 UTC (rev 1574)
@@ -47,10 +47,9 @@
 {
   if (thumb_size == -1) // load original
     {
-      std::cout << "Loading original: " << url << std::endl;
       try 
         { 
-          return  new SoftwareSurface(url.substr(7)); // cut file:// part
+          return new SoftwareSurface(url.substr(7)); // cut file:// part
         }
       catch(std::exception& err) 
         {
@@ -82,7 +81,13 @@
             return 0;
           }
 
-          return new SoftwareSurface(thumb_filename.c_str());
+          // FIXME: This will fail for some images, which ones?
+          try {
+            return new SoftwareSurface(thumb_filename.c_str());
+          } catch(std::exception& err) {
+            std::cout << "ThumbnailStore: FIXME: This shouldn't happen: " << err.what() << std::endl;
+            return 0;
+          }
         }
     }
 }



From grumbel at mail.berlios.de  Mon Dec  3 02:49:14 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 3 Dec 2007 02:49:14 +0100
Subject: [Windstille-commit] r1575 - trunk/griv
Message-ID: <200712030149.lB31nE0J018189@sheep.berlios.de>

Author: grumbel
Date: 2007-12-03 02:49:13 +0100 (Mon, 03 Dec 2007)
New Revision: 1575

Modified:
   trunk/griv/TODO
   trunk/griv/image.cpp
Log:
- fixed low-res mode loading for original images

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-12-03 01:26:15 UTC (rev 1574)
+++ trunk/griv/TODO	2007-12-03 01:49:13 UTC (rev 1575)
@@ -26,6 +26,12 @@
 
 - write fast file system routines, use readdir(), d_type instead of
   stat to check for a directory -> only works on EXT3
+
+Bugs:
+=====
+
+ - Ctrl-C doesn't work in all situations (i.e. initial loading)
+
 
 Cache Files:
 ============

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-03 01:26:15 UTC (rev 1574)
+++ trunk/griv/image.cpp	2007-12-03 01:49:13 UTC (rev 1575)
@@ -200,7 +200,12 @@
       else if (z < 1024)
         return 1024;
       else
-        return -1;
+        {
+          if (z > original_width || z > original_height)
+            return -1;
+          else
+            return 1024;
+        }
     }
   else
     { // high quality



From grumbel at mail.berlios.de  Mon Dec  3 23:28:53 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 3 Dec 2007 23:28:53 +0100
Subject: [Windstille-commit] r1576 - trunk/griv
Message-ID: <200712032228.lB3MSrBe007483@sheep.berlios.de>

Author: grumbel
Date: 2007-12-03 23:28:52 +0100 (Mon, 03 Dec 2007)
New Revision: 1576

Modified:
   trunk/griv/TODO
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- decoupled drawing from texture uploading

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/TODO	2007-12-03 22:28:52 UTC (rev 1576)
@@ -3,25 +3,19 @@
 
 - store all thumbnails in a container format
 
-- implement Surface class that handles images larger then the maximum
-  texture size
+- Way to speed thumbnail directory creation up? -> use Thumbcache
+  for all files
 
-- remove round_res(), replace it with something else to allow images
-  in original size
+- move over input code from Pingus to support Spacenavigator and such
 
+Less Important:
+===============
+
 - create two OpenGL context to allow better multithreading use (any
   way to do it portable?) or move loading out of draw() and into
   load(), only call load() till a time slice has run out, so that
   drawing can take place again without interruption
 
-- move over input code from Pingus to support Spacenavigator and such
-
-- Way to speed thumbnail directory creation up? -> use Thumbcache
-  for all files
-
-Less Important:
-===============
-
 - added support for ~/.thumbnails/ to get the smaller mipmaps faster
 
 - write fast file system routines, use readdir(), d_type instead of
@@ -32,6 +26,16 @@
 
  - Ctrl-C doesn't work in all situations (i.e. initial loading)
 
+ - LargeSurface isn't seamless, seams visible only at very close zoom (see bottom/right)
+
+ - ThumbnailStore: FIXME: This shouldn't happen: SoftwareSurface:
+   Couldn't load /home/ingo/.griv/cache/by_url/1024/d0/116169afb9a1b3d395aa212f9744de.jpg
+
+ - sometimes SDL gets confused and the mouse isn't properly locked to the window
+
+ - ...images to workspace... 8033/8047 doesn't display 100% when done
+
+ - not handled properly by epeg: /share/photos/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
 
 Cache Files:
 ============

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/griv.cpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -445,7 +445,7 @@
             if (workspace->res != old_res ||
                 old_x_offset != x_offset ||
                 old_y_offset != y_offset ||
-                (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())) ||
+                (force_redraw && (next_redraw < SDL_GetTicks())) ||
                 workspace->reorganize)
               {
                 force_redraw = false;
@@ -466,7 +466,10 @@
               }
             else
               {
-                SDL_Delay(5);
+                if (workspace->update_resources())
+                  force_redraw = true;
+                else
+                  SDL_Delay(30); // nothing to do, so sleep
               }
           }
       }

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/image.cpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -105,51 +105,17 @@
   float x = x_pos * zoom + x_offset;
   float y = y_pos * zoom + y_offset;
 
-  SDL_LockMutex(mutex);
   if (x > Framebuffer::get_width() ||
       y > Framebuffer::get_height() ||
       x < -zoom || 
       y < -zoom)
     { // Image out of screen
       visible = false;
-      if (surface && surface_resolution >= 512) // keep small images around a while longer
-        {
-          delete surface;
-          surface = 0;
-        }
     }
   else
     { // image on screen
       visible = true;
-      // Handle loading when resolution changed
-      if (surface == 0 || zoom2res(zoom) != surface_resolution)
-        {
-          if (zoom2res(zoom) != requested_res)
-            {    
-              loader.request(this);
-              requested_res = zoom2res(zoom);
-            }
-        }
-      
-      // Handle OpenGL Texture creation when new surface was received
-      if (received_surface)
-        {
-          if (!surface_16x16)
-            { // Use surface as the smallest possible surface
-              // FIXME: When somebody is fast this could mean a non 16x16 surface
-              surface_16x16 = new LargeSurface(SWSurfaceHandle(received_surface)); // FIXME: could use Surface instead
-            }
-          else
-            { // Replace the current surface
-              delete surface;
-              surface = new LargeSurface(SWSurfaceHandle(received_surface));
-              surface_resolution = received_surface_res;
-            }
 
-          received_surface     = 0;
-          received_surface_res = 0;
-        }
-
       // Detect aspect ration
       float aspect = float(original_width)/float(original_height);
       float dw, dh;
@@ -167,6 +133,7 @@
       x += (zoom - dw)/2;
       y += (zoom - dh)/2;
 
+      SDL_LockMutex(mutex);
       // Handle drawing
       if (surface)
         {
@@ -176,8 +143,8 @@
         {
           surface_16x16->draw(x, y, dw, dh);
         }
+      SDL_UnlockMutex(mutex);
     }
-  SDL_UnlockMutex(mutex);
 }
 
 int
@@ -197,8 +164,6 @@
         return 256;
       else if (z < 1024)
         return 512;
-      else if (z < 1024)
-        return 1024;
       else
         {
           if (z > original_width || z > original_height)
@@ -239,7 +204,7 @@
 
 void
 Image::update(float alpha)
-{
+{ // Move image to its new position
   if (alpha == 1.0f)
     {
       x_pos = target_x_pos; 
@@ -254,4 +219,62 @@
     }
 }
 
+bool
+Image::update_resources(float x_offset, float y_offset, float zoom)
+{
+  float x = x_pos * zoom + x_offset;
+  float y = y_pos * zoom + y_offset;
+
+  bool need_redraw = false;
+
+  SDL_LockMutex(mutex);
+  if (x > Framebuffer::get_width() ||
+      y > Framebuffer::get_height() ||
+      x < -zoom || 
+      y < -zoom)
+    { // Image out of screen
+      if (surface && surface_resolution >= 512) // keep small images around a while longer
+        {
+          delete surface;
+          surface = 0;
+        }
+    }
+  else
+    { // image on screen
+      // Handle loading when resolution changed
+      if (surface == 0 || zoom2res(zoom) != surface_resolution)
+        {
+          if (zoom2res(zoom) != requested_res)
+            {    
+              loader.request(this);
+              requested_res = zoom2res(zoom);
+            }
+        }
+      
+      // Handle OpenGL Texture creation when new surface was received
+      if (received_surface)
+        {
+          need_redraw = true;
+
+          if (!surface_16x16)
+            { // Use surface as the smallest possible surface
+              // FIXME: When somebody is fast this could mean a non 16x16 surface
+              surface_16x16 = new LargeSurface(SWSurfaceHandle(received_surface)); // FIXME: could use Surface instead
+            }
+          else
+            { // Replace the current surface
+              delete surface;
+              surface = new LargeSurface(SWSurfaceHandle(received_surface));
+              surface_resolution = received_surface_res;
+            }
+
+          received_surface     = 0;
+          received_surface_res = 0;
+        }
+    }
+  SDL_UnlockMutex(mutex); 
+
+  return need_redraw;
+}
+
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/image.hpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -72,7 +72,8 @@
   ~Image();
 
   void receive(SoftwareSurface* new_surface, int r);
-  void draw(float x_offset, float y_offset, float res);
+  void draw(float x_offset, float y_offset, float zoom);
+  bool update_resources(float x_offset, float y_offset, float zoom);
   void update(float delta);
 
   int  zoom2res(float res);

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/thumbnail_store.cpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -85,7 +85,9 @@
           try {
             return new SoftwareSurface(thumb_filename.c_str());
           } catch(std::exception& err) {
-            std::cout << "ThumbnailStore: FIXME: This shouldn't happen: " << err.what() << std::endl;
+            std::cout << "ThumbnailStore: FIXME: This shouldn't happen: " << err.what() << "\n"
+                      << "  - for " << url
+                      << std::endl;
             return 0;
           }
         }

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/workspace.cpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -62,9 +62,32 @@
                       y_offset + Framebuffer::get_height()/2,
                       res);
     }
+
   glPopMatrix();
 }
 
+bool
+Workspace::update_resources()
+{
+  bool need_redraw = false;
+  Uint32 t = SDL_GetTicks();
+  for(int i = 0; i < int(images.size()); ++i)
+    {
+      if (images[i]->update_resources(x_offset + Framebuffer::get_width()/2,
+                                  y_offset + Framebuffer::get_height()/2,
+                                      res))
+        need_redraw = true;
+
+      Uint32 v = SDL_GetTicks() - t;
+      if (v > 50) // 50ms spend updating, so stop it
+        {
+          //std::cout << "Break away" << std::endl;
+          return need_redraw;
+        }
+    }
+  return need_redraw;
+}
+
 void
 Workspace::update(float delta)
 {
@@ -83,9 +106,7 @@
       //std::cout << alpha << std::endl;
 
       for(int i = 0; i < int(images.size()); ++i)
-        {
-          images[i]->update(alpha);
-        }
+        images[i]->update(alpha);
     }
 }
 

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-12-03 01:49:13 UTC (rev 1575)
+++ trunk/griv/workspace.hpp	2007-12-03 22:28:52 UTC (rev 1576)
@@ -44,6 +44,7 @@
   Workspace();
 
   void draw();
+  bool update_resources();
   void update(float delta);
   void add(const std::string& url);
 



From grumbel at mail.berlios.de  Tue Dec  4 00:02:51 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 4 Dec 2007 00:02:51 +0100
Subject: [Windstille-commit] r1577 - trunk/griv
Message-ID: <200712032302.lB3N2p8P009336@sheep.berlios.de>

Author: grumbel
Date: 2007-12-04 00:02:50 +0100 (Tue, 04 Dec 2007)
New Revision: 1577

Added:
   trunk/griv/thumbnail_manager.cpp
   trunk/griv/thumbnail_manager.hpp
Removed:
   trunk/griv/thumb_cache.cpp
   trunk/griv/thumb_cache.hpp
Modified:
   trunk/griv/README
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/md5.cpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Log:
- renamed ThumbnailStore to ThumbnailManager

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/README	2007-12-03 23:02:50 UTC (rev 1577)
@@ -3,7 +3,7 @@
 
 griv is a image viewer that allows you to directly zoom into
 thumbnails. Its goal is to allow its viewer to view 100'000 images at
-once fluently without any noticable load times.
+once, fluently without any noticable load times.
 
 Usage:
 ======
@@ -13,9 +13,9 @@
  $ ./griv [PATHNAME]...
 
 Optionally you can pre-generate the thumbnails, which results in
-a smoother experience by calling:
+a smoother experience by calling (strongly recomment):
 
- $ ./thumbgen -s 16,32,64,128,256,512,1024 [PATHNAME]...
+ $ ./thumbgen -a [PATHNAME]...
 
 For very large image collections it is recomment that you pregenerate
 the URL list to avoid slow startup due to file-io:

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/SConstruct	2007-12-03 23:02:50 UTC (rev 1577)
@@ -20,6 +20,7 @@
                           'large_surface.cpp',
                           'software_surface.cpp',
                           'thumbnail_store.cpp',
+                          'thumbnail_manager.cpp',
                           'display.cpp', 
                           'texture.cpp', 
                           'workspace.cpp'])

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/TODO	2007-12-03 23:02:50 UTC (rev 1577)
@@ -8,6 +8,10 @@
 
 - move over input code from Pingus to support Spacenavigator and such
 
+- need a way to cleanly shut down the whole thing instead of just exit()
+
+- don't store MD5 as string, but as raw bits/bytes
+
 Less Important:
 ===============
 

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/loader.cpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -32,7 +32,7 @@
 #include "image.hpp"
 #include "loader.hpp"
 #include "surface.hpp"
-#include "thumbnail_store.hpp"
+#include "thumbnail_manager.hpp"
 
 Loader loader;
 
@@ -73,7 +73,7 @@
 {
   if (!store)
     {
-      store = new ThumbnailStore();
+      store = new ThumbnailManager();
     }
 
   if (!thread)

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/loader.hpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -32,7 +32,7 @@
 #include <string>
 #include <vector>
 
-class ThumbnailStore;
+class ThumbnailManager;
 class Image;
 
 struct Job
@@ -50,7 +50,7 @@
 private:
   typedef std::vector<Job> Jobs;
   Jobs jobs;
-  ThumbnailStore* store;
+  ThumbnailManager* store;
   SDL_mutex* mutex;
   SDL_Thread* thread;
   bool keep_thread_running;

Modified: trunk/griv/md5.cpp
===================================================================
--- trunk/griv/md5.cpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/md5.cpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -78,7 +78,6 @@
   std::ostringstream out;
   for (int i = 0; i < 16; i++)
     out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
-
   return out.str();  
 }
 

Deleted: trunk/griv/thumb_cache.cpp
===================================================================
--- trunk/griv/thumb_cache.cpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/thumb_cache.cpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -1,55 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "thumb_cache.hpp"
-
-ThumbCache::ThumbCache(const std::string& filename)
-{
-  in = std::ifstream(filename.c_str(), std::ios::in | std::ios::binary);
-}
-
-ThumbCache::~ThumbCache()
-{
-}
-
-SDL_Surface*
-ThumbCache::get(int offset)
-{
-  
-}
-
-void
-ThumbCache::add(SDL_Surface* surface)
-{
-  
-}
-
-void
-ThumbCache::save(const std::string& filename)
-{
-  
-}
-
-/* EOF */

Deleted: trunk/griv/thumb_cache.hpp
===================================================================
--- trunk/griv/thumb_cache.hpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/thumb_cache.hpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -1,53 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_THUMB_CACHE_HPP
-#define HEADER_THUMB_CACHE_HPP
-
-#include <fstream>
-
-/** */
-class ThumbCache
-{
-private:
-  std::ifstream in;
-  
-public:
-  ThumbCache(const std::string& filename);
-  ~ThumbCache();
-
-  SDL_Surface* get(int offset);
-  void add(SDL_Surface* surface);
-  
-  void save(const std::string& filename);
-
-private:
-  ThumbCache (const ThumbCache&);
-  ThumbCache& operator= (const ThumbCache&);
-};
-
-#endif
-
-/* EOF */

Copied: trunk/griv/thumbnail_manager.cpp (from rev 1576, trunk/griv/thumbnail_store.cpp)
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/thumbnail_manager.cpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -0,0 +1,154 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "epeg/Epeg.h"
+#include <sstream>
+#include <iostream>
+#include <stdexcept>
+#include "SDL_image.h"
+#include "filesystem.hpp"
+#include "md5.hpp"
+#include "software_surface.hpp"
+#include "thumbnail_manager.hpp"
+
+ThumbnailManager::ThumbnailManager()
+{
+  
+}
+
+ThumbnailManager::~ThumbnailManager()
+{
+  std::cout << "destroying ThumbnailManager" << std::endl;
+}
+
+SoftwareSurface* 
+ThumbnailManager::get_by_url(const std::string& url, int thumb_size) // URL is file://... *not* just a pathname
+{
+  if (thumb_size == -1) // load original
+    {
+      try 
+        { 
+          return new SoftwareSurface(url.substr(7)); // cut file:// part
+        }
+      catch(std::exception& err) 
+        {
+          std::cout << "Loader: " << err.what() << std::endl;
+          return 0;
+        }
+    }
+  else
+    {
+      std::string md5 = MD5::md5_string(url);
+
+      std::ostringstream out;
+      out << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
+  
+      std::string thumb_filename = out.str();
+  
+      try 
+        {
+          return new SoftwareSurface(thumb_filename);
+        }
+      catch(std::exception& err) 
+        {
+          // Try to generate the thumbnail
+          try {
+            generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
+          } catch (std::exception& err) {
+            std::cout << err.what() << std::endl;
+            return 0;
+          }
+
+          // FIXME: This will fail for some images, which ones?
+          try {
+            return new SoftwareSurface(thumb_filename.c_str());
+          } catch(std::exception& err) {
+            std::cout << "ThumbnailManager: FIXME: This shouldn't happen: " << err.what() << "\n"
+                      << "  - for " << url
+                      << std::endl;
+            return 0;
+          }
+        }
+    }
+}
+
+void
+ThumbnailManager::generate(const std::string& filename, const std::string& thumb_location, int thumb_size)
+{
+  Epeg_Image* img = epeg_file_open(filename.c_str());
+  if (!img)
+    {
+      throw std::runtime_error("ThumbnailManager::generate: Cannot open " + filename);
+    }
+  
+  int w, h;
+  unsigned char* data = 0;
+  int   data_len = 0;
+  epeg_size_get(img, &w, &h);
+
+  if (w > thumb_size || h > thumb_size)
+    {
+      epeg_quality_set(img, 80);
+      epeg_thumbnail_comments_enable(img, 1);
+
+      if (w > h)
+        epeg_decode_size_set(img, thumb_size, thumb_size * h / w);
+      else
+        epeg_decode_size_set(img, thumb_size * w / h, thumb_size);
+  
+      epeg_decode_colorspace_set(img, EPEG_RGB8);
+
+      std::cout << "." << std::flush;
+      //std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
+
+      epeg_file_output_set(img, thumb_location.c_str());
+      epeg_memory_output_set(img, &data, &data_len);
+      epeg_encode(img);
+    }
+      
+  epeg_close(img);
+
+  if (!data)
+    {
+      std::cout << "ThumbnailManager: generate: failed: " << filename << std::endl;
+    }
+  else
+    {
+      Ofstreams::iterator i = ofstreams.find(thumb_size);
+      if (i == ofstreams.end())
+        {
+          std::cout << "ThumbnailManager: Don't have cache store for " << thumb_size << std::endl;
+        }
+      else
+        {
+          
+        }
+      
+      free(data);
+    }
+}
+
+/* EOF */

Copied: trunk/griv/thumbnail_manager.hpp (from rev 1572, trunk/griv/thumbnail_store.hpp)
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-12-02 20:32:00 UTC (rev 1572)
+++ trunk/griv/thumbnail_manager.hpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -0,0 +1,58 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_THUMBNAIL_STORE_HPP
+#define HEADER_THUMBNAIL_STORE_HPP
+
+#include "SDL.h"
+#include <fstream>
+#include <string>
+#include <map>
+
+class SoftwareSurface;
+
+/** */
+class ThumbnailManager
+{
+private:
+  typedef std::map<int, std::ofstream*> Ofstreams;
+  Ofstreams ofstreams;
+
+public:
+  ThumbnailManager();
+  ~ThumbnailManager();
+
+  SoftwareSurface* get_by_url(const std::string& url, int thumb_size);
+  
+  void generate(const std::string& filename, const std::string& thumb_location, int thumb_size);
+
+private:
+  ThumbnailManager (const ThumbnailManager&);
+  ThumbnailManager& operator= (const ThumbnailManager&);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/thumbnail_store.cpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -40,92 +40,17 @@
 
 ThumbnailStore::~ThumbnailStore()
 {
+  std::cout << "destroying ThumbnailStore" << std::endl;
 }
 
-SoftwareSurface* 
-ThumbnailStore::get_by_url(const std::string& url, int thumb_size) // URL is file://... *not* just a pathname
+void
+ThumbnailStore::store()
 {
-  if (thumb_size == -1) // load original
-    {
-      try 
-        { 
-          return new SoftwareSurface(url.substr(7)); // cut file:// part
-        }
-      catch(std::exception& err) 
-        {
-          std::cout << "Loader: " << err.what() << std::endl;
-          return 0;
-        }
-    }
-  else
-    {
-      std::string md5 = MD5::md5_string(url);
-
-      std::ostringstream out;
-      out << Filesystem::get_home() << "/.griv/cache/by_url/"
-          << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
-  
-      std::string thumb_filename = out.str();
-  
-      try 
-        {
-          return new SoftwareSurface(thumb_filename);
-        }
-      catch(std::exception& err) 
-        {
-          // Try to generate the thumbnail
-          try {
-            generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
-          } catch (std::exception& err) {
-            std::cout << err.what() << std::endl;
-            return 0;
-          }
-
-          // FIXME: This will fail for some images, which ones?
-          try {
-            return new SoftwareSurface(thumb_filename.c_str());
-          } catch(std::exception& err) {
-            std::cout << "ThumbnailStore: FIXME: This shouldn't happen: " << err.what() << "\n"
-                      << "  - for " << url
-                      << std::endl;
-            return 0;
-          }
-        }
-    }
 }
 
 void
-ThumbnailStore::generate(const std::string& filename, const std::string& thumb_location, int thumb_size)
+ThumbnailStore::retrieve()
 {
-  Epeg_Image* img = epeg_file_open(filename.c_str());
-  if (!img)
-    {
-      throw std::runtime_error("ThumbnailStore::generate: Cannot open " + filename);
-    }
-  
-  int w, h;
-  epeg_size_get(img, &w, &h);
-
-  if (w > thumb_size || h > thumb_size)
-    {
-      epeg_quality_set(img, 80);
-      epeg_thumbnail_comments_enable(img, 1);
-
-      if (w > h)
-        epeg_decode_size_set(img, thumb_size, thumb_size * h / w);
-      else
-        epeg_decode_size_set(img, thumb_size * w / h, thumb_size);
-  
-      epeg_decode_colorspace_set(img, EPEG_RGB8);
-
-      std::cout << "." << std::flush;
-      //std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
-
-      epeg_file_output_set(img, thumb_location.c_str());
-      epeg_encode(img);
-    }
-      
-  epeg_close(img);
 }
 
 /* EOF */

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-12-03 22:28:52 UTC (rev 1576)
+++ trunk/griv/thumbnail_store.hpp	2007-12-03 23:02:50 UTC (rev 1577)
@@ -27,7 +27,9 @@
 #define HEADER_THUMBNAIL_STORE_HPP
 
 #include "SDL.h"
+#include <fstream>
 #include <string>
+#include <map>
 
 class SoftwareSurface;
 
@@ -35,14 +37,14 @@
 class ThumbnailStore
 {
 private:
+  std::ofstream out;
 
 public:
   ThumbnailStore();
   ~ThumbnailStore();
 
-  SoftwareSurface* get_by_url(const std::string& url, int thumb_size);
-  
-  void generate(const std::string& filename, const std::string& thumb_location, int thumb_size);
+  void store();
+  void retrieve();
 
 private:
   ThumbnailStore (const ThumbnailStore&);



From grumbel at mail.berlios.de  Tue Dec  4 16:14:00 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 4 Dec 2007 16:14:00 +0100
Subject: [Windstille-commit] r1578 - trunk/griv
Message-ID: <200712041514.lB4FE0Nj005372@sheep.berlios.de>

Author: grumbel
Date: 2007-12-04 16:13:59 +0100 (Tue, 04 Dec 2007)
New Revision: 1578

Modified:
   trunk/griv/SConstruct
   trunk/griv/cache.cpp
   trunk/griv/cache.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/packer.cpp
Log:
- renamed Cache to FileEntryCache

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/SConstruct	2007-12-04 15:13:59 UTC (rev 1578)
@@ -4,7 +4,7 @@
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 
                                              'command_line.cpp',
                                              'jpeg.cpp',
-                                             'cache.cpp',
+                                             'file_entry_cache.cpp',
                                              'md5.cpp'])
 
 libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])

Modified: trunk/griv/cache.cpp
===================================================================
--- trunk/griv/cache.cpp	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/cache.cpp	2007-12-04 15:13:59 UTC (rev 1578)
@@ -30,7 +30,7 @@
 #include <fstream>
 #include "cache.hpp"
 
-Cache::Cache(const std::string& filename)
+FileEntryCache::FileEntryCache(const std::string& filename)
 {
   std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
   if (!in)
@@ -56,7 +56,7 @@
 }
 
 void
-Cache::save(const std::string& filename) const
+FileEntryCache::save(const std::string& filename) const
 {
   std::ofstream out(filename.c_str(), std::ios::out | std::ios::binary);
 
@@ -80,7 +80,7 @@
 }
 
 const FileEntry*
-Cache::get_entry(const std::string& url)
+FileEntryCache::get_entry(const std::string& url)
 {
   std::string url_md5 = MD5::md5_string(url);
 

Modified: trunk/griv/cache.hpp
===================================================================
--- trunk/griv/cache.hpp	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/cache.hpp	2007-12-04 15:13:59 UTC (rev 1578)
@@ -38,7 +38,7 @@
 };
 
 /** */
-class Cache
+class FileEntryCache
 {
 
 private:
@@ -46,8 +46,8 @@
   Entries entries;
 
 public:
-  Cache(const std::string& filename);
-
+  FileEntryCache(const std::string& filename);
+  
   void save(const std::string& filename) const;
 
   const FileEntry* get_entry(const std::string& url);

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/griv.cpp	2007-12-04 15:13:59 UTC (rev 1578)
@@ -19,7 +19,7 @@
 std::string config_home;
 bool force_redraw = true;
 bool highquality  = false;
-Cache* cache;
+FileEntryCache* cache;
 
 Griv::Griv()
 {
@@ -388,7 +388,7 @@
     std::cout << "done" << std::endl;
 
     std::cout << "Loading cache... " << std::flush;
-    cache = new Cache(Filesystem::get_home() + "/.griv/cache/file.cache");
+    cache = new FileEntryCache(Filesystem::get_home() + "/.griv/cache/file.cache");
     std::cout << "done" << std::endl;
 
     std::cout << "Generating url list... " << std::flush;

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/griv.hpp	2007-12-04 15:13:59 UTC (rev 1578)
@@ -29,13 +29,13 @@
 #include <SDL.h>
 #include <string>
 
-class Cache;
+class FileEntryCache;
 
 extern float x_offset;
 extern float y_offset;
 extern bool force_redraw;
 extern bool highquality;
-extern Cache* cache;
+extern FileEntryCache* cache;
 
 class Workspace;
 

Modified: trunk/griv/packer.cpp
===================================================================
--- trunk/griv/packer.cpp	2007-12-03 23:02:50 UTC (rev 1577)
+++ trunk/griv/packer.cpp	2007-12-04 15:13:59 UTC (rev 1578)
@@ -5,7 +5,7 @@
 
 int main(int argc, char** argv)
 {
-  Cache cache("/tmp/test.cache");
+  FileEntryCache cache("/tmp/test.cache");
 
   std::cout << "Generating file list... " << std::flush;
   std::vector<std::string> file_list;



From grumbel at mail.berlios.de  Tue Dec  4 16:25:17 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 4 Dec 2007 16:25:17 +0100
Subject: [Windstille-commit] r1579 - trunk/griv
Message-ID: <200712041525.lB4FPH1d006020@sheep.berlios.de>

Author: grumbel
Date: 2007-12-04 16:25:17 +0100 (Tue, 04 Dec 2007)
New Revision: 1579

Added:
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
Removed:
   trunk/griv/cache.cpp
   trunk/griv/cache.hpp
Modified:
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/packer.cpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Log:
- renamed Cache to FileEntryCache

Deleted: trunk/griv/cache.cpp
===================================================================
--- trunk/griv/cache.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/cache.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -1,111 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include "filesystem.hpp"
-#include "jpeg.hpp"
-#include "md5.hpp"
-#include <fstream>
-#include "cache.hpp"
-
-FileEntryCache::FileEntryCache(const std::string& filename)
-{
-  std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
-  if (!in)
-    {
-      // do nothing, since empty cache is ok
-    }
-  else
-    {
-      while(!in.eof())
-        {
-          FileEntry entry;
-      
-          in.read(entry.url_md5,  sizeof(char) * 33);
-          in.read((char*)(&entry.mtime),        sizeof(unsigned int));
-          in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
-          in.read((char*)(&entry.width),        sizeof(unsigned int));
-          in.read((char*)(&entry.height),       sizeof(unsigned int));
-
-          // FIXME: Do error checking to avoid adding incomplete entries
-          entries[entry.url_md5] = entry;
-        }
-    }
-}
-
-void
-FileEntryCache::save(const std::string& filename) const
-{
-  std::ofstream out(filename.c_str(), std::ios::out | std::ios::binary);
-
-  if (!out)
-    {
-      std::cout << "Couldn't save cache" << std::endl;
-    }
-  else
-    {
-      for(Entries::const_iterator i = entries.begin();
-          i != entries.end(); ++i)
-        {
-          const FileEntry& entry = i->second;
-          out.write(entry.url_md5,  sizeof(char) * 33);
-          out.write((char*)(&entry.mtime),        sizeof(unsigned int));
-          out.write((char*)(&entry.thumbnail_id), sizeof(unsigned int));
-          out.write((char*)(&entry.width),        sizeof(unsigned int));
-          out.write((char*)(&entry.height),       sizeof(unsigned int));
-        }
-    }
-}
-
-const FileEntry*
-FileEntryCache::get_entry(const std::string& url)
-{
-  std::string url_md5 = MD5::md5_string(url);
-
-  Entries::const_iterator i = entries.find(url_md5);
-  if (i == entries.end())
-    {
-      FileEntry entry;
-      try { 
-        strcpy(entry.url_md5, url_md5.c_str());
-        entry.mtime = Filesystem::get_mtime(url.substr(7));
-        entry.thumbnail_id = 0;
-        JPEG::get_size(url.substr(7), entry.width, entry.height);
-      } catch (std::exception& err) {
-        std::cout << url << ": " << err.what() << std::endl;
-        return 0;
-      }
-      
-      entries[url_md5] = entry;
-
-      return &entries[url_md5];
-    }
-  else
-    {
-      return &i->second;
-    }
-}
-
-/* EOF */

Deleted: trunk/griv/cache.hpp
===================================================================
--- trunk/griv/cache.hpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/cache.hpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -1,58 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_CACHE_HPP
-#define HEADER_CACHE_HPP
-
-#include <string>
-#include <map>
-
-struct FileEntry {
-  char url_md5[33];
-  int  mtime;  // mtime at which the thumbnail was done
-  int  thumbnail_id; // offset into the thumbnail database
-  int  width;  // image width
-  int  height; // image height
-};
-
-/** */
-class FileEntryCache
-{
-
-private:
-  typedef std::map<std::string, FileEntry> Entries;
-  Entries entries;
-
-public:
-  FileEntryCache(const std::string& filename);
-  
-  void save(const std::string& filename) const;
-
-  const FileEntry* get_entry(const std::string& url);
-};
-
-#endif
-
-/* EOF */

Copied: trunk/griv/file_entry_cache.cpp (from rev 1578, trunk/griv/cache.cpp)
===================================================================
--- trunk/griv/cache.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/file_entry_cache.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -0,0 +1,111 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "filesystem.hpp"
+#include "jpeg.hpp"
+#include "md5.hpp"
+#include <fstream>
+#include "file_entry_cache.hpp"
+
+FileEntryCache::FileEntryCache(const std::string& filename)
+{
+  std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
+  if (!in)
+    {
+      // do nothing, since empty cache is ok
+    }
+  else
+    {
+      while(!in.eof())
+        {
+          FileEntry entry;
+      
+          in.read(entry.url_md5,  sizeof(char) * 33);
+          in.read((char*)(&entry.mtime),        sizeof(unsigned int));
+          in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
+          in.read((char*)(&entry.width),        sizeof(unsigned int));
+          in.read((char*)(&entry.height),       sizeof(unsigned int));
+
+          // FIXME: Do error checking to avoid adding incomplete entries
+          entries[entry.url_md5] = entry;
+        }
+    }
+}
+
+void
+FileEntryCache::save(const std::string& filename) const
+{
+  std::ofstream out(filename.c_str(), std::ios::out | std::ios::binary);
+
+  if (!out)
+    {
+      std::cout << "Couldn't save cache" << std::endl;
+    }
+  else
+    {
+      for(Entries::const_iterator i = entries.begin();
+          i != entries.end(); ++i)
+        {
+          const FileEntry& entry = i->second;
+          out.write(entry.url_md5,  sizeof(char) * 33);
+          out.write((char*)(&entry.mtime),        sizeof(unsigned int));
+          out.write((char*)(&entry.thumbnail_id), sizeof(unsigned int));
+          out.write((char*)(&entry.width),        sizeof(unsigned int));
+          out.write((char*)(&entry.height),       sizeof(unsigned int));
+        }
+    }
+}
+
+const FileEntry*
+FileEntryCache::get_entry(const std::string& url)
+{
+  std::string url_md5 = MD5::md5_string(url);
+
+  Entries::const_iterator i = entries.find(url_md5);
+  if (i == entries.end())
+    {
+      FileEntry entry;
+      try { 
+        strcpy(entry.url_md5, url_md5.c_str());
+        entry.mtime = Filesystem::get_mtime(url.substr(7));
+        entry.thumbnail_id = 0;
+        JPEG::get_size(url.substr(7), entry.width, entry.height);
+      } catch (std::exception& err) {
+        std::cout << url << ": " << err.what() << std::endl;
+        return 0;
+      }
+      
+      entries[url_md5] = entry;
+
+      return &entries[url_md5];
+    }
+  else
+    {
+      return &i->second;
+    }
+}
+
+/* EOF */

Copied: trunk/griv/file_entry_cache.hpp (from rev 1578, trunk/griv/cache.hpp)

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/griv.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -12,7 +12,7 @@
 #include "loader.hpp"
 #include "image.hpp"
 #include "command_line.hpp"
-#include "cache.hpp"
+#include "file_entry_cache.hpp"
 
 float x_offset = 0.0f;
 float y_offset = 0.0f;

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/image.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -31,7 +31,7 @@
 #include "software_surface.hpp"
 #include "image.hpp"
 #include "jpeg.hpp"
-#include "cache.hpp"
+#include "file_entry_cache.hpp"
 #include "surface.hpp"
 #include "large_surface.hpp"
 

Modified: trunk/griv/packer.cpp
===================================================================
--- trunk/griv/packer.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/packer.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -1,6 +1,6 @@
 #include "filesystem.hpp"
 #include "md5.hpp"
-#include "cache.hpp"
+#include "file_entry_cache.hpp"
 #include <iostream>
 
 int main(int argc, char** argv)

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/thumbnail_store.cpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -33,9 +33,9 @@
 #include "software_surface.hpp"
 #include "thumbnail_store.hpp"
 
-ThumbnailStore::ThumbnailStore()
+ThumbnailStore::ThumbnailStore(const std::string& filename)
 {
-  
+  out.open();
 }
 
 ThumbnailStore::~ThumbnailStore()

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-12-04 15:13:59 UTC (rev 1578)
+++ trunk/griv/thumbnail_store.hpp	2007-12-04 15:25:17 UTC (rev 1579)
@@ -38,9 +38,9 @@
 {
 private:
   std::ofstream out;
-
+  
 public:
-  ThumbnailStore();
+  ThumbnailStore(const std::string& filename);
   ~ThumbnailStore();
 
   void store();



From grumbel at mail.berlios.de  Tue Dec  4 18:31:31 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 4 Dec 2007 18:31:31 +0100
Subject: [Windstille-commit] r1580 - trunk/griv
Message-ID: <200712041731.lB4HVVWi021510@sheep.berlios.de>

Author: grumbel
Date: 2007-12-04 18:31:30 +0100 (Tue, 04 Dec 2007)
New Revision: 1580

Modified:
   trunk/griv/TODO
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
   trunk/griv/griv.cpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- added sorting/randomizing (9,0,r)
- made some space in the file cache to store thumbnail indices

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/TODO	2007-12-04 17:31:30 UTC (rev 1580)
@@ -12,6 +12,16 @@
 
 - don't store MD5 as string, but as raw bits/bytes
 
+- addd linear/nearest filtering toggle
+
+- make set_zoom() not change the current viewpoint
+
+- prioritize loader jobs:
+  
+  1) images currently displayed
+  2) images without any thumbnails
+  3) images close to the current view
+
 Less Important:
 ===============
 
@@ -25,6 +35,7 @@
 - write fast file system routines, use readdir(), d_type instead of
   stat to check for a directory -> only works on EXT3
 
+
 Bugs:
 =====
 
@@ -40,6 +51,7 @@
  - ...images to workspace... 8033/8047 doesn't display 100% when done
 
  - not handled properly by epeg: /share/photos/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
+
 
 Cache Files:
 ============

Modified: trunk/griv/file_entry_cache.cpp
===================================================================
--- trunk/griv/file_entry_cache.cpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/file_entry_cache.cpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <assert.h>
 #include <iostream>
 #include "filesystem.hpp"
 #include "jpeg.hpp"
@@ -44,11 +45,20 @@
           FileEntry entry;
       
           in.read(entry.url_md5,  sizeof(char) * 33);
-          in.read((char*)(&entry.mtime),        sizeof(unsigned int));
-          in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
-          in.read((char*)(&entry.width),        sizeof(unsigned int));
-          in.read((char*)(&entry.height),       sizeof(unsigned int));
+          in.read((char*)(&entry.mtime),        sizeof(entry.mtime));
+          in.read((char*)(&entry.width),        sizeof(entry.width));
+          in.read((char*)(&entry.height),       sizeof(entry.height));
 
+          uint8_t num_thumbnails = 0;
+          in.read((char*)(&num_thumbnails), sizeof(num_thumbnails));
+          for(int i = 0; i < num_thumbnails; ++i)
+            {
+              ThumbnailEntry thumb_entry;
+              in.read((char*)(&thumb_entry.offset), sizeof(thumb_entry.offset));
+              in.read((char*)(&thumb_entry.len),    sizeof(thumb_entry.len));
+              entry.thumbnails.push_back(thumb_entry);
+            }
+          
           // FIXME: Do error checking to avoid adding incomplete entries
           entries[entry.url_md5] = entry;
         }
@@ -70,11 +80,20 @@
           i != entries.end(); ++i)
         {
           const FileEntry& entry = i->second;
+
           out.write(entry.url_md5,  sizeof(char) * 33);
-          out.write((char*)(&entry.mtime),        sizeof(unsigned int));
-          out.write((char*)(&entry.thumbnail_id), sizeof(unsigned int));
-          out.write((char*)(&entry.width),        sizeof(unsigned int));
-          out.write((char*)(&entry.height),       sizeof(unsigned int));
+          out.write((char*)(&entry.mtime),        sizeof(entry.mtime));
+          out.write((char*)(&entry.width),        sizeof(entry.width));
+          out.write((char*)(&entry.height),       sizeof(entry.height));
+
+          assert(entry.thumbnails.size() < 256);
+          uint8_t num_thumbnails = entry.thumbnails.size();
+          out.write((char*)(&num_thumbnails), sizeof(num_thumbnails));
+          for(int i = 0; i < num_thumbnails; ++i)
+            {
+              out.write((char*)(&entry.thumbnails[i].offset), sizeof(entry.thumbnails[i].offset));
+              out.write((char*)(&entry.thumbnails[i].len),    sizeof(entry.thumbnails[i].len));
+            }        
         }
     }
 }
@@ -91,7 +110,6 @@
       try { 
         strcpy(entry.url_md5, url_md5.c_str());
         entry.mtime = Filesystem::get_mtime(url.substr(7));
-        entry.thumbnail_id = 0;
         JPEG::get_size(url.substr(7), entry.width, entry.height);
       } catch (std::exception& err) {
         std::cout << url << ": " << err.what() << std::endl;

Modified: trunk/griv/file_entry_cache.hpp
===================================================================
--- trunk/griv/file_entry_cache.hpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/file_entry_cache.hpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -29,14 +29,28 @@
 #include <string>
 #include <map>
 
-struct FileEntry {
-  char url_md5[33];
-  int  mtime;  // mtime at which the thumbnail was done
-  int  thumbnail_id; // offset into the thumbnail database
-  int  width;  // image width
-  int  height; // image height
+struct ThumbnailEntry
+{
+  uint64_t offset;
+  uint32_t len;
 };
 
+struct FileEntry 
+{
+  char     url_md5[33]; // FIXME: Could save raw MD5 instead of string version
+  uint32_t mtime;  // mtime of the file
+  int      width;  // image width
+  int      height; // image height
+  
+  /** 
+      thumbnails[0] -> 16x16
+      thumbnails[1] -> 32x32
+      ...
+      thumbnails[N] -> (16 + 2^N)x(16 + 2^N)
+   */
+  std::vector<ThumbnailEntry> thumbnails;
+};
+
 /** */
 class FileEntryCache
 {

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/griv.cpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -157,21 +157,6 @@
                 gamma = 1.0f;
                 SDL_SetGamma(gamma, gamma, gamma);
               }
-            else if (event.key.keysym.sym == SDLK_9)
-              {
-                workspace->layout(4,3);
-                force_redraw = true;
-              }
-            else if (event.key.keysym.sym == SDLK_8)
-              {
-                workspace->layout(8,3);
-                force_redraw = true;
-              }
-            else if (event.key.keysym.sym == SDLK_7)
-              {
-                workspace->layout(16,3);
-                force_redraw = true;
-              }
             else if (event.key.keysym.sym == SDLK_1)
               {
                 workspace->set_zoom(16.0f);
@@ -196,6 +181,29 @@
               {
                 workspace->set_zoom(512.0f);
               }
+            else if (event.key.keysym.sym == SDLK_7)
+              {
+                workspace->set_zoom(1024.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_8)
+              {
+                workspace->set_zoom(2048.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_9)
+              {
+                workspace->layout_sort(true);
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_0)
+              {
+                workspace->layout_sort(false);
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_r)
+              {
+                workspace->layout_random();
+                force_redraw = true;
+              }
             else if (event.key.keysym.sym == SDLK_UP)
               {
                 workspace->rotation = 0.0f;

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/thumbnail_store.cpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -34,23 +34,25 @@
 #include "thumbnail_store.hpp"
 
 ThumbnailStore::ThumbnailStore(const std::string& filename)
+  : filename(filename)
 {
-  out.open();
 }
 
 ThumbnailStore::~ThumbnailStore()
 {
-  std::cout << "destroying ThumbnailStore" << std::endl;
 }
 
 void
 ThumbnailStore::store()
 {
+  //  std::ofstream out((filename + ".dat").c_str());
+  
 }
 
 void
 ThumbnailStore::retrieve()
 {
+  
 }
 
 /* EOF */

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/thumbnail_store.hpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -37,8 +37,8 @@
 class ThumbnailStore
 {
 private:
-  std::ofstream out;
-  
+  std::string filename;
+
 public:
   ThumbnailStore(const std::string& filename);
   ~ThumbnailStore();

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/workspace.cpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -110,7 +110,32 @@
     }
 }
 
+void 
+Workspace::layout_random()
+{
+  std::random_shuffle(images.begin(), images.end());
+  layout(4,3);
+}
+
+struct ImageSorter
+{
+  bool operator()(const Image* a, const Image* b) {
+    return a->url < b->url;
+  }
+};
+
 void
+Workspace::layout_sort(bool reverse)
+{
+  std::sort(images.begin(), images.end(), ImageSorter());
+  
+  if (reverse)
+    std::reverse(images.begin(), images.end());
+
+  layout(4,3);
+}
+
+void
 Workspace::layout(int aspect_w, int aspect_h)
 {
   int w = int(sqrt(aspect_w * images.size() / aspect_h));

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-12-04 15:25:17 UTC (rev 1579)
+++ trunk/griv/workspace.hpp	2007-12-04 17:31:30 UTC (rev 1580)
@@ -55,7 +55,8 @@
 
   int size() { return images.size(); }
   void layout(int w, int h);
-
+  void layout_random();
+  void layout_sort(bool reverse);
 };
 
 #endif



From grumbel at mail.berlios.de  Wed Dec  5 00:53:52 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 00:53:52 +0100
Subject: [Windstille-commit] r1581 - trunk/griv
Message-ID: <200712042353.lB4NrqFY014852@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 00:53:51 +0100 (Wed, 05 Dec 2007)
New Revision: 1581

Modified:
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
   trunk/griv/thumbnail_manager.cpp
Log:
- some twiddling, no real changes

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-12-04 17:31:30 UTC (rev 1580)
+++ trunk/griv/SConstruct	2007-12-04 23:53:51 UTC (rev 1581)
@@ -1,15 +1,19 @@
 # -*- python -*-
 
+# Thumbnail generation library
+libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])
+libepeg = libepeg_env.StaticLibrary('epeg', ['epeg/epeg_main.c'])
+
+# Shared code between Griv and Thumbgen
 libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"])
+libgriv_env.ParseConfig("sdl-config --libs --cflags")
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 
                                              'command_line.cpp',
                                              'jpeg.cpp',
                                              'file_entry_cache.cpp',
                                              'md5.cpp'])
 
-libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])
-libepeg = libepeg_env.StaticLibrary('epeg', ['epeg/epeg_main.c'])
-
+# Zoomable Image Viewer
 griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], 
                        LIBS=[libgriv, libepeg, 'SDL_image', 'jpeg', 'mhash', 'GL', 'GLU'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
@@ -25,12 +29,13 @@
                           'texture.cpp', 
                           'workspace.cpp'])
 
+# Offline Thumbnail generator
 thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
                            LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
 thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
 
-packer_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
-                           LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
-packer_env.Program('packer', ['packer.cpp'])
+# packer_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
+#                            LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
+# packer_env.Program('packer', ['packer.cpp'])
 
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-12-04 17:31:30 UTC (rev 1580)
+++ trunk/griv/TODO	2007-12-04 23:53:51 UTC (rev 1581)
@@ -22,6 +22,8 @@
   2) images without any thumbnails
   3) images close to the current view
 
+- rename thumbgen or make it part of griv
+
 Less Important:
 ===============
 

Modified: trunk/griv/file_entry_cache.cpp
===================================================================
--- trunk/griv/file_entry_cache.cpp	2007-12-04 17:31:30 UTC (rev 1580)
+++ trunk/griv/file_entry_cache.cpp	2007-12-04 23:53:51 UTC (rev 1581)
@@ -30,7 +30,27 @@
 #include "md5.hpp"
 #include <fstream>
 #include "file_entry_cache.hpp"
+
+SWSurfaceHandle
+FileEntry::get_thumbnail(int res)
+{
+  if (res == 0)
+    { // Load original
+      // Doesn't now URL!
+    }
+  else
+    { // Load Thumbnail
+    }
+  
+  return SWSurfaceHandle();
+}
 
+SWSurfaceHandle
+FileEntry::get_original()
+{
+  return SWSurfaceHandle();
+}
+
 FileEntryCache::FileEntryCache(const std::string& filename)
 {
   std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
@@ -117,7 +137,6 @@
       }
       
       entries[url_md5] = entry;
-
       return &entries[url_md5];
     }
   else

Modified: trunk/griv/file_entry_cache.hpp
===================================================================
--- trunk/griv/file_entry_cache.hpp	2007-12-04 17:31:30 UTC (rev 1580)
+++ trunk/griv/file_entry_cache.hpp	2007-12-04 23:53:51 UTC (rev 1581)
@@ -28,6 +28,7 @@
 
 #include <string>
 #include <map>
+#include "software_surface.hpp"
 
 struct ThumbnailEntry
 {
@@ -49,6 +50,9 @@
       thumbnails[N] -> (16 + 2^N)x(16 + 2^N)
    */
   std::vector<ThumbnailEntry> thumbnails;
+
+  SWSurfaceHandle get_thumbnail(int res);
+  SWSurfaceHandle get_original();
 };
 
 /** */
@@ -64,6 +68,8 @@
   
   void save(const std::string& filename) const;
 
+  /** returns NULL if the FileEntry isn't obtainable (file missing,
+      etc.) */
   const FileEntry* get_entry(const std::string& url);
 };
 

Modified: trunk/griv/thumbnail_manager.cpp
===================================================================
--- trunk/griv/thumbnail_manager.cpp	2007-12-04 17:31:30 UTC (rev 1580)
+++ trunk/griv/thumbnail_manager.cpp	2007-12-04 23:53:51 UTC (rev 1581)
@@ -107,9 +107,9 @@
   int w, h;
   unsigned char* data = 0;
   int   data_len = 0;
-  epeg_size_get(img, &w, &h);
+  epeg_size_get(img, &w, &h); // FIXME: Should use FileEntryCache instead
 
-  if (w > thumb_size || h > thumb_size)
+  if (w > thumb_size || h > thumb_size) 
     {
       epeg_quality_set(img, 80);
       epeg_thumbnail_comments_enable(img, 1);
@@ -122,7 +122,7 @@
       epeg_decode_colorspace_set(img, EPEG_RGB8);
 
       std::cout << "." << std::flush;
-      //std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
+      std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
 
       epeg_file_output_set(img, thumb_location.c_str());
       epeg_memory_output_set(img, &data, &data_len);



From grumbel at mail.berlios.de  Wed Dec  5 00:59:41 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 00:59:41 +0100
Subject: [Windstille-commit] r1582 - trunk/griv
Message-ID: <200712042359.lB4NxflU018789@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 00:59:41 +0100 (Wed, 05 Dec 2007)
New Revision: 1582

Modified:
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
Log:
- store full URL instead of MD5 in file.cache

Modified: trunk/griv/file_entry_cache.cpp
===================================================================
--- trunk/griv/file_entry_cache.cpp	2007-12-04 23:53:51 UTC (rev 1581)
+++ trunk/griv/file_entry_cache.cpp	2007-12-04 23:59:41 UTC (rev 1582)
@@ -64,7 +64,12 @@
         {
           FileEntry entry;
       
-          in.read(entry.url_md5,  sizeof(char) * 33);
+          uint16_t url_len;
+          in.read((char*)(&url_len), sizeof(uint16_t));
+          char url[url_len];
+          in.read(url,  url_len);
+          entry.url = url;
+
           in.read((char*)(&entry.mtime),        sizeof(entry.mtime));
           in.read((char*)(&entry.width),        sizeof(entry.width));
           in.read((char*)(&entry.height),       sizeof(entry.height));
@@ -80,7 +85,7 @@
             }
           
           // FIXME: Do error checking to avoid adding incomplete entries
-          entries[entry.url_md5] = entry;
+          entries[entry.url] = entry;
         }
     }
 }
@@ -101,7 +106,7 @@
         {
           const FileEntry& entry = i->second;
 
-          out.write(entry.url_md5,  sizeof(char) * 33);
+          out.write(entry.url.c_str(),  entry.url.length()+1);
           out.write((char*)(&entry.mtime),        sizeof(entry.mtime));
           out.write((char*)(&entry.width),        sizeof(entry.width));
           out.write((char*)(&entry.height),       sizeof(entry.height));
@@ -121,14 +126,12 @@
 const FileEntry*
 FileEntryCache::get_entry(const std::string& url)
 {
-  std::string url_md5 = MD5::md5_string(url);
-
-  Entries::const_iterator i = entries.find(url_md5);
+  Entries::const_iterator i = entries.find(url);
   if (i == entries.end())
     {
       FileEntry entry;
       try { 
-        strcpy(entry.url_md5, url_md5.c_str());
+        entry.url = url;
         entry.mtime = Filesystem::get_mtime(url.substr(7));
         JPEG::get_size(url.substr(7), entry.width, entry.height);
       } catch (std::exception& err) {
@@ -136,8 +139,8 @@
         return 0;
       }
       
-      entries[url_md5] = entry;
-      return &entries[url_md5];
+      entries[url] = entry;
+      return &entries[url];
     }
   else
     {

Modified: trunk/griv/file_entry_cache.hpp
===================================================================
--- trunk/griv/file_entry_cache.hpp	2007-12-04 23:53:51 UTC (rev 1581)
+++ trunk/griv/file_entry_cache.hpp	2007-12-04 23:59:41 UTC (rev 1582)
@@ -38,7 +38,7 @@
 
 struct FileEntry 
 {
-  char     url_md5[33]; // FIXME: Could save raw MD5 instead of string version
+  std::string url; // FIXME: Could save raw MD5 instead of string version
   uint32_t mtime;  // mtime of the file
   int      width;  // image width
   int      height; // image height



From grumbel at mail.berlios.de  Wed Dec  5 03:46:39 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 03:46:39 +0100
Subject: [Windstille-commit] r1583 - trunk/griv
Message-ID: <200712050246.lB52kdaI006209@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 03:46:38 +0100 (Wed, 05 Dec 2007)
New Revision: 1583

Modified:
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
Log:
- fixed file.cache writing, url len wasn't written

Modified: trunk/griv/file_entry_cache.cpp
===================================================================
--- trunk/griv/file_entry_cache.cpp	2007-12-04 23:59:41 UTC (rev 1582)
+++ trunk/griv/file_entry_cache.cpp	2007-12-05 02:46:38 UTC (rev 1583)
@@ -35,11 +35,8 @@
 FileEntry::get_thumbnail(int res)
 {
   if (res == 0)
-    { // Load original
-      // Doesn't now URL!
-    }
-  else
     { // Load Thumbnail
+      
     }
   
   return SWSurfaceHandle();
@@ -48,7 +45,7 @@
 SWSurfaceHandle
 FileEntry::get_original()
 {
-  return SWSurfaceHandle();
+  return SWSurfaceHandle(new SoftwareSurface(url.substr(7)));
 }
 
 FileEntryCache::FileEntryCache(const std::string& filename)
@@ -106,7 +103,9 @@
         {
           const FileEntry& entry = i->second;
 
-          out.write(entry.url.c_str(),  entry.url.length()+1);
+          uint16_t url_len = entry.url.length()+1;
+          out.write((char*)(&url_len),  sizeof(url_len));
+          out.write(entry.url.c_str(),  url_len);
           out.write((char*)(&entry.mtime),        sizeof(entry.mtime));
           out.write((char*)(&entry.width),        sizeof(entry.width));
           out.write((char*)(&entry.height),       sizeof(entry.height));

Modified: trunk/griv/file_entry_cache.hpp
===================================================================
--- trunk/griv/file_entry_cache.hpp	2007-12-04 23:59:41 UTC (rev 1582)
+++ trunk/griv/file_entry_cache.hpp	2007-12-05 02:46:38 UTC (rev 1583)
@@ -38,10 +38,10 @@
 
 struct FileEntry 
 {
-  std::string url; // FIXME: Could save raw MD5 instead of string version
-  uint32_t mtime;  // mtime of the file
-  int      width;  // image width
-  int      height; // image height
+  std::string url;    // FIXME: Could save raw MD5 instead of string version
+  uint32_t    mtime;  // mtime of the file
+  int         width;  // image width
+  int         height; // image height
   
   /** 
       thumbnails[0] -> 16x16



From grumbel at mail.berlios.de  Wed Dec  5 03:53:45 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 03:53:45 +0100
Subject: [Windstille-commit] r1584 - trunk/griv
Message-ID: <200712050253.lB52rj3a006411@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 03:53:44 +0100 (Wed, 05 Dec 2007)
New Revision: 1584

Modified:
   trunk/griv/file_entry_cache.cpp
   trunk/griv/file_entry_cache.hpp
   trunk/griv/griv.cpp
Log:
- added some FileCache debugging print
- fixed bug with garbage FileEntry being added

Modified: trunk/griv/file_entry_cache.cpp
===================================================================
--- trunk/griv/file_entry_cache.cpp	2007-12-05 02:46:38 UTC (rev 1583)
+++ trunk/griv/file_entry_cache.cpp	2007-12-05 02:53:44 UTC (rev 1584)
@@ -81,8 +81,9 @@
               entry.thumbnails.push_back(thumb_entry);
             }
           
-          // FIXME: Do error checking to avoid adding incomplete entries
-          entries[entry.url] = entry;
+          // FIXME: Do more error checking to avoid adding incomplete entries
+          if (!in.eof())
+            entries[entry.url] = entry;
         }
     }
 }
@@ -117,7 +118,7 @@
             {
               out.write((char*)(&entry.thumbnails[i].offset), sizeof(entry.thumbnails[i].offset));
               out.write((char*)(&entry.thumbnails[i].len),    sizeof(entry.thumbnails[i].len));
-            }        
+            }
         }
     }
 }
@@ -147,4 +148,17 @@
     }
 }
 
+void
+FileEntryCache::print()
+{
+  for(Entries::iterator i = entries.begin(); i != entries.end(); ++i)
+    {
+      std::cout << "  url: " << i->second.url << std::endl;
+      std::cout << "  mtime: " << i->second.mtime << std::endl;
+      std::cout << "  size: " << i->second.width << "x" << i->second.height << std::endl;
+      std::cout << "  thumbnails: " << i->second.thumbnails.size() << std::endl;
+      std::cout << "------------------------------------" << std::endl;
+    }
+}
+
 /* EOF */

Modified: trunk/griv/file_entry_cache.hpp
===================================================================
--- trunk/griv/file_entry_cache.hpp	2007-12-05 02:46:38 UTC (rev 1583)
+++ trunk/griv/file_entry_cache.hpp	2007-12-05 02:53:44 UTC (rev 1584)
@@ -71,6 +71,8 @@
   /** returns NULL if the FileEntry isn't obtainable (file missing,
       etc.) */
   const FileEntry* get_entry(const std::string& url);
+
+  void print();
 };
 
 #endif

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-05 02:46:38 UTC (rev 1583)
+++ trunk/griv/griv.cpp	2007-12-05 02:53:44 UTC (rev 1584)
@@ -93,6 +93,10 @@
               {
                 loader.process_job();
               }
+            else if (event.key.keysym.sym == SDLK_F10)
+              {
+                cache->print();
+              }
             else if (event.key.keysym.sym == SDLK_F11)
               {
                 Framebuffer::toggle_fullscreen();



From grumbel at mail.berlios.de  Wed Dec  5 04:02:02 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 04:02:02 +0100
Subject: [Windstille-commit] r1585 - trunk/griv
Message-ID: <200712050302.lB5322bD006730@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 04:02:01 +0100 (Wed, 05 Dec 2007)
New Revision: 1585

Modified:
   trunk/griv/image.cpp
   trunk/griv/thumbnail_manager.cpp
Log:
- fixed loading of originals that are smaller then their thumb

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-12-05 02:53:44 UTC (rev 1584)
+++ trunk/griv/image.cpp	2007-12-05 03:02:01 UTC (rev 1585)
@@ -152,7 +152,9 @@
 {
   if (!highquality)
     { // low quality
-      if (z < 32)
+      if (z >= original_width || z >= original_height)
+        return -1;
+      else if (z < 32)
         return 16;
       else if (z < 64)
         return 32;
@@ -165,16 +167,13 @@
       else if (z < 1024)
         return 512;
       else
-        {
-          if (z > original_width || z > original_height)
-            return -1;
-          else
-            return 1024;
-        }
+        return 1024;
     }
   else
     { // high quality
-      if (z <= 16)
+      if (z >= original_width || z >= original_height)
+        return -1;
+      else if (z <= 16)
         return 16;
       else if (z <= 32)
         return 32;

Modified: trunk/griv/thumbnail_manager.cpp
===================================================================
--- trunk/griv/thumbnail_manager.cpp	2007-12-05 02:53:44 UTC (rev 1584)
+++ trunk/griv/thumbnail_manager.cpp	2007-12-05 03:02:01 UTC (rev 1585)
@@ -105,8 +105,6 @@
     }
   
   int w, h;
-  unsigned char* data = 0;
-  int   data_len = 0;
   epeg_size_get(img, &w, &h); // FIXME: Should use FileEntryCache instead
 
   if (w > thumb_size || h > thumb_size) 
@@ -125,30 +123,14 @@
       std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
 
       epeg_file_output_set(img, thumb_location.c_str());
-      epeg_memory_output_set(img, &data, &data_len);
       epeg_encode(img);
     }
-      
-  epeg_close(img);
-
-  if (!data)
-    {
-      std::cout << "ThumbnailManager: generate: failed: " << filename << std::endl;
-    }
   else
     {
-      Ofstreams::iterator i = ofstreams.find(thumb_size);
-      if (i == ofstreams.end())
-        {
-          std::cout << "ThumbnailManager: Don't have cache store for " << thumb_size << std::endl;
-        }
-      else
-        {
-          
-        }
       
-      free(data);
     }
+      
+  epeg_close(img);
 }
 
 /* EOF */



From grumbel at mail.berlios.de  Wed Dec  5 13:53:44 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 5 Dec 2007 13:53:44 +0100
Subject: [Windstille-commit] r1586 - trunk/griv
Message-ID: <200712051253.lB5CriOG023034@sheep.berlios.de>

Author: grumbel
Date: 2007-12-05 13:53:43 +0100 (Wed, 05 Dec 2007)
New Revision: 1586

Modified:
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/workspace.cpp
Log:
- fixed rotations not causing instant screen updates
- fixed resource updates not being trickered while zooming

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-12-05 03:02:01 UTC (rev 1585)
+++ trunk/griv/griv.cpp	2007-12-05 12:53:43 UTC (rev 1586)
@@ -440,6 +440,7 @@
     old_res = -1;
     old_x_offset = -1;
     old_y_offset = -1;
+    old_rotation = 0;
     next_redraw = 0;
 
     loader.start_thread();
@@ -457,9 +458,12 @@
             if (workspace->res != old_res ||
                 old_x_offset != x_offset ||
                 old_y_offset != y_offset ||
+                old_rotation != workspace->rotation ||
                 (force_redraw && (next_redraw < SDL_GetTicks())) ||
                 workspace->reorganize)
               {
+                workspace->update_resources();
+
                 force_redraw = false;
 
                 Framebuffer::clear();
@@ -474,6 +478,7 @@
                 old_res = workspace->res;
                 old_x_offset = x_offset;
                 old_y_offset = y_offset;
+                old_rotation = workspace->rotation;
                 next_redraw = SDL_GetTicks() + 1000;
               }
             else

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-12-05 03:02:01 UTC (rev 1585)
+++ trunk/griv/griv.hpp	2007-12-05 12:53:43 UTC (rev 1586)
@@ -46,6 +46,7 @@
   float old_res;
   float old_x_offset;
   float old_y_offset;
+  float old_rotation;
   Uint32 next_redraw;
   Workspace* workspace;
   int zoom_mode;

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-12-05 03:02:01 UTC (rev 1585)
+++ trunk/griv/workspace.cpp	2007-12-05 12:53:43 UTC (rev 1586)
@@ -79,7 +79,7 @@
         need_redraw = true;
 
       Uint32 v = SDL_GetTicks() - t;
-      if (v > 50) // 50ms spend updating, so stop it
+      if (v > 30) // 30ms spend updating, so stop it
         {
           //std::cout << "Break away" << std::endl;
           return need_redraw;



