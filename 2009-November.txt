From grumbel at mail.berlios.de  Wed Nov 18 14:21:59 2009
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 18 Nov 2009 14:21:59 +0100
Subject: [Windstille-commit] r3294 - in trunk/windstille/src: app collision
	display editor engine hud input math navigation objects
	screen scripting tile util
Message-ID: <200911181321.nAIDLxPS008927@sheep.berlios.de>

Author: grumbel
Date: 2009-11-18 14:21:56 +0100 (Wed, 18 Nov 2009)
New Revision: 3294

Modified:
   trunk/windstille/src/app/config.hpp
   trunk/windstille/src/app/console.cpp
   trunk/windstille/src/collision/collision_engine.cpp
   trunk/windstille/src/display/shader_object.cpp
   trunk/windstille/src/display/software_surface.cpp
   trunk/windstille/src/editor/animation_widget.cpp
   trunk/windstille/src/editor/decal_object_model.cpp
   trunk/windstille/src/editor/editor_window.cpp
   trunk/windstille/src/editor/layer.cpp
   trunk/windstille/src/editor/layer_manager.cpp
   trunk/windstille/src/editor/object_model.cpp
   trunk/windstille/src/editor/object_selector.cpp
   trunk/windstille/src/editor/sector_model.cpp
   trunk/windstille/src/engine/script_manager.cpp
   trunk/windstille/src/hud/conversation.cpp
   trunk/windstille/src/hud/speech_manager.cpp
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/math/point.hpp
   trunk/windstille/src/math/rect.hpp
   trunk/windstille/src/navigation/navigation_graph.cpp
   trunk/windstille/src/objects/player.cpp
   trunk/windstille/src/screen/screen_manager.cpp
   trunk/windstille/src/screen/sprite2dview.cpp
   trunk/windstille/src/scripting/util.cpp
   trunk/windstille/src/tile/tile_factory.cpp
   trunk/windstille/src/util/field.hpp
Log:
Replaced some old style C casts with C++ casts


Modified: trunk/windstille/src/app/config.hpp
===================================================================
--- trunk/windstille/src/app/config.hpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/app/config.hpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -67,15 +67,16 @@
   T    data;
 
 public:
-  ConfigValue(const std::string& name_, const std::string& docstring_, bool do_save_, const T& data_)
-    : ConfigValueBase(name_, docstring_, do_save_),
-      data(data_)
+  ConfigValue(const std::string& name_, const std::string& docstring_, bool do_save_, const T& data_) :
+    ConfigValueBase(name_, docstring_, do_save_),
+    data(data_)
   {
     has_been_set = true;
   }
 
-  ConfigValue(const std::string& name_, const std::string& docstring_, bool do_save_)
-    : ConfigValueBase(name_, docstring_, do_save_)
+  ConfigValue(const std::string& name_, const std::string& docstring_, bool do_save_) :
+    ConfigValueBase(name_, docstring_, do_save_),
+    data()
   {    
     has_been_set = false;
   }

Modified: trunk/windstille/src/app/console.cpp
===================================================================
--- trunk/windstille/src/app/console.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/app/console.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -215,12 +215,12 @@
                 {
                   if (cursor_pos == int(command_line.size()))
                     {
-                      command_line += (char)(*i).keyboard.code;
+                      command_line += static_cast<char>((*i).keyboard.code);
                       cursor_pos += 1;
                     }
                   else
                     {
-                      command_line.insert(cursor_pos, std::string(1, (char)(*i).keyboard.code));
+                      command_line.insert(cursor_pos, std::string(1, static_cast<char>((*i).keyboard.code)));
                       cursor_pos += 1;
                     }
                 }

Modified: trunk/windstille/src/collision/collision_engine.cpp
===================================================================
--- trunk/windstille/src/collision/collision_engine.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/collision/collision_engine.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -131,7 +131,7 @@
 
 int c_roundup(float f)
 {
-  int i=(int)f;
+  int i= static_cast<int>(f);
   if(f>i)
     i++;
   return i;
@@ -511,11 +511,11 @@
 
 int get_integer(float f, float direction)
 {
-  int result=(int)f;
+  int result=static_cast<int>(f);
 
   if(direction < 0)
     {
-      result = int (f);
+      result = static_cast<int>(f);
       if (result > f)
 	--result;
     }

Modified: trunk/windstille/src/display/shader_object.cpp
===================================================================
--- trunk/windstille/src/display/shader_object.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/display/shader_object.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -29,7 +29,7 @@
   size_t block_size = 4096;
   size_t size = block_size;
   size_t true_size = 0;
-  GLchar* str = (char*)(malloc(size));
+  GLchar* str = static_cast<char*>(malloc(size));
   FILE* f = fopen(filename, "r");
   if (!f)
     {
@@ -41,9 +41,9 @@
       while ((true_size += fread(str, sizeof(GLchar), 4096, f)) == 4096)
         {
           size += block_size;
-          str = (GLchar*)realloc(str, size);
+          str = static_cast<GLchar*>(realloc(str, size));
         }
-      str = (GLchar*)realloc(str, true_size+1);
+      str = static_cast<GLchar*>(realloc(str, true_size+1));
       str[true_size] = '\0';
     }
 
@@ -115,7 +115,7 @@
 
   if (infologLength > 0)
     {
-      infoLog = (GLchar*)malloc(infologLength);
+      infoLog = static_cast<GLchar*>(malloc(infologLength));
       if (infoLog == NULL)
         {
           printf("ERROR: Could not allocate InfoLog buffer\n");

Modified: trunk/windstille/src/display/software_surface.cpp
===================================================================
--- trunk/windstille/src/display/software_surface.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/display/software_surface.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -158,7 +158,7 @@
     {
       if (get_bits_per_pixel() == 32)
         {
-          uint8_t* pixels = (uint8_t*)impl->surface->pixels;
+          uint8_t* pixels = static_cast<uint8_t*>(impl->surface->pixels);
           
           return pixels[y * impl->surface->pitch + x*4 + 3] > 128;
         }

Modified: trunk/windstille/src/editor/animation_widget.cpp
===================================================================
--- trunk/windstille/src/editor/animation_widget.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/animation_widget.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -35,6 +35,7 @@
 AnimationWidget::AnimationWidget(EditorWindow& editor) :
   hadjustment(50, 0, 100),
   vadjustment(50, 0, 100),
+  m_hbox(),
   hruler(),
   scrolled(),
   treeview(),

Modified: trunk/windstille/src/editor/decal_object_model.cpp
===================================================================
--- trunk/windstille/src/editor/decal_object_model.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/decal_object_model.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -54,7 +54,7 @@
   int map_type = 0;
   reader.get("path", path);
   reader.get("type", map_type);
-  type = (MapType)map_type;
+  type = static_cast<MapType>(map_type);
 
   reader.get("scale", scale);
   reader.get("angle", angle);

Modified: trunk/windstille/src/editor/editor_window.cpp
===================================================================
--- trunk/windstille/src/editor/editor_window.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/editor_window.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -353,13 +353,13 @@
   grid_layer->set_active(false);
 
   action_group->add(toggle_color_layer,
-                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_color_layer, (unsigned int)SceneContext::COLORMAP));
+                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_color_layer, static_cast<unsigned int>(SceneContext::COLORMAP)));
   action_group->add(toggle_light_layer,
-                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_light_layer, (unsigned int)SceneContext::LIGHTMAP));
+                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_light_layer, static_cast<unsigned int>(SceneContext::LIGHTMAP)));
   action_group->add(toggle_highlight_layer,
-                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_highlight_layer, (unsigned int)SceneContext::HIGHLIGHTMAP));
+                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_highlight_layer, static_cast<unsigned int>(SceneContext::HIGHLIGHTMAP)));
   action_group->add(toggle_control_layer,
-                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_control_layer, (unsigned int)SceneContext::CONTROLMAP));
+                    sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_render_layer), toggle_control_layer, static_cast<unsigned int>(SceneContext::CONTROLMAP)));
   action_group->add(background_layer,
                     sigc::bind(sigc::mem_fun(*this, &EditorWindow::toggle_background_layer), background_layer));
   action_group->add(visible_layer,

Modified: trunk/windstille/src/editor/layer.cpp
===================================================================
--- trunk/windstille/src/editor/layer.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/layer.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -72,7 +72,7 @@
 void
 Layer::sync(const Gtk::TreeModel::Row& row)
 {
-  name    = ((Glib::ustring)row[LayerManagerColumns::instance().name]).raw();
+  name    = static_cast<Glib::ustring>(row[LayerManagerColumns::instance().name]).raw();
   visible = row[LayerManagerColumns::instance().visible];
   locked  = row[LayerManagerColumns::instance().locked];
 }

Modified: trunk/windstille/src/editor/layer_manager.cpp
===================================================================
--- trunk/windstille/src/editor/layer_manager.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/layer_manager.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -149,7 +149,7 @@
       {
         EditorWindow::current()->on_lock_all(true);
         (*it)[LayerManagerColumns::instance().locked] = false;
-        ((LayerHandle)(*it)[LayerManagerColumns::instance().layer])->sync(*it);
+        static_cast<LayerHandle>((*it)[LayerManagerColumns::instance().layer])->sync(*it);
       }
     }
   }

Modified: trunk/windstille/src/editor/object_model.cpp
===================================================================
--- trunk/windstille/src/editor/object_model.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/object_model.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -348,6 +348,11 @@
     case kPosition:
       value_out = rel_pos;
       break;
+
+    case kColor:
+    case kRotation:
+    case kScale:
+      assert(!"Not implemented");
   }
 }
 

Modified: trunk/windstille/src/editor/object_selector.cpp
===================================================================
--- trunk/windstille/src/editor/object_selector.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/object_selector.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -218,8 +218,8 @@
       }
 
       // Scale pixbuf to icon size while keeping aspect ratio intact
-      double x_scale = (double)size / pixbuf->get_width();
-      double y_scale = (double)size / pixbuf->get_height();
+      double x_scale = static_cast<double>(size) / pixbuf->get_width();
+      double y_scale = static_cast<double>(size) / pixbuf->get_height();
 
       if (x_scale * pixbuf->get_width() < min_size)
         x_scale = min_size / pixbuf->get_width();

Modified: trunk/windstille/src/editor/sector_model.cpp
===================================================================
--- trunk/windstille/src/editor/sector_model.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/editor/sector_model.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -41,11 +41,11 @@
 
 LayerManagerColumns* LayerManagerColumns::instance_ = 0;
 
-SectorModel::SectorModel(const std::string& filename)
-  : nav_graph(new NavigationGraphModel(*this)),
-    layer_tree(Gtk::ListStore::create(LayerManagerColumns::instance())),
-    m_timeline(new Timeline()),
-    ambient_color()
+SectorModel::SectorModel(const std::string& filename) :
+  nav_graph(new NavigationGraphModel(*this)),
+  layer_tree(Gtk::ListStore::create(LayerManagerColumns::instance())),
+  m_timeline(new Timeline()),
+  ambient_color()
 {
   register_callbacks();
   SectorModelBuilder(filename, *this);
@@ -155,7 +155,7 @@
   else
   { 
     Gtk::ListStore::iterator it = layer_tree->get_iter(path);
-    ((LayerHandle)(*it)[LayerManagerColumns::instance().layer])->add(object);
+    static_cast<LayerHandle>((*it)[LayerManagerColumns::instance().layer])->add(object);
   }
 }
 
@@ -397,21 +397,21 @@
 {
   bool v;
 
-  PropSetFunctor(bool v_)
-    : v(v_)
+  PropSetFunctor(bool v_) :
+    v(v_)
   {}
 
   bool set_visible(const Gtk::TreeModel::iterator& it)
   {
     (*it)[LayerManagerColumns::instance().visible] = v;
-    ((LayerHandle)(*it)[LayerManagerColumns::instance().layer])->sync(*it);
+    static_cast<LayerHandle>((*it)[LayerManagerColumns::instance().layer])->sync(*it);
     return false;
   }
   
   bool set_locked(const Gtk::TreeModel::iterator& it)
   {
     (*it)[LayerManagerColumns::instance().locked] = v;
-    ((LayerHandle)(*it)[LayerManagerColumns::instance().layer])->sync(*it);
+    static_cast<LayerHandle>((*it)[LayerManagerColumns::instance().layer])->sync(*it);
     return false;
   }
 };

Modified: trunk/windstille/src/engine/script_manager.cpp
===================================================================
--- trunk/windstille/src/engine/script_manager.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/engine/script_manager.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -55,7 +55,7 @@
   va_list arglist; 
   va_start(arglist, str); 
   vsprintf(buf, str, arglist);
-  ConsoleLog << (char*)buf;
+  ConsoleLog << static_cast<char*>(buf);
   puts(buf);
   va_end(arglist); 
 }

Modified: trunk/windstille/src/hud/conversation.cpp
===================================================================
--- trunk/windstille/src/hud/conversation.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/hud/conversation.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -64,7 +64,7 @@
 
   float segment = 360.0f / static_cast<float>(choices.size());
 
-  for(int i = 0; i < (int)choices.size(); ++i)
+  for(int i = 0; i < static_cast<int>(choices.size()); ++i)
     { // FIXME:
       Vector2f offset(0.0f, 1.0f);
       offset = offset.rotate(math::deg2rad(segment * static_cast<float>(i)) - math::pi/2.0f);

Modified: trunk/windstille/src/hud/speech_manager.cpp
===================================================================
--- trunk/windstille/src/hud/speech_manager.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/hud/speech_manager.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -135,7 +135,7 @@
         }
     }
 
-  speeches.erase(std::remove(speeches.begin(), speeches.end(), (Speech*)0),
+  speeches.erase(std::remove(speeches.begin(), speeches.end(), static_cast<Speech*>(0)),
                  speeches.end());
 }
 

Modified: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/input/wiimote.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -135,20 +135,20 @@
           }
 
         std::cout << "Wiimote Calibration: "
-                  << (int)wiimote_zero.x << ", "
-                  << (int)wiimote_zero.x << ", "
-                  << (int)wiimote_zero.x << " - "
-                  << (int)wiimote_one.x << ", "
-                  << (int)wiimote_one.x << ", "
-                  << (int)wiimote_one.x << std::endl;
+                  << static_cast<int>(wiimote_zero.x) << ", "
+                  << static_cast<int>(wiimote_zero.x) << ", "
+                  << static_cast<int>(wiimote_zero.x) << " - "
+                  << static_cast<int>(wiimote_one.x) << ", "
+                  << static_cast<int>(wiimote_one.x) << ", "
+                  << static_cast<int>(wiimote_one.x) << std::endl;
 
         std::cout << "Nunchuk Calibration: "
-                  << (int)nunchuk_zero.x << ", "
-                  << (int)nunchuk_zero.x << ", "
-                  << (int)nunchuk_zero.x << " - "
-                  << (int)nunchuk_one.x << ", "
-                  << (int)nunchuk_one.x << ", "
-                  << (int)nunchuk_one.x << std::endl;
+                  << static_cast<int>(nunchuk_zero.x) << ", "
+                  << static_cast<int>(nunchuk_zero.x) << ", "
+                  << static_cast<int>(nunchuk_zero.x) << " - "
+                  << static_cast<int>(nunchuk_one.x) << ", "
+                  << static_cast<int>(nunchuk_one.x) << ", "
+                  << static_cast<int>(nunchuk_one.x) << std::endl;
           
       }
     }
@@ -169,7 +169,7 @@
 {
   if (m_led_state != led_state)
     {
-      //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
+      //std::cout << "Wiimote: " << static_cast<int>(m_led_state) << std::endl;
       m_led_state = led_state;
 
       if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {

Modified: trunk/windstille/src/math/point.hpp
===================================================================
--- trunk/windstille/src/math/point.hpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/math/point.hpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -86,15 +86,17 @@
 
     // Because MSVC sucks ass wrt standards compliance, it gets it own special function calls
 #ifdef _MSC_VER
-    const float c = (float) sqrt((float)r.x*(float)r.x + (float)r.y*(float)r.y);
-    const float nw = (float)(atan2((float)r.y, (float)r.x) + ((angle + 180) * math::pi / 180));
+    const float c = static_cast<float>sqrt(static_cast<float>(r.x)*static_cast<float>(r.x) + 
+                                 static_cast<float>(r.y)*static_cast<float>(r.y));
+    const float nw = static_cast<float>(atan2(static_cast<float>(r.y), static_cast<float>(r.x)) + ((angle + 180) * math::pi / 180));
     r.x = (int)((sin(1.5 * M_PI - nw) * c) + 0.5) + hotspot.x;
     r.y = -(int)((sin(nw) * c) + 0.5) + hotspot.y;
 #else
-    const float c = (float) std::sqrt((float)r.x*(float)r.x + (float)r.y*(float)r.y);
-    const float nw = (float)(std::atan2((float)r.y, (float)r.x) + ((angle + 180) * M_PI / 180));
-    r.x = (int)((std::sin(1.5 * M_PI - nw) * c) + 0.5) + hotspot.x;
-    r.y = -(int)((std::sin(nw) * c) + 0.5) + hotspot.y;
+    const float c = static_cast<float>(std::sqrt(static_cast<float>(r.x)*static_cast<float>(r.x) + 
+                                                 static_cast<float>(r.y)*static_cast<float>(r.y)));
+    const float nw = static_cast<float>(std::atan2(static_cast<float>(r.y), static_cast<float>(r.x)) + ((angle + 180) * M_PI / 180));
+    r.x = static_cast<int>((std::sin(1.5 * M_PI - nw) * c) + 0.5) + hotspot.x;
+    r.y = -static_cast<int>((std::sin(nw) * c) + 0.5) + hotspot.y;
 #endif
 
     return r;

Modified: trunk/windstille/src/math/rect.hpp
===================================================================
--- trunk/windstille/src/math/rect.hpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/math/rect.hpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -235,10 +235,10 @@
   {}
 
   Rectf(const Rect& rect)
-    : left((float)rect.left), 
-      top((float)rect.top), 
-      right((float)rect.right), 
-      bottom((float)rect.bottom)
+    : left(static_cast<float>(rect.left)), 
+      top(static_cast<float>(rect.top)), 
+      right(static_cast<float>(rect.right)), 
+      bottom(static_cast<float>(rect.bottom))
   {}
 
   Rectf(float new_left, float new_top, float new_right, float new_bottom)

Modified: trunk/windstille/src/navigation/navigation_graph.cpp
===================================================================
--- trunk/windstille/src/navigation/navigation_graph.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/navigation/navigation_graph.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -83,7 +83,7 @@
         }
     }
 
-  Edges::iterator new_end = std::remove(edges.begin(), edges.end(), (Edge*)0);
+  Edges::iterator new_end = std::remove(edges.begin(), edges.end(), static_cast<Edge*>(0));
   if (new_end != edges.end())
     { 
       edges.erase(new_end, edges.end());
@@ -392,7 +392,7 @@
       writer.start_section("edge");
       writer.write("node1", ptr2id[(*i)->get_node1()]);
       writer.write("node2", ptr2id[(*i)->get_node2()]);
-      writer.write("properties", (int)(*i)->get_properties());
+      writer.write("properties", static_cast<int>((*i)->get_properties()));
       writer.end_section();
     }
   writer.end_section();

Modified: trunk/windstille/src/objects/player.cpp
===================================================================
--- trunk/windstille/src/objects/player.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/objects/player.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -76,7 +76,7 @@
 
   contact = 0;
   weapon.reset(new Pistol());
-  laser_pointer = ((Pistol*)weapon.get())->laser_pointer;
+  laser_pointer = (static_cast<Pistol*>(weapon.get()))->laser_pointer;
 
   m_drawable.reset(new Sprite3DDrawable(sprite, Vector2f(200, 600), 100.0f, Matrix::identity()));
   Sector::current()->get_scene_graph().add_drawable(m_drawable);

Modified: trunk/windstille/src/screen/screen_manager.cpp
===================================================================
--- trunk/windstille/src/screen/screen_manager.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/screen/screen_manager.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -31,20 +31,21 @@
 #include "sound/sound_manager.hpp"
 
 
-ScreenManager::ScreenManager()
-  : screens(),
-    screen_action(NONE),
-    screen_screen(),
-    overlay_screens(),
-    overlay_screen_action(NONE),
-    overlay_screen_screen(),
-    ticks(0),
-    time_counter(0),
-    frame_counter(0),
-    last_fps(0),
-    overlap_delta(0),
-    do_quit(false),
-    show_controller_help_window(false)
+ScreenManager::ScreenManager() :
+  screens(),
+  screen_action(NONE),
+  screen_screen(),
+  overlay_screens(),
+  overlay_screen_action(NONE),
+  overlay_screen_screen(),
+  ticks(0),
+  time_counter(0),
+  frame_counter(0),
+  last_fps(0),
+  overlap_delta(0),
+  do_quit(false),
+  show_controller_help_window(false),
+  controller_help_window()
 {
 }
 

Modified: trunk/windstille/src/screen/sprite2dview.cpp
===================================================================
--- trunk/windstille/src/screen/sprite2dview.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/screen/sprite2dview.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -252,7 +252,7 @@
       display_time = 0;
     }
 
-    index = (unsigned int)(index + i) % directory.size();
+    index = static_cast<unsigned int>(index + i) % directory.size();
 
     std::vector<Pathname> dir;
 
@@ -276,7 +276,7 @@
         std::cout << "Error: " << e.what() << std::endl;
         std::cout << "Removing '" << directory[index] << "' from the list" << std::endl;
         directory.erase(directory.begin() + index);
-        index = (unsigned int)(index) % directory.size();
+        index = static_cast<unsigned int>(index) % directory.size();
         retry = true;
       }
     } 

Modified: trunk/windstille/src/scripting/util.cpp
===================================================================
--- trunk/windstille/src/scripting/util.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/scripting/util.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -66,7 +66,7 @@
       case OT_BOOL: {
         SQBool boolean;
         sq_getbool(v, -1, &boolean);
-        entries.push_back(new lisp::Lisp((bool) boolean));
+        entries.push_back(new lisp::Lisp(static_cast<bool>(boolean)));
         break;
       }
       case OT_ARRAY:

Modified: trunk/windstille/src/tile/tile_factory.cpp
===================================================================
--- trunk/windstille/src/tile/tile_factory.cpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/tile/tile_factory.cpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -156,7 +156,7 @@
 Tile*
 TileFactory::create(int id)
 {
-  if(id < 0 || id >= (int) tiles.size())
+  if(id < 0 || id >= static_cast<int>(tiles.size()))
     {
       return 0;
     }

Modified: trunk/windstille/src/util/field.hpp
===================================================================
--- trunk/windstille/src/util/field.hpp	2009-10-06 16:43:47 UTC (rev 3293)
+++ trunk/windstille/src/util/field.hpp	2009-11-18 13:21:56 UTC (rev 3294)
@@ -77,13 +77,13 @@
 
   T& operator() (int x, int y) 
   {
-    assert (x >= 0 || x < (int) width || y >= 0 || y < (int) height);
+    assert (x >= 0 || x < width || y >= 0 || y < height);
     return vec [width*y + x];
   }
 
   const T& operator() (int x, int y) const
   {
-    assert (x >= 0 || x < (int) width || y >= 0 || y < (int) height);
+    assert (x >= 0 || x < width || y >= 0 || y < height);
     return vec [width*y + x];
   }
   



