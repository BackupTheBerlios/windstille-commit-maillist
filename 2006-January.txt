From grumbel at berlios.de  Sun Jan  1 00:46:27 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 1 Jan 2006 00:46:27 +0100
Subject: [Windstille-commit] r1177 - in facebuilder: data/hair data/head examples
Message-ID: <200512312346.jBVNkRHC008933@sheep.berlios.de>

Author: grumbel
Date: 2006-01-01 00:46:13 +0100 (Sun, 01 Jan 2006)
New Revision: 1177

Added:
   facebuilder/data/hair/0033.png
   facebuilder/data/hair/0034.png
   facebuilder/data/hair/0035.png
   facebuilder/data/head/0015.png
   facebuilder/data/head/0016.png
Modified:
   facebuilder/examples/male11.xml
Log:
- more faceparts

Added: facebuilder/data/hair/0033.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/hair/0033.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/hair/0034.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/hair/0034.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/hair/0035.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/hair/0035.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/head/0015.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/head/0015.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/head/0016.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/head/0016.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Modified: facebuilder/examples/male11.xml
===================================================================
--- facebuilder/examples/male11.xml	2005-12-31 03:39:12 UTC (rev 1176)
+++ facebuilder/examples/male11.xml	2005-12-31 23:46:13 UTC (rev 1177)
@@ -1,62 +1,56 @@
 <face>
+  <head>
+    <filename>data/head/0016.png</filename>
+    <offset><x>-1.0</x><y>-4.0</y></offset>
+    <scale>0.942322334547044</scale>
+    <rotation>0.0</rotation>
+  </head>
+  <ear>
+    <filename>data/ear/0001.png</filename>
+    <offset><x>79.0</x><y>20.0</y></offset>
+    <scale>1.0</scale>
+    <rotation>0.0</rotation>
+  </ear>
   <forehead>
     <filename>data/forehead/0000.png</filename>
-    <offset><x>0</x><y>-60.0</y></offset>
+    <offset><x>-1</x><y>-62</y></offset>
     <scale>1.0</scale>
     <rotation>0.0</rotation>
   </forehead>
   <mouth>
-    <filename>data/mouth/0009.png</filename>
-    <offset><x>0.0</x><y>73.0</y></offset>
-    <scale>0.804263039093289</scale>
-    <rotation>0.0</rotation>
+    <filename>data/mouth/0010.png</filename>
+    <offset><x>1.0</x><y>76.0</y></offset>
+    <scale>1.0</scale>
+    <rotation>0</rotation>
   </mouth>
   <hair>
-    <filename>data/hair/0028.png</filename>
-    <offset><x>1.0</x><y>3.0</y></offset>
+    <filename>data/hair/0029.png</filename>
+    <offset><x>0</x><y>6.0</y></offset>
     <scale>0.743014729988519</scale>
-    <rotation>0.0</rotation>
+    <rotation>0</rotation>
   </hair>
   <mouthfold>
     <filename>data/mouthfold/0000.png</filename>
-    <offset><x>30</x><y>67.0</y></offset>
+    <offset><x>29</x><y>70</y></offset>
     <scale>1.0</scale>
     <rotation>0.0</rotation>
   </mouthfold>
   <eye>
-    <filename>data/eye/0005.png</filename>
-    <offset><x>33.0</x><y>-7.0</y></offset>
-    <scale>1.0</scale>
-    <rotation>0.0</rotation>
+    <filename>data/eye/0017.png</filename>
+    <offset><x>32.0</x><y>-2.0</y></offset>
+    <scale>0.923845426026514</scale>
+    <rotation>0</rotation>
   </eye>
   <eyebrow>
-    <filename>data/eyebrow/0005.png</filename>
-    <offset><x>37.0</x><y>-28.0</y></offset>
+    <filename>data/eyebrow/0001.png</filename>
+    <offset><x>37.0</x><y>-25.0</y></offset>
     <scale>1.0404</scale>
     <rotation>0.0</rotation>
   </eyebrow>
   <nose>
-    <filename>data/nose/0010.png</filename>
-    <offset><x>0.0</x><y>20.0</y></offset>
-    <scale>1.061208</scale>
-    <rotation>0</rotation>
-  </nose>
-  <glasses>
-    <filename>data/glasses/0010.png</filename>
-    <offset><x>1.0</x><y>-2.0</y></offset>
-    <scale>1.0</scale>
+    <filename>data/nose/0009.png</filename>
+    <offset><x>0.0</x><y>25.0</y></offset>
+    <scale>0.905730809829916</scale>
     <rotation>0.0</rotation>
-  </glasses>
-  <head>
-    <filename>data/head/0013.png</filename>
-    <offset><x>0</x><y>0.0</y></offset>
-    <scale>0.942322334547044</scale>
-    <rotation>0.0</rotation>
-  </head>
-  <ear>
-    <filename>data/ear/0001.png</filename>
-    <offset><x>84.0</x><y>15.0</y></offset>
-    <scale>1.0</scale>
-    <rotation>0</rotation>
-  </ear>
+  </nose>
 </face>



From grumbel at berlios.de  Sun Jan  1 03:35:17 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 1 Jan 2006 03:35:17 +0100
Subject: [Windstille-commit] r1178 - in facebuilder/data: eye head nose
Message-ID: <200601010235.k012ZHIK023480@sheep.berlios.de>

Author: grumbel
Date: 2006-01-01 03:34:59 +0100 (Sun, 01 Jan 2006)
New Revision: 1178

Added:
   facebuilder/data/eye/0020.png
   facebuilder/data/eye/0021.png
   facebuilder/data/eye/0022.png
   facebuilder/data/eye/0023.png
   facebuilder/data/head/0017.png
   facebuilder/data/nose/0011.png
Log:
- more faceparts

Added: facebuilder/data/eye/0020.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/eye/0020.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/eye/0021.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/eye/0021.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/eye/0022.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/eye/0022.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/eye/0023.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/eye/0023.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/head/0017.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/head/0017.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: facebuilder/data/nose/0011.png
===================================================================
(Binary files differ)


Property changes on: facebuilder/data/nose/0011.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From grumbel at berlios.de  Sun Jan  1 22:51:02 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 1 Jan 2006 22:51:02 +0100
Subject: [Windstille-commit] r1179 - facebuilder
Message-ID: <200601012151.k01Lp2gc008090@sheep.berlios.de>

Author: grumbel
Date: 2006-01-01 22:51:02 +0100 (Sun, 01 Jan 2006)
New Revision: 1179

Modified:
   facebuilder/face_part.rb
Log:
fixed crash due to uninited variable

Modified: facebuilder/face_part.rb
===================================================================
--- facebuilder/face_part.rb	2006-01-01 02:34:59 UTC (rev 1178)
+++ facebuilder/face_part.rb	2006-01-01 21:51:02 UTC (rev 1179)
@@ -103,7 +103,10 @@
     pathname = "data/" + type.to_s + "/"
     files = Dir.new(pathname).to_a[2..-1].grep(/\.png$/)
     
-    file = File::basename(@filename)
+    if @filename then 
+      file = File::basename(@filename)
+    end
+
     index = 0
 
     files.each_with_index { |obj, i|



From grumbel at berlios.de  Thu Jan  5 19:32:22 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 19:32:22 +0100
Subject: [Windstille-commit] r1180 - in trunk/src: . gui input lisp sprite3d squirrel squirrel/include squirrel/sqstdlib squirrel/squirrel tinygettext
Message-ID: <200601051832.k05IWMYE024684@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 19:32:18 +0100 (Thu, 05 Jan 2006)
New Revision: 1180

Added:
   trunk/src/input/controller_description.cpp
   trunk/src/input/controller_description.hpp
Modified:
   trunk/src/SConscript
   trunk/src/controller_def.cpp
   trunk/src/controller_def.hpp
   trunk/src/gui/
   trunk/src/input/Jamfile
   trunk/src/input/input_configurator.cpp
   trunk/src/input/input_manager_sdl.cpp
   trunk/src/lisp/
   trunk/src/sprite3d/
   trunk/src/sprite3dview.cpp
   trunk/src/squirrel/
   trunk/src/squirrel/include/
   trunk/src/squirrel/sqstdlib/
   trunk/src/squirrel/squirrel/
   trunk/src/tinygettext/
   trunk/src/windstille_main.cpp
Log:
- moved ControllerDef into input/ directory

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/SConscript	2006-01-05 18:32:18 UTC (rev 1180)
@@ -46,7 +46,6 @@
 'command_line.cpp',
 'command_line_generic.cpp',
 'console.cpp',
-'controller_def.cpp',
 'controller_help_window.cpp',
 'conversation.cpp',
 'dialog_manager.cpp',
@@ -122,6 +121,7 @@
 'gui/tab_component.cpp',
 'gui/text_view.cpp',
 'input/controller.cpp',
+'input/controller_description.cpp',
 'input/input_configurator.cpp',
 'input/input_manager.cpp',
 'input/input_manager_impl.cpp',

Modified: trunk/src/controller_def.cpp
===================================================================
--- trunk/src/controller_def.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/controller_def.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -17,73 +17,8 @@
 //  along with this program; if not, write to the Free Software
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-#include <stdexcept>
 #include "controller_def.hpp"
 
-ControllerDef::ControllerDef()
-{
-  add_button("primary-button",   PRIMARY_BUTTON);
-  add_button("secondary-button", SECONDARY_BUTTON);
-  add_button("tertiary-button",  TERTIARY_BUTTON);
+ControllerDescription controller_description;
 
-  add_button("pda-button", PDA_BUTTON);
-  add_button("inventory-button", INVENTORY_BUTTON);
-
-  add_button("aim-button",       AIM_BUTTON);
-  add_button("pause-button",     PAUSE_BUTTON);
-
-  add_axis("x-axis", X_AXIS);
-  add_axis("y-axis", Y_AXIS);
-}
-
-ControllerDef::~ControllerDef()
-{
-}
-
-void
-ControllerDef::add_button(const std::string& name, int id)
-{
-  InputEventDefinition event;
-
-  event.type = BUTTON_EVENT;
-  event.name = name;
-  event.id   = id;
-
-  str_to_event[event.name] = event;
-  id_to_event[event.id]    = event;
-}
-
-void
-ControllerDef::add_axis  (const std::string& name, int id)
-{
-  InputEventDefinition event;
-
-  event.type = AXIS_EVENT;
-  event.name = name;
-  event.id   = id;
-
-  str_to_event[event.name] = event;
-  id_to_event[event.id]    = event;
-}
-
-const InputEventDefinition&
-ControllerDef::get_definition(int id) const
-{
-  std::map<int, InputEventDefinition>::const_iterator i = id_to_event.find(id);
-  if (i == id_to_event.end())
-    throw std::runtime_error("Unknown event id");
-
-  return i->second;
-}
-
-const InputEventDefinition&
-ControllerDef::get_definition(const std::string& name) const
-{
-  std::map<std::string, InputEventDefinition>::const_iterator i = str_to_event.find(name);
-  if (i == str_to_event.end())
-    throw std::runtime_error("Unknown event str");
-
-  return i->second;
-}
-
 /* EOF */

Modified: trunk/src/controller_def.hpp
===================================================================
--- trunk/src/controller_def.hpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/controller_def.hpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -23,12 +23,16 @@
 #include <map>
 #include <string>
 #include "input/input_event.hpp"
+#include "input/controller_description.hpp"
 
 enum InputEventName
   { 
     X_AXIS, // used to run left/right
     Y_AXIS,  // used to aim up/down
 
+    X2_AXIS,
+    Y2_AXIS, 
+
     PRIMARY_BUTTON,   // used to ok a dialog or for running
     SECONDARY_BUTTON, // used to cancel a dialog or for jumping
     TERTIARY_BUTTON,  // used to cancel a dialog or for jumping
@@ -47,35 +51,8 @@
 #define OK_BUTTON     PRIMARY_BUTTON
 #define CANCEL_BUTTON SECONDARY_BUTTON
 
-struct InputEventDefinition 
-{
-  InputEventType type;
-  int            id;
-  std::string    name;
-};
+extern ControllerDescription controller_description;
 
-/** */
-class ControllerDef
-{
-private:
-  std::map<std::string, InputEventDefinition> str_to_event;
-  std::map<int,         InputEventDefinition> id_to_event;
-
-public:
-  ControllerDef();
-  ~ControllerDef();
-
-  void add_button(const std::string& name, int id);
-  void add_axis  (const std::string& name, int id); 
-
-  int get_button_count() const;
-  int get_axis_count() const;
-  int get_keyboard_count() const;
-
-  const InputEventDefinition& get_definition(int id) const;
-  const InputEventDefinition& get_definition(const std::string& name) const;
-};
-
 #endif
 
 /* EOF */


Property changes on: trunk/src/gui
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache


Modified: trunk/src/input/Jamfile
===================================================================
--- trunk/src/input/Jamfile	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/input/Jamfile	2006-01-05 18:32:18 UTC (rev 1180)
@@ -3,6 +3,8 @@
 sources =
     controller.cpp
     controller.hpp
+    controller_description.cpp
+    controller_description.hpp
     input_event.hpp
     input_manager_sdl.cpp
     input_manager_sdl.hpp

Added: trunk/src/input/controller_description.cpp
===================================================================
--- trunk/src/input/controller_description.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/input/controller_description.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -0,0 +1,84 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <stdexcept>
+#include "controller_description.hpp"
+
+
+ControllerDescription::ControllerDescription()
+{
+}
+
+ControllerDescription::~ControllerDescription()
+{
+}
+
+void
+ControllerDescription::add_button(const std::string& name, int id)
+{
+  InputEventDefinition event;
+
+  event.type = BUTTON_EVENT;
+  event.name = name;
+  event.id   = id;
+
+  str_to_event[event.name] = event;
+  id_to_event[event.id]    = event;
+}
+
+void
+ControllerDescription::add_axis  (const std::string& name, int id)
+{
+  InputEventDefinition event;
+
+  event.type = AXIS_EVENT;
+  event.name = name;
+  event.id   = id;
+
+  str_to_event[event.name] = event;
+  id_to_event[event.id]    = event;
+}
+
+const InputEventDefinition&
+ControllerDescription::get_definition(int id) const
+{
+  std::map<int, InputEventDefinition>::const_iterator i = id_to_event.find(id);
+  if (i == id_to_event.end())
+    throw std::runtime_error("Unknown event id");
+
+  return i->second;
+}
+
+const InputEventDefinition&
+ControllerDescription::get_definition(const std::string& name) const
+{
+  std::map<std::string, InputEventDefinition>::const_iterator i = str_to_event.find(name);
+  if (i == str_to_event.end())
+    throw std::runtime_error("Unknown event str");
+
+  return i->second;
+}
+
+/* EOF */

Added: trunk/src/input/controller_description.hpp
===================================================================
--- trunk/src/input/controller_description.hpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/input/controller_description.hpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -0,0 +1,64 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_CONTROLLER_DESCRIPTION_HPP
+#define HEADER_CONTROLLER_DESCRIPTION_HPP
+
+#include <map>
+#include <string>
+#include "input_event.hpp"
+
+struct InputEventDefinition 
+{
+  InputEventType type;
+  int            id;
+  std::string    name;
+};
+
+/** */
+class ControllerDescription
+{
+private:
+  std::map<std::string, InputEventDefinition> str_to_event;
+  std::map<int,         InputEventDefinition> id_to_event;
+
+public:
+  ControllerDescription();
+  ~ControllerDescription();
+
+  void add_button(const std::string& name, int id);
+  void add_axis  (const std::string& name, int id); 
+
+  int get_button_count() const;
+  int get_axis_count() const;
+  int get_keyboard_count() const;
+
+  const InputEventDefinition& get_definition(int id) const;
+  const InputEventDefinition& get_definition(const std::string& name) const;
+};
+
+#endif
+
+/* EOF */

Modified: trunk/src/input/input_configurator.cpp
===================================================================
--- trunk/src/input/input_configurator.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/input/input_configurator.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -98,19 +98,17 @@
 void
 InputConfigurator::print_item()
 {
-  ControllerDef def;
-
   if (!items.empty())
     {
       const ConfigureItem& item = items.back();
       
       if (item.mode == ConfigureItem::CONFIGURE_AXIS)
         {
-          out << "Configuring " << def.get_definition(item.event_id).name << ": " << std::endl;
+          out << "Configuring " << controller_description.get_definition(item.event_id).name << ": " << std::endl;
         }
       else if (item.mode == ConfigureItem::CONFIGURE_BUTTON)
         {
-          out << "Configuring " << def.get_definition(item.event_id).name << ": " << std::endl;
+          out << "Configuring " << controller_description.get_definition(item.event_id).name << ": " << std::endl;
         }
     }
 

Modified: trunk/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/src/input/input_manager_sdl.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/input/input_manager_sdl.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -92,8 +92,6 @@
 void
 InputManagerSDL::parse_config(const lisp::Lisp* lisp)
 {
-  ControllerDef controller_def;
-  
   lisp::Properties cur(lisp);
   lisp::PropertyIterator<const lisp::Lisp*> iter = cur.get_iter();
 
@@ -114,7 +112,7 @@
                   props.get("device", device);
                   props.get("button", button);
 
-                  bind_joystick_button(controller_def.get_definition(iter.item()).id,
+                  bind_joystick_button(controller_description.get_definition(iter.item()).id,
                                        device, button);
                 }
               else if (dev_iter.item() == "keyboard-button")
@@ -124,7 +122,7 @@
                   lisp::Properties props(*dev_iter);
                   props.get("key", key);
 
-                  bind_keyboard_button(controller_def.get_definition(iter.item()).id,
+                  bind_keyboard_button(controller_description.get_definition(iter.item()).id,
                                        string_to_keyid(key));
                 }
               else
@@ -148,7 +146,7 @@
                   props.get("device", device);
                   props.get("axis",   axis);
 
-                  bind_joystick_axis(controller_def.get_definition(iter.item()).id,
+                  bind_joystick_axis(controller_description.get_definition(iter.item()).id,
                                      device, axis);
                 }
               else if (dev_iter.item() == "keyboard-axis")
@@ -160,7 +158,7 @@
                   props.get("minus", minus);
                   props.get("plus",  plus);
 
-                  bind_keyboard_axis(controller_def.get_definition(iter.item()).id, 
+                  bind_keyboard_axis(controller_description.get_definition(iter.item()).id, 
                                      string_to_keyid(minus), string_to_keyid(plus));
                 }
               else


Property changes on: trunk/src/lisp
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/sprite3d
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache


Modified: trunk/src/sprite3dview.cpp
===================================================================
--- trunk/src/sprite3dview.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/sprite3dview.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -123,8 +123,10 @@
       sprite.set_action(actions[current_action]);
     }
 
-  roty += delta * 30.0f;
-  rotx += delta * 30.0f;
+  roty += controller.get_axis_state(X2_AXIS) * 30.0f;
+  rotx += controller.get_axis_state(Y2_AXIS) * 30.0f;
+
+  std::cout << controller.get_axis_state(Y2_AXIS) << std::endl;
 }
 
 /* EOF */


Property changes on: trunk/src/squirrel
___________________________________________________________________
Name: svn:ignore
   + libsquirrel.a
.sconsign



Property changes on: trunk/src/squirrel/include
___________________________________________________________________
Name: svn:ignore
   + .sconsign



Property changes on: trunk/src/squirrel/sqstdlib
___________________________________________________________________
Name: svn:ignore
   + .sconsign



Property changes on: trunk/src/squirrel/squirrel
___________________________________________________________________
Name: svn:ignore
   + .sconsign



Property changes on: trunk/src/tinygettext
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache


Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-01 21:51:02 UTC (rev 1179)
+++ trunk/src/windstille_main.cpp	2006-01-05 18:32:18 UTC (rev 1180)
@@ -74,6 +74,24 @@
 
     init_modules();
 
+    { // Fill controller_description with data
+      controller_description.add_button("primary-button",   PRIMARY_BUTTON);
+      controller_description.add_button("secondary-button", SECONDARY_BUTTON);
+      controller_description.add_button("tertiary-button",  TERTIARY_BUTTON);
+  
+      controller_description.add_button("pda-button", PDA_BUTTON);
+      controller_description.add_button("inventory-button", INVENTORY_BUTTON);
+
+      controller_description.add_button("aim-button",       AIM_BUTTON);
+      controller_description.add_button("pause-button",     PAUSE_BUTTON);
+
+      controller_description.add_axis("x-axis", X_AXIS);
+      controller_description.add_axis("y-axis", Y_AXIS);
+
+      controller_description.add_axis("x2-axis", X2_AXIS);
+      controller_description.add_axis("y2-axis", Y2_AXIS);
+    }
+
     if (!config.get<std::string>("playback-file").is_set())
       {
         if (config.get<std::string>("controller-file").is_set())



From grumbel at berlios.de  Thu Jan  5 19:34:31 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 19:34:31 +0100
Subject: [Windstille-commit] r1181 - in trunk/src: . badguy display particles scripting sprite2d
Message-ID: <200601051834.k05IYVUH025926@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 19:34:27 +0100 (Thu, 05 Jan 2006)
New Revision: 1181

Modified:
   trunk/src/
   trunk/src/badguy/
   trunk/src/display/
   trunk/src/particles/
   trunk/src/scripting/
   trunk/src/sprite2d/
Log:
- some ignorance


Property changes on: trunk/src
___________________________________________________________________
Name: svn:ignore
   - 
ctest
.deps
editor
Makefile
Makefile.in
ptest
random
.sconsign
semantic.cache
windstille

   + 
baby_xml
ctest
.deps
editor
Makefile
Makefile.in
ptest
random
.sconsign
semantic.cache
windstille



Property changes on: trunk/src/badguy
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/display
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/particles
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/scripting
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/sprite2d
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache




From grumbel at berlios.de  Thu Jan  5 19:42:58 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 19:42:58 +0100
Subject: [Windstille-commit] r1182 - trunk/src
Message-ID: <200601051842.k05IgwIZ030198@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 19:42:55 +0100 (Thu, 05 Jan 2006)
New Revision: 1182

Modified:
   trunk/src/
   trunk/src/SConscript
Log:
- added missing file


Property changes on: trunk/src
___________________________________________________________________
Name: svn:ignore
   - 
baby_xml
ctest
.deps
editor
Makefile
Makefile.in
ptest
random
.sconsign
semantic.cache
windstille

   + 
baby_xml
ctest
.deps
editor
Makefile
Makefile.in
old/
ptest
random
.sconsign
semantic.cache
windstille


Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-05 18:34:27 UTC (rev 1181)
+++ trunk/src/SConscript	2006-01-05 18:42:55 UTC (rev 1182)
@@ -46,6 +46,7 @@
 'command_line.cpp',
 'command_line_generic.cpp',
 'console.cpp',
+'controller_def.cpp',
 'controller_help_window.cpp',
 'conversation.cpp',
 'dialog_manager.cpp',



From grumbel at berlios.de  Thu Jan  5 21:33:37 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 21:33:37 +0100
Subject: [Windstille-commit] r1183 - trunk/src/sprite3d
Message-ID: <200601052033.k05KXbXN011239@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 21:33:36 +0100 (Thu, 05 Jan 2006)
New Revision: 1183

Modified:
   trunk/src/sprite3d/data.cpp
   trunk/src/sprite3d/data.hpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/sprite3d/sprite3d.hpp
Log:
- replaced a bunch of new/delete with std::vector

Modified: trunk/src/sprite3d/data.cpp
===================================================================
--- trunk/src/sprite3d/data.cpp	2006-01-05 18:42:55 UTC (rev 1182)
+++ trunk/src/sprite3d/data.cpp	2006-01-05 20:33:36 UTC (rev 1183)
@@ -54,8 +54,6 @@
 }
 
 Data::Data(const std::string& filename)
-  : mesh_count(0), meshs(0), attachement_point_count(0), 
-  attachement_points(0), action_count(0), actions(0)
 {
   PHYSFS_file* file = PHYSFS_openRead(filename.c_str());
   if(!file) {
@@ -75,18 +73,18 @@
     if(format_version < FORMAT_VERSION)
       throw std::runtime_error("sprite file format too old");
 
-    mesh_count = read_uint16_t(file);
+    uint16_t mesh_count = read_uint16_t(file);
     if(mesh_count == 0)
       throw std::runtime_error("Sprite3D contains no meshs");
-    attachement_point_count = read_uint16_t(file);
-    action_count = read_uint16_t(file);
+    uint16_t attachement_point_count = read_uint16_t(file);
+    uint16_t action_count = read_uint16_t(file);
     if(action_count == 0)
       throw std::runtime_error("Sprite3D contains no actions");
 
     // read meshs
-    meshs = new Mesh[mesh_count];
-    for(uint16_t i = 0; i < mesh_count; ++i) {
-      Mesh& mesh = meshs[i];
+    meshs.resize(mesh_count);
+    for(std::vector<Mesh>::iterator i = meshs.begin(); i != meshs.end(); ++i) {
+      Mesh& mesh = *i;
 
       std::string texturename = read_string(file, 64);
       texturename = dirname(filename) + basename(texturename);
@@ -96,64 +94,63 @@
       mesh.texture = texture_manager->get(texturename);
 
       // read triangles
-      mesh.vertex_indices = new uint16_t[mesh.triangle_count * 3];
+      mesh.vertex_indices.reserve(mesh.triangle_count * 3);
       for(uint16_t v = 0; v < mesh.triangle_count * 3; ++v) {
-        mesh.vertex_indices[v] = read_uint16_t(file);
+        mesh.vertex_indices.push_back(read_uint16_t(file));
       }
       
-      mesh.normals = new float[mesh.triangle_count * 3];
+      mesh.normals.reserve(mesh.triangle_count * 3);
       for(uint16_t n = 0; n < mesh.triangle_count * 3; ++n) {
-        mesh.normals[n] = read_float(file);
+        mesh.normals.push_back(read_float(file));
       }
 
-      mesh.tex_coords = new float[mesh.vertex_count * 2];
+      mesh.tex_coords.reserve(mesh.vertex_count * 2);
       for(uint16_t v = 0; v < mesh.vertex_count * 2; ++v) {
-        mesh.tex_coords[v] = read_float(file);
+        mesh.tex_coords.push_back(read_float(file));
       }
     }
 
     // read attachement points
-    attachement_points = new AttachementPoint[attachement_point_count];
+    attachement_points.resize(attachement_point_count);
     for(uint16_t a = 0; a < attachement_point_count; ++a) {
       AttachementPoint& point = attachement_points[a];
       point.name = read_string(file, 64);
     }
 
     // read actions
-    actions = new Action[action_count];
-    for(uint16_t i = 0; i < action_count; ++i) {
-      Action& action = actions[i];
+    actions.resize(action_count);
+    for(std::vector<Action>::iterator i = actions.begin(); i != actions.end(); ++i) {
+      Action& action = *i;
 
       action.name = read_string(file, 64);
       action.speed = read_float(file);
-      action.marker_count = read_uint16_t(file);
-      action.frame_count = read_uint16_t(file);
+      uint16_t marker_count = read_uint16_t(file);
+      uint16_t frame_count = read_uint16_t(file);
 
       // read markers
-      action.markers = new Marker[action.marker_count];
-      for(uint16_t m = 0; m < action.marker_count; ++m) {
+      action.markers.resize(marker_count);
+      for(uint16_t m = 0; m < action.markers.size(); ++m) {
         Marker& marker = action.markers[m];
         marker.name = read_string(file, 64);
         marker.frame = read_uint16_t(file);
       }
 
       // read frames
-      action.frames = new ActionFrame[action.frame_count];
-      for(uint16_t f = 0; f < action.frame_count; ++f) {
+      action.frames.resize(frame_count);
+      for(uint16_t f = 0; f < action.frames.size(); ++f) {
         ActionFrame& frame = action.frames[f];
         
-        frame.meshs = new MeshVertices[mesh_count];
+        frame.meshs.resize(mesh_count);
         for(uint16_t m = 0; m < mesh_count; ++m) {
           MeshVertices& mesh = frame.meshs[m];
 
-          mesh.vertices = new float[meshs[m].vertex_count * 3];
+          mesh.vertices.resize(meshs[m].vertex_count * 3);
           for(uint16_t v = 0; v < meshs[m].vertex_count * 3; ++v) {
             mesh.vertices[v] = read_float(file);
           }
         }
 
-        frame.attachement_points 
-          = new AttachementPointPosition[attachement_point_count];
+        frame.attachement_points.resize(attachement_point_count);
         for(uint16_t a = 0; a < attachement_point_count; ++a) {
           AttachementPointPosition& point = frame.attachement_points[a];
 
@@ -170,7 +167,6 @@
       }
     }
   } catch(std::exception& e) {
-    clear();
     PHYSFS_close(file);
     std::ostringstream msg;
     msg << "Problem while reading '" << filename << "': " << e.what();
@@ -181,58 +177,14 @@
 
 Data::~Data()
 {
-  clear();
 }
 
-void
-Data::clear()
-{
-  if(meshs != 0) {
-    for(uint16_t m = 0; m < mesh_count; ++m) {
-      Mesh& mesh = meshs[m];
-      delete[] mesh.vertex_indices;
-      delete[] mesh.tex_coords;
-      delete[] mesh.normals;
-    }
-    delete[] meshs;
-    meshs = 0;
-  }
-  
-  delete[] attachement_points;
-  attachement_points = 0;
-
-  if(actions != 0) {
-    for(uint16_t a = 0; a < action_count; ++a) {
-      Action& action = actions[a];
-      delete[] action.markers;      
-      if(action.frames == 0)
-        continue;
-      
-      for(uint16_t f = 0; f < action.frame_count; ++f) {
-        ActionFrame& frame = action.frames[f];
-        if(frame.meshs == 0)
-          continue;
-        for(uint16_t m = 0; m < mesh_count; ++m) {
-          MeshVertices& vertices = frame.meshs[m];
-          delete[] vertices.vertices;
-        }
-        delete[] frame.meshs;
-        delete[] frame.attachement_points;
-      }
-      delete[] action.frames;
-    }
-    delete[] actions;
-  }
-  mesh_count = 0;
-  action_count = 0;
-}
-
 const Action&
 Data::get_action(const std::string& name) const
 {
-  for(uint16_t a = 0; a < action_count; ++a) {
-    if(actions[a].name == name)
-      return actions[a];
+  for(std::vector<Action>::const_iterator action = actions.begin(); action != actions.end(); ++action) {
+    if(action->name == name)
+      return *action;
   }
   std::ostringstream msg;
   msg << "No action with name '" << name << "' defined";
@@ -242,7 +194,7 @@
 const Marker&
 Data::get_marker(const Action* action, const std::string& name) const
 {
-  for(uint16_t m = 0; m < action->marker_count; ++m) {
+  for(uint16_t m = 0; m < action->markers.size(); ++m) {
     if(action->markers[m].name == name)
       return action->markers[m];
   }
@@ -255,7 +207,7 @@
 uint16_t
 Data::get_attachement_point_id(const std::string& name) const
 {
-  for(uint16_t a = 0; a < attachement_point_count; ++a) {
+  for(uint16_t a = 0; a < attachement_points.size(); ++a) {
     if(attachement_points[a].name == name)
       return a;
   }

Modified: trunk/src/sprite3d/data.hpp
===================================================================
--- trunk/src/sprite3d/data.hpp	2006-01-05 18:42:55 UTC (rev 1182)
+++ trunk/src/sprite3d/data.hpp	2006-01-05 20:33:36 UTC (rev 1183)
@@ -22,6 +22,7 @@
 #include <stdint.h>
 #include <string>
 #include <GL/gl.h>
+#include <vector>
 #include "ref.hpp"
 #include "glutil/texture.hpp"
 #include "math/vector3.hpp"
@@ -50,30 +51,27 @@
   const Marker& get_marker(const Action* action, const std::string& name) const;
   uint16_t get_attachement_point_id(const std::string& name) const;
 
-  uint16_t mesh_count;
-  Mesh* meshs;
-  uint16_t attachement_point_count;
-  AttachementPoint* attachement_points;
-  uint16_t action_count;
-  Action* actions;
+  std::vector<Mesh> meshs;
+  std::vector<AttachementPoint> attachement_points;
+  std::vector<Action> actions;
 
 private:
-  void clear();
-  
   Data (const Data&);
   Data& operator= (const Data&);
 };
 
+/** 
+ */
 struct Mesh
 {
   Mesh();
 
-  Texture texture;
-  uint16_t triangle_count;
-  uint16_t* vertex_indices;
-  float* tex_coords;
-  float* normals;
-  uint16_t vertex_count;
+  Texture   texture;
+  uint16_t  triangle_count;
+  std::vector<uint16_t> vertex_indices;
+  std::vector<float>    tex_coords;
+  std::vector<float>    normals;
+  uint16_t  vertex_count;
 };
 
 struct AttachementPoint
@@ -86,7 +84,7 @@
   MeshVertices()
     : vertices(0)
   { }
-  float* vertices;
+  std::vector<float> vertices;
 };
 
 struct AttachementPointPosition
@@ -98,29 +96,29 @@
 struct ActionFrame
 {
   ActionFrame()
-    : meshs(0), attachement_points(0)
+    : meshs(0)
   { }
-  MeshVertices* meshs;
-  AttachementPointPosition* attachement_points;
+  std::vector<MeshVertices> meshs;
+  std::vector<AttachementPointPosition> attachement_points;
 };
 
 struct Marker
 {
   std::string name;
-  uint16_t frame;
+  uint16_t    frame;
 };
 
+/** 
+ */
 struct Action
 {
   Action()
     : markers(0), frames(0)
   { }
-  std::string name;
-  float speed;
-  uint16_t marker_count;
-  Marker* markers;
-  uint16_t frame_count;
-  ActionFrame* frames;
+  std::string  name;
+  float        speed;
+  std::vector<Marker> markers;
+  std::vector<ActionFrame> frames;
 };
 
 }

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-05 18:42:55 UTC (rev 1182)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-05 20:33:36 UTC (rev 1183)
@@ -69,7 +69,7 @@
   if(speed >= 0) {
     next_frame.frame = 0;
   } else {
-    next_frame.frame = next_frame.action->frame_count - 1;
+    next_frame.frame = next_frame.action->frames.size() - 1;
   }
   next_frame.speed = speed;
   next_frame.rot = frame2.rot;
@@ -91,9 +91,11 @@
 Sprite3D::get_actions() const
 {
   std::vector<std::string> actions;
-  for(int i = 0; i < data->action_count; ++i)
+  for(std::vector<Action>::const_iterator i = data->actions.begin(); 
+      i != data->actions.begin(); 
+      ++i)
     {
-      actions.push_back(data->actions[i].name);
+      actions.push_back(i->name);
     }
   return actions;
 }
@@ -105,7 +107,7 @@
   if(speed >= 0) {
     next_action.frame = 0;
   } else {
-    next_action.frame = next_action.action->frame_count - 1;
+    next_action.frame = next_action.action->frames.size() - 1;
   }
   next_action.speed = speed;
   next_action.rot = frame2.rot;
@@ -116,7 +118,7 @@
   abort_at_frame.speed = frame->speed;
   abort_at_frame.rot = frame->rot;
   if(frame->speed >= 0) {
-    abort_at_frame.frame = frame->action->frame_count - 1;
+    abort_at_frame.frame = frame->action->frames.size() - 1;
   } else {
     abort_at_frame.frame = 0;
   }
@@ -264,10 +266,10 @@
 
   frame2.action = frame1.action;
   if(frame1.speed < 0) {
-    frame2.frame = (frame1.frame + frame1.action->frame_count - 1)
-      % frame2.action->frame_count;
+    frame2.frame = (frame1.frame + frame1.action->frames.size() - 1)
+      % frame2.action->frames.size();
   } else {
-    frame2.frame = (frame1.frame + 1) % frame1.action->frame_count;
+    frame2.frame = (frame1.frame + 1) % frame1.action->frames.size();
   }
   frame2.speed = frame1.speed;
   frame2.rot = frame1.rot;
@@ -342,7 +344,7 @@
   const ActionFrame& aframe1 = frame1.action->frames[frame1.frame];
   const ActionFrame& aframe2 = frame2.action->frames[frame2.frame];
   
-  for(uint16_t m = 0; m < data->mesh_count; ++m) 
+  for(uint16_t m = 0; m < data->meshs.size(); ++m) 
     {
       const Mesh& mesh = data->meshs[m];
       const MeshVertices& vertices1 = aframe1.meshs[m];
@@ -382,10 +384,10 @@
 
       // draw mesh
       glVertexPointer(3, GL_FLOAT, 0, verts);
-      glNormalPointer(GL_FLOAT, 0, mesh.normals);
-      glTexCoordPointer(2, GL_FLOAT, 0, mesh.tex_coords);
+      glNormalPointer(GL_FLOAT, 0, &*mesh.normals.begin());
+      glTexCoordPointer(2, GL_FLOAT, 0, &*mesh.tex_coords.begin());
       glDrawElements(GL_TRIANGLES, mesh.triangle_count * 3, GL_UNSIGNED_SHORT,
-                     mesh.vertex_indices);
+                     &*mesh.vertex_indices.begin());
     }
 
   assert_gl("rendering 3d sprite");      

Modified: trunk/src/sprite3d/sprite3d.hpp
===================================================================
--- trunk/src/sprite3d/sprite3d.hpp	2006-01-05 18:42:55 UTC (rev 1182)
+++ trunk/src/sprite3d/sprite3d.hpp	2006-01-05 20:33:36 UTC (rev 1183)
@@ -15,6 +15,7 @@
 //  You should have received a copy of the GNU General Public License
 //  along with this program; if not, write to the Free Software
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
 #ifndef HEADER_SPRITE3D_HPP
 #define HEADER_SPRITE3D_HPP
 



From grumbel at berlios.de  Thu Jan  5 22:41:54 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 22:41:54 +0100
Subject: [Windstille-commit] r1184 - in trunk/src: . math sprite3d
Message-ID: <200601052141.k05Lfs3W018365@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 22:41:53 +0100 (Thu, 05 Jan 2006)
New Revision: 1184

Modified:
   trunk/src/math/quaternion.cpp
   trunk/src/math/quaternion.hpp
   trunk/src/player.cpp
   trunk/src/sprite3d/data.cpp
   trunk/src/sprite3d/data.hpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/sprite3d/sprite3d.hpp
   trunk/src/test_object.cpp
Log:
- added some docu
- fixed spelling mistake attachement -> attachment
- some tiny cleanup in Sprite3D

Modified: trunk/src/math/quaternion.cpp
===================================================================
--- trunk/src/math/quaternion.cpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/math/quaternion.cpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -103,3 +103,4 @@
   return (*this * cos(theta)) + (v2 * sin(theta));
 }
 
+/* EOF */

Modified: trunk/src/math/quaternion.hpp
===================================================================
--- trunk/src/math/quaternion.hpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/math/quaternion.hpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -16,6 +16,7 @@
 //  You should have received a copy of the GNU General Public License
 //  along with this program; if not, write to the Free Software
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
 #ifndef __QUATERNION_HPP__
 #define __QUATERNION_HPP__
 
@@ -86,3 +87,4 @@
 
 #endif
 
+/* EOF */

Modified: trunk/src/player.cpp
===================================================================
--- trunk/src/player.cpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/player.cpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -116,10 +116,10 @@
       sc.highlight().draw(use_str, obj->get_pos().x, obj->get_pos().y - 150, 1000);
     }
   
-  Sprite3D::PointID id = sprite.get_attachement_point_id("Weapon");
+  Sprite3D::PointID id = sprite.get_attachment_point_id("Weapon");
   sc.push_modelview();
   sc.translate(pos.x, pos.y);
-  sc.mult_modelview(sprite.get_attachement_point_matrix(id));
+  sc.mult_modelview(sprite.get_attachment_point_matrix(id));
 
   weapon->draw(sc);
 

Modified: trunk/src/sprite3d/data.cpp
===================================================================
--- trunk/src/sprite3d/data.cpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/sprite3d/data.cpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -11,8 +11,7 @@
 #include "glutil/texture_manager.hpp"
 #include "glutil/texture.hpp"
 
-namespace sprite3d
-{
+namespace sprite3d {
 
 static const int FORMAT_VERSION = 2;
 
@@ -76,7 +75,7 @@
     uint16_t mesh_count = read_uint16_t(file);
     if(mesh_count == 0)
       throw std::runtime_error("Sprite3D contains no meshs");
-    uint16_t attachement_point_count = read_uint16_t(file);
+    uint16_t attachment_point_count = read_uint16_t(file);
     uint16_t action_count = read_uint16_t(file);
     if(action_count == 0)
       throw std::runtime_error("Sprite3D contains no actions");
@@ -89,7 +88,7 @@
       std::string texturename = read_string(file, 64);
       texturename = dirname(filename) + basename(texturename);
       mesh.triangle_count = read_uint16_t(file);
-      mesh.vertex_count = read_uint16_t(file);
+      mesh.vertex_count   = read_uint16_t(file);
 
       mesh.texture = texture_manager->get(texturename);
 
@@ -110,11 +109,10 @@
       }
     }
 
-    // read attachement points
-    attachement_points.resize(attachement_point_count);
-    for(uint16_t a = 0; a < attachement_point_count; ++a) {
-      AttachementPoint& point = attachement_points[a];
-      point.name = read_string(file, 64);
+    // read attachment points
+    attachment_points.reserve(attachment_point_count);
+    for(uint16_t a = 0; a < attachment_point_count; ++a) {
+      attachment_points.push_back(read_string(file, 64));
     }
 
     // read actions
@@ -150,18 +148,18 @@
           }
         }
 
-        frame.attachement_points.resize(attachement_point_count);
-        for(uint16_t a = 0; a < attachement_point_count; ++a) {
-          AttachementPointPosition& point = frame.attachement_points[a];
+        frame.attachment_points.resize(attachment_point_count);
+        for(uint16_t a = 0; a < attachment_point_count; ++a) {
+          AttachmentPointPosition& point = frame.attachment_points[a];
 
           point.pos.x = read_float(file);
           point.pos.y = read_float(file);
           point.pos.z = read_float(file);
 
           point.quat.w = -read_float(file);
-          point.quat.x = read_float(file);
-          point.quat.y = read_float(file);
-          point.quat.z = read_float(file);
+          point.quat.x =  read_float(file);
+          point.quat.y =  read_float(file);
+          point.quat.z =  read_float(file);
           point.quat.normalize();
         }
       }
@@ -205,22 +203,19 @@
 }
 
 uint16_t
-Data::get_attachement_point_id(const std::string& name) const
+Data::get_attachment_point_id(const std::string& name) const
 {
-  for(uint16_t a = 0; a < attachement_points.size(); ++a) {
-    if(attachement_points[a].name == name)
+  for(uint16_t a = 0; a < attachment_points.size(); ++a) {
+    if(attachment_points[a] == name)
       return a;
   }
 
   std::ostringstream msg;
-  msg << "No Attachement Point with name '" << name << "' defined";
+  msg << "No Attachment Point with name '" << name << "' defined";
   throw std::runtime_error(msg.str());
 }
 
-Mesh::Mesh()
-  : vertex_indices(0), tex_coords(0), normals(0)
-{
-}
+} // namespace sprite3d
 
-}
+/* EOF */
 

Modified: trunk/src/sprite3d/data.hpp
===================================================================
--- trunk/src/sprite3d/data.hpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/sprite3d/data.hpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -32,14 +32,15 @@
 {
 
 struct Mesh;
-struct AttachementPoint;
+struct AttachmentPoint;
 struct MeshVertices;
 struct ActionFrame;
 struct Action;
 struct Marker;
 
 /**
- * This class holds the data of a .wsprite file.
+ * This class holds the data of a .wsprite file, ie. all data that is
+ * needed to create a Sprite3D.
  */
 class Data
 {
@@ -49,66 +50,78 @@
 
   const Action& get_action(const std::string& name) const;
   const Marker& get_marker(const Action* action, const std::string& name) const;
-  uint16_t get_attachement_point_id(const std::string& name) const;
+  uint16_t      get_attachment_point_id(const std::string& name) const;
 
-  std::vector<Mesh> meshs;
-  std::vector<AttachementPoint> attachement_points;
-  std::vector<Action> actions;
+  std::vector<Mesh>        meshs;
+  std::vector<std::string> attachment_points;
+  std::vector<Action>      actions;
 
 private:
   Data (const Data&);
   Data& operator= (const Data&);
 };
 
-/** 
+/**
+ * A simple Mesh, consisting of a texture and triangles, each triangle
+ * consists of vertex indices (not positions, those are stored in the
+ * Action), textured coordinates and normals
  */
 struct Mesh
 {
-  Mesh();
+  Texture   texture;
 
-  Texture   texture;
+  uint16_t  vertex_count;
   uint16_t  triangle_count;
+
+  // Triangle Data
   std::vector<uint16_t> vertex_indices;
   std::vector<float>    tex_coords;
   std::vector<float>    normals;
-  uint16_t  vertex_count;
 };
 
-struct AttachementPoint
+/** Position of an AttachmentPoint */
+struct AttachmentPointPosition
 {
-  std::string name;
+  Vector3    pos;  // x, y, z
+  Quaternion quat; // w, x, y, z
 };
 
+/**
+ * MeshVertices holds the positions of vertices for a mesh.
+ */
 struct MeshVertices
 {
-  MeshVertices()
-    : vertices(0)
-  { }
+  MeshVertices() {}
   std::vector<float> vertices;
 };
 
-struct AttachementPointPosition
+/**
+ * A Marker is a named-frame, so that you can refer to a frame number
+ * by its purpose, ie. 'RightFoot', to refer to the frame where the
+ * right foot is on the ground. This is used to ensure that the
+ * transitions from one animation to the next are smooth. 
+ */
+struct Marker
 {
-  Vector3 pos; // x, y, z
-  Quaternion quat; // w, x, y, z
+  std::string name;
+  uint16_t    frame;
 };
 
+/** 
+ * A ActionFrame holds the vertex positions for the mesh and the
+ * position of the attachment points
+ */
 struct ActionFrame
 {
   ActionFrame()
     : meshs(0)
   { }
   std::vector<MeshVertices> meshs;
-  std::vector<AttachementPointPosition> attachement_points;
+  std::vector<AttachmentPointPosition> attachment_points;
 };
 
-struct Marker
-{
-  std::string name;
-  uint16_t    frame;
-};
-
-/** 
+/**
+ *  
  */
 struct Action
 {

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -190,18 +190,18 @@
 }
 
 Sprite3D::PointID
-Sprite3D::get_attachement_point_id(const std::string& name) const
+Sprite3D::get_attachment_point_id(const std::string& name) const
 {
-  return data->get_attachement_point_id(name); 
+  return data->get_attachment_point_id(name); 
 }
 
 Matrix
-Sprite3D::get_attachement_point_matrix(PointID id) const
+Sprite3D::get_attachment_point_matrix(PointID id) const
 {
-  const AttachementPointPosition& point1 
-	  = frame1.action->frames[frame1.frame].attachement_points[id];
-  const AttachementPointPosition& point2 
-	  = frame2.action->frames[frame2.frame].attachement_points[id];
+  const AttachmentPointPosition& point1 
+	  = frame1.action->frames[frame1.frame].attachment_points[id];
+  const AttachmentPointPosition& point2 
+	  = frame2.action->frames[frame2.frame].attachment_points[id];
 
   Quaternion rotquat = Quaternion(0, 0, 1, 0);
   Quaternion quat1 = point1.quat;

Modified: trunk/src/sprite3d/sprite3d.hpp
===================================================================
--- trunk/src/sprite3d/sprite3d.hpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/sprite3d/sprite3d.hpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -108,8 +108,8 @@
   void set_rot(bool rot = true);
   bool get_rot() const;
 
-  PointID get_attachement_point_id(const std::string& name) const;
-  Matrix get_attachement_point_matrix(PointID id) const;
+  PointID get_attachment_point_id(const std::string& name) const;
+  Matrix  get_attachment_point_matrix(PointID id) const;
 
   /** true if the Sprite3D is valid and usable, false if not */
   bool is_valid() const;

Modified: trunk/src/test_object.cpp
===================================================================
--- trunk/src/test_object.cpp	2006-01-05 20:33:36 UTC (rev 1183)
+++ trunk/src/test_object.cpp	2006-01-05 21:41:53 UTC (rev 1184)
@@ -34,7 +34,7 @@
       i != attached_sprites.end(); ++i) {
     sc.push_modelview();
     sc.translate(pos.x, pos.y);
-    sc.mult_modelview(sprite.get_attachement_point_matrix(i->attachpoint));
+    sc.mult_modelview(sprite.get_attachment_point_matrix(i->attachpoint));
     
     i->sprite.draw(sc.color(), Vector(0, 0), 100);
     sc.pop_modelview();
@@ -91,7 +91,8 @@
 {
   AttachedSprite asprite;
   asprite.sprite = Sprite3D(spritename);
-  asprite.attachpoint = sprite.get_attachement_point_id(attachement_point);
+  asprite.attachpoint = sprite.get_attachment_point_id(attachement_point);
   attached_sprites.push_back(asprite);
 }
 
+/* EOF */



From grumbel at berlios.de  Thu Jan  5 23:28:48 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 23:28:48 +0100
Subject: [Windstille-commit] r1185 - in trunk/src: . scripting
Message-ID: <200601052228.k05MSmGF022822@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 23:28:46 +0100 (Thu, 05 Jan 2006)
New Revision: 1185

Modified:
   trunk/src/config.cpp
   trunk/src/game_session.cpp
   trunk/src/game_session.hpp
   trunk/src/player.cpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
   trunk/src/weapon.hpp
Log:
- improved cutscene bars, added scriptbindings

Modified: trunk/src/config.cpp
===================================================================
--- trunk/src/config.cpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/config.cpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -365,10 +365,10 @@
   out << "Config " << this << ":" << std::endl;
   for(ConfigValues::iterator i = config_values.begin(); i != config_values.end(); ++i)
     {
-      out << boost::format("  %|1$20| = %|2$-20| (set: %|3$|)") 
+      out << boost::format("  %|1$20| = %|2$-20| (%|3$|)")
         % i->second->get_name()
         % (boost::format("'%|1s|'") % (*i->second))
-        % i->second->is_set() 
+        % (i->second->is_set() ? "set" : "default")
           << std::endl;
       
     }

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/game_session.cpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -78,6 +78,7 @@
   std::string filename;
 
   bool pause;
+  float cutscene_value;
   bool cutscene_mode;
 
   enum { NO_ACTION, QUIT_ACTION, CHANGE_SECTOR_ACTION } next_action;
@@ -99,7 +100,8 @@
   GameSessionImpl() {
     sector = 0;
     current_gui = 0;
-    cutscene_mode = false;
+    cutscene_mode  = false;
+    cutscene_value = 0.0f;
   }
   ~GameSessionImpl() {
     delete sector;
@@ -144,13 +146,14 @@
       energy_bar.draw();
       controller_help_window.draw();
     }
-  else
+
+  if (cutscene_mode || cutscene_value > 0.0f)
     {
-      int border_size = 75;
+      int border_size = static_cast<int>(75 * cutscene_value);
       Display::fill_rect(Rect(Point(0, 0), Size(Display::get_width(), border_size)), 
-                         Color(0.0f, 0.0f, 0.0f, 1.0f));
+                         Color(0.0f, 0.0f, 0.0f, cutscene_value));
       Display::fill_rect(Rect(Point(0, Display::get_height() - border_size), Size(Display::get_width(), border_size)), 
-                         Color(0.0f, 0.0f, 0.0f, 1.0f));
+                         Color(0.0f, 0.0f, 0.0f, cutscene_value));
     }
 
   if (current_gui)
@@ -183,6 +186,16 @@
 void
 GameSessionImpl::update(float delta, const Controller& controller)
 {  
+  if (cutscene_mode)
+    cutscene_value += delta * 0.75f;
+  else
+    cutscene_value -= delta * 0.75f;
+
+  if (cutscene_value > 1.0f)
+    cutscene_value = 1.0f;
+  else if (cutscene_value < 0.0f)
+    cutscene_value = 0.0f;
+
   if (controller.button_was_pressed(PAUSE_BUTTON))
     pause = !pause;
 
@@ -420,7 +433,22 @@
 void
 GameSession::set_cutscene_mode(bool t)
 {
-  impl->cutscene_mode = t;
+  if (t != impl->cutscene_mode)
+    {
+      impl->cutscene_mode  = t;
+    }
 }
 
+void
+GameSession::fadeout(const Color& color)
+{
+  
+}
+
+void
+GameSession::fadein()
+{
+  
+}
+
 /* EOF */

Modified: trunk/src/game_session.hpp
===================================================================
--- trunk/src/game_session.hpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/game_session.hpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -76,6 +76,9 @@
       most part to switch into a 16:9 viewmode with black borders */
   void set_cutscene_mode(bool t);
 
+  void fadeout(const Color& color);
+  void fadein();
+
   void draw();
   void update(float delta, const Controller& controller);
   void handle_event(const SDL_Event& event);

Modified: trunk/src/player.cpp
===================================================================
--- trunk/src/player.cpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/player.cpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -116,13 +116,12 @@
       sc.highlight().draw(use_str, obj->get_pos().x, obj->get_pos().y - 150, 1000);
     }
   
+  // Draw weapon at the 'Weapon' attachment point
   Sprite3D::PointID id = sprite.get_attachment_point_id("Weapon");
   sc.push_modelview();
   sc.translate(pos.x, pos.y);
   sc.mult_modelview(sprite.get_attachment_point_matrix(id));
-
   weapon->draw(sc);
-
   sc.pop_modelview();
 }
 

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/scripting/interface.cpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -238,6 +238,28 @@
   config.debug_print(console);
 }
 
+void cutscene_begin()
+{
+  GameSession::current()->set_cutscene_mode(true);
+}
+
+void cutscene_end()
+{
+  GameSession::current()->set_cutscene_mode(false);
+}
+
+void fadeout()
+{
+}
+
+void fadeout_rgb(float r, float g, float b)
+{
+}
+
+void fadein()
+{
+}
+
 } // namespace Scripting
 
 /* EOF */

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/scripting/interface.hpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -96,6 +96,13 @@
 
 void show_config();
 
+void cutscene_begin();
+void cutscene_end();
+
+void fadeout();
+void fadeout_rgb(float r, float g, float b);
+void fadein();
+
 } // namespace Scripting
 
 #endif

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/scripting/wrapper.cpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -549,6 +549,56 @@
   return 0;
 }
 
+static int cutscene_begin_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::cutscene_begin();
+  
+  return 0;
+}
+
+static int cutscene_end_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::cutscene_end();
+  
+  return 0;
+}
+
+static int fadeout_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::fadeout();
+  
+  return 0;
+}
+
+static int fadeout_rgb_wrapper(HSQUIRRELVM v)
+{
+  float arg0;
+  sq_getfloat(v, 2, &arg0);
+  float arg1;
+  sq_getfloat(v, 3, &arg1);
+  float arg2;
+  sq_getfloat(v, 4, &arg2);
+  
+  Scripting::fadeout_rgb(arg0, arg1, arg2);
+  
+  return 0;
+}
+
+static int fadein_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::fadein();
+  
+  return 0;
+}
+
 static int spawn_object_wrapper(HSQUIRRELVM v)
 {
   return Scripting::spawn_object(v);
@@ -985,6 +1035,46 @@
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "cutscene_begin", -1);
+  sq_newclosure(v, &cutscene_begin_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'cutscene_begin'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "cutscene_end", -1);
+  sq_newclosure(v, &cutscene_end_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'cutscene_end'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "fadeout", -1);
+  sq_newclosure(v, &fadeout_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'fadeout'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "fadeout_rgb", -1);
+  sq_newclosure(v, &fadeout_rgb_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'fadeout_rgb'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "fadein", -1);
+  sq_newclosure(v, &fadein_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'fadein'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "spawn_object", -1);
   sq_newclosure(v, &spawn_object_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {

Modified: trunk/src/weapon.hpp
===================================================================
--- trunk/src/weapon.hpp	2006-01-05 21:41:53 UTC (rev 1184)
+++ trunk/src/weapon.hpp	2006-01-05 22:28:46 UTC (rev 1185)
@@ -16,6 +16,7 @@
 //  You should have received a copy of the GNU General Public License
 //  along with this program; if not, write to the Free Software
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
 #ifndef WEAPON_HPP
 #define WEAPON_HPP
 
@@ -37,3 +38,4 @@
 
 #endif
 
+/* EOF */



From grumbel at berlios.de  Thu Jan  5 23:34:17 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jan 2006 23:34:17 +0100
Subject: [Windstille-commit] r1186 - trunk/src
Message-ID: <200601052234.k05MYHwk023468@sheep.berlios.de>

Author: grumbel
Date: 2006-01-05 23:34:16 +0100 (Thu, 05 Jan 2006)
New Revision: 1186

Modified:
   trunk/src/game_session.cpp
Log:
- improved cutscene bars, added scriptbindings

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-05 22:28:46 UTC (rev 1185)
+++ trunk/src/game_session.cpp	2006-01-05 22:34:16 UTC (rev 1186)
@@ -78,9 +78,14 @@
   std::string filename;
 
   bool pause;
+  
+  /** Amount of how far the cutscene bars are visible, 0.0 means not
+      visible, 1.0 fully visible. */
   float cutscene_value;
-  bool cutscene_mode;
 
+  /** True if cutscene is active, false otherwhise */
+  bool  cutscene_mode;
+
   enum { NO_ACTION, QUIT_ACTION, CHANGE_SECTOR_ACTION } next_action;
   
   enum { FADEIN, RUNNING, FADEOUT } fade_state;



From grumbel at berlios.de  Fri Jan  6 00:06:08 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 00:06:08 +0100
Subject: [Windstille-commit] r1187 - in trunk/src: . scripting
Message-ID: <200601052306.k05N68SC027449@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 00:06:06 +0100 (Fri, 06 Jan 2006)
New Revision: 1187

Modified:
   trunk/src/game_session.cpp
   trunk/src/game_session.hpp
   trunk/src/scripting/interface.cpp
Log:
- some fadein/out improvments and script bindings

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-05 22:34:16 UTC (rev 1186)
+++ trunk/src/game_session.cpp	2006-01-05 23:06:06 UTC (rev 1187)
@@ -90,6 +90,8 @@
   
   enum { FADEIN, RUNNING, FADEOUT } fade_state;
 
+  Color fade_color;
+
   // GUI Elements
   ControllerHelpWindow controller_help_window;
   EnergyBar     energy_bar;
@@ -107,6 +109,9 @@
     current_gui = 0;
     cutscene_mode  = false;
     cutscene_value = 0.0f;
+    fade_color = Color(0.0f, 0.0f, 0.0f, 1.0f);
+    fade_state = FADEOUT;
+    fadeout_value = 1.0f;
   }
   ~GameSessionImpl() {
     delete sector;
@@ -164,21 +169,11 @@
   if (current_gui)
     current_gui->draw();
 
-  switch (fade_state)
+  if (fade_state == FADEOUT || fade_state == FADEIN)
     {
-    case FADEOUT:
       Display::fill_rect(Rect(0, 0, 
                                Display::get_width(), Display::get_height()),
-                          Color(0,0,0, fadeout_value));
-      break;
-    case FADEIN:
-      Display::fill_rect(Rect(0, 0, 
-                               Display::get_width(), Display::get_height()),
-                         Color(0,0,0, 1.0f - fadeout_value));
-      break;
-
-    default:
-      break;
+                         Color(fade_color.r, fade_color.g, fade_color.b, fadeout_value));
     }
 
   if (pause)
@@ -225,14 +220,22 @@
       switch (fade_state)
         {
         case FADEIN:
-          if (fadeout_value > 1.0f)
-            fade_state = RUNNING;
-          fadeout_value += delta;
+          if (fadeout_value < 0.0f)
+            {
+              fade_state = RUNNING;
+              fadeout_value = 0.0f;
+            }
+          else
+            {
+              fadeout_value -= delta;
+            }
           break;
 
         case FADEOUT:
           if (fadeout_value > 1.0f)
-            {
+            { 
+              fadeout_value = 1.0f;
+
               switch(next_action)
                 {
                 case CHANGE_SECTOR_ACTION:
@@ -247,8 +250,10 @@
                   break;
                 }
             }
-
-          fadeout_value += delta;
+          else
+            {
+              fadeout_value += delta;
+            }
           break;
 
         case RUNNING:
@@ -289,7 +294,6 @@
   sound_manager->stop_music();
 
   impl->fade_state    = GameSessionImpl::FADEOUT;
-  impl->fadeout_value = 0;
   impl->next_action   = GameSessionImpl::CHANGE_SECTOR_ACTION;
 }
 
@@ -306,9 +310,8 @@
   
   impl->sector->spawn_player("default");
   impl->sector->activate();
-    
+  
   impl->fade_state    = GameSessionImpl::FADEIN;
-  impl->fadeout_value = 0;
   impl->next_action   = GameSessionImpl::NO_ACTION;
 
   if (debug) std::cout << "Finished changing sector" << std::endl;
@@ -373,7 +376,6 @@
 {
   if (impl->fade_state != GameSessionImpl::FADEOUT)
     {
-      impl->fadeout_value = 0;
       sound_manager->stop_music();
       impl->fade_state  = GameSessionImpl::FADEOUT;
       impl->next_action = GameSessionImpl::QUIT_ACTION;
@@ -447,13 +449,16 @@
 void
 GameSession::fadeout(const Color& color)
 {
-  
+  impl->fade_color  = color;
+  impl->fade_state  = GameSessionImpl::FADEOUT;
+  impl->next_action = GameSessionImpl::NO_ACTION;
 }
 
 void
 GameSession::fadein()
 {
-  
+  impl->fade_state  = GameSessionImpl::FADEIN;
+  impl->next_action = GameSessionImpl::NO_ACTION;
 }
 
 /* EOF */

Modified: trunk/src/game_session.hpp
===================================================================
--- trunk/src/game_session.hpp	2006-01-05 22:34:16 UTC (rev 1186)
+++ trunk/src/game_session.hpp	2006-01-05 23:06:06 UTC (rev 1187)
@@ -76,7 +76,7 @@
       most part to switch into a 16:9 viewmode with black borders */
   void set_cutscene_mode(bool t);
 
-  void fadeout(const Color& color);
+  void fadeout(const Color& color = Color());
   void fadein();
 
   void draw();

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-05 22:34:16 UTC (rev 1186)
+++ trunk/src/scripting/interface.cpp	2006-01-05 23:06:06 UTC (rev 1187)
@@ -250,14 +250,17 @@
 
 void fadeout()
 {
+  GameSession::current()->fadeout();
 }
 
 void fadeout_rgb(float r, float g, float b)
 {
+  GameSession::current()->fadeout(Color(r, g, b));
 }
 
 void fadein()
 {
+  GameSession::current()->fadein();
 }
 
 } // namespace Scripting



From grumbel at berlios.de  Fri Jan  6 03:20:59 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 03:20:59 +0100
Subject: [Windstille-commit] r1188 - in trunk: data/levels data/scripts src src/math src/scripting
Message-ID: <200601060220.k062KxL5027864@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 03:20:34 +0100 (Fri, 06 Jan 2006)
New Revision: 1188

Modified:
   trunk/data/levels/intro.nut
   trunk/data/scripts/windstille.nut
   trunk/src/dialog_manager.cpp
   trunk/src/game_session.cpp
   trunk/src/game_session.hpp
   trunk/src/math/
   trunk/src/script_manager.hpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
   trunk/src/text_area.cpp
   trunk/src/text_area.hpp
Log:
- some additional work on fade in/out

Modified: trunk/data/levels/intro.nut
===================================================================
--- trunk/data/levels/intro.nut	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/data/levels/intro.nut	2006-01-06 02:20:34 UTC (rev 1188)
@@ -1,3 +1,15 @@
+function fade_in_out(r,g,b)
+{
+  fadeout(0.2, r,g,b);
+  wait_for_fade();
+  wait(1)
+  caption_clear();
+  fadein(3);
+  wait_for_fade();
+}
+
+cutscene_begin();
+
 set_camera_active(false);
 objects.player.set_active(false);
 set_view(0, 0);
@@ -2,15 +14,28 @@
 spawn_object("scriptable-object", { name="planet", pos=[0,0],
-    sprite="images/planet.sprite", z_pos=1001 });
+                 sprite="images/planet.sprite", z_pos=1001 });
 wait(3);
-add_caption(BOTTOM, "The Big Boom. Humanity found out it could travel to the stars, and it did, en masse.");
-wait(10);
-add_caption(BOTTOM, "But it didn't take long for it to turn into The Big Bust. The guilds, the governments and the corporations staked out the best worlds.");
-wait(10);
-add_caption(BOTTOM, "Still, many individuals took their chances, even without military hardware and terraformers. Most worlds were so barren or so dangerous that whole colonies died out. In the Free Colonies that survive, life isn't easy.");
-wait(15);
-end_caption();
+
+caption_add(BOTTOM, "The Big Boom. Humanity found out it could travel to the stars, and it did, en masse.");
+
+wait_for_dialog();
+fade_in_out(1,0,0)
+
+caption_add(BOTTOM, "But it didn't take long for it to turn into The Big Bust. The guilds, the governments and the corporations staked out the best worlds.");
+
+wait_for_dialog();
+fade_in_out(1,1,1)
+
+caption_add(BOTTOM, "Still, many individuals took their chances, even without military hardware and terraformers. Most worlds were so barren or so dangerous that whole colonies died out. In the Free Colonies that survive, life isn't easy.");
+
+wait_for_dialog();
+fade_in_out(1,0,1)
+
+caption_end();
+
 objects.player.set_active(true);
 set_camera_active(true);
 objects.planet.remove();
 
+cutscene_end();
+
 /* EOF */

Modified: trunk/data/scripts/windstille.nut
===================================================================
--- trunk/data/scripts/windstille.nut	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/data/scripts/windstille.nut	2006-01-06 02:20:34 UTC (rev 1188)
@@ -1,5 +1,7 @@
-/* This script is read on Windstille startup, add all helper functions
-   that should be available in the console all the time here */
+/**
+ * This script is read on Windstille startup, add all helper functions
+ * that should be available in the console all the time here 
+ */
 
 has_nightvision <- false;
 function nightvision_enabled(...)
@@ -15,18 +17,18 @@
           has_nightvision = true;
         }
     } else {
-      return true;
-    }
+    return true;
+  }
 }
 
 function game_speed(...)
 {
   if (vargc == 1) 
     {
-        set_game_speed(vargv[0]);
+      set_game_speed(vargv[0]);
     } else {
-        return get_game_speed();
-    }
+    return get_game_speed();
+  }
 }
 
 function conversation_get()
@@ -55,7 +57,7 @@
   portrait = null;
 }
 
-function add_dialog(align, character, portrait, text)
+  function add_dialog(align, character, portrait, text)
 {
   dialog_show(align, character, portrait, text);
   wait_for_dialog();  
@@ -66,9 +68,49 @@
 {
   spawn_object("test-object", {
       name = "Test",
-      pos = [435, 709],
-      sprite = spritename
-      });
+        pos = [435, 709],
+        sprite = spritename
+        });
 }
 
+function fadein(...)
+{
+  if (vargc == 0) 
+    {
+      internal_fadein(1);
+    } 
+  else if (vargc == 1) 
+    {
+      internal_fadein(vargv[0]);
+    } 
+  else 
+    {
+      print("fadeout: Wrong number of arguments: " + vargc);
+    }
+}
+
+function fadeout(...)
+{
+  if (vargc == 0)
+    {
+      internal_fadeout_rgb(1, 0, 0, 0);
+    }
+  else if (vargc == 1)
+    {
+      internal_fadeout_rgb(vargv[0],  0, 0, 0);
+    }
+  else if (vargc == 3)
+    {
+      internal_fadeout_rgb(1,  vargv[0], vargv[1], vargv[2]);
+    }
+  else if (vargc == 4)
+    {
+      internal_fadeout_rgb(vargv[0], vargv[1], vargv[2], vargv[3]);
+    }
+  else
+    {
+      print("fadeout: Wrong number of arguments: " + vargc);
+    }
+}
+
 /* EOF */

Modified: trunk/src/dialog_manager.cpp
===================================================================
--- trunk/src/dialog_manager.cpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/dialog_manager.cpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -105,6 +105,13 @@
   }
   
   text_area->draw();
+
+  if (text_area->is_progress_complete())
+    {
+      const Vector& pos = text_area->get_cursor_pos();
+      Rectf cursor(pos.x + 8, pos.y + 8, pos.x + 24, pos.y + 24);
+      Display::fill_rect(cursor, Color(1.0, 1.0, 1.0, fabs(sin(SDL_GetTicks() / 1000.0f * M_PI * 3.0f))));
+    }
 }
 
 void

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/game_session.cpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -71,7 +71,7 @@
   SceneContext sc;
 
   float fadeout_value;
-
+  float fade_time;
   Sector* sector;
   View    view;
 
@@ -112,6 +112,7 @@
     fade_color = Color(0.0f, 0.0f, 0.0f, 1.0f);
     fade_state = FADEOUT;
     fadeout_value = 1.0f;
+    fade_time = 1.0f;
   }
   ~GameSessionImpl() {
     delete sector;
@@ -224,10 +225,11 @@
             {
               fade_state = RUNNING;
               fadeout_value = 0.0f;
+              script_manager->fire_wakeup_event(ScriptManager::FADE_DONE);
             }
           else
             {
-              fadeout_value -= delta;
+              fadeout_value -= delta * fade_time;
             }
           break;
 
@@ -235,6 +237,7 @@
           if (fadeout_value > 1.0f)
             { 
               fadeout_value = 1.0f;
+              script_manager->fire_wakeup_event(ScriptManager::FADE_DONE);
 
               switch(next_action)
                 {
@@ -252,7 +255,7 @@
             }
           else
             {
-              fadeout_value += delta;
+              fadeout_value += delta * fade_time;
             }
           break;
 
@@ -293,6 +296,7 @@
  
   sound_manager->stop_music();
 
+  impl->fade_time   = 1.0f;
   impl->fade_state    = GameSessionImpl::FADEOUT;
   impl->next_action   = GameSessionImpl::CHANGE_SECTOR_ACTION;
 }
@@ -311,6 +315,7 @@
   impl->sector->spawn_player("default");
   impl->sector->activate();
   
+  impl->fade_time   = 1.0f;
   impl->fade_state    = GameSessionImpl::FADEIN;
   impl->next_action   = GameSessionImpl::NO_ACTION;
 
@@ -378,6 +383,7 @@
     {
       sound_manager->stop_music();
       impl->fade_state  = GameSessionImpl::FADEOUT;
+      impl->fade_time   = 1.0f;
       impl->next_action = GameSessionImpl::QUIT_ACTION;
     }
 }
@@ -447,16 +453,18 @@
 }
 
 void
-GameSession::fadeout(const Color& color)
+GameSession::fadeout(float time, const Color& color)
 {
+  impl->fade_time   = 1.0f/time;
   impl->fade_color  = color;
   impl->fade_state  = GameSessionImpl::FADEOUT;
   impl->next_action = GameSessionImpl::NO_ACTION;
 }
 
 void
-GameSession::fadein()
+GameSession::fadein(float time)
 {
+  impl->fade_time   = 1.0f/time;
   impl->fade_state  = GameSessionImpl::FADEIN;
   impl->next_action = GameSessionImpl::NO_ACTION;
 }

Modified: trunk/src/game_session.hpp
===================================================================
--- trunk/src/game_session.hpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/game_session.hpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -76,8 +76,10 @@
       most part to switch into a 16:9 viewmode with black borders */
   void set_cutscene_mode(bool t);
 
-  void fadeout(const Color& color = Color());
-  void fadein();
+  /** \a time Time in seconds till the fade is complete 
+      \a color Color to which the screen should fade */
+  void fadeout(float time, const Color& color);
+  void fadein(float time);
 
   void draw();
   void update(float delta, const Controller& controller);


Property changes on: trunk/src/math
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache


Modified: trunk/src/script_manager.hpp
===================================================================
--- trunk/src/script_manager.hpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/script_manager.hpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -37,6 +37,7 @@
     TIME                = (1 << 0),
     DIALOG_CLOSED       = (1 << 1),
     CONVERSATION_CLOSED = (1 << 2),
+    FADE_DONE           = (1 << 3)
   };                  
 
   void set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float timeout = -1);

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/scripting/interface.cpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -63,13 +63,18 @@
   sound_manager->play(soundfile);
 }
 
-void add_caption(int alignment, const std::string& text)
+void caption_clear()
 {
+  DialogManager::current()->add_caption(0, "");
+}
+
+void caption_add(int alignment, const std::string& text)
+{
   DialogManager::current()->add_caption(alignment, text);
   GameSession::current()->set_control_state(GameSession::DIALOG);
 }
 
-void end_caption()
+void caption_end()
 {
   GameSession::current()->set_control_state(GameSession::GAME);
 }
@@ -99,6 +104,11 @@
   script_manager->set_wakeup_event(vm, ScriptManager::DIALOG_CLOSED);
 }
 
+void wait_for_fade(HSQUIRRELVM vm)
+{
+  script_manager->set_wakeup_event(vm, ScriptManager::FADE_DONE);
+}
+
 void dialog_show(int alignment, const std::string& character, const std::string& portrait, const std::string& text)
 {
   DialogManager::current()->add_dialog(alignment, portrait, text);
@@ -248,21 +258,16 @@
   GameSession::current()->set_cutscene_mode(false);
 }
 
-void fadeout()
+void internal_fadeout_rgb(float time, float r, float g, float b)
 {
-  GameSession::current()->fadeout();
+  GameSession::current()->fadeout(time, Color(r, g, b));
 }
 
-void fadeout_rgb(float r, float g, float b)
+void internal_fadein(float time)
 {
-  GameSession::current()->fadeout(Color(r, g, b));
+  GameSession::current()->fadein(time);
 }
 
-void fadein()
-{
-  GameSession::current()->fadein();
-}
-
 } // namespace Scripting
 
 /* EOF */

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/scripting/interface.hpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -42,8 +42,9 @@
 
 void play_sound(const std::string& soundfile);
 
-void add_caption(int alignment, const std::string& text);
-void end_caption();
+void caption_add(int alignment, const std::string& text);
+void caption_clear();
+void caption_end();
 
 void set_view(float x, float y);
 void set_camera_active(bool active);
@@ -59,6 +60,7 @@
 
 void dialog_show(int alignment, const std::string& character, const std::string& portrait, const std::string& text);
 void wait_for_dialog(HSQUIRRELVM vm) __suspend;
+void wait_for_fade(HSQUIRRELVM vm) __suspend;
 
 void conversation_add(const std::string& text);
 void conversation_show();
@@ -99,9 +101,8 @@
 void cutscene_begin();
 void cutscene_end();
 
-void fadeout();
-void fadeout_rgb(float r, float g, float b);
-void fadein();
+void internal_fadeout_rgb(float time, float r, float g, float b);
+void internal_fadein(float time);
 
 } // namespace Scripting
 

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/scripting/wrapper.cpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -245,27 +245,36 @@
   return 0;
 }
 
-static int add_caption_wrapper(HSQUIRRELVM v)
+static int caption_add_wrapper(HSQUIRRELVM v)
 {
   int arg0;
   sq_getinteger(v, 2, &arg0);
   const char* arg1;
   sq_getstring(v, 3, &arg1);
   
-  Scripting::add_caption(arg0, arg1);
+  Scripting::caption_add(arg0, arg1);
   
   return 0;
 }
 
-static int end_caption_wrapper(HSQUIRRELVM v)
+static int caption_clear_wrapper(HSQUIRRELVM v)
 {
   (void) v;
   
-  Scripting::end_caption();
+  Scripting::caption_clear();
   
   return 0;
 }
 
+static int caption_end_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::caption_end();
+  
+  return 0;
+}
+
 static int set_view_wrapper(HSQUIRRELVM v)
 {
   float arg0;
@@ -323,6 +332,15 @@
   return sq_suspendvm(v);
 }
 
+static int wait_for_fade_wrapper(HSQUIRRELVM v)
+{
+  HSQUIRRELVM arg0 = v;
+  
+  Scripting::wait_for_fade(arg0);
+  
+  return sq_suspendvm(v);
+}
+
 static int conversation_add_wrapper(HSQUIRRELVM v)
 {
   const char* arg0;
@@ -567,34 +585,28 @@
   return 0;
 }
 
-static int fadeout_wrapper(HSQUIRRELVM v)
+static int internal_fadeout_rgb_wrapper(HSQUIRRELVM v)
 {
-  (void) v;
-  
-  Scripting::fadeout();
-  
-  return 0;
-}
-
-static int fadeout_rgb_wrapper(HSQUIRRELVM v)
-{
   float arg0;
   sq_getfloat(v, 2, &arg0);
   float arg1;
   sq_getfloat(v, 3, &arg1);
   float arg2;
   sq_getfloat(v, 4, &arg2);
+  float arg3;
+  sq_getfloat(v, 5, &arg3);
   
-  Scripting::fadeout_rgb(arg0, arg1, arg2);
+  Scripting::internal_fadeout_rgb(arg0, arg1, arg2, arg3);
   
   return 0;
 }
 
-static int fadein_wrapper(HSQUIRRELVM v)
+static int internal_fadein_wrapper(HSQUIRRELVM v)
 {
-  (void) v;
+  float arg0;
+  sq_getfloat(v, 2, &arg0);
   
-  Scripting::fadein();
+  Scripting::internal_fadein(arg0);
   
   return 0;
 }
@@ -795,22 +807,30 @@
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "add_caption", -1);
-  sq_newclosure(v, &add_caption_wrapper, 0);
+  sq_pushstring(v, "caption_add", -1);
+  sq_newclosure(v, &caption_add_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'add_caption'";
+    msg << "Couldn't register function'caption_add'";
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "end_caption", -1);
-  sq_newclosure(v, &end_caption_wrapper, 0);
+  sq_pushstring(v, "caption_clear", -1);
+  sq_newclosure(v, &caption_clear_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'end_caption'";
+    msg << "Couldn't register function'caption_clear'";
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "caption_end", -1);
+  sq_newclosure(v, &caption_end_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'caption_end'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "set_view", -1);
   sq_newclosure(v, &set_view_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
@@ -851,6 +871,14 @@
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "wait_for_fade", -1);
+  sq_newclosure(v, &wait_for_fade_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'wait_for_fade'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "conversation_add", -1);
   sq_newclosure(v, &conversation_add_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
@@ -1051,30 +1079,22 @@
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "fadeout", -1);
-  sq_newclosure(v, &fadeout_wrapper, 0);
+  sq_pushstring(v, "internal_fadeout_rgb", -1);
+  sq_newclosure(v, &internal_fadeout_rgb_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'fadeout'";
+    msg << "Couldn't register function'internal_fadeout_rgb'";
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "fadeout_rgb", -1);
-  sq_newclosure(v, &fadeout_rgb_wrapper, 0);
+  sq_pushstring(v, "internal_fadein", -1);
+  sq_newclosure(v, &internal_fadein_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'fadeout_rgb'";
+    msg << "Couldn't register function'internal_fadein'";
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "fadein", -1);
-  sq_newclosure(v, &fadein_wrapper, 0);
-  if(SQ_FAILED(sq_createslot(v, -3))) {
-    std::ostringstream msg;
-    msg << "Couldn't register function'fadein'";
-    throw SquirrelError(v, msg.str());
-  }
-
   sq_pushstring(v, "spawn_object", -1);
   sq_newclosure(v, &spawn_object_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {

Modified: trunk/src/text_area.cpp
===================================================================
--- trunk/src/text_area.cpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/text_area.cpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -54,6 +54,7 @@
   bool letter_by_letter;
   bool progress_complete;
   std::vector<TextAreaCommand> commands;
+  Vector cursor_pos;
 };
 
 TextArea::TextArea(const Rectf& rect, bool letter_by_letter)
@@ -356,11 +357,16 @@
           break;
         }
     }
+
+  // FIXME: This is not correct, since the last command itself might
+  // not be completly excecuted
   if (i == impl->commands.end())
     impl->progress_complete = true;
     
   glEnd();
   glPopMatrix();
+
+  impl->cursor_pos = Vector(x_pos + impl->rect.left, y_pos + impl->rect.top);
 }
 
 void
@@ -375,4 +381,10 @@
   return impl->rect;
 }
 
+Vector
+TextArea::get_cursor_pos() const
+{
+  return impl->cursor_pos;
+}
+
 /* EOF */

Modified: trunk/src/text_area.hpp
===================================================================
--- trunk/src/text_area.hpp	2006-01-05 23:06:06 UTC (rev 1187)
+++ trunk/src/text_area.hpp	2006-01-06 02:20:34 UTC (rev 1188)
@@ -42,6 +42,7 @@
   TextArea(const Rectf& rect, bool letter_by_letter);
   ~TextArea();
 
+  /** Set the rectangle into which the TextArea should fill its text */
   void set_rect(const Rectf& rect);
 
   /** Sets the text to be displayed in the text box */
@@ -59,7 +60,12 @@
   void update(float delta);
   void draw();
 
+  /** Return the rectangle that TextArea fills its text into */
   Rectf get_rect() const;
+
+  /** Return the position of the last character in the TextArea,
+      usefull to display a blinking cursor or things like that */
+  Vector get_cursor_pos() const;
 private:
   TextAreaImpl* impl;
 };



From grumbel at berlios.de  Fri Jan  6 17:46:25 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 17:46:25 +0100
Subject: [Windstille-commit] r1189 - in trunk/data: blender/yagor models/characters/yagor
Message-ID: <200601061646.k06GkPbv004380@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 17:45:46 +0100 (Fri, 06 Jan 2006)
New Revision: 1189

Added:
   trunk/data/models/characters/yagor/facetexture.xcf
   trunk/data/models/characters/yagor/yagor.blend
Removed:
   trunk/data/blender/yagor/clothtexture.png
   trunk/data/blender/yagor/facetexture.png
   trunk/data/blender/yagor/facetexture.xcf
   trunk/data/blender/yagor/yagor.blend
Log:
- moving data into new location

Deleted: trunk/data/blender/yagor/clothtexture.png
===================================================================
(Binary files differ)

Deleted: trunk/data/blender/yagor/facetexture.png
===================================================================
(Binary files differ)

Deleted: trunk/data/blender/yagor/facetexture.xcf
===================================================================
(Binary files differ)

Deleted: trunk/data/blender/yagor/yagor.blend
===================================================================
(Binary files differ)

Copied: trunk/data/models/characters/yagor/facetexture.xcf (from rev 1187, trunk/data/blender/yagor/facetexture.xcf)

Copied: trunk/data/models/characters/yagor/yagor.blend (from rev 1187, trunk/data/blender/yagor/yagor.blend)
===================================================================
(Binary files differ)



From grumbel at berlios.de  Fri Jan  6 17:48:24 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 17:48:24 +0100
Subject: [Windstille-commit] r1190 - in trunk/data: blender models/characters/yagor
Message-ID: <200601061648.k06GmOTN004710@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 17:48:24 +0100 (Fri, 06 Jan 2006)
New Revision: 1190

Added:
   trunk/data/models/characters/yagor/background.png
Removed:
   trunk/data/blender/yagor/
Log:
- moving data into new location

Copied: trunk/data/models/characters/yagor/background.png (from rev 1187, trunk/data/blender/yagor/background.png)



From grumbel at berlios.de  Fri Jan  6 20:25:34 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 20:25:34 +0100
Subject: [Windstille-commit] r1191 - in trunk/src: . input math scripting sprite3d
Message-ID: <200601061925.k06JPYWM010239@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 20:25:20 +0100 (Fri, 06 Jan 2006)
New Revision: 1191

Removed:
   trunk/src/input/input_manager_player.cpp
   trunk/src/input/input_manager_player.hpp
   trunk/src/input/input_recorder.cpp
   trunk/src/input/input_recorder.hpp
Modified:
   trunk/src/SConscript
   trunk/src/camera.cpp
   trunk/src/camera.hpp
   trunk/src/input/controller_description.hpp
   trunk/src/input/input_configurator.cpp
   trunk/src/input/input_manager.cpp
   trunk/src/input/input_manager.hpp
   trunk/src/input/input_manager_sdl.cpp
   trunk/src/input/input_manager_sdl.hpp
   trunk/src/math/vector.hpp
   trunk/src/script_manager.hpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/sprite3dview.cpp
   trunk/src/sprite3dview.hpp
   trunk/src/windstille_main.cpp
Log:
- some cleanup in input
- added camera path support to scripting

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/SConscript	2006-01-06 19:25:20 UTC (rev 1191)
@@ -126,9 +126,7 @@
 'input/input_configurator.cpp',
 'input/input_manager.cpp',
 'input/input_manager_impl.cpp',
-'input/input_manager_player.cpp',
 'input/input_manager_sdl.cpp',
-'input/input_recorder.cpp',
 'lisp/getters.cpp',
 'lisp/lexer.cpp',
 'lisp/lisp.cpp',

Modified: trunk/src/camera.cpp
===================================================================
--- trunk/src/camera.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/camera.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -19,65 +19,129 @@
 
 #include "player.hpp"
 #include "sector.hpp"
+#include "script_manager.hpp"
 #include "display/display.hpp"
 #include "camera.hpp"
 
 Camera* Camera::current_ = 0;
 
+/**
+ * Simple linear interpolation to move along a given vector path
+ * FIXME: Could add curves and different speed per vertex
+ */
+Vector interpolate_path(const std::vector<Vector>& path, float length)
+{
+  float length_so_far = 0.0f;
+  for(std::vector<Vector>::size_type i = 0; i < path.size()-1; ++i)
+    {
+      Vector segment = path[i+1] - path[i];
+      float segment_length = segment.length();
+
+      if (length_so_far + segment_length > length)
+        {
+          float factor = (length - length_so_far) / segment_length;
+          return path[i] + segment * factor;
+        }
+      length_so_far += segment_length;
+    }
+  return path.back();
+}
+
 Camera::Camera()
-  : pos(0, 0),
-    active(true)
+  : pos(0, 0)
 {
+  path_pos = 0;
   current_ = this;
+  mode     = CAMERA_FOLLOW_PLAYER;
 }
 
 void
-Camera::update(float )
+Camera::update(float delta)
 {
-  if (!active)
-    return;
-    
-  int hscroll_threshold = 100;
-  int vscroll_threshold = 150;
+  switch (mode)
+    {
+    case CAMERA_INACTIVE:
+      // do nothing
+      break;
 
-  Vector tpos = Player::current()->get_pos();
+    case CAMERA_FOLLOW_PLAYER:
+      {
+        int hscroll_threshold = 100;
+        int vscroll_threshold = 150;
 
-  float dist = tpos.x - pos.x;
-  if (dist > hscroll_threshold)
-    pos.x = tpos.x - hscroll_threshold;
-  else if (dist < - hscroll_threshold)
-    pos.x = tpos.x + hscroll_threshold;
+        Vector tpos = Player::current()->get_pos();
 
-  dist = tpos.y - pos.y;
-  if (dist > vscroll_threshold)
-    pos.y = tpos.y - vscroll_threshold;
-  else if (dist < -vscroll_threshold)
-    pos.y = tpos.y + vscroll_threshold;
+        float dist = tpos.x - pos.x;
+        if (dist > hscroll_threshold)
+          pos.x = tpos.x - hscroll_threshold;
+        else if (dist < - hscroll_threshold)
+          pos.x = tpos.x + hscroll_threshold;
 
-  int start_x = Display::get_width()/2;
-  int end_x   = Sector::current()->get_width() - Display::get_width()/2;
+        dist = tpos.y - pos.y;
+        if (dist > vscroll_threshold)
+          pos.y = tpos.y - vscroll_threshold;
+        else if (dist < -vscroll_threshold)
+          pos.y = tpos.y + vscroll_threshold;
 
-  int start_y = Display::get_height()/2;
-  int end_y   = Sector::current()->get_height() - Display::get_height()/2;
+        int start_x = Display::get_width()/2;
+        int end_x   = Sector::current()->get_width() - Display::get_width()/2;
 
-  if (pos.x < start_x)
-    pos.x = start_x;
+        int start_y = Display::get_height()/2;
+        int end_y   = Sector::current()->get_height() - Display::get_height()/2;
 
-  if (pos.y < start_y)
-    pos.y = start_y;
+        if (pos.x < start_x)
+          pos.x = start_x;
 
-  if (pos.x > end_x)
-    pos.x = end_x;
+        if (pos.y < start_y)
+          pos.y = start_y;
 
-  if (pos.y > end_y)
-    pos.y = end_y;
+        if (pos.x > end_x)
+          pos.x = end_x;
+
+        if (pos.y > end_y)
+          pos.y = end_y;
+      }
+      break;
+
+    case CAMERA_FOLLOW_PATH:
+      {
+        assert(!path.empty());
+        path_pos += delta * 50.0f;
+
+        Vector p = interpolate_path(path, path_pos);
+        if (p == path.back())
+          {
+            script_manager->fire_wakeup_event(ScriptManager::CAMERA_DONE);
+            set_mode(CAMERA_INACTIVE);
+          }
+        set_pos(p.x, p.y);
+      }
+      break;
+    }
 }
 
 void
 Camera::set_pos(float x, float y)
 {
-  pos.x = x + Display::get_width()/2;
-  pos.y = y + Display::get_height()/2;
+  // Casting here isn't really necessary, but should about some
+  // pixel-jitter when scrolling with subpixel values and pixel
+  // precise images
+  pos.x = static_cast<int>(x + Display::get_width()/2);
+  pos.y = static_cast<int>(y + Display::get_height()/2);
 }
 
+void
+Camera::set_path(const std::vector<Vector>& path_)
+{
+  path     = path_;
+  path_pos = 0;
+  mode     = CAMERA_FOLLOW_PATH;
+}
+
+void
+Camera::set_mode(Mode mode_)
+{
+  mode = mode_;
+}
+
 /* EOF */

Modified: trunk/src/camera.hpp
===================================================================
--- trunk/src/camera.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/camera.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -20,15 +20,23 @@
 #ifndef HEADER_CAMERA_HXX
 #define HEADER_CAMERA_HXX
 
-/** This class manages the virtual camera movement, it follows the
-    player, allows the player to watch around, might zoom out if
-    interesting stuff happens out of the screen and such
+/** 
+ * This class manages the virtual camera movement, it follows the
+ * player, allows the player to watch around, might zoom out if
+ * interesting stuff happens out of the screen and such
  */
 class Camera
 {
+public:
+  enum Mode { CAMERA_INACTIVE, CAMERA_FOLLOW_PLAYER, CAMERA_FOLLOW_PATH };
+
 private:
+  Mode mode;
+
   Vector pos;
-  bool active;
+  
+  std::vector<Vector> path;
+  float path_pos;
 
   static Camera* current_;
 public:
@@ -36,10 +44,17 @@
 
   Camera();
 
-  void update(float delta);
+  void   update(float delta);
   Vector get_pos() const { return pos; }
-  void set_pos(float x, float y);
-  void set_active(bool arg_active) { active = arg_active; }
+  void   set_pos(float x, float y);
+
+  void   set_mode(Mode mode_);
+
+  /**
+   * Set Camera to follow the given path
+   */
+  void   set_path(const std::vector<Vector>& path_);
+
 private:
   Camera (const Camera&);
   Camera& operator= (const Camera&);

Modified: trunk/src/input/controller_description.hpp
===================================================================
--- trunk/src/input/controller_description.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/controller_description.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -51,10 +51,6 @@
   void add_button(const std::string& name, int id);
   void add_axis  (const std::string& name, int id); 
 
-  int get_button_count() const;
-  int get_axis_count() const;
-  int get_keyboard_count() const;
-
   const InputEventDefinition& get_definition(int id) const;
   const InputEventDefinition& get_definition(const std::string& name) const;
 };

Modified: trunk/src/input/input_configurator.cpp
===================================================================
--- trunk/src/input/input_configurator.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_configurator.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -53,9 +53,12 @@
   add_configure_item(ConfigureItem::CONFIGURE_BUTTON, SECONDARY_BUTTON);
   add_configure_item(ConfigureItem::CONFIGURE_BUTTON, PRIMARY_BUTTON);
 
+  add_configure_item(ConfigureItem::CONFIGURE_AXIS, X_AXIS);
   add_configure_item(ConfigureItem::CONFIGURE_AXIS, Y_AXIS);
-  add_configure_item(ConfigureItem::CONFIGURE_AXIS, X_AXIS);
 
+  // add_configure_item(ConfigureItem::CONFIGURE_AXIS, X2_AXIS);
+  // add_configure_item(ConfigureItem::CONFIGURE_AXIS, Y2_AXIS);
+
   print_item();
 
   InputManagerSDL::current()->clear_bindings();

Modified: trunk/src/input/input_manager.cpp
===================================================================
--- trunk/src/input/input_manager.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -27,26 +27,19 @@
 #include "lisp/lisp.hpp"
 #include "lisp/properties.hpp"
 #include "input_manager_sdl.hpp"
-#include "input_manager_player.hpp"
 #include "input_manager_impl.hpp"
-#include "input_recorder.hpp"
 #include "input_manager.hpp"
 
 InputManagerImpl* InputManager::impl = 0;
-InputRecorder* InputManager::recorder = 0;
 
 void
-InputManager::init_playback(const std::string& filename)
-{
-  impl = new InputManagerPlayer(filename);
-}
-
-void
 InputManager::init(const std::string& filename)
 {
   std::auto_ptr<lisp::Lisp> root (lisp::Parser::parse(filename));
   lisp::Properties rootp(root.get());
 
+  std::cout << "InputManager: " << filename << std::endl;
+
   const lisp::Lisp* controller = 0;
   if(rootp.get("windstille-controller", controller) == false) {
     std::ostringstream msg;
@@ -57,15 +50,6 @@
   impl = new InputManagerSDL(controller);
 }
 
-void
-InputManager::setup_recorder(const std::string& filename)
-{
-  if (recorder)
-    delete recorder;
-
-  recorder = new InputRecorder(filename);
-}
-
 void 
 InputManager::deinit()
 {
@@ -77,8 +61,6 @@
 {
   assert(impl);
   impl->update(delta);
-  if (recorder)
-    recorder->record(get_controller());
 }
 
 const Controller&

Modified: trunk/src/input/input_manager.hpp
===================================================================
--- trunk/src/input/input_manager.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -25,7 +25,6 @@
 #include "controller.hpp"
 #include "input_event.hpp"
 
-class InputRecorder;
 class InputManagerImpl;
 
 /** */
@@ -33,21 +32,17 @@
 {
 private:
   static InputManagerImpl* impl;
-  static InputRecorder* recorder;
+
 public:
   /** Init the InputManager with the data found in \a filename */
   static void init(const std::string& filename = std::string());
 
-  /** Init the playback of a previously recorded file */
-  static void init_playback(const std::string& filenam);
   static void deinit();
 
-  /** Record all input events to \a filename */
-  static void setup_recorder(const std::string& filename);
-
   static void update(float delta);
   static const Controller& get_controller();
   static void clear();
+
 private:
   InputManager(const InputManager&);
   InputManager& operator=(const InputManager&);

Deleted: trunk/src/input/input_manager_player.cpp
===================================================================
--- trunk/src/input/input_manager_player.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager_player.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -1,99 +0,0 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-#include <iostream>
-#include "input_manager_player.hpp"
-
-InputManagerPlayer::InputManagerPlayer(const std::string& filename)
-{
-  (void) filename;
-#if 0
-  // FIXME
-  std::cout << "InputManagerPlayer::InputManagerPlayer(" << filename << ")" << std::endl;
-  entry_counter = 0;
-  lisp_object_t* port = lisp_read_from_file(filename.c_str());
-  lisp_object_t* entry;
-  while(scm_eof_object_p(entry = scm_read(port)) == lisp_object_t*_BOOL_F)
-    {
-      InputEventLst lst;
-      int entry_num = lisp_scm2int(lisp_cadr(entry));
-      entry = lisp_cddr(entry);
-      
-      while(lisp_cons_p(entry))
-        {
-          lst.push_back(scm2event(lisp_car(entry)));
-          entry = lisp_cdr(entry);
-        }
-      entries.push(Entry(entry_num, lst));
-    }
-  scm_close_port(port);
-#endif 
-}
-
-InputEvent
-InputManagerPlayer::scm2event(const lisp::Lisp* )
-{
-  InputEvent event;
-#if 0
-  lisp_object_t* sym  = lisp_car(entry);
-  lisp_object_t* data = lisp_cdr(entry);
-
-  if (strcmp("axis", lisp_symbol(sym)) == 0)
-    {
-      event.type = AXIS_EVENT;
-      event.axis.name = lisp_integer(lisp_list_nth(data, 0));
-      event.axis.pos  = lisp_real   (lisp_list_nth(data, 1));
-    } 
-  else if (strcmp("button", lisp_symbol(sym)) == 0)
-    {
-      event.type = BUTTON_EVENT;
-      event.button.name = lisp_integer(lisp_list_nth(data, 0));
-      event.button.down = lisp_real   (lisp_list_nth(data, 1));
-    } 
-  else 
-    {
-      std::cout << "scm2event: Unknown sym: " << std::endl; //Guile::scm2string(sym) << std::endl;
-    }
-#endif
-  return event;
-}
-  
-void
-InputManagerPlayer::update(float delta)
-{
-  (void) delta;
-  if (entries.front().entry_num == entry_counter)
-    {
-      controller.set_events(entries.front().events);
-      
-      for (InputEventLst::const_iterator i = controller.get_events().begin(); 
-           i != controller.get_events().end(); ++i)
-        {
-          if (i->type == AXIS_EVENT)
-            controller.set_axis_state(i->axis.name, i->axis.pos);
-          else if  (i->type == BUTTON_EVENT)
-            controller.set_button_state(i->button.name, i->button.down);
-        }
-      entries.pop();
-    }
-
-  entry_counter += 1;
-}
-
-/* EOF */

Deleted: trunk/src/input/input_manager_player.hpp
===================================================================
--- trunk/src/input/input_manager_player.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager_player.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -1,56 +0,0 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-#ifndef HEADER_INPUT_MANAGER_PLAYER_HXX
-#define HEADER_INPUT_MANAGER_PLAYER_HXX
-
-#include <queue>
-#include <string>
-#include "input_manager_impl.hpp"
-#include "lisp/lisp.hpp"
-
-/** Playback class for events recorded my the InputRecorder */
-class InputManagerPlayer : public InputManagerImpl
-{
-private:
-  struct Entry 
-  {
-    Entry(int num, const InputEventLst& lst) 
-      : entry_num(num), events(lst)
-    {}
-    int entry_num;
-    InputEventLst events;
-  };
-
-  int entry_counter;
-  std::queue<Entry> entries;
-public:
-  InputManagerPlayer(const std::string& filename);
-  
-  void update(float delta);
-private:
-  InputEvent scm2event(const lisp::Lisp* lisp);
-
-  InputManagerPlayer (const InputManagerPlayer&);
-  InputManagerPlayer& operator= (const InputManagerPlayer&);
-};
-
-#endif
-
-/* EOF */

Modified: trunk/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/src/input/input_manager_sdl.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager_sdl.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -135,6 +135,7 @@
         {
           lisp::Properties dev_prop(*iter);
           lisp::PropertyIterator<const lisp::Lisp*> dev_iter = dev_prop.get_iter();
+
           while(dev_iter.next())
             {
               if (dev_iter.item() == "joystick-axis")
@@ -216,9 +217,13 @@
       else if (event.keysym.sym == i->plus)
         {
           if (event.state)
-            add_axis_event(i->event, 1.0f);
+            {
+              add_axis_event(i->event, 1.0f);
+            }
           else if (!keystate[i->minus])
-            add_axis_event(i->event, 0.0f);
+            {
+              add_axis_event(i->event, 0.0f);
+            }
         }
     }
 }

Modified: trunk/src/input/input_manager_sdl.hpp
===================================================================
--- trunk/src/input/input_manager_sdl.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_manager_sdl.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -92,9 +92,10 @@
   void clear_bindings();
 
   std::string keyid_to_string(SDLKey id);
-  SDLKey string_to_keyid(const std::string& str);
+  SDLKey      string_to_keyid(const std::string& str);
 
   void on_event(const SDL_Event& event);
+
 private:
   void on_key_event(const SDL_KeyboardEvent& key);
   void on_joy_button_event(const SDL_JoyButtonEvent& button);

Deleted: trunk/src/input/input_recorder.cpp
===================================================================
--- trunk/src/input/input_recorder.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_recorder.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -1,65 +0,0 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-#include "input_recorder.hpp"
-
-InputRecorder::InputRecorder(const std::string& filename)
-  : out(filename.c_str())
-{
-  entry_counter = 0;
-}
-
-InputRecorder::~InputRecorder()
-{
-  out.close();
-}
-
-void
-InputRecorder::record(const Controller& controller)
-{
-  InputEventLst lst = controller.get_events();
-
-  if (!lst.empty())
-    {
-      out << "(entry " << entry_counter << std::endl;
- 
-      for (InputEventLst::iterator i = lst.begin(); i != lst.end(); ++i)
-        {
-          switch(i->type)
-            {
-            case AXIS_EVENT:
-              out << "  (axis " << i->axis.name << " " << i->axis.get_pos() << ")" << std::endl;
-              break;
-          
-            case BUTTON_EVENT:
-              out << "  (button " << i->button.name << " " << i->button.down << ")" << std::endl;
-              break;
-              
-            case KEYBOARD_EVENT:
-              out << "  (keyboard " << i->keyboard.key_type << " " << i->keyboard.code << ")" << std::endl;
-              break;
-            }
-        }
-      out << ")\n" << std::endl;
-    }
-
-  entry_counter += 1;
-}
-
-/* EOF */

Deleted: trunk/src/input/input_recorder.hpp
===================================================================
--- trunk/src/input/input_recorder.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/input/input_recorder.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -1,46 +0,0 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-#ifndef HEADER_INPUT_RECORDER_HXX
-#define HEADER_INPUT_RECORDER_HXX
-
-#include <fstream>
-#include "controller.hpp"
-
-/** The InputRecorder hooks into the InputManager and records all
-    input events to a file, thus allowing the later playback of the
-    events. */
-class InputRecorder
-{
-private:
-  std::ofstream out;
-  int entry_counter;
-public:
-  InputRecorder(const std::string& filename);
-  ~InputRecorder();
-
-  void record(const Controller& controller);
-private:
-  InputRecorder (const InputRecorder&);
-  InputRecorder& operator= (const InputRecorder&);
-};
-
-#endif
-
-/* EOF */

Modified: trunk/src/math/vector.hpp
===================================================================
--- trunk/src/math/vector.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/math/vector.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -117,6 +117,8 @@
     }
 
   float magnitude() const;
+  float length() const { return magnitude(); }
+
   Vector unit() const;
   void normalize();
 

Modified: trunk/src/script_manager.hpp
===================================================================
--- trunk/src/script_manager.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/script_manager.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -37,7 +37,8 @@
     TIME                = (1 << 0),
     DIALOG_CLOSED       = (1 << 1),
     CONVERSATION_CLOSED = (1 << 2),
-    FADE_DONE           = (1 << 3)
+    FADE_DONE           = (1 << 3),
+    CAMERA_DONE         = (1 << 4)
   };                  
 
   void set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float timeout = -1);

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/scripting/interface.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -84,11 +84,32 @@
   Camera::current()->set_pos(x, y);
 }
 
-void set_camera_active(bool active)
+
+std::vector<Vector> camera_path;
+void camera_begin_path()
 {
-  Camera::current()->set_active(active);
+  camera_path.clear();
 }
 
+void camera_add_point(float x, float y)
+{
+  camera_path.push_back(Vector(x, y));
+}
+
+void camera_end_path()
+{
+  Camera::current()->set_path(camera_path);
+}
+
+void camera_set_active(bool active)
+{
+  // FIXME: This function is only for backward compability
+  if (active)
+    Camera::current()->set_mode(Camera::CAMERA_FOLLOW_PLAYER);
+  else
+    Camera::current()->set_mode(Camera::CAMERA_INACTIVE);
+}
+
 void set_controller_help_active(bool active)
 {
   ControllerHelpWindow::current()->set_active(active);
@@ -104,6 +125,11 @@
   script_manager->set_wakeup_event(vm, ScriptManager::DIALOG_CLOSED);
 }
 
+void wait_for_camera(HSQUIRRELVM vm)
+{
+  script_manager->set_wakeup_event(vm, ScriptManager::CAMERA_DONE);
+}
+
 void wait_for_fade(HSQUIRRELVM vm)
 {
   script_manager->set_wakeup_event(vm, ScriptManager::FADE_DONE);

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/scripting/interface.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -46,8 +46,12 @@
 void caption_clear();
 void caption_end();
 
+void camera_set_active(bool active);
+void camera_begin_path();
+void camera_add_point(float x, float y);
+void camera_end_path();
+
 void set_view(float x, float y);
-void set_camera_active(bool active);
 void set_controller_help_active(bool active);
 
 // dialog alignment constants
@@ -61,6 +65,7 @@
 void dialog_show(int alignment, const std::string& character, const std::string& portrait, const std::string& text);
 void wait_for_dialog(HSQUIRRELVM vm) __suspend;
 void wait_for_fade(HSQUIRRELVM vm) __suspend;
+void wait_for_camera(HSQUIRRELVM vm) __suspend;
 
 void conversation_add(const std::string& text);
 void conversation_show();

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/scripting/wrapper.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -275,28 +275,58 @@
   return 0;
 }
 
-static int set_view_wrapper(HSQUIRRELVM v)
+static int camera_set_active_wrapper(HSQUIRRELVM v)
 {
+  SQBool arg0;
+  sq_getbool(v, 2, &arg0);
+  
+  Scripting::camera_set_active(arg0);
+  
+  return 0;
+}
+
+static int camera_begin_path_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::camera_begin_path();
+  
+  return 0;
+}
+
+static int camera_add_point_wrapper(HSQUIRRELVM v)
+{
   float arg0;
   sq_getfloat(v, 2, &arg0);
   float arg1;
   sq_getfloat(v, 3, &arg1);
   
-  Scripting::set_view(arg0, arg1);
+  Scripting::camera_add_point(arg0, arg1);
   
   return 0;
 }
 
-static int set_camera_active_wrapper(HSQUIRRELVM v)
+static int camera_end_path_wrapper(HSQUIRRELVM v)
 {
-  SQBool arg0;
-  sq_getbool(v, 2, &arg0);
+  (void) v;
   
-  Scripting::set_camera_active(arg0);
+  Scripting::camera_end_path();
   
   return 0;
 }
 
+static int set_view_wrapper(HSQUIRRELVM v)
+{
+  float arg0;
+  sq_getfloat(v, 2, &arg0);
+  float arg1;
+  sq_getfloat(v, 3, &arg1);
+  
+  Scripting::set_view(arg0, arg1);
+  
+  return 0;
+}
+
 static int set_controller_help_active_wrapper(HSQUIRRELVM v)
 {
   SQBool arg0;
@@ -341,6 +371,15 @@
   return sq_suspendvm(v);
 }
 
+static int wait_for_camera_wrapper(HSQUIRRELVM v)
+{
+  HSQUIRRELVM arg0 = v;
+  
+  Scripting::wait_for_camera(arg0);
+  
+  return sq_suspendvm(v);
+}
+
 static int conversation_add_wrapper(HSQUIRRELVM v)
 {
   const char* arg0;
@@ -831,22 +870,46 @@
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "set_view", -1);
-  sq_newclosure(v, &set_view_wrapper, 0);
+  sq_pushstring(v, "camera_set_active", -1);
+  sq_newclosure(v, &camera_set_active_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'set_view'";
+    msg << "Couldn't register function'camera_set_active'";
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "set_camera_active", -1);
-  sq_newclosure(v, &set_camera_active_wrapper, 0);
+  sq_pushstring(v, "camera_begin_path", -1);
+  sq_newclosure(v, &camera_begin_path_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'set_camera_active'";
+    msg << "Couldn't register function'camera_begin_path'";
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "camera_add_point", -1);
+  sq_newclosure(v, &camera_add_point_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'camera_add_point'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "camera_end_path", -1);
+  sq_newclosure(v, &camera_end_path_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'camera_end_path'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "set_view", -1);
+  sq_newclosure(v, &set_view_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'set_view'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "set_controller_help_active", -1);
   sq_newclosure(v, &set_controller_help_active_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
@@ -879,6 +942,14 @@
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "wait_for_camera", -1);
+  sq_newclosure(v, &wait_for_camera_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'wait_for_camera'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "conversation_add", -1);
   sq_newclosure(v, &conversation_add_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -19,6 +19,7 @@
 
 #include "sprite3d/sprite3d.hpp"
 
+#include <assert.h>
 #include <vector>
 #include <stdint.h>
 #include <sstream>
@@ -36,22 +37,24 @@
 using namespace sprite3d;
 
 Sprite3D::Sprite3D()
-  : data(0), actions_switched(false)
+  : data(0), 
+    actions_switched(false)
 {
 }
 
 Sprite3D::Sprite3D(const std::string& filename)
-  : data(sprite3d_manager->create_data(filename)), actions_switched(false)
+  : data(sprite3d_manager->create_data(filename)),
+    actions_switched(false)
 {
-  frame1.action = &data->actions[0];
-  frame1.frame = 0;
-  frame1.rot   = false;
-  frame1.speed = 1.0;
-  frame2       = frame1;
+  frame1.action         = &data->actions[0];
+  frame1.frame          = 0;
+  frame1.rot            = false;
+  frame1.speed          = 1.0;
+  frame2                = frame1;
   abort_at_frame.action = 0;
-  next_frame.action  = 0;
-  next_action.action = 0;
-  blend_time = 0.0;
+  next_frame.action     = 0;
+  next_action.action    = 0;
+  blend_time            = 0.0;
 
   blend_sfactor = GL_ONE;
   blend_dfactor = GL_ZERO;
@@ -64,6 +67,7 @@
 void
 Sprite3D::set_action(const std::string& actionname, float speed)
 {
+  assert(data);
   next_frame.action = & data->get_action(actionname);
   // set to last action so that next set_next_frame call will result in frame 0
   if(speed >= 0) {
@@ -92,7 +96,7 @@
 {
   std::vector<std::string> actions;
   for(std::vector<Action>::const_iterator i = data->actions.begin(); 
-      i != data->actions.begin(); 
+      i != data->actions.end(); 
       ++i)
     {
       actions.push_back(i->name);

Modified: trunk/src/sprite3dview.cpp
===================================================================
--- trunk/src/sprite3dview.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/sprite3dview.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -34,7 +34,7 @@
 Sprite3DView::Sprite3DView()
 {
   current_action = 0;
-  //sprite = Sprite3D("models/characters/bob/bob.wsprite");
+
   sprite = Sprite3D("models/characters/jane/jane.wsprite");
   actions = sprite.get_actions();
 
@@ -50,6 +50,13 @@
 }
 
 void
+Sprite3DView::set_model(const std::string& filename)
+{
+  sprite  = Sprite3D(filename);
+  actions = sprite.get_actions();
+}
+
+void
 Sprite3DView::draw()
 {
   sc.reset_modelview();
@@ -62,6 +69,7 @@
   sc.translate(Display::get_width()/2, Display::get_height()/2 + 200);
   sc.scale(3.0f, 3.0f);
   sc.rotate(rotx, 0.0f, 1.0f, 0.0f);
+  sc.rotate(roty, 1.0f, 0.0f, 0.0f);
   sprite.draw(sc.color(), Vector(0,0), 0); 
   sc.pop_modelview();
 
@@ -118,15 +126,15 @@
         current_action -= 1;
     }
 
-  if (last_action != current_action)
+  if (last_action != current_action && !actions.empty())
     {
       sprite.set_action(actions[current_action]);
     }
 
-  roty += controller.get_axis_state(X2_AXIS) * 30.0f;
-  rotx += controller.get_axis_state(Y2_AXIS) * 30.0f;
+  rotx += controller.get_axis_state(X2_AXIS) * 50.0f * delta;
+  roty += controller.get_axis_state(Y2_AXIS) * 50.0f * delta;
 
-  std::cout << controller.get_axis_state(Y2_AXIS) << std::endl;
+  //std::cout << controller.get_axis_state(Y2_AXIS) << std::endl;
 }
 
 /* EOF */

Modified: trunk/src/sprite3dview.hpp
===================================================================
--- trunk/src/sprite3dview.hpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/sprite3dview.hpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -51,6 +51,8 @@
   void draw();
   void update(float delta, const Controller& controller);
 
+  void set_model(const std::string& filename);
+
 private:
   Sprite3DView (const Sprite3DView&);
   Sprite3DView& operator= (const Sprite3DView&);

Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-06 16:48:24 UTC (rev 1190)
+++ trunk/src/windstille_main.cpp	2006-01-06 19:25:20 UTC (rev 1191)
@@ -92,7 +92,6 @@
       controller_description.add_axis("y2-axis", Y2_AXIS);
     }
 
-    if (!config.get<std::string>("playback-file").is_set())
       {
         if (config.get<std::string>("controller-file").is_set())
           InputManager::init(config.get<std::string>("controller-file").get());
@@ -101,21 +100,24 @@
         else
           InputManager::init("controller/keyboard.scm");
       }
-    else
-      {
-        InputManager::init_playback(config.get_string("playback-file"));
-      }
 
-    if (config.is_set("recorder-file"))
-      InputManager::setup_recorder(config.get_string("recorder-file"));
-    
     if (debug) std::cout << "Initialising TileFactory" << std::endl;
     TileFactory::init();
 
     if (sprite3dview)
       {
+        Sprite3DView* sprite3dview = new Sprite3DView();
+
+        if (config.get<std::string>("levelfile").is_set())
+          {
+            // FIXME: Looks a little hacky, doesn't it?
+            std::string leveldir = dirname(config.get_string("levelfile"));
+            PHYSFS_addToSearchPath(leveldir.c_str(), true);
+            sprite3dview->set_model(basename(config.get_string("levelfile")));
+          }
+            
         // Launching Sprite3DView instead of game
-        screen_manager.set_screen(new Sprite3DView());
+        screen_manager.set_screen(sprite3dview);
       }
     else
       {



From grumbel at berlios.de  Fri Jan  6 21:51:23 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jan 2006 21:51:23 +0100
Subject: [Windstille-commit] r1192 - in trunk/src: . scripting
Message-ID: <200601062051.k06KpNhY031372@sheep.berlios.de>

Author: grumbel
Date: 2006-01-06 21:51:22 +0100 (Fri, 06 Jan 2006)
New Revision: 1192

Modified:
   trunk/src/camera.cpp
   trunk/src/camera.hpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
   trunk/src/view.cpp
Log:
- added zooms to camera paths (little buggy right now)

Modified: trunk/src/camera.cpp
===================================================================
--- trunk/src/camera.cpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/camera.cpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -29,18 +29,19 @@
  * Simple linear interpolation to move along a given vector path
  * FIXME: Could add curves and different speed per vertex
  */
-Vector interpolate_path(const std::vector<Vector>& path, float length)
+Camera::PathPoint interpolate_path(const std::vector<Camera::PathPoint>& path, float length)
 {
   float length_so_far = 0.0f;
-  for(std::vector<Vector>::size_type i = 0; i < path.size()-1; ++i)
+  for(std::vector<Camera::PathPoint>::size_type i = 0; i < path.size()-1; ++i)
     {
-      Vector segment = path[i+1] - path[i];
-      float segment_length = segment.length();
+      Vector segment = path[i+1].pos - path[i].pos;
+      float  segment_length = segment.length();
 
       if (length_so_far + segment_length > length)
         {
           float factor = (length - length_so_far) / segment_length;
-          return path[i] + segment * factor;
+          return Camera::PathPoint(path[i].pos + segment * factor,
+                                   (factor * path[i+1].zoom) + ((1.0f - factor) * path[i].zoom));
         }
       length_so_far += segment_length;
     }
@@ -48,7 +49,7 @@
 }
 
 Camera::Camera()
-  : pos(0, 0)
+  : pos(0, 0), zoom(1.0f)
 {
   path_pos = 0;
   current_ = this;
@@ -108,13 +109,14 @@
         assert(!path.empty());
         path_pos += delta * 50.0f;
 
-        Vector p = interpolate_path(path, path_pos);
+        PathPoint p = interpolate_path(path, path_pos);
         if (p == path.back())
           {
             script_manager->fire_wakeup_event(ScriptManager::CAMERA_DONE);
             set_mode(CAMERA_INACTIVE);
           }
-        set_pos(p.x, p.y);
+        set_pos(p.pos.x, p.pos.y);
+        set_zoom(p.zoom);
       }
       break;
     }
@@ -131,8 +133,20 @@
 }
 
 void
-Camera::set_path(const std::vector<Vector>& path_)
+Camera::set_zoom(float zoom_)
 {
+  zoom = zoom_;
+}
+
+float
+Camera::get_zoom() const
+{
+  return zoom;
+}
+
+void
+Camera::set_path(const std::vector<Camera::PathPoint>& path_)
+{
   path     = path_;
   path_pos = 0;
   mode     = CAMERA_FOLLOW_PATH;

Modified: trunk/src/camera.hpp
===================================================================
--- trunk/src/camera.hpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/camera.hpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -30,12 +30,26 @@
 public:
   enum Mode { CAMERA_INACTIVE, CAMERA_FOLLOW_PLAYER, CAMERA_FOLLOW_PATH };
 
+  struct PathPoint
+  {
+    Vector pos;
+    float  zoom;
+
+    PathPoint(const Vector& pos_, float zoom_)
+      : pos(pos_), zoom(zoom_) {}
+
+    bool operator==(const PathPoint& p) {
+      return p.pos == pos && p.zoom == zoom;
+    }
+  };
+
 private:
   Mode mode;
 
   Vector pos;
-  
-  std::vector<Vector> path;
+  float  zoom;
+
+  std::vector<PathPoint> path;
   float path_pos;
 
   static Camera* current_;
@@ -45,15 +59,19 @@
   Camera();
 
   void   update(float delta);
+
   Vector get_pos() const { return pos; }
   void   set_pos(float x, float y);
 
+  void   set_zoom(float zoom_);
+  float  get_zoom() const;
+
   void   set_mode(Mode mode_);
 
   /**
    * Set Camera to follow the given path
    */
-  void   set_path(const std::vector<Vector>& path_);
+  void   set_path(const std::vector<PathPoint>& path_);
 
 private:
   Camera (const Camera&);

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/scripting/interface.cpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -85,15 +85,15 @@
 }
 
 
-std::vector<Vector> camera_path;
+std::vector<Camera::PathPoint> camera_path;
 void camera_begin_path()
 {
   camera_path.clear();
 }
 
-void camera_add_point(float x, float y)
+void camera_add_point(float x, float y, float zoom)
 {
-  camera_path.push_back(Vector(x, y));
+  camera_path.push_back(Camera::PathPoint(Vector(x, y), zoom));
 }
 
 void camera_end_path()

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/scripting/interface.hpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -48,7 +48,7 @@
 
 void camera_set_active(bool active);
 void camera_begin_path();
-void camera_add_point(float x, float y);
+void camera_add_point(float x, float y, float zoom);
 void camera_end_path();
 
 void set_view(float x, float y);

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/scripting/wrapper.cpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -300,8 +300,10 @@
   sq_getfloat(v, 2, &arg0);
   float arg1;
   sq_getfloat(v, 3, &arg1);
+  float arg2;
+  sq_getfloat(v, 4, &arg2);
   
-  Scripting::camera_add_point(arg0, arg1);
+  Scripting::camera_add_point(arg0, arg1, arg2);
   
   return 0;
 }

Modified: trunk/src/view.cpp
===================================================================
--- trunk/src/view.cpp	2006-01-06 19:25:20 UTC (rev 1191)
+++ trunk/src/view.cpp	2006-01-06 20:51:22 UTC (rev 1192)
@@ -28,7 +28,7 @@
 
 View::View()
   : state(Display::get_width(), Display::get_height()),
-    zoom(1), transform(0, 0)
+    zoom(1.0), transform(0, 0)
 {
   current_ = this;
 }
@@ -37,7 +37,7 @@
 View::draw (SceneContext& sc)
 {
   state.set_pos(camera.get_pos());
-  state.set_zoom(zoom);
+  state.set_zoom(camera.get_zoom() + (zoom - 1.0f));
   state.set_pos(state.get_pos() + Vector(transform.x, transform.y));
 
   state.push(sc);



From grumbel at berlios.de  Sat Jan  7 00:31:24 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 00:31:24 +0100
Subject: [Windstille-commit] r1193 - in trunk/data/models/objects: . barrobot
Message-ID: <200601062331.k06NVOWk016082@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 00:31:15 +0100 (Sat, 07 Jan 2006)
New Revision: 1193

Added:
   trunk/data/models/objects/barrobot/
   trunk/data/models/objects/barrobot/barrobot.blend
   trunk/data/models/objects/barrobot/barrobot.xcf
Log:
- new 3d model

Added: trunk/data/models/objects/barrobot/barrobot.blend
===================================================================
(Binary files differ)


Property changes on: trunk/data/models/objects/barrobot/barrobot.blend
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/data/models/objects/barrobot/barrobot.xcf
===================================================================
(Binary files differ)


Property changes on: trunk/data/models/objects/barrobot/barrobot.xcf
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From grumbel at berlios.de  Sat Jan  7 02:45:51 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 02:45:51 +0100
Subject: [Windstille-commit] r1194 - in trunk/src: . sprite3d
Message-ID: <200601070145.k071jp9e028132@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 02:45:23 +0100 (Sat, 07 Jan 2006)
New Revision: 1194

Modified:
   trunk/src/script_manager.hpp
   trunk/src/sprite3d/data.cpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/sprite3d/sprite3d.hpp
Log:
- added get_attachment_points() to Sprite3D
- turned missing Actions in an animation to a Warning instead of a fatal error
- 


Modified: trunk/src/script_manager.hpp
===================================================================
--- trunk/src/script_manager.hpp	2006-01-06 23:31:15 UTC (rev 1193)
+++ trunk/src/script_manager.hpp	2006-01-07 01:45:23 UTC (rev 1194)
@@ -34,6 +34,7 @@
   }
 
   enum WakeupEvent {
+    // FIXME: Does/should this be a bitmask is a are normal enum enough?
     TIME                = (1 << 0),
     DIALOG_CLOSED       = (1 << 1),
     CONVERSATION_CLOSED = (1 << 2),

Modified: trunk/src/sprite3d/data.cpp
===================================================================
--- trunk/src/sprite3d/data.cpp	2006-01-06 23:31:15 UTC (rev 1193)
+++ trunk/src/sprite3d/data.cpp	2006-01-07 01:45:23 UTC (rev 1194)
@@ -2,6 +2,7 @@
 
 #include "sprite3d/data.hpp"
 
+#include <iostream>
 #include <physfs.h>
 #include <string.h>
 #include <sstream>
@@ -17,39 +18,39 @@
 
 static inline float read_float(PHYSFS_file* file)
 {
-    uint32_t int_result;
-    if(PHYSFS_readULE32(file, &int_result) == 0) {
-        std::ostringstream msg;
-        msg << "Problem reading float value: " << PHYSFS_getLastError();
-        throw std::runtime_error(msg.str());
-    }
+  uint32_t int_result;
+  if(PHYSFS_readULE32(file, &int_result) == 0) {
+    std::ostringstream msg;
+    msg << "Problem reading float value: " << PHYSFS_getLastError();
+    throw std::runtime_error(msg.str());
+  }
 
-    // is this platform independent?
-    return * ( reinterpret_cast<float*> (&int_result) );
+  // is this platform independent?
+  return * ( reinterpret_cast<float*> (&int_result) );
 }
 
 static inline uint16_t read_uint16_t(PHYSFS_file* file)
 {
-    uint16_t result;
-    if(PHYSFS_readULE16(file, &result) == 0) {
-        std::ostringstream msg;
-        msg << "Problem reading uint16 value: " << PHYSFS_getLastError();
-        throw std::runtime_error(msg.str());
-    }
-    return result;
+  uint16_t result;
+  if(PHYSFS_readULE16(file, &result) == 0) {
+    std::ostringstream msg;
+    msg << "Problem reading uint16 value: " << PHYSFS_getLastError();
+    throw std::runtime_error(msg.str());
+  }
+  return result;
 }
 
 static inline std::string read_string(PHYSFS_file* file, size_t size)
 {
-    char buffer[size+1];
-    if(PHYSFS_read(file, buffer, size, 1) != 1) {
-        std::ostringstream msg;
-        msg << "Problem reading string value: " << PHYSFS_getLastError();
-        throw std::runtime_error(msg.str());
-    }
-    buffer[size] = 0;
+  char buffer[size+1];
+  if(PHYSFS_read(file, buffer, size, 1) != 1) {
+    std::ostringstream msg;
+    msg << "Problem reading string value: " << PHYSFS_getLastError();
+    throw std::runtime_error(msg.str());
+  }
+  buffer[size] = 0;
 
-    return buffer;
+  return buffer;
 }
 
 Data::Data(const std::string& filename)
@@ -58,7 +59,7 @@
   if(!file) {
     std::ostringstream msg;
     msg << "Couldn't open '" << filename << "': "
-      << PHYSFS_getLastError();
+        << PHYSFS_getLastError();
     throw std::runtime_error(msg.str());
   }
 
@@ -184,9 +185,18 @@
     if(action->name == name)
       return *action;
   }
-  std::ostringstream msg;
-  msg << "No action with name '" << name << "' defined";
-  throw std::runtime_error(msg.str());
+
+  if (actions.empty())
+    {
+      std::ostringstream msg;
+      msg << "No action with name '" << name << "' defined";
+      throw std::runtime_error(msg.str());
+    }
+  else
+    {
+      std::cout << "No action with name '" << name << "' defined" << std::endl;
+      return actions.front();
+    }
 }
 
 const Marker&

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-06 23:31:15 UTC (rev 1193)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-07 01:45:23 UTC (rev 1194)
@@ -104,6 +104,12 @@
   return actions;
 }
 
+std::vector<std::string>
+Sprite3D::get_attachment_points() const
+{
+  return data->attachment_points;
+}
+
 void
 Sprite3D::set_next_action(const std::string& name, float speed)
 {

Modified: trunk/src/sprite3d/sprite3d.hpp
===================================================================
--- trunk/src/sprite3d/sprite3d.hpp	2006-01-06 23:31:15 UTC (rev 1193)
+++ trunk/src/sprite3d/sprite3d.hpp	2006-01-07 01:45:23 UTC (rev 1194)
@@ -73,6 +73,11 @@
   std::vector<std::string> get_actions() const;
 
   /**
+   * Return a list of all available attachment points
+   */
+  std::vector<std::string> get_attachment_points() const;
+
+  /**
    * Set the next action and vflip value to be played after the current action
    * has finished (or reached the point to be defined by abort_at_marker)
    */



From grumbel at berlios.de  Sat Jan  7 11:37:55 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 11:37:55 +0100
Subject: [Windstille-commit] r1195 - in trunk/src: . badguy particles
Message-ID: <200601071037.k07AbtX5031921@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 11:37:52 +0100 (Sat, 07 Jan 2006)
New Revision: 1195

Added:
   trunk/src/file_reader.hpp
Modified:
   trunk/src/background_gradient.cpp
   trunk/src/background_gradient.hpp
   trunk/src/badguy/hedgehog.cpp
   trunk/src/badguy/hedgehog.hpp
   trunk/src/badguy/spider_mine.cpp
   trunk/src/badguy/spider_mine.hpp
   trunk/src/badguy/swarm.cpp
   trunk/src/badguy/swarm.hpp
   trunk/src/badguy/vrdummy.cpp
   trunk/src/badguy/vrdummy.hpp
   trunk/src/box.cpp
   trunk/src/box.hpp
   trunk/src/character.cpp
   trunk/src/character.hpp
   trunk/src/elevator.cpp
   trunk/src/elevator.hpp
   trunk/src/game_object.hpp
   trunk/src/liquid.cpp
   trunk/src/liquid.hpp
   trunk/src/nightvision.cpp
   trunk/src/nightvision.hpp
   trunk/src/particles/particle_system.cpp
   trunk/src/particles/particle_system.hpp
   trunk/src/refcounter.hpp
   trunk/src/scriptable_object.cpp
   trunk/src/scriptable_object.hpp
   trunk/src/sector.cpp
   trunk/src/sector.hpp
   trunk/src/test_object.cpp
   trunk/src/test_object.hpp
   trunk/src/tile_map.cpp
   trunk/src/tile_map.hpp
   trunk/src/trigger.cpp
   trunk/src/trigger.hpp
Log:
- replaced lisp*/lisp::Properties with FileReader to avoid a lot of redundant code (just typedef for now, should also be possible to replace filereader with a binary parser or so in the future)

Modified: trunk/src/background_gradient.cpp
===================================================================
--- trunk/src/background_gradient.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/background_gradient.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -23,15 +23,13 @@
 **  02111-1307, USA.
 */
 
-#include "lisp/properties.hpp"
 #include "display/vertex_array_drawing_request.hpp"
 #include "background_gradient.hpp"
 
-BackgroundGradient::BackgroundGradient(const lisp::Lisp* lisp)
+BackgroundGradient::BackgroundGradient(FileReader& props)
 {
   z_pos = 0.0;
 
-  lisp::Properties props(lisp);
   props.get("z-pos",  z_pos);
   props.get("colors", colors);
   if (colors.size() % (3 + 4 + 4 + 2) != 0)

Modified: trunk/src/background_gradient.hpp
===================================================================
--- trunk/src/background_gradient.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/background_gradient.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -36,7 +36,7 @@
   std::vector<float> colors;
   float z_pos; 
 public:
-  BackgroundGradient(const lisp::Lisp* lisp);
+  BackgroundGradient(FileReader& props);
   ~BackgroundGradient();
   
   void update (float delta);

Modified: trunk/src/badguy/hedgehog.cpp
===================================================================
--- trunk/src/badguy/hedgehog.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/hedgehog.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -26,16 +26,13 @@
 #include "player.hpp"
 #include "sector.hpp"
 #include "hedgehog.hpp"
-#include "lisp/properties.hpp"
-#include "lisp_getters.hpp"
 
-Hedgehog::Hedgehog(const lisp::Lisp* lisp)
+Hedgehog::Hedgehog(FileReader& props)
   : sprite("images/hedgehog.sprite"),
     die_sprite("images/hedgehog_die1.sprite"),
     light("images/hedgehog_light.sprite"),
     highlight("images/hedgehog_highlight.sprite")
 {
-  lisp::Properties props(lisp);
   props.get("name", name);
   props.get("pos", pos);
   props.print_unused_warnings("hedgehog");

Modified: trunk/src/badguy/hedgehog.hpp
===================================================================
--- trunk/src/badguy/hedgehog.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/hedgehog.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -26,7 +26,6 @@
 #define HEADER_HEDGEHOG_HXX
 
 #include "badguy.hpp"
-#include "lisp/lisp.hpp"
 
 class Hedgehog : public Badguy
 {
@@ -39,7 +38,7 @@
   bool direction_left;
   enum { WALKING, FALLING, DYING } state;
 public:
-  Hedgehog(const lisp::Lisp* lisp);
+  Hedgehog(FileReader& props);
   ~Hedgehog();
 
   void draw(SceneContext& gc);

Modified: trunk/src/badguy/spider_mine.cpp
===================================================================
--- trunk/src/badguy/spider_mine.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/spider_mine.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -25,16 +25,13 @@
 #include <config.h>
 
 #include "spider_mine.hpp"
-#include "lisp/properties.hpp"
-#include "lisp_getters.hpp"
 #include "player.hpp"
 #include "sprite2d/manager.hpp"
 
-SpiderMine::SpiderMine(const lisp::Lisp* lisp)
+SpiderMine::SpiderMine(FileReader& props)
   : explode("images/explosion.sprite"),
     explode_light("images/explolight.sprite")
 {
-  lisp::Properties props(lisp);
   props.get("name", name);
   props.get("pos", pos);
   props.print_unused_warnings("spidermine");

Modified: trunk/src/badguy/spider_mine.hpp
===================================================================
--- trunk/src/badguy/spider_mine.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/spider_mine.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -26,7 +26,6 @@
 #define HEADER_SPIDER_HPP
 
 #include "badguy.hpp"
-#include "lisp/lisp.hpp"
 #include "sprite2d/sprite.hpp"
 
 class SpiderMine : public Badguy
@@ -45,7 +44,7 @@
   void search_for_player(float delta);
 
 public:
-  SpiderMine(const lisp::Lisp* lisp);
+  SpiderMine(FileReader& props);
   ~SpiderMine();
   
   void update(float delta);

Modified: trunk/src/badguy/swarm.cpp
===================================================================
--- trunk/src/badguy/swarm.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/swarm.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -27,20 +27,17 @@
 #include "player.hpp"
 #include "sector.hpp"
 #include "hedgehog.hpp"
-#include "lisp/properties.hpp"
 #include "game_session.hpp"
 #include "view.hpp"
-#include "lisp_getters.hpp"
 #include "display/vertex_array_drawing_request.hpp"
 #include "random.hpp"
 #include "swarm.hpp"
 
-Swarm::Swarm(const lisp::Lisp* lisp)
+Swarm::Swarm(FileReader& props)
 {
   int count = 100;
   turn_speed = 7.0f;
 
-  lisp::Properties props(lisp);
   props.get("name",  name);
   props.get("pos",   pos);
   props.get("count", count);

Modified: trunk/src/badguy/swarm.hpp
===================================================================
--- trunk/src/badguy/swarm.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/swarm.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -50,7 +50,7 @@
 
   float turn_speed; 
 public:
-  Swarm(const lisp::Lisp* lisp);
+  Swarm(FileReader& reader);
   
   void draw(SceneContext& sc);
   void update(float delta);

Modified: trunk/src/badguy/vrdummy.cpp
===================================================================
--- trunk/src/badguy/vrdummy.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/vrdummy.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -23,14 +23,11 @@
 **  02111-1307, USA.
 */
 
-#include "lisp/properties.hpp"
 #include "random.hpp"
-#include "lisp_getters.hpp"
 #include "vrdummy.hpp"
 
-VRDummy::VRDummy(const lisp::Lisp* lisp)
+VRDummy::VRDummy(FileReader& props)
 {
-  lisp::Properties props(lisp);
   props.get("name", name);
   props.get("pos",  pos);
   props.print_unused_warnings("VRDummy");

Modified: trunk/src/badguy/vrdummy.hpp
===================================================================
--- trunk/src/badguy/vrdummy.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/badguy/vrdummy.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -26,7 +26,6 @@
 #ifndef HEADER_BADYGUY_VRDUMMY_HPP
 #define HEADER_BADYGUY_VRDUMMY_HPP
 
-#include "lisp/lisp.hpp"
 #include "sprite3d/sprite3d.hpp"
 #include "sprite2d/sprite.hpp"
 #include "entity.hpp"
@@ -41,7 +40,7 @@
   float rotation;
   float jump_time;
 public:
-  VRDummy(const lisp::Lisp* lisp);
+  VRDummy(FileReader& props);
   ~VRDummy();
 
   void draw(SceneContext& gc);

Modified: trunk/src/box.cpp
===================================================================
--- trunk/src/box.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/box.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -29,7 +29,7 @@
 #include "random.hpp"
 #include "sprite2d/manager.hpp"
 
-Box::Box(const lisp::Lisp* lisp)
+Box::Box(FileReader& props)
 {
   gravity = 0.0f;
   float width  = 64.0f;
@@ -37,7 +37,6 @@
   std::string spritename;
   Vector vel;
 
-  lisp::Properties props(lisp);
   props.get("sprite", spritename);
   props.get("pos", pos);
   props.get("width", width);

Modified: trunk/src/box.hpp
===================================================================
--- trunk/src/box.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/box.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -36,7 +36,7 @@
   float gravity;
 
 public:
-  Box(const lisp::Lisp* lisp);
+  Box(FileReader& props);
   virtual ~Box();
 
   void collision(const CollisionData& data); 

Modified: trunk/src/character.cpp
===================================================================
--- trunk/src/character.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/character.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -33,7 +33,7 @@
 
 #include <exception>
 
-Character::Character(const lisp::Lisp* lisp)
+Character::Character(FileReader& props)
 {
   set_useable(true);
   use_verb = "Talk";
@@ -42,7 +42,6 @@
   std::string sprite3d_filename = "3dsprites/heroken.wsprite";
   std::string action_name;
 
-  lisp::Properties props(lisp);
   props.get("name", name);
   props.get("pos", pos);
   props.get("z-pos", z_pos);

Modified: trunk/src/character.hpp
===================================================================
--- trunk/src/character.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/character.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -31,7 +31,7 @@
   float z_pos;
     
 public:
-  Character(const lisp::Lisp* lisp);
+  Character(FileReader& props);
   ~Character();
   
   void update(float delta);

Modified: trunk/src/elevator.cpp
===================================================================
--- trunk/src/elevator.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/elevator.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -30,11 +30,10 @@
 #include "lisp/properties.hpp"
 #include "lisp_getters.hpp"
 
-Elevator::Elevator(const lisp::Lisp* lisp)
+Elevator::Elevator(FileReader& props)
 {
   std::string spritename;
 
-  lisp::Properties props(lisp);
   props.get("sprite", spritename);
   props.get("pos", pos);
   props.get("name", name);

Modified: trunk/src/elevator.hpp
===================================================================
--- trunk/src/elevator.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/elevator.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -37,7 +37,7 @@
   CollisionObject* colobject;
   Sprite sprite;
 public:
-  Elevator(const lisp::Lisp* lisp);
+  Elevator(FileReader& props);
   ~Elevator();
 
   void draw(SceneContext& sc);

Added: trunk/src/file_reader.hpp
===================================================================
--- trunk/src/file_reader.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/file_reader.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -0,0 +1,36 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FILE_READER_HPP
+#define HEADER_FILE_READER_HPP
+
+#include "lisp/properties.hpp"
+#include "lisp_getters.hpp"
+
+typedef lisp::Properties FileReader;
+
+#endif
+
+/* EOF */

Modified: trunk/src/game_object.hpp
===================================================================
--- trunk/src/game_object.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/game_object.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -17,10 +17,11 @@
 //  along with this program; if not, write to the Free Software
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
-#ifndef GAME_OBJECT_HXX
-#define GAME_OBJECT_HXX
+#ifndef WINDSTILLE_GAME_OBJECT_HXX
+#define WINDSTILLE_GAME_OBJECT_HXX
 
 #include <string>
+#include "file_reader.hpp"
 #include "display/scene_context.hpp"
 #include "refcounter.hpp"
 

Modified: trunk/src/liquid.cpp
===================================================================
--- trunk/src/liquid.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/liquid.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -31,12 +31,11 @@
 
 #define SAMPLES 5
 
-Liquid::Liquid(const lisp::Lisp* lisp)
+Liquid::Liquid(FileReader& props)
 {
   int width = 10;
   t = 0;
 
-  lisp::Properties props(lisp);
   props.get("pos",    pos);
   props.get("width",  width);
   props.print_unused_warnings("Liquid");

Modified: trunk/src/liquid.hpp
===================================================================
--- trunk/src/liquid.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/liquid.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -44,7 +44,7 @@
   std::vector<float>* heightfield2;
 
 public:
-  Liquid(const lisp::Lisp* lisp);
+  Liquid(FileReader& props);
   ~Liquid();
 
   void draw(SceneContext& sc);

Modified: trunk/src/nightvision.cpp
===================================================================
--- trunk/src/nightvision.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/nightvision.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -30,10 +30,9 @@
 #include "glutil/texture_manager.hpp"
 #include "nightvision.hpp"
 
-Nightvision::Nightvision(const lisp::Lisp* lisp)
+Nightvision::Nightvision(FileReader& props)
   : nightvision("images/nightvision.sprite")
 {
-  (void) lisp;
   name = "nightvision";
   noise = Texture("images/noise.png");
   noise.set_wrap(GL_REPEAT);

Modified: trunk/src/nightvision.hpp
===================================================================
--- trunk/src/nightvision.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/nightvision.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -39,7 +39,7 @@
   Texture noise;
 
 public:
-  Nightvision(const lisp::Lisp* lisp);
+  Nightvision(FileReader& props);
   ~Nightvision();
 
   void draw(SceneContext& sc);

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/particles/particle_system.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -30,7 +30,7 @@
 #include "surface_drawer.hpp"
 #include "randomizer.hpp"
 
-ParticleSystem::ParticleSystem(const lisp::Lisp* lisp)
+ParticleSystem::ParticleSystem(FileReader& props)
 {
   // Init some defaults
   randomizer = new PointRandomizer;
@@ -59,9 +59,6 @@
 
   layer = SceneContext::COLORMAP;
 
-  // Set stuff from Lisp
-  lisp::Properties props(lisp);
-
   float p_bunching = 1.0; 
   props.get("bunching", p_bunching);
   set_bunching(p_bunching);

Modified: trunk/src/particles/particle_system.hpp
===================================================================
--- trunk/src/particles/particle_system.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/particles/particle_system.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -95,7 +95,7 @@
   void spawn(Particle& particle);
 public:
   ParticleSystem();
-  ParticleSystem(const lisp::Lisp* lisp);
+  ParticleSystem(FileReader& props);
   virtual ~ParticleSystem();
 
   void set_drawer(Drawer*);

Modified: trunk/src/refcounter.hpp
===================================================================
--- trunk/src/refcounter.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/refcounter.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -1,3 +1,22 @@
+//  $Id$
+// 
+//  Windstille - A Jump'n Shoot Game
+//  Copyright (C) 2005 Matthias Braun <matze at braunis.de>
+//
+//  This program is free software; you can redistribute it and/or
+//  modify it under the terms of the GNU General Public License
+//  as published by the Free Software Foundation; either version 2
+//  of the License, or (at your option) any later version.
+//
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+// 
+//  You should have received a copy of the GNU General Public License
+//  along with this program; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
 #ifndef __REFCOUNTER_HPP__
 #define __REFCOUNTER_HPP__
 
@@ -42,3 +61,4 @@
 
 #endif
 
+/* EOF */

Modified: trunk/src/scriptable_object.cpp
===================================================================
--- trunk/src/scriptable_object.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/scriptable_object.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -32,7 +32,7 @@
 #include "sprite2d/manager.hpp"
 #include "script_manager.hpp"
 
-ScriptableObject::ScriptableObject(const lisp::Lisp* lisp)
+ScriptableObject::ScriptableObject(FileReader& props)
   : z_pos(50),
     target_speed(0),
     acceleration(0),
@@ -42,7 +42,6 @@
   std::string highlightname;
   std::string lightname;
   
-  lisp::Properties props(lisp);
   props.get("name", name);
   props.get("sprite", spritename);
   props.get("highlight", highlightname);

Modified: trunk/src/scriptable_object.hpp
===================================================================
--- trunk/src/scriptable_object.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/scriptable_object.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -66,7 +66,7 @@
   void flash();
 
 public:
-  ScriptableObject(const lisp::Lisp* lisp);
+  ScriptableObject(FileReader& reader);
   virtual ~ScriptableObject();
 
   void draw (SceneContext& sc);

Modified: trunk/src/sector.cpp
===================================================================
--- trunk/src/sector.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/sector.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -152,8 +152,10 @@
 void
 Sector::add_object(const std::string& name, const lisp::Lisp* lisp)
 {
+  lisp::Properties props(lisp);
+
   if(name == "tilemap") {
-    TileMap* tilemap = new TileMap(lisp);
+    TileMap* tilemap = new TileMap(props);
     add(tilemap);
     if (tilemap->get_name() == "interactive")
       interactive_tilemap = tilemap;
@@ -162,35 +164,35 @@
   } else if(name == "background") {
     // TODO
   } else if (name == "background-gradient") {
-    add(new BackgroundGradient(lisp));
+    add(new BackgroundGradient(props));
   } else if(name == "trigger") {
-    add(new Trigger(lisp));
+    add(new Trigger(props));
   } else if(name == "box") {
-    add(new Box(lisp));
+    add(new Box(props));
   } else if(name == "elevator") {
-    add(new Elevator(lisp));
+    add(new Elevator(props));
   } else if(name == "character") {    
-    add(new Character(lisp));
+    add(new Character(props));
   } else if(name == "spider-mine") {
-    add(new SpiderMine(lisp));
+    add(new SpiderMine(props));
   } else if(name == "hedgehog") {
-    add(new Hedgehog(lisp));
+    add(new Hedgehog(props));
   } else if(name == "test-object") {
-    add(new TestObject(lisp));
+    add(new TestObject(props));
   } else if (name == "nightvision") {
-    add(new Nightvision(lisp));
+    add(new Nightvision(props));
   } else if (name == "particle-system") {
-    add(new ParticleSystem(lisp));
+    add(new ParticleSystem(props));
   } else if(name == "scriptable-object") {    
-    add(new ScriptableObject(lisp));
+    add(new ScriptableObject(props));
   } else if (name == "vrdummy") {
-    add(new VRDummy(lisp));
+    add(new VRDummy(props));
   } else if (name == "swarm") {
-    add(new Swarm(lisp));
+    add(new Swarm(props));
   } else if (name == "laserpointer") {
     add(new LaserPointer());
   } else if (name == "liquid") {
-    add(new Liquid(lisp));
+    add(new Liquid(props));
   } else {
     std::cout << "Skipping unknown Object: " << name << "\n";
   }

Modified: trunk/src/sector.hpp
===================================================================
--- trunk/src/sector.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/sector.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -92,10 +92,14 @@
    */
   void spawn_player(const std::string& spawnpoint);
 
-  int get_width () const;
+  int get_width  () const;
   int get_height () const;
 
-  void set_ambient_light(const Color& color);
+  /**
+   * Set ambient light, ie. the light that illuminates the whole sector
+   * all the time, to \a color
+   */
+  void  set_ambient_light(const Color& color);
   Color get_ambient_light() const;
 
   void add(GameObject*);

Modified: trunk/src/test_object.cpp
===================================================================
--- trunk/src/test_object.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/test_object.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -5,13 +5,12 @@
 #include "lisp/properties.hpp"
 #include "lisp_getters.hpp"
 
-TestObject::TestObject(const lisp::Lisp* lisp)
+TestObject::TestObject(FileReader& props)
 {
   using namespace lisp;
   pos = Vector(0, 0);
   std::string spritename;
 
-  Properties props(lisp);
   props.get("sprite", spritename);
   props.get("pos", pos);
   props.get("name", name);

Modified: trunk/src/test_object.hpp
===================================================================
--- trunk/src/test_object.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/test_object.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -10,7 +10,7 @@
 class TestObject : public GameObject
 {
 public:
-  TestObject(const lisp::Lisp* lisp);
+  TestObject(FileReader& reader);
   virtual ~TestObject();
 
   void draw(SceneContext& context);

Modified: trunk/src/tile_map.cpp
===================================================================
--- trunk/src/tile_map.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/tile_map.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -29,7 +29,7 @@
 #include "lisp/properties.hpp"
 #include <inttypes.h>
 
-TileMap::TileMap(const lisp::Lisp* lisp)
+TileMap::TileMap(FileReader& props)
 {
   using namespace lisp;
   int width = -1;
@@ -37,7 +37,6 @@
   z_pos = 0;
   total_time = 0;
   
-  Properties props(lisp);
   props.get("name", name);
   props.get("z-pos", z_pos);
   props.get("width", width);

Modified: trunk/src/tile_map.hpp
===================================================================
--- trunk/src/tile_map.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/tile_map.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -39,7 +39,7 @@
   float total_time;
 
 public:
-  TileMap(const lisp::Lisp* lisp);
+  TileMap(FileReader& props);
   virtual ~TileMap();
 
   void update (float delta);

Modified: trunk/src/trigger.cpp
===================================================================
--- trunk/src/trigger.cpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/trigger.cpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -25,16 +25,14 @@
 #include "lisp/lisp.hpp"
 #include "lisp/properties.hpp"
 
-Trigger::Trigger(const lisp::Lisp* lisp)
+Trigger::Trigger(FileReader& props)
   : triggered(false), one_time_trigger(false)
 {
-  using namespace lisp;
   float x = -1;
   float y = -1;
   float width = -1;
   float height = -1;
   
-  Properties props(lisp);
   props.get("x", x);
   props.get("y", y);
   props.get("width", width);

Modified: trunk/src/trigger.hpp
===================================================================
--- trunk/src/trigger.hpp	2006-01-07 01:45:23 UTC (rev 1194)
+++ trunk/src/trigger.hpp	2006-01-07 10:37:52 UTC (rev 1195)
@@ -36,7 +36,7 @@
   bool one_time_trigger;
   
 public:
-  Trigger(const lisp::Lisp* lisp);
+  Trigger(FileReader& props);
   virtual ~Trigger();
 
   void draw (SceneContext& gc);



From grumbel at berlios.de  Sat Jan  7 12:43:11 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 12:43:11 +0100
Subject: [Windstille-commit] r1196 - in trunk: data data/particlesystems src src/particles
Message-ID: <200601071143.k07BhBMx019224@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 12:43:06 +0100 (Sat, 07 Jan 2006)
New Revision: 1196

Added:
   trunk/data/particlesystems/
   trunk/data/particlesystems/fire.particles
   trunk/src/particle_viewer.cpp
   trunk/src/particle_viewer.hpp
Modified:
   trunk/src/SConscript
   trunk/src/config.cpp
   trunk/src/globals.cpp
   trunk/src/globals.hpp
   trunk/src/particles/particle_system.hpp
   trunk/src/sprite3dview.hpp
   trunk/src/windstille_main.cpp
Log:
- added ParticleViewer

Added: trunk/data/particlesystems/fire.particles
===================================================================
--- trunk/data/particlesystems/fire.particles	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/data/particlesystems/fire.particles	2006-01-07 11:43:06 UTC (rev 1196)
@@ -0,0 +1,61 @@
+;; -*- scheme -*-
+
+(particle-systems
+ ;; Fire sparks
+ (particle-system
+  (drawer (spark-drawer (color 1.0 0.5 0.5)))
+  (z-pos 900)
+  (pos 0 32)
+  (velocity 400 650)
+  (cone -115 -65)
+  (gravity 0  1)
+  (distribution (line-distribution (x1 -50)  (y1 0) (x2 50) (y2 0))))
+ 
+ ;; Fire smoke
+ (particle-system
+  (pos 0 32)
+  (lifetime 8)
+  (count 30)
+  (z-pos -200)
+  (drawer (surface-drawer (image "images/particles/smoke2.png")
+                          (blendfunc-src "src_alpha")
+                          (blendfunc-dst "one_minus_src_alpha")))
+  (velocity 10 20)
+  (cone -115 -65)
+  (gravity 0 -0.05)
+  (size 1.0 3.0)
+  (distribution (line-distribution (x1 -50) (y1 0) (x2 50) (y2 0))))
+
+
+ ;; Fire Light
+ (particle-system
+  (pos 0 0)
+  (lifetime 1.0)
+  (count 20)
+  (layer "light")
+  (z-pos 1000)
+  (velocity 200 300)
+  (cone -95 -85)
+  (gravity 0 0)
+  (distribution (line-distribution (x1 -50) (y1 0) (x2 50) (y2 0)))
+  (drawer (surface-drawer (image "images/particles/fire_light.png")
+                          (blendfunc-src "src_alpha")
+                          (blendfunc-dst "one"))))
+ 
+ ;; Fire itself
+ (particle-system
+  (pos 0 0)
+  (count 75)
+  (z-pos 1000)
+  (layer "highlight")
+  (velocity 200 300)
+  (cone -95 -85)
+  (gravity 0 -0.05)
+  (distribution (line-distribution (x1 -50) (y1 0) (x2 50) (y2 0)))
+  (drawer (surface-drawer (image "images/particles/smoke.png")
+                          (blendfunc-src "src_alpha")
+                          (blendfunc-dst "one"))))
+
+ )
+
+;; EOF ;;

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/SConscript	2006-01-07 11:43:06 UTC (rev 1196)
@@ -138,6 +138,7 @@
 'math/quaternion.cpp',
 'math/rect.cpp',
 'math/vector.cpp',
+'particle_viewer.cpp',
 'particles/particle_system.cpp',
 'particles/spark_drawer.cpp',
 'particles/surface_drawer.cpp',

Modified: trunk/src/config.cpp
===================================================================
--- trunk/src/config.cpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/config.cpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -130,6 +130,7 @@
   const int debug_flag        = 256;
   const int nodebug_flag      = 257;
   const int sprite3dview_flag = 258;
+  const int particleview_flag = 259;
     
   argp.set_help_indent(24);
   argp.add_usage ("[LEVELFILE]");
@@ -137,6 +138,7 @@
 
   argp.add_group("Mode Options:");
   argp.add_option(sprite3dview_flag, "sprite3dview", "", "Launch Sprite3DView instead of the game");
+  argp.add_option(particleview_flag, "particle-viewer", "", "Launch ParticleView instead of the game");
 
   argp.add_group("Display Options:");
   argp.add_option('g', "geometry",   "WxH", "Change window size to WIDTH and HEIGHT");
@@ -208,6 +210,10 @@
           sprite3dview = true;
           break;
 
+        case particleview_flag:
+          particleview = true;
+          break;
+
         case 'f':
           set_bool("fullscreen", true);
           break;

Modified: trunk/src/globals.cpp
===================================================================
--- trunk/src/globals.cpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/globals.cpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -33,5 +33,6 @@
 bool collision_debug = false;
 bool sound_disabled  = false;
 bool sprite3dview    = false;
+bool particleview    = false;
 
 /* EOF */

Modified: trunk/src/globals.hpp
===================================================================
--- trunk/src/globals.hpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/globals.hpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -37,6 +37,7 @@
 extern bool debug;
 extern bool collision_debug;
 extern bool sprite3dview;
+extern bool particleview;
 
 enum GameMainState { RUN_GAME, LOAD_MENU, LOAD_GAME_SESSION, QUIT_GAME };
 

Added: trunk/src/particle_viewer.cpp
===================================================================
--- trunk/src/particle_viewer.cpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/particle_viewer.cpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -0,0 +1,102 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "lisp/lisp.hpp"
+#include "lisp/parser.hpp"
+#include "lisp/properties.hpp"
+#include "file_reader.hpp"
+#include "particle_viewer.hpp"
+
+ParticleViewer::ParticleViewer()
+{
+  background = Sprite("images/greychess.sprite");
+}
+
+ParticleViewer::~ParticleViewer()
+{
+}
+
+void
+ParticleViewer::load(const std::string& filename)
+{
+  std::cout << "ParticleViewer: loading " << filename << std::endl;
+  using namespace lisp;
+  
+  for(Systems::iterator i = systems.begin(); i != systems.end(); ++i)
+    delete *i;
+  systems.clear();
+  
+  std::auto_ptr<Lisp> root(Parser::parse(filename));
+  Properties rootp(root.get());
+
+  const Lisp* sector = 0;
+  if(!rootp.get("particle-systems", sector)) {
+    std::ostringstream msg;
+    msg << "'" << filename << "' is not a particle-system file";
+    throw std::runtime_error(msg.str());
+  }
+  rootp.print_unused_warnings("sector");
+  
+  Properties props(sector);
+  PropertyIterator<const Lisp*> iter = props.get_iter();
+  while(iter.next()) {
+    if (iter.item() == "particle-system")
+      {
+        FileReader reader(*iter);
+        systems.push_back(new ParticleSystem(reader));
+      }
+  }
+
+  std::cout << systems.size() << " particle systems ready to go" << std::endl;
+}
+  
+void
+ParticleViewer::draw()
+{
+  sc.reset_modelview();
+
+  for(int y = 0; y < 600; y += background.get_height())
+    for(int x = 0; x < 800; x += background.get_width())
+      sc.color().draw(background, Vector(x, y), -900);
+
+  sc.translate(400, 600);
+  sc.light().fill_screen(Color(0.2, 0.2, 0.2));
+  //sc.light().fill_screen(Color(1.0, 1.0, 1.0));
+  sc.color().fill_screen(Color(0.0, 0.0, 0.0));
+
+  for(Systems::iterator i = systems.begin(); i != systems.end(); ++i)
+    (*i)->draw(sc);
+
+  sc.render();
+}
+
+void
+ParticleViewer::update(float delta, const Controller& controller)
+{
+for(Systems::iterator i = systems.begin(); i != systems.end(); ++i)
+    (*i)->update(delta);
+}
+
+/* EOF */

Added: trunk/src/particle_viewer.hpp
===================================================================
--- trunk/src/particle_viewer.hpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/particle_viewer.hpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -0,0 +1,56 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_PARTICLE_VIEWER_HPP
+#define HEADER_PARTICLE_VIEWER_HPP
+
+#include "screen.hpp"
+#include "sprite2d/sprite.hpp"
+#include "particles/particle_system.hpp"
+
+/** */
+class ParticleViewer : public Screen
+{
+private:
+  SceneContext sc;
+  typedef std::vector<ParticleSystem*> Systems;
+  Systems systems;
+  Sprite background;
+
+public:
+  ParticleViewer();
+  ~ParticleViewer();
+  
+  void draw();
+  void update(float delta, const Controller& controller);
+  void load(const std::string& filename);
+private:
+  ParticleViewer (const ParticleViewer&);
+  ParticleViewer& operator= (const ParticleViewer&);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/src/particles/particle_system.hpp
===================================================================
--- trunk/src/particles/particle_system.hpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/particles/particle_system.hpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -174,6 +174,7 @@
   /** Returns the how much a particle has progressed, this is
       particle.life_time with fade_in/fade_out applied  */
   float get_progress(float t);
+
 private:
   ParticleSystem (const ParticleSystem&);
   ParticleSystem& operator= (const ParticleSystem&);

Modified: trunk/src/sprite3dview.hpp
===================================================================
--- trunk/src/sprite3dview.hpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/sprite3dview.hpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -30,8 +30,10 @@
 #include "sprite3d/sprite3d.hpp"
 #include "screen.hpp"
 
-/** A simple class to view 3d sprites and their different actions,
-    mostly usefull for debugging */
+/**
+ * A simple class to view 3d sprites and their different actions,
+ * mostly usefull for debugging 
+ */
 class Sprite3DView : public Screen
 {
 private:

Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-07 10:37:52 UTC (rev 1195)
+++ trunk/src/windstille_main.cpp	2006-01-07 11:43:06 UTC (rev 1196)
@@ -47,6 +47,7 @@
 #include "sprite3d/manager.hpp"
 #include "screen_manager.hpp"
 #include "sprite3dview.hpp"
+#include "particle_viewer.hpp"
 #include "sprite2d/manager.hpp"
 
 WindstilleMain::WindstilleMain()
@@ -103,35 +104,45 @@
 
     if (debug) std::cout << "Initialising TileFactory" << std::endl;
     TileFactory::init();
+    
+    if (debug) std::cout << "Starting file: '" << config.get_string("levelfile") << "'" 
+                         << std::endl;
+    
+    std::string levelfile;
+    if (config.get<std::string>("levelfile").is_set())
+      {
+        // FIXME: Looks a little hacky, doesn't it?
+        std::string leveldir = dirname(config.get_string("levelfile"));
+        PHYSFS_addToSearchPath(leveldir.c_str(), true);
+        levelfile = basename(config.get_string("levelfile"));
+      }
 
     if (sprite3dview)
       {
         Sprite3DView* sprite3dview = new Sprite3DView();
 
-        if (config.get<std::string>("levelfile").is_set())
-          {
-            // FIXME: Looks a little hacky, doesn't it?
-            std::string leveldir = dirname(config.get_string("levelfile"));
-            PHYSFS_addToSearchPath(leveldir.c_str(), true);
-            sprite3dview->set_model(basename(config.get_string("levelfile")));
-          }
-            
+        if (!levelfile.empty())
+          sprite3dview->set_model(levelfile);
+
         // Launching Sprite3DView instead of game
         screen_manager.set_screen(sprite3dview);
       }
+    else if (particleview)
+      {
+        ParticleViewer* particle_viewer = new ParticleViewer();
+        if (!levelfile.empty())
+          particle_viewer->load(levelfile);
+        screen_manager.set_screen(particle_viewer);
+      }
     else
       {
-        if (!config.get<std::string>("levelfile").is_set())
+        if (!levelfile.empty())
           {
             screen_manager.set_screen(new GameSession("levels/newformat2.wst"));
           }
         else
           {
-            if (debug) std::cout << "Starting level: '" << config.get_string("levelfile") << "'" 
-                                 << std::endl;
-            std::string leveldir = dirname(config.get_string("levelfile"));
-            PHYSFS_addToSearchPath(leveldir.c_str(), true);
-            screen_manager.set_screen(new GameSession(basename(config.get_string("levelfile"))));
+            screen_manager.set_screen(new GameSession(levelfile));
           }
       }
         



From grumbel at berlios.de  Sat Jan  7 12:44:09 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 12:44:09 +0100
Subject: [Windstille-commit] r1197 - trunk/data/blender
Message-ID: <200601071144.k07Bi9km019765@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 12:44:03 +0100 (Sat, 07 Jan 2006)
New Revision: 1197

Removed:
   trunk/data/blender/pistol/
Log:
- moved pistol to different dir



From grumbel at berlios.de  Sat Jan  7 12:44:35 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 12:44:35 +0100
Subject: [Windstille-commit] r1198 - trunk/data/models/objects/pistol
Message-ID: <200601071144.k07BiZ4F019973@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 12:44:31 +0100 (Sat, 07 Jan 2006)
New Revision: 1198

Added:
   trunk/data/models/objects/pistol/pistol.blend
   trunk/data/models/objects/pistol/pistol.xcf
   trunk/data/models/objects/pistol/pistoltexture.xcf
Modified:
   trunk/data/models/objects/pistol/pistol.wsprite
Log:
- moved pistol to different dir

Copied: trunk/data/models/objects/pistol/pistol.blend (from rev 1192, trunk/data/blender/pistol/pistol.blend)
===================================================================
(Binary files differ)

Modified: trunk/data/models/objects/pistol/pistol.wsprite
===================================================================
(Binary files differ)

Copied: trunk/data/models/objects/pistol/pistol.xcf (from rev 1192, trunk/data/blender/pistol/pistol.xcf)

Copied: trunk/data/models/objects/pistol/pistoltexture.xcf (from rev 1192, trunk/data/blender/pistol/pistoltexture.xcf)



From grumbel at berlios.de  Sat Jan  7 15:06:00 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 15:06:00 +0100
Subject: [Windstille-commit] r1199 - in trunk/src: . gui input particles
Message-ID: <200601071406.k07E60U3007864@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 15:05:56 +0100 (Sat, 07 Jan 2006)
New Revision: 1199

Modified:
   trunk/src/gui/grid_component.cpp
   trunk/src/gui/grid_component.hpp
   trunk/src/gui/gui_manager.cpp
   trunk/src/gui/gui_manager.hpp
   trunk/src/gui/root_component.cpp
   trunk/src/input/input_configurator.cpp
   trunk/src/particle_viewer.cpp
   trunk/src/particle_viewer.hpp
   trunk/src/particles/particle_system.cpp
   trunk/src/particles/particle_system.hpp
   trunk/src/screen_manager.cpp
Log:
- added gui to particleviewer (not really working)

Modified: trunk/src/gui/grid_component.cpp
===================================================================
--- trunk/src/gui/grid_component.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/gui/grid_component.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -40,8 +40,8 @@
   : Component(rect, parent),
     grid(weight, height),
     pos(0, 0),
-    child_active(false)
-
+    child_active(false),
+    padding(15.0f)
 {
 }
 
@@ -71,19 +71,6 @@
 void
 GridComponent::update(float delta, const Controller& controller)
 {
-  for(int y = 0; y < grid.get_height(); ++y)
-    for(int x = 0; x < grid.get_width(); ++x)
-      {
-        if (grid(x, y).component && !grid(x, y).has_parent())
-          {
-            // give input to current compontent, empty input to the rest
-            if (child_active && pos.x == x && pos.y == y)
-              grid(x, y).component->update(delta, controller);
-            else
-              grid(x, y).component->update(delta, Controller());
-          }
-      }
-
   if (child_active && !grid(pos.x, pos.y).component->is_active())
     {
       child_active = false;
@@ -131,6 +118,19 @@
             }
         }
     }
+
+  for(int y = 0; y < grid.get_height(); ++y)
+    for(int x = 0; x < grid.get_width(); ++x)
+      {
+        if (grid(x, y).component && !grid(x, y).has_parent())
+          {
+            // give input to current compontent, empty input to the rest
+            if (child_active && pos.x == x && pos.y == y)
+              grid(x, y).component->update(delta, controller);
+            else
+              grid(x, y).component->update(delta, Controller());
+          }
+      }
 }
 
 void
@@ -220,8 +220,6 @@
           grid(x, y) = ComponentBox(component, Size(colspan, rowspan));
         }
 
-      float padding = 15.0f;
-
       component->set_screen_rect(Rectf(Vector(rect.left + x * (rect.get_width() /grid.get_width())  + padding,
                                               rect.top  + y * (rect.get_height()/grid.get_height()) + padding),
                                        Sizef((rect.get_width()/grid.get_width())   * colspan - 2*padding,
@@ -230,9 +228,15 @@
 }
 
 void
+GridComponent::set_padding(float p)
+{
+  padding = p;
+}
+
+void
 GridComponent::on_activation()
 {
-  grid(pos.x, pos.y).component->set_active(true);
+  //grid(pos.x, pos.y).component->set_active(true);
 }
 
 } // namespace GUI

Modified: trunk/src/gui/grid_component.hpp
===================================================================
--- trunk/src/gui/grid_component.hpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/gui/grid_component.hpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -55,10 +55,11 @@
   };
 
   typedef Field<ComponentBox> Grid;
-  Grid grid;
+  Grid  grid;
   Point pos;
-  bool child_active;
-  
+  bool  child_active;
+  float padding;
+
 public:
   GridComponent(const lisp::Lisp* lisp, Component* parent);
   GridComponent(const Rectf& rect, int weight, int height, Component* parent);
@@ -76,6 +77,9 @@
   void move_right();
 
   void on_activation();
+
+  void set_padding(float p);
+  
 private:
   GridComponent (const GridComponent&);
   GridComponent& operator= (const GridComponent&);

Modified: trunk/src/gui/gui_manager.cpp
===================================================================
--- trunk/src/gui/gui_manager.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/gui/gui_manager.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -40,49 +40,6 @@
 GUIManager::GUIManager()
 {
   root = new RootComponent(Rectf(0,0,800,600));
-
-  TabComponent* tab = new TabComponent(Rectf(100, 100, 700, 500), root);
-
-  GridComponent* grid = new GridComponent(Rectf(100, 130, 700, 500), 3, 4, tab);
-
-  grid->pack(new Button("1", grid), 0, 0);
-  grid->pack(new Button("2", grid), 1, 0);
-  grid->pack(new Button("3", grid), 2, 0);
-
-  grid->pack(new Slider(grid), 0, 1);
-  //grid->pack(new Button("5", grid), 1, 1, 2, 2);
-  TextView* text_view = new TextView(Rectf(), grid);
-  grid->pack(text_view, 1, 1, 2, 2);
-
-  //grid->pack(new Button("6", grid), 2, 1);
-
-  grid->pack(new Button("7", grid), 0, 2, 1, 2);
-  //grid->pack(new Button("8", grid), 1, 2);
-  //grid->pack(new Button("9", grid), 2, 2);
-
-  //grid->pack(new Button("Cl", grid), 0, 3);
-  grid->pack(new Button("0",  grid), 1, 3);
-  grid->pack(new Button("Ok", grid), 2, 3);
-
-  tab->pack("Auto Map",  new Automap(Rectf(100, 130, 700, 500), tab));
-  tab->pack("Grid Test", grid);
-
-  ListView* list_view = new ListView(Rectf(), tab);
-  list_view->add_column("Date");
-  list_view->add_column("Name");
-  list_view->add_column("Subject");
-
-  list_view->add_item(ListView::Item("2005-10-08", "John Doh", "Re: Buying a goldmine"));
-  list_view->add_item(ListView::Item("2005-13-08", "Jane Doh", "Re: What the f***"));
-  list_view->add_item(ListView::Item("2005-13-09", "Testo Test", "Testing Email"));
-
-  tab->pack("ListView", list_view);
-
-  root->set_child(tab);
-  text_view->set_text("Hello World\n<large>Blabla</large> more textt and more and"
-                      "more for testing all for testing even more and more blabla blabla"
-                      "more for testing all for testing even more and more blabla blabla"
-                      "blabla blabla blabltest ende.");
 }
 
 GUIManager::~GUIManager()
@@ -102,11 +59,17 @@
   root->update(delta, controller);
 
   if (!root->is_active())
-    {
+    { //FIXME: This doesn't work when GUI isn't an overlay
       screen_manager.set_overlay(0);
     }
 }
 
+RootComponent*
+GUIManager::get_root() const
+{
+  return root;
+}
+
 } // namespace GUI
 
 /* EOF */

Modified: trunk/src/gui/gui_manager.hpp
===================================================================
--- trunk/src/gui/gui_manager.hpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/gui/gui_manager.hpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -45,6 +45,7 @@
   void draw();
   void update(float delta, const Controller& controller);
 
+  RootComponent* get_root() const;
 private:
   GUIManager (const GUIManager&);
   GUIManager& operator= (const GUIManager&);

Modified: trunk/src/gui/root_component.cpp
===================================================================
--- trunk/src/gui/root_component.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/gui/root_component.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include "root_component.hpp"
 
 namespace GUI {
@@ -48,19 +49,24 @@
 void
 RootComponent::draw()
 {
-  child->draw();
+  if (child)
+    child->draw();
 }
 
 void
 RootComponent::update(float delta, const Controller& controller)
 {
-  child->update(delta, controller);
+  if (child)
+    child->update(delta, controller);
 }
 
 bool
 RootComponent::is_active() const
 {
-  return child->is_active();
+  if (child)
+    return child->is_active();
+  else
+    return false;
 }
 
 } // namespace GUI

Modified: trunk/src/input/input_configurator.cpp
===================================================================
--- trunk/src/input/input_configurator.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/input/input_configurator.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -53,8 +53,8 @@
   add_configure_item(ConfigureItem::CONFIGURE_BUTTON, SECONDARY_BUTTON);
   add_configure_item(ConfigureItem::CONFIGURE_BUTTON, PRIMARY_BUTTON);
 
+  add_configure_item(ConfigureItem::CONFIGURE_AXIS, Y_AXIS);
   add_configure_item(ConfigureItem::CONFIGURE_AXIS, X_AXIS);
-  add_configure_item(ConfigureItem::CONFIGURE_AXIS, Y_AXIS);
 
   // add_configure_item(ConfigureItem::CONFIGURE_AXIS, X2_AXIS);
   // add_configure_item(ConfigureItem::CONFIGURE_AXIS, Y2_AXIS);

Modified: trunk/src/particle_viewer.cpp
===================================================================
--- trunk/src/particle_viewer.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/particle_viewer.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -27,11 +27,56 @@
 #include "lisp/parser.hpp"
 #include "lisp/properties.hpp"
 #include "file_reader.hpp"
+#include "input/controller.hpp"
+#include "screen_manager.hpp"
+#include "gui/gui_manager.hpp"
 #include "particle_viewer.hpp"
 
+// Components
+#include "gui/button.hpp"
+#include "gui/slider.hpp"
+#include "gui/root_component.hpp"
+#include "gui/grid_component.hpp"
+#include "gui/tab_component.hpp"
+#include "gui/list_view.hpp"
+#include "gui/text_view.hpp"
+#include "gui/automap.hpp"
+
 ParticleViewer::ParticleViewer()
 {
   background = Sprite("images/greychess.sprite");
+  show_gui = false;
+
+  using namespace GUI;
+
+  manager = new GUIManager();
+
+  GridComponent* grid = new GridComponent(Rectf(350, 20, 450, 120), 1, 3, manager->get_root());
+  grid->set_padding(4);
+
+  gravity_slider  = new Slider(grid);
+  velocity_slider = new Slider(grid);
+  count_slider    = new Slider(grid);
+
+
+  gravity_slider->set_range(-10, 10);
+  gravity_slider->set_step(1);
+  velocity_slider->set_pos(1);
+
+  velocity_slider->set_range(-500, 500);
+  velocity_slider->set_step(10);
+  velocity_slider->set_pos(200);
+
+  count_slider->set_range(1, 200);
+  count_slider->set_step(10);
+  count_slider->set_pos(50);
+
+  grid->pack(gravity_slider,  0, 0);
+  grid->pack(velocity_slider, 0, 1);
+  grid->pack(count_slider,    0, 2);
+
+
+  manager->get_root()->set_child(grid);
 }
 
 ParticleViewer::~ParticleViewer()
@@ -77,12 +122,13 @@
 {
   sc.reset_modelview();
 
-  for(int y = 0; y < 600; y += background.get_height())
-    for(int x = 0; x < 800; x += background.get_width())
-      sc.color().draw(background, Vector(x, y), -900);
+  for(int y = -background.get_width(); y < 600 + background.get_height(); y += background.get_height())
+    for(int x = -background.get_width(); x < 800 + background.get_width(); x += background.get_width())
+      sc.color().draw(background, Vector(x + int(pos.x) % background.get_width(),
+                                         y + int(pos.y) % background.get_height()), -900);
 
-  sc.translate(400, 600);
-  sc.light().fill_screen(Color(0.2, 0.2, 0.2));
+  sc.translate(400 + pos.x, 600 + pos.y);
+  sc.light().fill_screen(Color(0.4, 0.4, 0.4));
   //sc.light().fill_screen(Color(1.0, 1.0, 1.0));
   sc.color().fill_screen(Color(0.0, 0.0, 0.0));
 
@@ -90,13 +136,45 @@
     (*i)->draw(sc);
 
   sc.render();
+
+  if (show_gui)
+    {
+      manager->draw();
+    }
 }
 
 void
 ParticleViewer::update(float delta, const Controller& controller)
 {
-for(Systems::iterator i = systems.begin(); i != systems.end(); ++i)
+  for(Systems::iterator i = systems.begin(); i != systems.end(); ++i)
     (*i)->update(delta);
+
+  if (!show_gui)
+    {
+      pos.x += controller.get_axis_state(X_AXIS) * delta * 100.0f;
+      pos.y += controller.get_axis_state(Y_AXIS) * delta * 100.0f;
+
+      if (controller.button_was_pressed(OK_BUTTON))
+        {
+          show_gui = true;
+          std::cout << "Show GUI" << std::endl;       
+        }
+    }
+  else
+    {
+      if (!manager->get_root()->is_active())
+        {
+          std::cout << "Hide GUI" << std::endl;
+          show_gui = false;
+        }
+      else
+        {
+          manager->update(delta, controller);
+        }
+    }
+
+  //systems[3]->set_count(count_slider->get_pos());
+  //systems[3]->set_velocity(velocity_slider->get_pos(), velocity_slider->get_pos());
 }
 
 /* EOF */

Modified: trunk/src/particle_viewer.hpp
===================================================================
--- trunk/src/particle_viewer.hpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/particle_viewer.hpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -28,8 +28,13 @@
 
 #include "screen.hpp"
 #include "sprite2d/sprite.hpp"
+#include "gui/gui_manager.hpp"
 #include "particles/particle_system.hpp"
 
+namespace GUI {
+class Slider;
+}
+
 /** */
 class ParticleViewer : public Screen
 {
@@ -39,6 +44,14 @@
   Systems systems;
   Sprite background;
 
+  Vector pos;
+  bool   show_gui;
+  GUI::GUIManager* manager;
+
+  GUI::Slider* gravity_slider;
+  GUI::Slider* velocity_slider;
+  GUI::Slider* count_slider;
+
 public:
   ParticleViewer();
   ~ParticleViewer();
@@ -46,6 +59,7 @@
   void draw();
   void update(float delta, const Controller& controller);
   void load(const std::string& filename);
+
 private:
   ParticleViewer (const ParticleViewer&);
   ParticleViewer& operator= (const ParticleViewer&);

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/particles/particle_system.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -38,6 +38,10 @@
   x_pos      = 320.0f;
   y_pos      = 240.0f;
   z_pos      = 0;
+
+  spawn_x    = 0;
+  spawn_y    = 0;
+
   life_time  = 1.0f;
 
   bunching = 1.0f;
@@ -83,6 +87,10 @@
   if (props.get("cycles",  p_cycles))
     set_cycles(p_cycles);
 
+  Vector spawn_pos;
+  if (props.get("spawn-point", spawn_pos))
+    set_spawn_point(spawn_pos.x, spawn_pos.y);
+
   Vector p_pos;
   if (props.get("pos", p_pos))
     set_pos(p_pos.x, p_pos.y);
@@ -246,8 +254,8 @@
 {
   randomizer->set_pos(particle);
 
-  particle.x   += (parent ? parent->get_pos().x : 0) + x_pos;
-  particle.y   += (parent ? parent->get_pos().y : 0) + y_pos;
+  particle.x   += (parent ? parent->get_pos().x : 0) + x_pos + spawn_x;
+  particle.y   += (parent ? parent->get_pos().y : 0) + y_pos + spawn_y;
 
   float direction = rnd.drand(cone_start, cone_stop);
   float speed     = rnd.drand(speed_start, speed_stop);
@@ -284,13 +292,15 @@
 void
 ParticleSystem::set_count(int num)
 {
+  int old_size = particles.size();
+
   particles.resize(num);
 
-  for(Particles::iterator i = particles.begin(); i != particles.end(); ++i)
+  for(Particles::size_type i = old_size-1; i < particles.size(); ++i)
     {
       //i->t = -1.0f;
-      spawn(*i);
-      i->t = (life_time * bunching * (float(i - particles.begin())/particles.size()));
+      spawn(particles[i]);
+      particles[i].t = (life_time * bunching * i/particles.size());
     }
 }
   
@@ -314,6 +324,12 @@
 }
 
 void
+ParticleSystem::set_spawn_point(float x, float y)
+{
+  
+}
+
+void
 ParticleSystem::set_point_distribution()
 {
   delete randomizer;

Modified: trunk/src/particles/particle_system.hpp
===================================================================
--- trunk/src/particles/particle_system.hpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/particles/particle_system.hpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -66,6 +66,9 @@
   Randomizer* randomizer;
   Drawer* drawer;
 
+  float spawn_x;
+  float spawn_y;
+
   float x_pos;
   float y_pos;
   float z_pos;
@@ -118,9 +121,13 @@
       particles to be emmitted only once */
   void set_cycles(float num);
 
+  /** The position of the particle system in world coordinates */
+  void set_pos(float x, float y);
+
   /** The position from which the particles spawn, x,y are in world
-      coordinates */
-  void set_pos(float x, float y);
+      coordinates, this is relative to the position you can set via
+      set_pos() */
+  void set_spawn_point(float x, float y);
   
   /** Causes all particles to spawn from a single point */
   void set_point_distribution();

Modified: trunk/src/screen_manager.cpp
===================================================================
--- trunk/src/screen_manager.cpp	2006-01-07 11:44:31 UTC (rev 1198)
+++ trunk/src/screen_manager.cpp	2006-01-07 14:05:56 UTC (rev 1199)
@@ -37,6 +37,17 @@
 #include "gui/gui_manager.hpp"
 #include "screen_manager.hpp"
 
+// GUI Stuff, can be removed if gui is a bit better organised
+#include "gui/button.hpp"
+#include "gui/slider.hpp"
+#include "gui/root_component.hpp"
+#include "gui/grid_component.hpp"
+#include "gui/tab_component.hpp"
+#include "gui/list_view.hpp"
+#include "gui/text_view.hpp"
+#include "gui/automap.hpp"
+
+
 using GUI::GUIManager;
 
 ScreenManager screen_manager; 
@@ -166,7 +177,55 @@
               switch (event.key.keysym.sym)
                 {               
                 case SDLK_F8:
-                  set_overlay(new GUIManager());
+                  {
+                    using namespace GUI;
+                    GUIManager* manager = new GUIManager();
+
+                    TabComponent* tab = new TabComponent(Rectf(100, 100, 700, 500), manager->get_root());
+
+                    GridComponent* grid = new GridComponent(Rectf(100, 130, 700, 500), 3, 4, tab);
+
+                    grid->pack(new Button("1", grid), 0, 0);
+                    grid->pack(new Button("2", grid), 1, 0);
+                    grid->pack(new Button("3", grid), 2, 0);
+
+                    grid->pack(new Slider(grid), 0, 1);
+                    //grid->pack(new Button("5", grid), 1, 1, 2, 2);
+                    TextView* text_view = new TextView(Rectf(), grid);
+                    grid->pack(text_view, 1, 1, 2, 2);
+
+                    //grid->pack(new Button("6", grid), 2, 1);
+
+                    grid->pack(new Button("7", grid), 0, 2, 1, 2);
+                    //grid->pack(new Button("8", grid), 1, 2);
+                    //grid->pack(new Button("9", grid), 2, 2);
+
+                    //grid->pack(new Button("Cl", grid), 0, 3);
+                    grid->pack(new Button("0",  grid), 1, 3);
+                    grid->pack(new Button("Ok", grid), 2, 3);
+
+                    tab->pack("Auto Map",  new Automap(Rectf(100, 130, 700, 500), tab));
+                    tab->pack("Grid Test", grid);
+
+                    ListView* list_view = new ListView(Rectf(), tab);
+                    list_view->add_column("Date");
+                    list_view->add_column("Name");
+                    list_view->add_column("Subject");
+
+                    list_view->add_item(ListView::Item("2005-10-08", "John Doh", "Re: Buying a goldmine"));
+                    list_view->add_item(ListView::Item("2005-13-08", "Jane Doh", "Re: What the f***"));
+                    list_view->add_item(ListView::Item("2005-13-09", "Testo Test", "Testing Email"));
+
+                    tab->pack("ListView", list_view);
+
+                    manager->get_root()->set_child(tab);
+                    text_view->set_text("Hello World\n<large>Blabla</large> more textt and more and"
+                                        "more for testing all for testing even more and more blabla blabla"
+                                        "more for testing all for testing even more and more blabla blabla"
+                                        "blabla blabla blabltest ende.");
+
+                    set_overlay(manager);
+                  }
                   break;
 
                 case SDLK_F9:
@@ -193,10 +252,10 @@
                 default:
                   if (!console.is_active())
                     {
-                    if (overlay_screen)
-                      overlay_screen->handle_event(event);
-                    else
-                      screen->handle_event(event);
+                      if (overlay_screen)
+                        overlay_screen->handle_event(event);
+                      else
+                        screen->handle_event(event);
                     }
                   break;
                 }
@@ -233,7 +292,7 @@
           else              
             screen->handle_event(event);
           break;
-      }
+        }
     }
 }
 



From grumbel at berlios.de  Sat Jan  7 16:16:09 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 16:16:09 +0100
Subject: [Windstille-commit] r1200 - in trunk/src: . particles
Message-ID: <200601071516.k07FG9Aa026793@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 16:16:09 +0100 (Sat, 07 Jan 2006)
New Revision: 1200

Modified:
   trunk/src/particles/particle_system.cpp
   trunk/src/windstille_main.cpp
Log:
- little bug fixing

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-07 14:05:56 UTC (rev 1199)
+++ trunk/src/particles/particle_system.cpp	2006-01-07 15:16:09 UTC (rev 1200)
@@ -72,10 +72,6 @@
   float p_lifetime;
   if (props.get("lifetime", p_lifetime))
     set_lifetime(p_lifetime);
- 
-  int p_count = 70;
-  props.get("count", p_count);
-  set_count(p_count);
 
   props.get("z-pos", z_pos);
 
@@ -187,6 +183,10 @@
       }
   }
 
+  int p_count = 70;
+  props.get("count", p_count);
+  set_count(p_count);
+
   //props.get("point-distribution",   ); // void
   //props.get("line-distribution",   ); // 2xvector2
   //props.get("circle", ); // float
@@ -264,7 +264,7 @@
 
   particle.angle = rnd.drand(360);
 
-  particle.t   = std::min(std::max(0.0f, particle.t - life_time), life_time);
+  particle.t   = fmodf(particle.t, life_time);
 }
 
 void
@@ -296,11 +296,10 @@
 
   particles.resize(num);
 
-  for(Particles::size_type i = old_size-1; i < particles.size(); ++i)
+  for(Particles::size_type i = old_size; i < particles.size(); ++i)
     {
-      //i->t = -1.0f;
       spawn(particles[i]);
-      particles[i].t = (life_time * bunching * i/particles.size());
+      particles[i].t = life_time * bunching * float(i)/particles.size();
     }
 }
   
@@ -326,7 +325,8 @@
 void
 ParticleSystem::set_spawn_point(float x, float y)
 {
-  
+  spawn_x = x;
+  spawn_y = y;
 }
 
 void

Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-07 14:05:56 UTC (rev 1199)
+++ trunk/src/windstille_main.cpp	2006-01-07 15:16:09 UTC (rev 1200)
@@ -136,7 +136,7 @@
       }
     else
       {
-        if (!levelfile.empty())
+        if (levelfile.empty())
           {
             screen_manager.set_screen(new GameSession("levels/newformat2.wst"));
           }



From grumbel at berlios.de  Sat Jan  7 17:51:57 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jan 2006 17:51:57 +0100
Subject: [Windstille-commit] r1201 - in trunk/src: . gui particles
Message-ID: <200601071651.k07Gpv2n005770@sheep.berlios.de>

Author: grumbel
Date: 2006-01-07 17:51:56 +0100 (Sat, 07 Jan 2006)
New Revision: 1201

Added:
   trunk/src/gui/label.cpp
   trunk/src/gui/label.hpp
Modified:
   trunk/src/SConscript
   trunk/src/gui/button.hpp
   trunk/src/gui/grid_component.cpp
   trunk/src/gui/root_component.hpp
   trunk/src/gui/slider.cpp
   trunk/src/particle_viewer.cpp
   trunk/src/particle_viewer.hpp
   trunk/src/particles/particle_system.cpp
   trunk/src/particles/particle_system.hpp
Log:
- some more work on gui

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/SConscript	2006-01-07 16:51:56 UTC (rev 1201)
@@ -112,6 +112,7 @@
 'glutil/texture_manager.cpp',
 'gui/automap.cpp',
 'gui/button.cpp',
+'gui/label.cpp',
 'gui/component.cpp',
 'gui/component_factory.cpp',
 'gui/grid_component.cpp',

Modified: trunk/src/gui/button.hpp
===================================================================
--- trunk/src/gui/button.hpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/button.hpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -40,7 +40,7 @@
 
 public:
   Button(const lisp::Lisp* lisp, Component* parent);
-  Button(const std::string& lable, Component* parent);
+  Button(const std::string& label, Component* parent);
   ~Button();
 
   void draw();

Modified: trunk/src/gui/grid_component.cpp
===================================================================
--- trunk/src/gui/grid_component.cpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/grid_component.cpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -77,7 +77,9 @@
     }
   else if (!child_active)
     {
-      for(InputEventLst::const_iterator i = controller.get_events().begin(); i != controller.get_events().end(); ++i) 
+      for(InputEventLst::const_iterator i = controller.get_events().begin(); 
+          i != controller.get_events().end(); 
+          ++i)
         {
           if (i->type == BUTTON_EVENT && i->button.down)
             {

Added: trunk/src/gui/label.cpp
===================================================================
--- trunk/src/gui/label.cpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/label.cpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -0,0 +1,59 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "font/fonts.hpp"
+#include "label.hpp"
+
+namespace GUI {
+
+Label::Label(const std::string& label_)
+  : Component(Rectf(), parent),
+    label(label_)
+{
+}
+
+Label::~Label()
+{
+}
+
+void
+Label::draw()
+{
+  //Display::fill_rect(rect, Color(0.0f, 0.0f, 0.0f, 0.5f));
+  //Display::draw_rect(rect, Color(1.0f, 1.0f, 1.0f, 0.5f));
+  Fonts::vera12->draw(int(rect.left + 5/*+ rect.get_width()/2*/), int(rect.top + rect.get_height()/2 + 3),
+                      label,
+                      Color(1.0f, 1.0f, 1.0f, 1.0f));
+}
+
+void
+Label::update(float delta, const Controller& controller)
+{
+  set_active(false);
+}
+
+} // namespace GUI
+
+/* EOF */

Added: trunk/src/gui/label.hpp
===================================================================
--- trunk/src/gui/label.hpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/label.hpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -0,0 +1,56 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_LABEL_HPP
+#define HEADER_LABEL_HPP
+
+#include <string>
+#include "component.hpp"
+
+namespace GUI {
+
+/** */
+class Label : public Component
+{
+private:
+  std::string label;
+
+public:
+  Label(const std::string& label);
+  ~Label();
+
+  void draw();
+  void update(float delta, const Controller& controller);
+
+private:
+  Label (const Label&);
+  Label& operator= (const Label&);
+};
+
+} // namespace GUI
+
+#endif
+
+/* EOF */

Modified: trunk/src/gui/root_component.hpp
===================================================================
--- trunk/src/gui/root_component.hpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/root_component.hpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -44,7 +44,8 @@
   void update(float delta, const Controller& controller);
 
   void set_child(Component* child);
-
+  Component* get_child() const { return child; }
+  
   bool is_active() const;
 private:
   RootComponent (const RootComponent&);

Modified: trunk/src/gui/slider.cpp
===================================================================
--- trunk/src/gui/slider.cpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/gui/slider.cpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -76,7 +76,7 @@
   Display::draw_rect(rect, Color(1.0f, 1.0f, 1.0f, 0.5f));
   
   int width = 30;
-  Rectf slider_rect(Vector(rect.left + (rect.get_width()-width) * (pos/float(max - min)) ,
+  Rectf slider_rect(Vector(rect.left + (rect.get_width()-width) * ((pos-min)/float(max - min)),
                            rect.top + 2),
                     Sizef(width, rect.get_height()-4));
   if (is_active())

Modified: trunk/src/particle_viewer.cpp
===================================================================
--- trunk/src/particle_viewer.cpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/particle_viewer.cpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -34,6 +34,7 @@
 
 // Components
 #include "gui/button.hpp"
+#include "gui/label.hpp"
 #include "gui/slider.hpp"
 #include "gui/root_component.hpp"
 #include "gui/grid_component.hpp"
@@ -42,41 +43,66 @@
 #include "gui/text_view.hpp"
 #include "gui/automap.hpp"
 
-ParticleViewer::ParticleViewer()
+class ParticleSystemGUI
 {
-  background = Sprite("images/greychess.sprite");
-  show_gui = false;
+public:
+  ParticleSystem* psystem;
+  GUI::GridComponent* grid;
+  GUI::Slider* gravity_slider;
+  GUI::Slider* velocity_slider;
+  GUI::Slider* count_slider;
+  
+  ParticleSystemGUI(GUI::Component* parent, ParticleSystem* psystem_)
+    : psystem(psystem_)
+  {
+    using namespace GUI;
+    grid = new GridComponent(Rectf(200, 120, 600, 220), 2, 3, parent);
+    grid->set_padding(4);
 
-  using namespace GUI;
+    gravity_slider  = new Slider(grid);
+    velocity_slider = new Slider(grid);
+    count_slider    = new Slider(grid);
 
-  manager = new GUIManager();
+    gravity_slider->set_range(-10, 10);
+    gravity_slider->set_step(3);
+    gravity_slider->set_pos(1);
 
-  GridComponent* grid = new GridComponent(Rectf(350, 20, 450, 120), 1, 3, manager->get_root());
-  grid->set_padding(4);
+    velocity_slider->set_range(-500, 500);
+    velocity_slider->set_step(50);
+    velocity_slider->set_pos(10);//psystem->get_count());
 
-  gravity_slider  = new Slider(grid);
-  velocity_slider = new Slider(grid);
-  count_slider    = new Slider(grid);
+    count_slider->set_range(1, 200);
+    count_slider->set_step(10);
+    count_slider->set_pos(psystem->get_count());
 
+    grid->pack(new Label("Gravitation:"), 0, 0);
+    grid->pack(new Label("Velocity:"),    0, 1);
+    grid->pack(new Label("Count:"),       0, 2);
 
-  gravity_slider->set_range(-10, 10);
-  gravity_slider->set_step(1);
-  velocity_slider->set_pos(1);
+    grid->pack(gravity_slider,  1, 0);
+    grid->pack(velocity_slider, 1, 1);
+    grid->pack(count_slider,    1, 2);    
+  }
 
-  velocity_slider->set_range(-500, 500);
-  velocity_slider->set_step(10);
-  velocity_slider->set_pos(200);
+  void update()
+  {
+    psystem->set_count(count_slider->get_pos());
+  }
 
-  count_slider->set_range(1, 200);
-  count_slider->set_step(10);
-  count_slider->set_pos(50);
+  GUI::Component* get_component() { return grid; }
+};
 
-  grid->pack(gravity_slider,  0, 0);
-  grid->pack(velocity_slider, 0, 1);
-  grid->pack(count_slider,    0, 2);
+ParticleViewer::ParticleViewer()
+{
+  background = Sprite("images/greychess.sprite");
+  show_gui = false;
 
+  using namespace GUI;
 
-  manager->get_root()->set_child(grid);
+  manager = new GUIManager();
+  tab = new TabComponent(Rectf(200, 50, 600, 250), manager->get_root());
+  
+  manager->get_root()->set_child(tab);
 }
 
 ParticleViewer::~ParticleViewer()
@@ -111,6 +137,9 @@
       {
         FileReader reader(*iter);
         systems.push_back(new ParticleSystem(reader));
+
+        guis.push_back(new ParticleSystemGUI(tab, systems.back()));
+        tab->pack("Testomap", guis.back()->get_component());
       }
   }
 
@@ -157,14 +186,13 @@
       if (controller.button_was_pressed(OK_BUTTON))
         {
           show_gui = true;
-          std::cout << "Show GUI" << std::endl;       
+          manager->get_root()->get_child()->set_active(true);
         }
     }
   else
     {
       if (!manager->get_root()->is_active())
         {
-          std::cout << "Hide GUI" << std::endl;
           show_gui = false;
         }
       else
@@ -173,6 +201,11 @@
         }
     }
 
+  for(ParticleSystemGUIs::iterator i = guis.begin(); i != guis.end(); ++i)
+    {
+      (*i)->update();
+    }
+
   //systems[3]->set_count(count_slider->get_pos());
   //systems[3]->set_velocity(velocity_slider->get_pos(), velocity_slider->get_pos());
 }

Modified: trunk/src/particle_viewer.hpp
===================================================================
--- trunk/src/particle_viewer.hpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/particle_viewer.hpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -33,8 +33,11 @@
 
 namespace GUI {
 class Slider;
+class TabComponent;
 }
 
+class ParticleSystemGUI;
+
 /** */
 class ParticleViewer : public Screen
 {
@@ -47,11 +50,10 @@
   Vector pos;
   bool   show_gui;
   GUI::GUIManager* manager;
+  GUI::TabComponent* tab;
 
-  GUI::Slider* gravity_slider;
-  GUI::Slider* velocity_slider;
-  GUI::Slider* count_slider;
-
+  typedef std::vector<ParticleSystemGUI*> ParticleSystemGUIs;
+  ParticleSystemGUIs guis;
 public:
   ParticleViewer();
   ~ParticleViewer();

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/particles/particle_system.cpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -289,17 +289,25 @@
     }
 }
 
+int
+ParticleSystem::get_count() const
+{
+  return particles.size();
+}
+
 void
 ParticleSystem::set_count(int num)
 {
   int old_size = particles.size();
+  if (old_size != num)
+    {
+      particles.resize(num);
 
-  particles.resize(num);
-
-  for(Particles::size_type i = old_size; i < particles.size(); ++i)
-    {
-      spawn(particles[i]);
-      particles[i].t = life_time * bunching * float(i)/particles.size();
+      for(Particles::size_type i = old_size; i < particles.size(); ++i)
+        {
+          spawn(particles[i]);
+          particles[i].t = life_time * bunching * float(i)/particles.size();
+        }
     }
 }
   

Modified: trunk/src/particles/particle_system.hpp
===================================================================
--- trunk/src/particles/particle_system.hpp	2006-01-07 15:16:09 UTC (rev 1200)
+++ trunk/src/particles/particle_system.hpp	2006-01-07 16:51:56 UTC (rev 1201)
@@ -111,6 +111,8 @@
   
   /** Set how many particles will be used */
   void set_count(int num);
+
+  int get_count() const;
   
   /** \a factor == 1 means a constant stream of particles, a value of
       0 means all particles will be released at once */



From grumbel at berlios.de  Sun Jan  8 15:20:31 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 8 Jan 2006 15:20:31 +0100
Subject: [Windstille-commit] r1202 - in trunk/src: . scripting
Message-ID: <200601081420.k08EKV0f016291@sheep.berlios.de>

Author: grumbel
Date: 2006-01-08 15:20:30 +0100 (Sun, 08 Jan 2006)
New Revision: 1202

Modified:
   trunk/src/game_session.cpp
   trunk/src/game_session.hpp
   trunk/src/particle_viewer.cpp
   trunk/src/script_manager.cpp
   trunk/src/script_manager.hpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
Log:
- replaced WakeupEvent with WakeupData, so one can also store userdata in a wakeupevent (pointer to a gameobject, an id and such)

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/game_session.cpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -469,4 +469,10 @@
   impl->next_action = GameSessionImpl::NO_ACTION;
 }
 
+SceneContext*
+GameSession::get_scene_context()
+{
+  return &(impl->sc);
+}
+
 /* EOF */

Modified: trunk/src/game_session.hpp
===================================================================
--- trunk/src/game_session.hpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/game_session.hpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -89,6 +89,7 @@
 
   void quit();
 
+  SceneContext* get_scene_context();
 private:
   SharedPtr<GameSessionImpl> impl;
 };

Modified: trunk/src/particle_viewer.cpp
===================================================================
--- trunk/src/particle_viewer.cpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/particle_viewer.cpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -71,7 +71,7 @@
     velocity_slider->set_step(50);
     velocity_slider->set_pos(10);//psystem->get_count());
 
-    count_slider->set_range(1, 200);
+    count_slider->set_range(1, 500);
     count_slider->set_step(10);
     count_slider->set_pos(psystem->get_count());
 

Modified: trunk/src/script_manager.cpp
===================================================================
--- trunk/src/script_manager.cpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/script_manager.cpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -127,7 +127,7 @@
     int vm_state = sq_getvmstate(squirrel_vm.vm);
     
     if(vm_state == SQ_VMSTATE_SUSPENDED && squirrel_vm.wakeup_time > 0 && game_time >= squirrel_vm.wakeup_time) {
-      squirrel_vm.waiting_for_events = 0;
+      squirrel_vm.waiting_for_events = WakeupData(NO_EVENT);
       try {
         if(sq_wakeupvm(squirrel_vm.vm, false, false) < 0) {
           throw SquirrelError(squirrel_vm.vm, "Couldn't resume script");
@@ -151,8 +151,21 @@
 }
 
 void
+ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupData  event, float timeout)
+{
+  set_wakeup_event(vm, event.type, timeout);
+}
+
+void
+ScriptManager::fire_wakeup_event(WakeupData  event)
+{
+  fire_wakeup_event(event.type);
+}
+
+void
 ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float time)
 {
+  assert(event >= 0 && event < MAX_WAKEUP_EVENT_COUNT);
   // find the VM in the list and update it
   for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) {
     SquirrelVM& squirrel_vm = *i;
@@ -162,7 +175,7 @@
       } else {
         squirrel_vm.wakeup_time = game_time + time;
       }
-      squirrel_vm.waiting_for_events |= event;
+      squirrel_vm.waiting_for_events = WakeupData(event);
       return;
     }
   }
@@ -171,9 +184,10 @@
 void
 ScriptManager::fire_wakeup_event(WakeupEvent event)
 {
+  assert(event >= 0 && event < MAX_WAKEUP_EVENT_COUNT);
   for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) {
     SquirrelVM& vm = *i;
-    if(vm.waiting_for_events & event) {
+    if(vm.waiting_for_events.type == event) {
       vm.wakeup_time = game_time;
     }
   }
@@ -193,9 +207,11 @@
 }
 
 ScriptManager::SquirrelVM::SquirrelVM(const std::string& arg_name, HSQUIRRELVM arg_vm, HSQOBJECT arg_obj)
-  : name(arg_name), vm(arg_vm), vm_obj(arg_obj)
+  : name(arg_name),
+    vm(arg_vm), 
+    vm_obj(arg_obj)
 {
-  waiting_for_events = 0;
-  wakeup_time = 0;
+  waiting_for_events = WakeupData(NO_EVENT);
+  wakeup_time        = 0;
 }
 

Modified: trunk/src/script_manager.hpp
===================================================================
--- trunk/src/script_manager.hpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/script_manager.hpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -34,16 +34,32 @@
   }
 
   enum WakeupEvent {
-    // FIXME: Does/should this be a bitmask is a are normal enum enough?
-    TIME                = (1 << 0),
-    DIALOG_CLOSED       = (1 << 1),
-    CONVERSATION_CLOSED = (1 << 2),
-    FADE_DONE           = (1 << 3),
-    CAMERA_DONE         = (1 << 4)
-  };                  
+    NO_EVENT,
+    TIME,
+    DIALOG_CLOSED,
+    CONVERSATION_CLOSED,
+    FADE_DONE,
+    CAMERA_DONE,
+    GAMEOBJECT_DONE,
+    MAX_WAKEUP_EVENT_COUNT
+  };
 
+  struct WakeupData {
+    WakeupEvent type;
+
+    explicit WakeupData() : type(NO_EVENT) {}
+    explicit WakeupData(WakeupEvent type_) : type(type_) {}
+
+    union {
+      // GAMEOBJECT_DONE
+      GameObject* game_object;
+    };
+  };
+
   void set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float timeout = -1);
+  void set_wakeup_event(HSQUIRRELVM vm, WakeupData  event, float timeout = -1);
   void fire_wakeup_event(WakeupEvent event);
+  void fire_wakeup_event(WakeupData  event);
   
   bool run_before(HSQUIRRELVM vm);
 
@@ -54,9 +70,9 @@
     SquirrelVM(const std::string& arg_name, HSQUIRRELVM arg_vm, HSQOBJECT arg_obj);
     std::string name;
     HSQUIRRELVM vm;
-    HSQOBJECT vm_obj;
-    float wakeup_time;
-    int waiting_for_events;
+    HSQOBJECT   vm_obj;
+    float       wakeup_time;
+    WakeupData  waiting_for_events;
   };
   
   typedef std::list<SquirrelVM> SquirrelVMs;

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/scripting/interface.cpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -294,6 +294,17 @@
   GameSession::current()->fadein(time);
 }
 
+int  render_mask_get()
+{
+  return GameSession::current()->get_scene_context()->get_render_mask();
+}
+
+void render_mask_set(int mask)
+{
+  GameSession::current()->get_scene_context()->set_render_mask(mask);
+}
+
+
 } // namespace Scripting
 
 /* EOF */

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/scripting/interface.hpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -31,8 +31,7 @@
 #include <squirrel.h>
 #endif
 
-namespace Scripting
-{
+namespace Scripting {
 
 void set_sector(const std::string& filename);
 
@@ -109,6 +108,9 @@
 void internal_fadeout_rgb(float time, float r, float g, float b);
 void internal_fadein(float time);
 
+int  render_mask_get();
+void render_mask_set(int mask);
+
 } // namespace Scripting
 
 #endif

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-07 16:51:56 UTC (rev 1201)
+++ trunk/src/scripting/wrapper.cpp	2006-01-08 14:20:30 UTC (rev 1202)
@@ -652,6 +652,25 @@
   return 0;
 }
 
+static int render_mask_get_wrapper(HSQUIRRELVM v)
+{
+  
+  int return_value = Scripting::render_mask_get();
+  
+  sq_pushinteger(v, return_value);
+  return 1;
+}
+
+static int render_mask_set_wrapper(HSQUIRRELVM v)
+{
+  int arg0;
+  sq_getinteger(v, 2, &arg0);
+  
+  Scripting::render_mask_set(arg0);
+  
+  return 0;
+}
+
 static int spawn_object_wrapper(HSQUIRRELVM v)
 {
   return Scripting::spawn_object(v);
@@ -1168,6 +1187,22 @@
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "render_mask_get", -1);
+  sq_newclosure(v, &render_mask_get_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'render_mask_get'";
+    throw SquirrelError(v, msg.str());
+  }
+
+  sq_pushstring(v, "render_mask_set", -1);
+  sq_newclosure(v, &render_mask_set_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'render_mask_set'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "spawn_object", -1);
   sq_newclosure(v, &spawn_object_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {



From grumbel at berlios.de  Sun Jan  8 17:56:16 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 8 Jan 2006 17:56:16 +0100
Subject: [Windstille-commit] r1203 - in trunk: data/levels data/scripts src src/scripting
Message-ID: <200601081656.k08GuGdO002415@sheep.berlios.de>

Author: grumbel
Date: 2006-01-08 17:56:15 +0100 (Sun, 08 Jan 2006)
New Revision: 1203

Modified:
   trunk/data/levels/intro.nut
   trunk/data/scripts/windstille.nut
   trunk/src/camera.cpp
   trunk/src/camera.hpp
   trunk/src/game_session.cpp
   trunk/src/scripting/interface.cpp
   trunk/src/scripting/interface.hpp
   trunk/src/scripting/wrapper.cpp
   trunk/src/view.cpp
Log:
- some more work on camera scripting

Modified: trunk/data/levels/intro.nut
===================================================================
--- trunk/data/levels/intro.nut	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/data/levels/intro.nut	2006-01-08 16:56:15 UTC (rev 1203)
@@ -1,3 +1,5 @@
+// -*- c++ -*-
+
 function fade_in_out(r,g,b)
 {
   fadeout(0.2, r,g,b);
@@ -8,15 +10,45 @@
   wait_for_fade();
 }
 
-cutscene_begin();
+//render_mask_set(RENDER_MASK_COLORMAP);
+fadeout(0);
 
-set_camera_active(false);
 objects.player.set_active(false);
-set_view(0, 0);
 spawn_object("scriptable-object", { name="planet", pos=[0,0],
                  sprite="images/planet.sprite", z_pos=1001 });
-wait(3);
 
+camera_set_active(false);
+camera_set_pos(400, 300); // USA
+camera_set_zoom(4.0);
+fadein(1);
+wait_for_fade();
+cutscene_begin();
+wait(2);
+
+caption_add(BOTTOM, "Location: USA");
+wait_for_dialog();
+
+camera_continue_path();
+camera_add_point(533, 248, 6.0); // greenland
+camera_end_path();
+wait_for_camera();
+
+caption_add(BOTTOM, "Location: Greenland");
+wait_for_dialog();
+
+camera_continue_path();
+camera_add_point(445, 513, 3.0); // antarctica
+camera_end_path();
+wait_for_camera();
+
+caption_add(BOTTOM, "Location: Antarctica");
+wait_for_dialog();
+
+camera_add_point(400, 300, 1.0);
+camera_add_point(400, 300, 1.0);
+camera_end_path();
+// wait_for_camera();
+
 caption_add(BOTTOM, "The Big Boom. Humanity found out it could travel to the stars, and it did, en masse.");
 
 wait_for_dialog();
@@ -30,14 +62,21 @@
 caption_add(BOTTOM, "Still, many individuals took their chances, even without military hardware and terraformers. Most worlds were so barren or so dangerous that whole colonies died out. In the Free Colonies that survive, life isn't easy.");
 
 wait_for_dialog();
-fade_in_out(1,0,1)
 
 caption_end();
 
+fadeout(1);
+wait_for_fade();
 objects.player.set_active(true);
-set_camera_active(true);
 objects.planet.remove();
 
 cutscene_end();
+camera_set_active(true);
 
+render_mask_set(RENDER_MASK_ALL);
+wait(1);
+wait_for_fade();
+fadein(1);
+
+
 /* EOF */

Modified: trunk/data/scripts/windstille.nut
===================================================================
--- trunk/data/scripts/windstille.nut	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/data/scripts/windstille.nut	2006-01-08 16:56:15 UTC (rev 1203)
@@ -1,3 +1,28 @@
+/* -*- c++ -*-
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
 /**
  * This script is read on Windstille startup, add all helper functions
  * that should be available in the console all the time here 
@@ -3,20 +28,34 @@
  */
 
+
+/**
+ * Constants from display/scene_context.hpp, manually copied here so
+ * you have to sync manually in case stuff changes
+ */
+RENDER_MASK_COLORMAP       <- 1<<0,
+RENDER_MASK_LIGHTMAP       <- 1<<1,
+RENDER_MASK_HIGHLIGHTMAP   <- 1<<2,
+RENDER_MASK_LIGHTMAPSCREEN <- 1<<3
+RENDER_MASK_ALL            <- (RENDER_MASK_HIGHLIGHTMAP | RENDER_MASK_LIGHTMAP | RENDER_MASK_COLORMAP)
+
 has_nightvision <- false;
 function nightvision_enabled(...)
 {
   if (vargc == 1) 
     {
-      if (has_nightvision) {
-        objects.nightvision.set_active(vargv[0]); 
-      } 
-      else if (vargv[0]) 
+      if (has_nightvision) 
         {
+          objects.nightvision.set_active(vargv[0]); 
+        }
+      else if (vargv[0])
+        {
           spawn_object("nightvision", {});
           has_nightvision = true;
         }
-    } else {
-    return true;
-  }
+    } 
+  else 
+    {
+      return true;
+    }
 }
 

Modified: trunk/src/camera.cpp
===================================================================
--- trunk/src/camera.cpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/camera.cpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -26,6 +26,20 @@
 Camera* Camera::current_ = 0;
 
 /**
+ * Calculate the distance between two camera PathPoints, distance here
+ * means not only the distance between the points itself, but also
+ * between their zoom and rotation setting
+ */
+float distance(const Camera::PathPoint& a, const Camera::PathPoint& b)
+{
+  // "100.0f *" is there to balance out the speed between zoom and
+  // positional movement
+  return (b.pos - a.pos).length() 
+    + 100.0f * fabsf(b.zoom - a.zoom)
+    + fabsf(b.rotation - a.rotation);
+}
+
+/**
  * Simple linear interpolation to move along a given vector path
  * FIXME: Could add curves and different speed per vertex
  */
@@ -34,17 +48,17 @@
   float length_so_far = 0.0f;
   for(std::vector<Camera::PathPoint>::size_type i = 0; i < path.size()-1; ++i)
     {
-      Vector segment = path[i+1].pos - path[i].pos;
-      float  segment_length = segment.length();
+      float  segment_length = distance(path[i], path[i+1]);
 
       if (length_so_far + segment_length > length)
         {
           float factor = (length - length_so_far) / segment_length;
-          return Camera::PathPoint(path[i].pos + segment * factor,
+          return Camera::PathPoint((path[i+1].pos * factor) + (path[i].pos * (1.0f - factor)),
                                    (factor * path[i+1].zoom) + ((1.0f - factor) * path[i].zoom));
         }
       length_so_far += segment_length;
     }
+
   return path.back();
 }
 
@@ -110,13 +124,15 @@
         path_pos += delta * 50.0f;
 
         PathPoint p = interpolate_path(path, path_pos);
+
+        set_pos(p.pos.x, p.pos.y);
+        set_zoom(p.zoom);
+
         if (p == path.back())
           {
             script_manager->fire_wakeup_event(ScriptManager::CAMERA_DONE);
             set_mode(CAMERA_INACTIVE);
           }
-        set_pos(p.pos.x, p.pos.y);
-        set_zoom(p.zoom);
       }
       break;
     }
@@ -125,11 +141,8 @@
 void
 Camera::set_pos(float x, float y)
 {
-  // Casting here isn't really necessary, but should about some
-  // pixel-jitter when scrolling with subpixel values and pixel
-  // precise images
-  pos.x = static_cast<int>(x + Display::get_width()/2);
-  pos.y = static_cast<int>(y + Display::get_height()/2);
+  pos.x = x; // + Display::get_width()/2);
+  pos.y = y; // + Display::get_height()/2);
 }
 
 void
@@ -145,9 +158,14 @@
 }
 
 void
-Camera::set_path(const std::vector<Camera::PathPoint>& path_)
+Camera::set_path(const std::vector<Camera::PathPoint>& path_, bool cont)
 {
-  path     = path_;
+  path.clear();
+  if (cont)
+    path.push_back(PathPoint(pos, zoom));
+
+  std::copy(path_.begin(), path_.end(), std::back_inserter(path)); 
+
   path_pos = 0;
   mode     = CAMERA_FOLLOW_PATH;
 }

Modified: trunk/src/camera.hpp
===================================================================
--- trunk/src/camera.hpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/camera.hpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -34,9 +34,10 @@
   {
     Vector pos;
     float  zoom;
+    float  rotation;
 
-    PathPoint(const Vector& pos_, float zoom_)
-      : pos(pos_), zoom(zoom_) {}
+    PathPoint(const Vector& pos_, float zoom_, float rotation_ = 0.0f)
+      : pos(pos_), zoom(zoom_), rotation(rotation_) {}
 
     bool operator==(const PathPoint& p) {
       return p.pos == pos && p.zoom == zoom;
@@ -45,8 +46,17 @@
 
 private:
   Mode mode;
-
+  
+  /**
+   * Position of the camera, ie. where the center of the screen should
+   * be located
+   */
   Vector pos;
+  
+  /**
+   * Zoom of the Camera, 1.0 means no zoom, 2.0 means everything will
+   * be twice as large 
+   */
   float  zoom;
 
   std::vector<PathPoint> path;
@@ -70,8 +80,13 @@
 
   /**
    * Set Camera to follow the given path
+   *
+   * @param path_ The path the camera should follow
+   * @param cont True if you want to continue the path from the
+   * current camera position, false if you want the camera to jump to
+   * the start of the path instantly
    */
-  void   set_path(const std::vector<PathPoint>& path_);
+  void   set_path(const std::vector<PathPoint>& path_, bool cont);
 
 private:
   Camera (const Camera&);

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/game_session.cpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -105,14 +105,14 @@
   Screen* current_gui;
 
   GameSessionImpl() {
-    sector = 0;
-    current_gui = 0;
+    sector         = 0;
+    current_gui    = 0;
     cutscene_mode  = false;
     cutscene_value = 0.0f;
-    fade_color = Color(0.0f, 0.0f, 0.0f, 1.0f);
-    fade_state = FADEOUT;
-    fadeout_value = 1.0f;
-    fade_time = 1.0f;
+    fade_color     = Color(0.0f, 0.0f, 0.0f, 1.0f);
+    fade_state     = RUNNING;
+    fadeout_value  = 0.0f;
+    fade_time      = 1.0f;
   }
   ~GameSessionImpl() {
     delete sector;
@@ -217,11 +217,12 @@
       script_manager->update();
       
       view.update(delta);
+      sector->update(delta);
   
       switch (fade_state)
         {
         case FADEIN:
-          if (fadeout_value < 0.0f)
+          if (fadeout_value <= 0.0f)
             {
               fade_state = RUNNING;
               fadeout_value = 0.0f;
@@ -234,7 +235,7 @@
           break;
 
         case FADEOUT:
-          if (fadeout_value > 1.0f)
+          if (fadeout_value >= 1.0f)
             { 
               fadeout_value = 1.0f;
               script_manager->fire_wakeup_event(ScriptManager::FADE_DONE);
@@ -260,7 +261,6 @@
           break;
 
         case RUNNING:
-          sector->update(delta);
           energy_bar.update(delta, controller);
           if (current_gui)
             current_gui->update(delta, controller);
@@ -296,9 +296,16 @@
  
   sound_manager->stop_music();
 
-  impl->fade_time   = 1.0f;
-  impl->fade_state    = GameSessionImpl::FADEOUT;
-  impl->next_action   = GameSessionImpl::CHANGE_SECTOR_ACTION;
+  if (impl->fade_state == GameSessionImpl::FADEOUT)
+    {
+      GameSession::current()->set_sector(impl->filename);
+    }
+  else
+    {
+      impl->fade_time     = 1.0f;
+      impl->fade_state    = GameSessionImpl::FADEOUT;
+      impl->next_action   = GameSessionImpl::CHANGE_SECTOR_ACTION;
+    }
 }
 
 void
@@ -315,10 +322,6 @@
   impl->sector->spawn_player("default");
   impl->sector->activate();
   
-  impl->fade_time   = 1.0f;
-  impl->fade_state    = GameSessionImpl::FADEIN;
-  impl->next_action   = GameSessionImpl::NO_ACTION;
-
   if (debug) std::cout << "Finished changing sector" << std::endl;
 }
 
@@ -455,10 +458,20 @@
 void
 GameSession::fadeout(float time, const Color& color)
 {
-  impl->fade_time   = 1.0f/time;
-  impl->fade_color  = color;
-  impl->fade_state  = GameSessionImpl::FADEOUT;
-  impl->next_action = GameSessionImpl::NO_ACTION;
+  if (time == 0.0)
+    { // directly go to a state of solid color, no fading
+      impl->fadeout_value  = 1.0f;
+      impl->fade_color  = color;
+      impl->fade_state  = GameSessionImpl::FADEOUT;
+      impl->next_action = GameSessionImpl::NO_ACTION;
+    }
+  else
+    {
+      impl->fade_time   = 1.0f/time;
+      impl->fade_color  = color;
+      impl->fade_state  = GameSessionImpl::FADEOUT;
+      impl->next_action = GameSessionImpl::NO_ACTION;
+    }
 }
 
 void

Modified: trunk/src/scripting/interface.cpp
===================================================================
--- trunk/src/scripting/interface.cpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/scripting/interface.cpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -79,15 +79,28 @@
   GameSession::current()->set_control_state(GameSession::GAME);
 }
 
-void set_view(float x, float y)
+void camera_set_pos(float x, float y)
 {
   Camera::current()->set_pos(x, y);
 }
 
+void camera_set_zoom(float z)
+{
+  Camera::current()->set_zoom(z);
+}
 
+bool camera_path_continue;
 std::vector<Camera::PathPoint> camera_path;
+
+void camera_continue_path()
+{
+  camera_path_continue = true;
+  camera_path.clear();
+}
+
 void camera_begin_path()
 {
+  camera_path_continue = false;
   camera_path.clear();
 }
 
@@ -98,7 +111,7 @@
 
 void camera_end_path()
 {
-  Camera::current()->set_path(camera_path);
+  Camera::current()->set_path(camera_path, camera_path_continue);
 }
 
 void camera_set_active(bool active)

Modified: trunk/src/scripting/interface.hpp
===================================================================
--- trunk/src/scripting/interface.hpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/scripting/interface.hpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -46,11 +46,13 @@
 void caption_end();
 
 void camera_set_active(bool active);
+void camera_continue_path();
 void camera_begin_path();
 void camera_add_point(float x, float y, float zoom);
 void camera_end_path();
 
-void set_view(float x, float y);
+void camera_set_pos(float x, float y);
+void camera_set_zoom(float z);
 void set_controller_help_active(bool active);
 
 // dialog alignment constants

Modified: trunk/src/scripting/wrapper.cpp
===================================================================
--- trunk/src/scripting/wrapper.cpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/scripting/wrapper.cpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -285,6 +285,15 @@
   return 0;
 }
 
+static int camera_continue_path_wrapper(HSQUIRRELVM v)
+{
+  (void) v;
+  
+  Scripting::camera_continue_path();
+  
+  return 0;
+}
+
 static int camera_begin_path_wrapper(HSQUIRRELVM v)
 {
   (void) v;
@@ -317,18 +326,28 @@
   return 0;
 }
 
-static int set_view_wrapper(HSQUIRRELVM v)
+static int camera_set_pos_wrapper(HSQUIRRELVM v)
 {
   float arg0;
   sq_getfloat(v, 2, &arg0);
   float arg1;
   sq_getfloat(v, 3, &arg1);
   
-  Scripting::set_view(arg0, arg1);
+  Scripting::camera_set_pos(arg0, arg1);
   
   return 0;
 }
 
+static int camera_set_zoom_wrapper(HSQUIRRELVM v)
+{
+  float arg0;
+  sq_getfloat(v, 2, &arg0);
+  
+  Scripting::camera_set_zoom(arg0);
+  
+  return 0;
+}
+
 static int set_controller_help_active_wrapper(HSQUIRRELVM v)
 {
   SQBool arg0;
@@ -899,6 +918,14 @@
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "camera_continue_path", -1);
+  sq_newclosure(v, &camera_continue_path_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'camera_continue_path'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "camera_begin_path", -1);
   sq_newclosure(v, &camera_begin_path_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
@@ -923,14 +950,22 @@
     throw SquirrelError(v, msg.str());
   }
 
-  sq_pushstring(v, "set_view", -1);
-  sq_newclosure(v, &set_view_wrapper, 0);
+  sq_pushstring(v, "camera_set_pos", -1);
+  sq_newclosure(v, &camera_set_pos_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {
     std::ostringstream msg;
-    msg << "Couldn't register function'set_view'";
+    msg << "Couldn't register function'camera_set_pos'";
     throw SquirrelError(v, msg.str());
   }
 
+  sq_pushstring(v, "camera_set_zoom", -1);
+  sq_newclosure(v, &camera_set_zoom_wrapper, 0);
+  if(SQ_FAILED(sq_createslot(v, -3))) {
+    std::ostringstream msg;
+    msg << "Couldn't register function'camera_set_zoom'";
+    throw SquirrelError(v, msg.str());
+  }
+
   sq_pushstring(v, "set_controller_help_active", -1);
   sq_newclosure(v, &set_controller_help_active_wrapper, 0);
   if(SQ_FAILED(sq_createslot(v, -3))) {

Modified: trunk/src/view.cpp
===================================================================
--- trunk/src/view.cpp	2006-01-08 14:20:30 UTC (rev 1202)
+++ trunk/src/view.cpp	2006-01-08 16:56:15 UTC (rev 1203)
@@ -36,7 +36,15 @@
 void
 View::draw (SceneContext& sc)
 {
-  state.set_pos(camera.get_pos());
+  // Casting here isn't really necessary, but should about some
+  // pixel-jitter when scrolling with subpixel values and pixel
+  // precise images.
+  if (camera.get_zoom() == 1.0)
+    state.set_pos(Vector(static_cast<int>(camera.get_pos().x),
+                         static_cast<int>(camera.get_pos().y)));
+  else
+    state.set_pos(camera.get_pos());
+
   state.set_zoom(camera.get_zoom() + (zoom - 1.0f));
   state.set_pos(state.get_pos() + Vector(transform.x, transform.y));
 



From grumbel at berlios.de  Sun Jan  8 22:42:46 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Sun, 8 Jan 2006 22:42:46 +0100
Subject: [Windstille-commit] r1204 - in trunk/src: . sprite3d
Message-ID: <200601082142.k08LgkJC001647@sheep.berlios.de>

Author: grumbel
Date: 2006-01-08 22:42:45 +0100 (Sun, 08 Jan 2006)
New Revision: 1204

Modified:
   trunk/src/script_manager.cpp
   trunk/src/script_manager.hpp
   trunk/src/sprite3d/sprite3d.hpp
Log:
- migrated some code to WakeupData

Modified: trunk/src/script_manager.cpp
===================================================================
--- trunk/src/script_manager.cpp	2006-01-08 16:56:15 UTC (rev 1203)
+++ trunk/src/script_manager.cpp	2006-01-08 21:42:45 UTC (rev 1204)
@@ -126,71 +126,90 @@
     SquirrelVM& squirrel_vm = *i;
     int vm_state = sq_getvmstate(squirrel_vm.vm);
     
-    if(vm_state == SQ_VMSTATE_SUSPENDED && squirrel_vm.wakeup_time > 0 && game_time >= squirrel_vm.wakeup_time) {
-      squirrel_vm.waiting_for_events = WakeupData(NO_EVENT);
-      try {
-        if(sq_wakeupvm(squirrel_vm.vm, false, false) < 0) {
-          throw SquirrelError(squirrel_vm.vm, "Couldn't resume script");
+    if(vm_state == SQ_VMSTATE_SUSPENDED && squirrel_vm.wakeup_time > 0 && game_time >= squirrel_vm.wakeup_time) 
+      {
+        squirrel_vm.waiting_for_events = WakeupData(NO_EVENT);
+        try {
+          if(sq_wakeupvm(squirrel_vm.vm, false, false) < 0) {
+            throw SquirrelError(squirrel_vm.vm, "Couldn't resume script");
+          }
+        } catch(std::exception& e) {
+          std::cerr << "Problem executing script: " << e.what() << "\n";
+          sq_release(v, &squirrel_vm.vm_obj);
+          i = squirrel_vms.erase(i);
+          continue;
         }
-      } catch(std::exception& e) {
-        std::cerr << "Problem executing script: " << e.what() << "\n";
-        sq_release(v, &squirrel_vm.vm_obj);
+      }
+	
+    if (vm_state != SQ_VMSTATE_SUSPENDED)
+      {
+        sq_release(v, &(squirrel_vm.vm_obj));
         i = squirrel_vms.erase(i);
-        continue;
       }
-	}
-	
-	if (vm_state != SQ_VMSTATE_SUSPENDED)
-	  {
-	    sq_release(v, &(squirrel_vm.vm_obj));
-	    i = squirrel_vms.erase(i);
-	  }
-  else
-    ++i;
+    else
+      {
+        ++i;
+      }
   }
 }
 
 void
-ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupData  event, float timeout)
+ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupData event, float timeout)
 {
-  set_wakeup_event(vm, event.type, timeout);
+  assert(event.type >= 0 && event.type < MAX_WAKEUP_EVENT_COUNT);
+  // find the VM in the list and update it
+  for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) {
+    SquirrelVM& squirrel_vm = *i;
+    if(squirrel_vm.vm == vm) 
+      {
+        squirrel_vm.waiting_for_events = event;
+
+        if(timeout < 0) {
+          squirrel_vm.wakeup_time = -1;
+        } else {
+          squirrel_vm.wakeup_time = game_time + timeout;
+        }
+        return;
+      }
+  }
 }
 
 void
 ScriptManager::fire_wakeup_event(WakeupData  event)
 {
-  fire_wakeup_event(event.type);
+  assert(event.type >= 0 && event.type < MAX_WAKEUP_EVENT_COUNT);
+  for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) 
+    {
+      SquirrelVM& vm = *i;
+      if(vm.waiting_for_events.type == event.type && vm.waiting_for_events.type != NO_EVENT)
+        {
+          switch (event.type)
+            {
+            case GAMEOBJECT_DONE:
+              if (vm.waiting_for_events.game_object == event.game_object)
+                {
+                  vm.wakeup_time = game_time;
+                }
+              break;
+
+            default:
+              vm.wakeup_time = game_time;
+              break;
+            }
+        }
+    }
 }
 
 void
-ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float time)
+ScriptManager::set_wakeup_event(HSQUIRRELVM vm, WakeupEvent event, float timeout)
 {
-  assert(event >= 0 && event < MAX_WAKEUP_EVENT_COUNT);
-  // find the VM in the list and update it
-  for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) {
-    SquirrelVM& squirrel_vm = *i;
-    if(squirrel_vm.vm == vm) {
-      if(time < 0) {
-        squirrel_vm.wakeup_time = -1;
-      } else {
-        squirrel_vm.wakeup_time = game_time + time;
-      }
-      squirrel_vm.waiting_for_events = WakeupData(event);
-      return;
-    }
-  }
+  set_wakeup_event(vm, WakeupData(event), timeout);
 }
 
 void
 ScriptManager::fire_wakeup_event(WakeupEvent event)
 {
-  assert(event >= 0 && event < MAX_WAKEUP_EVENT_COUNT);
-  for(SquirrelVMs::iterator i = squirrel_vms.begin(); i != squirrel_vms.end(); ++i) {
-    SquirrelVM& vm = *i;
-    if(vm.waiting_for_events.type == event) {
-      vm.wakeup_time = game_time;
-    }
-  }
+  fire_wakeup_event(WakeupData(event));
 }
 
 bool ScriptManager::run_before(HSQUIRRELVM vm)
@@ -215,3 +234,4 @@
   wakeup_time        = 0;
 }
 
+/* EOF */

Modified: trunk/src/script_manager.hpp
===================================================================
--- trunk/src/script_manager.hpp	2006-01-08 16:56:15 UTC (rev 1203)
+++ trunk/src/script_manager.hpp	2006-01-08 21:42:45 UTC (rev 1204)
@@ -45,11 +45,11 @@
   };
 
   struct WakeupData {
-    WakeupEvent type;
-
     explicit WakeupData() : type(NO_EVENT) {}
     explicit WakeupData(WakeupEvent type_) : type(type_) {}
 
+    WakeupEvent type;
+    
     union {
       // GAMEOBJECT_DONE
       GameObject* game_object;

Modified: trunk/src/sprite3d/sprite3d.hpp
===================================================================
--- trunk/src/sprite3d/sprite3d.hpp	2006-01-08 16:56:15 UTC (rev 1203)
+++ trunk/src/sprite3d/sprite3d.hpp	2006-01-08 21:42:45 UTC (rev 1204)
@@ -104,7 +104,7 @@
   /**
    * The speed of the action is multiplied with this factor
    */
-  void set_speed(float speed);
+  void  set_speed(float speed);
   float get_speed() const;
 
   /**



From grumbel at berlios.de  Mon Jan  9 09:40:19 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Mon, 9 Jan 2006 09:40:19 +0100
Subject: [Windstille-commit] r1205 - in trunk/src: . display font gui particles sprite2d sprite3d
Message-ID: <200601090840.k098eJKb001059@sheep.berlios.de>

Author: grumbel
Date: 2006-01-09 09:40:11 +0100 (Mon, 09 Jan 2006)
New Revision: 1205

Added:
   trunk/src/display/opengl_state.cpp
   trunk/src/display/opengl_state.hpp
   trunk/src/display/surface.cpp
   trunk/src/display/surface.hpp
   trunk/src/display/surface_drawing_parameters.hpp
   trunk/src/display/surface_manager.cpp
   trunk/src/display/surface_manager.hpp
   trunk/src/display/texture.cpp
   trunk/src/display/texture.hpp
   trunk/src/display/texture_manager.cpp
   trunk/src/display/texture_manager.hpp
Removed:
   trunk/src/glutil/
Modified:
   trunk/src/SConscript
   trunk/src/display/display.cpp
   trunk/src/display/drawing_context.cpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/vertex_array_drawing_request.cpp
   trunk/src/display/vertex_array_drawing_request.hpp
   trunk/src/field.hpp
   trunk/src/font/ttf_font.cpp
   trunk/src/font/ttf_font.hpp
   trunk/src/game_object.cpp
   trunk/src/game_session.cpp
   trunk/src/gui/automap.cpp
   trunk/src/gui/automap.hpp
   trunk/src/laser_pointer.hpp
   trunk/src/nightvision.cpp
   trunk/src/nightvision.hpp
   trunk/src/particles/surface_drawer.cpp
   trunk/src/particles/surface_drawer.hpp
   trunk/src/player.cpp
   trunk/src/player.hpp
   trunk/src/sprite2d/data.cpp
   trunk/src/sprite2d/data.hpp
   trunk/src/sprite2d/sprite.cpp
   trunk/src/sprite2d/sprite.hpp
   trunk/src/sprite3d/data.cpp
   trunk/src/sprite3d/data.hpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/text_area.cpp
   trunk/src/tile.hpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_packer.cpp
   trunk/src/tile_packer.hpp
   trunk/src/timer.cpp
   trunk/src/timer.hpp
   trunk/src/windstille_main.cpp
Log:
- moved glutil/ stuff to display/

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/SConscript	2006-01-09 08:40:11 UTC (rev 1205)
@@ -102,14 +102,14 @@
 'display/drawing_context.cpp',
 'display/scene_context.cpp',
 'display/vertex_array_drawing_request.cpp',
+'display/opengl_state.cpp',
+'display/surface.cpp',
+'display/surface_manager.cpp',
+'display/texture.cpp',
+'display/texture_manager.cpp',
 'font/border_font_effect.cpp',
 'font/fonts.cpp',
 'font/ttf_font.cpp',
-'glutil/opengl_state.cpp',
-'glutil/surface.cpp',
-'glutil/surface_manager.cpp',
-'glutil/texture.cpp',
-'glutil/texture_manager.cpp',
 'gui/automap.cpp',
 'gui/button.cpp',
 'gui/label.cpp',

Modified: trunk/src/display/display.cpp
===================================================================
--- trunk/src/display/display.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/display/display.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -27,7 +27,7 @@
 #include <stdexcept>
 #include <SDL.h>
 #include "config.hpp"
-#include "glutil/opengl_state.hpp"
+#include "display/opengl_state.hpp"
 #include "display.hpp"
 #include "util.hpp"
 #include <GL/glext.h>

Modified: trunk/src/display/drawing_context.cpp
===================================================================
--- trunk/src/display/drawing_context.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/display/drawing_context.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -24,10 +24,10 @@
 #include "font/fonts.hpp"
 #include "sprite2d/sprite.hpp"
 #include "drawing_context.hpp"
-#include "glutil/opengl_state.hpp"
-#include "glutil/surface_drawing_parameters.hpp"
+#include "display/opengl_state.hpp"
+#include "display/surface_drawing_parameters.hpp"
 #include "display/vertex_array_drawing_request.hpp"
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 
 struct DrawingRequestsSorter
 {

Copied: trunk/src/display/opengl_state.cpp (from rev 1192, trunk/src/glutil/opengl_state.cpp)

Copied: trunk/src/display/opengl_state.hpp (from rev 1192, trunk/src/glutil/opengl_state.hpp)

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/display/scene_context.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -18,8 +18,8 @@
 //  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 
 #include "display/display.hpp"
-#include "glutil/surface.hpp"
-#include "glutil/opengl_state.hpp"
+#include "display/surface.hpp"
+#include "display/opengl_state.hpp"
 #include "scene_context.hpp"
 #include <assert.h>
 

Copied: trunk/src/display/surface.cpp (from rev 1192, trunk/src/glutil/surface.cpp)
===================================================================
--- trunk/src/glutil/surface.cpp	2006-01-06 20:51:22 UTC (rev 1192)
+++ trunk/src/display/surface.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -0,0 +1,199 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+#include <config.h>
+
+#include "surface.hpp"
+#include "math/vector.hpp"
+#include "display/opengl_state.hpp"
+#include "surface_drawing_parameters.hpp"
+#include "surface_manager.hpp"
+
+class SurfaceImpl
+{
+public:
+  Texture texture;
+  float texcoords[8];
+  Rectf  uv;
+
+  int width;
+  int height;
+};
+
+Surface::Surface()
+{
+}
+
+Surface::Surface(const std::string& filename)
+{
+  // FIXME: a bit ugly, should move some of the surface_manager code over here
+  *this = surface_manager->get(filename);
+}
+
+static int power_of_two(int val) {
+  int result = 1;
+  while(result < val)
+    result *= 2;
+  return result;
+}
+
+Surface::Surface(int width, int height)
+  : impl(new SurfaceImpl())
+{
+  impl->width  = width;
+  impl->height = height;
+
+  impl->texture = Texture(power_of_two(width), power_of_two(height));
+  impl->uv      = Rectf(0, 0,
+                        float(impl->width)  / impl->texture.get_width(),
+                        float(impl->height) / impl->texture.get_height());
+
+  // Keep the texcoords in array form for convenience
+  impl->texcoords[0] = impl->uv.left;
+  impl->texcoords[1] = impl->uv.top;
+  impl->texcoords[2] = impl->uv.right;
+  impl->texcoords[3] = impl->uv.top;
+  impl->texcoords[4] = impl->uv.right;
+  impl->texcoords[5] = impl->uv.bottom;
+  impl->texcoords[6] = impl->uv.left;
+  impl->texcoords[7] = impl->uv.bottom;
+}
+
+
+Surface::Surface(Texture texture, const Rectf& rect, int width, int height)
+  : impl(new SurfaceImpl())
+{
+  impl->texture = texture;
+  impl->width   = width;
+  impl->height  = height;
+  impl->uv      = rect;
+
+  // Keep the texcoords in array form for convenience
+  impl->texcoords[0] = rect.left;
+  impl->texcoords[1] = rect.top;
+  impl->texcoords[2] = rect.right;
+  impl->texcoords[3] = rect.top;
+  impl->texcoords[4] = rect.right;
+  impl->texcoords[5] = rect.bottom;
+  impl->texcoords[6] = rect.left;
+  impl->texcoords[7] = rect.bottom;
+}
+
+Surface::~Surface()
+{
+}
+
+int
+Surface::get_width()  const
+{
+  return impl->width;
+}
+
+int
+Surface::get_height() const
+{ 
+  return impl->height; 
+}
+
+Texture
+Surface::get_texture() const
+{
+  return impl->texture;
+}
+
+const float*
+Surface::get_texcoords() const
+{
+  return impl->texcoords; 
+}
+
+Rectf
+Surface::get_uv() const
+{
+  return impl->uv;
+}
+
+Surface::operator bool() const
+{
+  return !impl.is_null();
+}
+
+void
+Surface::draw(const Vector& pos) const
+{
+  OpenGLState state;
+  state.enable(GL_BLEND);
+  state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+  state.enable(GL_TEXTURE_2D);
+  state.bind_texture(impl->texture);
+  state.activate();
+
+  glBegin(GL_QUADS);
+
+  glTexCoord2f(impl->uv.left, impl->uv.top);
+  glVertex2f(pos.x, pos.y);
+
+  glTexCoord2f(impl->uv.right, impl->uv.top);
+  glVertex2f(pos.x + impl->width, pos.y);
+
+  glTexCoord2f(impl->uv.right, impl->uv.bottom);
+  glVertex2f(pos.x + impl->width, pos.y + impl->height);
+
+  glTexCoord2f(impl->uv.left, impl->uv.bottom);
+  glVertex2f(pos.x, pos.y + impl->height);
+
+  glEnd();
+}
+
+void
+Surface::draw(const SurfaceDrawingParameters& params) const
+{
+  OpenGLState state;
+  state.enable(GL_TEXTURE_2D);
+  state.enable(GL_BLEND);
+  state.set_blend_func(params.blendfunc_src, params.blendfunc_dst);
+  state.bind_texture(impl->texture);
+  state.color(params.color);
+  state.activate();
+
+  glBegin(GL_QUADS);
+
+  // FIXME: This is just a primitive prototype, should take things
+  // like hotspot and flip into account 
+  glTexCoord2f(impl->uv.left, impl->uv.top);
+  glVertex2f(params.pos.x, params.pos.y);
+
+  glTexCoord2f(impl->uv.right, impl->uv.top);
+  glVertex2f(params.pos.x + impl->width * params.scale, params.pos.y);
+
+  glTexCoord2f(impl->uv.right, impl->uv.bottom);
+  glVertex2f(params.pos.x + impl->width * params.scale, params.pos.y + impl->height * params.scale);
+
+  glTexCoord2f(impl->uv.left, impl->uv.bottom);
+  glVertex2f(params.pos.x, params.pos.y + impl->height * params.scale);
+
+  glEnd(); 
+}
+
+/* EOF */

Copied: trunk/src/display/surface.hpp (from rev 1192, trunk/src/glutil/surface.hpp)

Copied: trunk/src/display/surface_drawing_parameters.hpp (from rev 1192, trunk/src/glutil/surface_drawing_parameters.hpp)

Copied: trunk/src/display/surface_manager.cpp (from rev 1192, trunk/src/glutil/surface_manager.cpp)

Copied: trunk/src/display/surface_manager.hpp (from rev 1192, trunk/src/glutil/surface_manager.hpp)

Copied: trunk/src/display/texture.cpp (from rev 1192, trunk/src/glutil/texture.cpp)
===================================================================
--- trunk/src/glutil/texture.cpp	2006-01-06 20:51:22 UTC (rev 1192)
+++ trunk/src/display/texture.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -0,0 +1,246 @@
+/*  $Id: windstille_main.hpp 752 2005-07-25 10:00:44Z grumbel $
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>,
+**                          Matthias Braun <matze at braunis.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <stdexcept>
+#include <iostream>
+#include <GL/gl.h>
+#include <GL/glext.h>
+#include "texture.hpp"
+#include "display/opengl_state.hpp"
+#include "texture_manager.hpp"
+#include "util.hpp"
+
+class TextureImpl
+{
+public:
+  GLuint handle;
+  int    width;
+  int    height;
+
+  TextureImpl()
+  {
+    glGenTextures(1, &handle);
+    assert_gl("creating texture handle."); 
+  }
+
+  TextureImpl::~TextureImpl()
+  {
+    glDeleteTextures(1, &handle);
+  }
+};
+
+Texture::Texture()
+{
+}
+
+Texture::Texture(const std::string& filename)
+{
+  *this = texture_manager->get(filename);
+
+  std::cout << "Filename: " << filename << " -> " << get_handle() << std::endl;
+}
+
+Texture::Texture(int width, int height, GLint format)
+  : impl(new TextureImpl())
+{
+  impl->width  = width;
+  impl->height = height;
+
+  OpenGLState state;
+  state.bind_texture(*this);
+  state.activate();
+
+  glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, GL_RGBA,
+               GL_UNSIGNED_BYTE, 0);
+
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+}
+
+static inline bool is_power_of_2(int v)
+{
+  return (v & (v-1)) == 0;
+}
+
+Texture::Texture(SDL_Surface* image, GLint glformat)
+  : impl(new TextureImpl())
+{
+  impl->width  = image->w;
+  impl->height = image->h;
+
+  const SDL_PixelFormat* format = image->format;
+  if(!is_power_of_2(image->w) || !is_power_of_2(image->h))
+    throw std::runtime_error("image has no power of 2 size");
+  if(format->BitsPerPixel != 24 && format->BitsPerPixel != 32)
+    throw std::runtime_error("image has not 24 or 32 bit color depth");
+
+  try 
+    {
+      GLint maxt;
+      glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxt);
+      if(image->w > maxt || image->h > maxt)
+        {
+          throw std::runtime_error("Texture size not supported");
+        }
+
+      GLint sdl_format;
+      if (format->BytesPerPixel == 3)
+        {
+          sdl_format = GL_RGB;
+        }
+      else if (format->BytesPerPixel == 4)
+        {
+          sdl_format = GL_RGBA;
+        }
+      else
+        {
+          throw std::runtime_error("Texture: Image format not supported");
+        }
+
+      OpenGLState state;
+      state.enable(GL_TEXTURE_2D);
+      state.bind_texture(*this);
+      state.activate();
+
+      glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+      glPixelStorei(GL_UNPACK_ROW_LENGTH, image->pitch/format->BytesPerPixel);
+      glTexImage2D(GL_TEXTURE_2D, 0, glformat,
+                   image->w, image->h, 0, sdl_format,
+                   GL_UNSIGNED_BYTE, image->pixels);
+
+      assert_gl("creating texture");
+
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+
+      assert_gl("setting texture parameters");
+    } 
+  catch(...)
+    {
+      throw;
+    }
+}
+
+Texture::~Texture()
+{
+}
+
+int
+Texture::get_width() const
+{
+  return impl->width;
+}
+
+int
+Texture::get_height() const
+{
+  return impl->height;
+}
+
+GLuint
+Texture::get_handle() const
+{
+  return impl->handle;
+}
+
+void
+Texture::put(SDL_Surface* image, int x, int y)
+{
+  GLint sdl_format;
+  if (image->format->BytesPerPixel == 3)
+    {
+      sdl_format = GL_RGB;
+    }
+  else if (image->format->BytesPerPixel == 4)
+    {
+      sdl_format = GL_RGBA;
+    }
+  else
+    {
+      throw std::runtime_error("Texture: Image format not supported");
+    }
+
+  OpenGLState state;
+  state.bind_texture(*this);
+  state.activate();
+
+  // FIXME: Add some checks here to make sure image has the right format 
+  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+  glPixelStorei(GL_UNPACK_ROW_LENGTH,
+                image->pitch / image->format->BytesPerPixel);
+
+  glTexSubImage2D(GL_TEXTURE_2D, 0, x, y,
+                  image->w, image->h, sdl_format, GL_UNSIGNED_BYTE,
+                  image->pixels);
+}
+
+void
+Texture::set_wrap(GLenum mode)
+{
+  OpenGLState state;
+  state.bind_texture(*this);
+  state.activate();
+
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, mode);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, mode);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, mode); // FIXME: only good for 3d textures?!
+}
+
+void
+Texture::set_filter(GLenum mode)
+{
+  OpenGLState state;
+  state.bind_texture(*this);
+  state.activate();
+
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, mode);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mode);
+}
+
+Texture::operator bool() const
+{
+  return !impl.is_null();
+}
+
+bool
+Texture::operator==(const Texture& other) const
+{
+  return impl.get() == other.impl.get();
+}
+
+bool
+Texture::operator!=(const Texture& other) const
+{
+  return impl.get() != other.impl.get();
+}
+
+/* EOF */

Copied: trunk/src/display/texture.hpp (from rev 1192, trunk/src/glutil/texture.hpp)

Copied: trunk/src/display/texture_manager.cpp (from rev 1192, trunk/src/glutil/texture_manager.cpp)

Copied: trunk/src/display/texture_manager.hpp (from rev 1192, trunk/src/glutil/texture_manager.hpp)

Modified: trunk/src/display/vertex_array_drawing_request.cpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/display/vertex_array_drawing_request.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -27,7 +27,7 @@
 
 #include <assert.h>
 
-#include "glutil/opengl_state.hpp"
+#include "display/opengl_state.hpp"
 #include "vertex_array_drawing_request.hpp"
 
 VertexArrayDrawingRequest::VertexArrayDrawingRequest(const Vector& pos_, float z_pos_, 

Modified: trunk/src/display/vertex_array_drawing_request.hpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/display/vertex_array_drawing_request.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -23,7 +23,7 @@
 #include <vector>
 #include "color.hpp"
 #include "math/matrix.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "drawing_request.hpp"
 
 /** */

Modified: trunk/src/field.hpp
===================================================================
--- trunk/src/field.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/field.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -1,4 +1,4 @@
-//  $Id: field.hpp,v 1.4 2003/09/12 09:25:48 grumbel Exp $
+//  $Id$
 // 
 //  Windstille - A Jump'n Shoot Game
 //  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>

Modified: trunk/src/font/ttf_font.cpp
===================================================================
--- trunk/src/font/ttf_font.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/font/ttf_font.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -31,9 +31,9 @@
 #include FT_FREETYPE_H
 #include FT_GLYPH_H
 
-#include "glutil/opengl_state.hpp"
+#include "display/opengl_state.hpp"
 #include "physfs/physfs_stream.hpp"
-#include "glutil/texture_manager.hpp"
+#include "display/texture_manager.hpp"
 #include "blitter.hpp"
 #include "ttf_font.hpp"
 #include "font_effect.hpp"

Modified: trunk/src/font/ttf_font.hpp
===================================================================
--- trunk/src/font/ttf_font.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/font/ttf_font.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -30,7 +30,7 @@
 #include <GL/gl.h>
 #include "color.hpp"
 #include "math/rect.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 
 class FontEffect;
 

Modified: trunk/src/game_object.cpp
===================================================================
--- trunk/src/game_object.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/game_object.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -1,4 +1,4 @@
-//  $Id: gameobj.cxx,v 1.2 2003/08/12 08:24:41 grumbel Exp $
+//  $Id$
 //
 //  Windstille - A Jump'n Shoot Game
 //  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/game_session.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -56,8 +56,8 @@
 #include "collision/collision_engine.hpp"
 #include "test_object.hpp"
 #include "inventory.hpp"
-#include "glutil/surface_manager.hpp"
-#include "glutil/surface.hpp"
+#include "display/surface_manager.hpp"
+#include "display/surface.hpp"
 #include "display/display.hpp"
 #include "pda.hpp"
 

Modified: trunk/src/gui/automap.cpp
===================================================================
--- trunk/src/gui/automap.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/gui/automap.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -23,7 +23,7 @@
 **  02111-1307, USA.
 */
 
-#include "glutil/surface_drawing_parameters.hpp"
+#include "display/surface_drawing_parameters.hpp"
 #include "input/controller.hpp"
 #include "sector.hpp"
 #include "tile_map.hpp"

Modified: trunk/src/gui/automap.hpp
===================================================================
--- trunk/src/gui/automap.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/gui/automap.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -26,7 +26,7 @@
 #ifndef HEADER_WINDSTILLE_GUI_AUTOMAP_HPP
 #define HEADER_WINDSTILLE_GUI_AUTOMAP_HPP
 
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 #include "component.hpp"
 
 namespace GUI {

Modified: trunk/src/laser_pointer.hpp
===================================================================
--- trunk/src/laser_pointer.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/laser_pointer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -27,7 +27,7 @@
 #define HEADER_WINDSTILLE_LASER_POINTER_HPP
 
 #include "sprite2d/sprite.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "game_object.hpp"
 
 /** Simple class that generates a laser for pointing at objects */

Modified: trunk/src/nightvision.cpp
===================================================================
--- trunk/src/nightvision.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/nightvision.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -27,7 +27,7 @@
 #include "random.hpp"
 #include "math/matrix.hpp"
 #include "display/vertex_array_drawing_request.hpp"
-#include "glutil/texture_manager.hpp"
+#include "display/texture_manager.hpp"
 #include "nightvision.hpp"
 
 Nightvision::Nightvision(FileReader& props)

Modified: trunk/src/nightvision.hpp
===================================================================
--- trunk/src/nightvision.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/nightvision.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -27,7 +27,7 @@
 #define HEADER_NIGHTVISION_HPP
 
 #include "lisp/lisp.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "sprite2d/sprite.hpp"
 #include "game_object.hpp"
 

Modified: trunk/src/particles/surface_drawer.cpp
===================================================================
--- trunk/src/particles/surface_drawer.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/particles/surface_drawer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -21,7 +21,7 @@
 #include "particle_system.hpp"
 #include "../console.hpp" 
 #include "lisp/properties.hpp"
-#include "glutil/surface_manager.hpp"
+#include "display/surface_manager.hpp"
 #include "surface_drawer.hpp"
 
 SurfaceDrawer::SurfaceDrawer(Surface surface_)

Modified: trunk/src/particles/surface_drawer.hpp
===================================================================
--- trunk/src/particles/surface_drawer.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/particles/surface_drawer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -20,7 +20,7 @@
 #ifndef HEADER_SURFACE_DRAWER_HXX
 #define HEADER_SURFACE_DRAWER_HXX
 
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 #include "ref.hpp"
 #include "drawer.hpp"
 

Modified: trunk/src/player.cpp
===================================================================
--- trunk/src/player.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/player.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -29,7 +29,7 @@
 #include "pda.hpp"
 #include "tile.hpp"
 #include "sprite3d/manager.hpp"
-#include "glutil/surface_manager.hpp"
+#include "display/surface_manager.hpp"
 #include "particles/particle_system.hpp"
 #include "collision/collision_engine.hpp"
 #include "laser_pointer.hpp"

Modified: trunk/src/player.hpp
===================================================================
--- trunk/src/player.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/player.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -26,7 +26,7 @@
 #include "globals.hpp"
 #include "entity.hpp"
 #include "ref.hpp"
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 
 class Controller;
 class Contact;

Modified: trunk/src/sprite2d/data.cpp
===================================================================
--- trunk/src/sprite2d/data.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite2d/data.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -12,8 +12,8 @@
 #include "lisp/parser.hpp"
 #include "lisp/properties.hpp"
 #include "lisp_getters.hpp"
-#include "glutil/surface.hpp"
-#include "glutil/surface_manager.hpp"
+#include "display/surface.hpp"
+#include "display/surface_manager.hpp"
 
 namespace sprite2d
 {

Modified: trunk/src/sprite2d/data.hpp
===================================================================
--- trunk/src/sprite2d/data.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite2d/data.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -5,7 +5,7 @@
 #include <vector>
 #include <GL/gl.h>
 #include "math/vector.hpp"
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 #include "lisp/lisp.hpp"
 #include "ref.hpp"
 

Modified: trunk/src/sprite2d/sprite.cpp
===================================================================
--- trunk/src/sprite2d/sprite.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite2d/sprite.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -8,7 +8,7 @@
 #include "display/scene_context.hpp"
 #include "sprite2d/data.hpp"
 #include "sprite2d/manager.hpp"
-#include "glutil/surface_drawing_parameters.hpp"
+#include "display/surface_drawing_parameters.hpp"
 #include "color.hpp"
 #include "util.hpp"
 

Modified: trunk/src/sprite2d/sprite.hpp
===================================================================
--- trunk/src/sprite2d/sprite.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite2d/sprite.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -4,7 +4,7 @@
 #include <string>
 #include <GL/gl.h>
 #include "color.hpp"
-#include "glutil/surface.hpp"
+#include "display/surface.hpp"
 #include "math/vector.hpp"
 #include "math/matrix.hpp"
 

Modified: trunk/src/sprite3d/data.cpp
===================================================================
--- trunk/src/sprite3d/data.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite3d/data.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -9,8 +9,8 @@
 #include <stdexcept>
 #include "util.hpp"
 #include "globals.hpp"
-#include "glutil/texture_manager.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture_manager.hpp"
+#include "display/texture.hpp"
 
 namespace sprite3d {
 

Modified: trunk/src/sprite3d/data.hpp
===================================================================
--- trunk/src/sprite3d/data.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite3d/data.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -24,7 +24,7 @@
 #include <GL/gl.h>
 #include <vector>
 #include "ref.hpp"
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "math/vector3.hpp"
 #include "math/quaternion.hpp"
 

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -30,7 +30,7 @@
 #include "globals.hpp"
 #include "util.hpp"
 #include "timer.hpp"
-#include "glutil/opengl_state.hpp"
+#include "display/opengl_state.hpp"
 #include "sprite3d/manager.hpp"
 #include "sprite3d/data.hpp"
 

Modified: trunk/src/text_area.cpp
===================================================================
--- trunk/src/text_area.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/text_area.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -25,7 +25,7 @@
 
 #include <assert.h>
 
-#include "glutil/opengl_state.hpp"
+#include "display/opengl_state.hpp"
 #include "font/ttf_font.hpp"
 #include "text_area.hpp"
 #include "baby_xml.hpp"

Modified: trunk/src/tile.hpp
===================================================================
--- trunk/src/tile.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/tile.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -22,7 +22,7 @@
 
 #include <assert.h>
 #include <GL/gl.h>
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "math/rect.hpp"
 
 enum TileType {

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/tile_factory.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -33,8 +33,8 @@
 #include "lisp/lisp.hpp"
 #include "lisp/parser.hpp"
 #include "lisp/properties.hpp"
-#include "glutil/surface_manager.hpp"
-#include "glutil/texture.hpp"
+#include "display/surface_manager.hpp"
+#include "display/texture.hpp"
 #include "physfs/physfs_sdl.hpp"
 
 TileFactory* TileFactory::current_ = 0;

Modified: trunk/src/tile_packer.cpp
===================================================================
--- trunk/src/tile_packer.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/tile_packer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -21,7 +21,7 @@
 #include <assert.h>
 #include <GL/gl.h>
 #include <GL/glext.h>
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "globals.hpp"
 #include "tile_packer.hpp"
 #include "util.hpp"

Modified: trunk/src/tile_packer.hpp
===================================================================
--- trunk/src/tile_packer.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/tile_packer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -21,7 +21,7 @@
 
 #include <SDL.h>
 #include <GL/gl.h>
-#include "glutil/texture.hpp"
+#include "display/texture.hpp"
 #include "math/rect.hpp"
 
 class TilePackerImpl;

Modified: trunk/src/timer.cpp
===================================================================
--- trunk/src/timer.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/timer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -1,4 +1,4 @@
-//  $Id: timer.cpp 2642 2005-06-26 13:38:53Z matzebraun $
+//  $Id$
 // 
 //  SuperTux
 //  Copyright (C) 2005 Matthias Braun <matze at braunis.de>

Modified: trunk/src/timer.hpp
===================================================================
--- trunk/src/timer.hpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/timer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -1,4 +1,4 @@
-//  $Id: timer.hpp 2642 2005-06-26 13:38:53Z matzebraun $
+//  $Id$
 // 
 //  SuperTux
 //  Copyright (C) 2005 Matthias Braun <matze at braunis.de>

Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-08 21:42:45 UTC (rev 1204)
+++ trunk/src/windstille_main.cpp	2006-01-09 08:40:11 UTC (rev 1205)
@@ -42,8 +42,8 @@
 #include "util.hpp"
 #include "font/ttf_font.hpp"
 #include "display/display.hpp"
-#include "glutil/surface_manager.hpp"
-#include "glutil/texture_manager.hpp"
+#include "display/surface_manager.hpp"
+#include "display/texture_manager.hpp"
 #include "sprite3d/manager.hpp"
 #include "screen_manager.hpp"
 #include "sprite3dview.hpp"



From grumbel at berlios.de  Mon Jan  9 09:52:56 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Mon, 9 Jan 2006 09:52:56 +0100
Subject: [Windstille-commit] r1206 - in trunk/src: . collision display font input particles
Message-ID: <200601090852.k098quF6002257@sheep.berlios.de>

Author: grumbel
Date: 2006-01-09 09:52:53 +0100 (Mon, 09 Jan 2006)
New Revision: 1206

Modified:
   trunk/src/camera.cpp
   trunk/src/camera.hpp
   trunk/src/collision/collision_data.cpp
   trunk/src/controller_def.cpp
   trunk/src/controller_def.hpp
   trunk/src/conversation.cpp
   trunk/src/conversation.hpp
   trunk/src/dialog_manager.cpp
   trunk/src/dialog_manager.hpp
   trunk/src/display/drawing_context.cpp
   trunk/src/display/drawing_context.hpp
   trunk/src/display/drawing_request.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/scene_context.hpp
   trunk/src/energy_bar.cpp
   trunk/src/energy_bar.hpp
   trunk/src/font/fonts.cpp
   trunk/src/font/fonts.hpp
   trunk/src/globals.cpp
   trunk/src/input/controller.cpp
   trunk/src/input/controller.hpp
   trunk/src/input/input_event.hpp
   trunk/src/input/input_manager.cpp
   trunk/src/input/input_manager.hpp
   trunk/src/input/input_manager_impl.cpp
   trunk/src/input/input_manager_impl.hpp
   trunk/src/math.hpp
   trunk/src/particles/drawer.hpp
   trunk/src/particles/particle_system.cpp
   trunk/src/particles/particle_system.hpp
   trunk/src/particles/randomizer.hpp
   trunk/src/particles/spark_drawer.cpp
   trunk/src/particles/spark_drawer.hpp
   trunk/src/particles/surface_drawer.cpp
   trunk/src/particles/surface_drawer.hpp
   trunk/src/random.cpp
   trunk/src/random.hpp
   trunk/src/screen.cpp
   trunk/src/screen.hpp
   trunk/src/tile_packer.cpp
   trunk/src/tile_packer.hpp
   trunk/src/trigger.hpp
   trunk/src/view.cpp
   trunk/src/view.hpp
Log:
- fixed a few copyright headers

Modified: trunk/src/camera.cpp
===================================================================
--- trunk/src/camera.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/camera.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "player.hpp"
 #include "sector.hpp"

Modified: trunk/src/camera.hpp
===================================================================
--- trunk/src/camera.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/camera.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_CAMERA_HXX
 #define HEADER_CAMERA_HXX

Modified: trunk/src/collision/collision_data.cpp
===================================================================
--- trunk/src/collision/collision_data.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/collision/collision_data.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "collision_data.hpp"
 

Modified: trunk/src/controller_def.cpp
===================================================================
--- trunk/src/controller_def.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/controller_def.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "controller_def.hpp"
 

Modified: trunk/src/controller_def.hpp
===================================================================
--- trunk/src/controller_def.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/controller_def.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_CONTROLLER_DEF_HXX
 #define HEADER_CONTROLLER_DEF_HXX

Modified: trunk/src/conversation.cpp
===================================================================
--- trunk/src/conversation.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/conversation.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "input/controller.hpp"
 #include "input/input_manager.hpp"

Modified: trunk/src/conversation.hpp
===================================================================
--- trunk/src/conversation.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/conversation.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_CONVERSATION_HXX
 #define HEADER_CONVERSATION_HXX

Modified: trunk/src/dialog_manager.cpp
===================================================================
--- trunk/src/dialog_manager.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/dialog_manager.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <iostream>
 #include "font/fonts.hpp"

Modified: trunk/src/dialog_manager.hpp
===================================================================
--- trunk/src/dialog_manager.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/dialog_manager.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_DIALOG_MANAGER_HXX
 #define HEADER_DIALOG_MANAGER_HXX

Modified: trunk/src/display/drawing_context.cpp
===================================================================
--- trunk/src/display/drawing_context.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/display/drawing_context.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <assert.h>
 #include <iostream>

Modified: trunk/src/display/drawing_context.hpp
===================================================================
--- trunk/src/display/drawing_context.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/display/drawing_context.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_DRAWING_CONTEXT_HXX
 #define HEADER_DRAWING_CONTEXT_HXX

Modified: trunk/src/display/drawing_request.hpp
===================================================================
--- trunk/src/display/drawing_request.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/display/drawing_request.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_DRAWING_REQUEST_HXX
 #define HEADER_DRAWING_REQUEST_HXX

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/display/scene_context.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "display/display.hpp"
 #include "display/surface.hpp"

Modified: trunk/src/display/scene_context.hpp
===================================================================
--- trunk/src/display/scene_context.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/display/scene_context.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_SCENE_CONTEXT_HXX
 #define HEADER_SCENE_CONTEXT_HXX

Modified: trunk/src/energy_bar.cpp
===================================================================
--- trunk/src/energy_bar.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/energy_bar.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "globals.hpp"
 #include "player.hpp"

Modified: trunk/src/energy_bar.hpp
===================================================================
--- trunk/src/energy_bar.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/energy_bar.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_ENERGYBAR_HXX
 #define HEADER_ENERGYBAR_HXX

Modified: trunk/src/font/fonts.cpp
===================================================================
--- trunk/src/font/fonts.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/font/fonts.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "globals.hpp"
 #include "border_font_effect.hpp"

Modified: trunk/src/font/fonts.hpp
===================================================================
--- trunk/src/font/fonts.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/font/fonts.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_FONTS_HXX
 #define HEADER_FONTS_HXX

Modified: trunk/src/globals.cpp
===================================================================
--- trunk/src/globals.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/globals.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "globals.hpp"
 

Modified: trunk/src/input/controller.cpp
===================================================================
--- trunk/src/input/controller.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/controller.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: controller.cxx,v 1.4 2003/10/31 23:24:41 grumbel Exp $
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <assert.h>
 #include "controller_def.hpp"

Modified: trunk/src/input/controller.hpp
===================================================================
--- trunk/src/input/controller.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/controller.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: controller.hpp,v 1.4 2003/10/31 23:24:41 grumbel Exp $
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_CONTROLLER_HXX
 #define HEADER_CONTROLLER_HXX

Modified: trunk/src/input/input_event.hpp
===================================================================
--- trunk/src/input/input_event.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/input_event.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: input_event.hpp,v 1.4 2003/10/31 23:24:41 grumbel Exp $
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_INPUT_EVENT_HXX
 #define HEADER_INPUT_EVENT_HXX

Modified: trunk/src/input/input_manager.cpp
===================================================================
--- trunk/src/input/input_manager.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/input_manager.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: input_manager.cxx,v 1.4 2003/08/20 00:15:10 grumbel Exp $
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <iostream>
 #include <assert.h>

Modified: trunk/src/input/input_manager.hpp
===================================================================
--- trunk/src/input/input_manager.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/input_manager.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: input_manager.hpp,v 1.3 2003/06/06 18:36:24 grumbel Exp $
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_INPUT_MANAGER_HXX
 #define HEADER_INPUT_MANAGER_HXX

Modified: trunk/src/input/input_manager_impl.cpp
===================================================================
--- trunk/src/input/input_manager_impl.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/input_manager_impl.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "input_manager_impl.hpp"
 

Modified: trunk/src/input/input_manager_impl.hpp
===================================================================
--- trunk/src/input/input_manager_impl.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/input/input_manager_impl.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id: input_manager_impl.hpp,v 1.3 2003/06/06 18:36:24 grumbel Exp $
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_INPUT_MANAGER_IMPL_HXX
 #define HEADER_INPUT_MANAGER_IMPL_HXX

Modified: trunk/src/math.hpp
===================================================================
--- trunk/src/math.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/math.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_MATH_HXX
 #define HEADER_MATH_HXX

Modified: trunk/src/particles/drawer.hpp
===================================================================
--- trunk/src/particles/drawer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/drawer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_PARTICLES_DRAWER_HXX
 #define HEADER_PARTICLES_DRAWER_HXX

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/particle_system.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <math.h>
 #include <iostream>

Modified: trunk/src/particles/particle_system.hpp
===================================================================
--- trunk/src/particles/particle_system.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/particle_system.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_PARTICLE_SYSTEM_HXX
 #define HEADER_PARTICLE_SYSTEM_HXX

Modified: trunk/src/particles/randomizer.hpp
===================================================================
--- trunk/src/particles/randomizer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/randomizer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_RANDOMIZER_HXX
 #define HEADER_RANDOMIZER_HXX

Modified: trunk/src/particles/spark_drawer.cpp
===================================================================
--- trunk/src/particles/spark_drawer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/spark_drawer.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "display/drawing_request.hpp"
 #include "display/vertex_array_drawing_request.hpp"

Modified: trunk/src/particles/spark_drawer.hpp
===================================================================
--- trunk/src/particles/spark_drawer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/spark_drawer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_PARTICLES_SPARK_DRAWER_HXX
 #define HEADER_PARTICLES_SPARK_DRAWER_HXX

Modified: trunk/src/particles/surface_drawer.cpp
===================================================================
--- trunk/src/particles/surface_drawer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/surface_drawer.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "display/vertex_array_drawing_request.hpp"
 #include "particle_system.hpp"

Modified: trunk/src/particles/surface_drawer.hpp
===================================================================
--- trunk/src/particles/surface_drawer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/particles/surface_drawer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_SURFACE_DRAWER_HXX
 #define HEADER_SURFACE_DRAWER_HXX

Modified: trunk/src/random.cpp
===================================================================
--- trunk/src/random.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/random.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include "random.hpp"
 

Modified: trunk/src/random.hpp
===================================================================
--- trunk/src/random.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/random.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_RANDOM_HXX
 #define HEADER_RANDOM_HXX

Modified: trunk/src/screen.cpp
===================================================================
--- trunk/src/screen.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/screen.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <math.h>
 #include <iostream>

Modified: trunk/src/screen.hpp
===================================================================
--- trunk/src/screen.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/screen.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_SCREEN_HXX
 #define HEADER_SCREEN_HXX

Modified: trunk/src/tile_packer.cpp
===================================================================
--- trunk/src/tile_packer.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/tile_packer.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,28 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
 #include <config.h>
 
 #include <assert.h>

Modified: trunk/src/tile_packer.hpp
===================================================================
--- trunk/src/tile_packer.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/tile_packer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,28 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
 #ifndef HEADER_TILE_PACKER_HXX
 #define HEADER_TILE_PACKER_HXX
 

Modified: trunk/src/trigger.hpp
===================================================================
--- trunk/src/trigger.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/trigger.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_TRIGGER_HXX
 #define HEADER_TRIGGER_HXX

Modified: trunk/src/view.cpp
===================================================================
--- trunk/src/view.cpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/view.cpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-//
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #include <SDL.h>
 #include "display/display.hpp"

Modified: trunk/src/view.hpp
===================================================================
--- trunk/src/view.hpp	2006-01-09 08:40:11 UTC (rev 1205)
+++ trunk/src/view.hpp	2006-01-09 08:52:53 UTC (rev 1206)
@@ -1,21 +1,27 @@
-//  $Id$
-// 
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software; you can redistribute it and/or
-//  modify it under the terms of the GNU General Public License
-//  as published by the Free Software Foundation; either version 2
-//  of the License, or (at your option) any later version.
-//
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-// 
-//  You should have received a copy of the GNU General Public License
-//  along with this program; if not, write to the Free Software
-//  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
 
 #ifndef HEADER_VIEW_HXX
 #define HEADER_VIEW_HXX



From grumbel at berlios.de  Mon Jan  9 12:16:28 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Mon, 9 Jan 2006 12:16:28 +0100
Subject: [Windstille-commit] r1207 - in trunk/src: . display
Message-ID: <200601091116.k09BGS9Y018128@sheep.berlios.de>

Author: grumbel
Date: 2006-01-09 12:16:27 +0100 (Mon, 09 Jan 2006)
New Revision: 1207

Added:
   trunk/src/display/framebuffer.cpp
   trunk/src/display/framebuffer.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/display.cpp
   trunk/src/display/opengl_state.cpp
   trunk/src/display/opengl_state.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/surface.hpp
   trunk/src/display/surface_manager.cpp
   trunk/src/display/texture.cpp
   trunk/src/display/texture_manager.cpp
Log:
- added support for FramebufferObject- changed lightmapping code to use framebuffer

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/SConscript	2006-01-09 11:16:27 UTC (rev 1207)
@@ -27,7 +27,7 @@
 SConscript("squirrel/SConstruct")
 
 env = Environment(CC = 'gcc',
-                  CCFLAGS = ['-O2', '-Wall', '-Werror', '-g'])
+                  CCFLAGS = ['-O2', '-Wall', '-Werror', '-g', '-DDEBUG'])
 
 # env.Copy(LIBS = ['a', 'b'])
 
@@ -100,6 +100,7 @@
 'collision/stair_contact.cpp',
 'display/display.cpp',
 'display/drawing_context.cpp',
+'display/framebuffer.cpp',
 'display/scene_context.cpp',
 'display/vertex_array_drawing_request.cpp',
 'display/opengl_state.cpp',
@@ -167,7 +168,7 @@
 'tinygettext/gettext.cpp',
 'tinygettext/tinygettext.cpp'
 ],
-LIBS    = ['GL', 'squirrel', 'physfs', 'SDL_image', 'openal'] + env['LIBS'],
+LIBS    = ['GL', 'GLU', 'squirrel', 'physfs', 'SDL_image', 'openal'] + env['LIBS'],
 LIBPATH = ['squirrel/'],
 CPPPATH = env['CPPPATH'] + ['.', '..', 'squirrel/include/'])
 

Modified: trunk/src/display/display.cpp
===================================================================
--- trunk/src/display/display.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/display.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -30,7 +30,6 @@
 #include "display/opengl_state.hpp"
 #include "display.hpp"
 #include "util.hpp"
-#include <GL/glext.h>
 #include <assert.h>
 
 SDL_Surface* Display::window       = 0;

Added: trunk/src/display/framebuffer.cpp
===================================================================
--- trunk/src/display/framebuffer.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/framebuffer.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -0,0 +1,114 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+#include "util.hpp"
+#include "texture.hpp"
+#include "framebuffer.hpp"
+
+class FramebufferImpl
+{
+public:
+  GLuint  handle;
+  Texture texture;
+  
+  FramebufferImpl(int width, int height)
+    : texture(width, height)
+  {
+    glGenFramebuffersEXT(1, &handle);
+    assert_gl("Framebuffer1");
+    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, handle);
+    assert_gl("Framebuffer2");
+    glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, 
+                              GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, texture.get_handle(), 0);
+    assert_gl("Framebuffer3");
+    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+  }
+
+  ~FramebufferImpl()
+  {
+    glDeleteRenderbuffersEXT(1, &handle);
+  }
+};
+
+Framebuffer::Framebuffer()
+{
+}
+
+Framebuffer::Framebuffer(int width, int height)
+  : impl(new FramebufferImpl(width, height))
+{  
+}
+
+Framebuffer::~Framebuffer()
+{
+  
+}
+
+Texture
+Framebuffer::get_texture()
+{
+  return impl->texture;
+}
+
+int
+Framebuffer::get_width()  const
+{
+  return impl->texture.get_width();
+}
+
+int
+Framebuffer::get_height() const
+{
+  return impl->texture.get_height();
+}
+
+GLuint
+Framebuffer::get_handle() const
+{
+  return impl->handle;
+
+}
+
+Framebuffer::operator bool() const
+{
+  return !impl.is_null();
+}
+
+bool
+Framebuffer::operator==(const Framebuffer& other) const
+{
+  return impl.get() == other.impl.get();
+}
+
+bool
+Framebuffer::operator!=(const Framebuffer& other) const
+{
+  return impl.get() != other.impl.get();
+}
+
+/* EOF */

Added: trunk/src/display/framebuffer.hpp
===================================================================
--- trunk/src/display/framebuffer.hpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/framebuffer.hpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -0,0 +1,61 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FRAMEBUFFER_HPP
+#define HEADER_FRAMEBUFFER_HPP
+
+#include "texture.hpp"
+
+class FramebufferImpl;
+
+/** */
+class Framebuffer
+{
+public:
+  Framebuffer();
+  Framebuffer(int width, int height);
+  ~Framebuffer();
+  
+  int get_width()  const;
+  int get_height() const;
+  Texture get_texture();
+
+  GLuint get_handle() const;
+
+  /** 
+   * true if the Framebuffer is valid and usable, false if not 
+   */
+  operator bool() const;
+
+  bool operator==(const Framebuffer&) const;
+  bool operator!=(const Framebuffer&) const;
+
+private:
+  SharedPtr<FramebufferImpl> impl;
+};
+
+#endif
+
+/* EOF */

Modified: trunk/src/display/opengl_state.cpp
===================================================================
--- trunk/src/display/opengl_state.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/opengl_state.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -23,17 +23,17 @@
 **  02111-1307, USA.
 */
 
+#include "opengl_state.hpp"
+
 #include <assert.h>
 #include <map>
 #include <iostream>
-#include <GL/gl.h>
-#include <GL/glext.h>
+#include "framebuffer.hpp"
 #include "texture.hpp"
 #include "color.hpp"
 #include "globals.hpp"
 #include "display/display.hpp"
 #include "util.hpp"
-#include "opengl_state.hpp"
 
 class OpenGLStateImpl
 {
@@ -42,7 +42,8 @@
       somebody forget the final activate() call */
   bool was_activated;
 
-  Texture texture;
+  Texture     texture;
+  Framebuffer framebuffer;
 
   Color color;
 
@@ -273,8 +274,30 @@
           glBindTexture(GL_TEXTURE_2D, impl->texture.get_handle());
           global->impl->texture = impl->texture;
         }
+      else
+        {
+          glBindTexture(GL_TEXTURE_2D, 0);
+          global->impl->texture = impl->texture;
+        }
     }
 
+  if (0)
+    {
+      if (impl->framebuffer != global->impl->framebuffer)
+        {
+          if (impl->framebuffer)
+            {
+              glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->framebuffer.get_handle());
+              global->impl->framebuffer = impl->framebuffer;
+            }
+          else
+            {
+              glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+              global->impl->framebuffer = impl->framebuffer;
+            }
+        }
+    }
+
   if (debug)
     verify();
 }
@@ -322,4 +345,10 @@
   assert_gl("OpenGLState::verify");
 }
 
+void
+OpenGLState::bind_framebuffer(const Framebuffer& framebuffer)
+{
+  impl->framebuffer = framebuffer;
+}
+
 /* EOF */

Modified: trunk/src/display/opengl_state.hpp
===================================================================
--- trunk/src/display/opengl_state.hpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/opengl_state.hpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -23,12 +23,15 @@
 **  02111-1307, USA.
 */
 
-#ifndef HEADER_OPENGL_STATE_HPP
-#define HEADER_OPENGL_STATE_HPP
+#ifndef HEADER_DISPLAY_OPENGL_STATE_HPP
+#define HEADER_DISPLAY_OPENGL_STATE_HPP
 
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
 #include <memory>
-#include <GL/gl.h>
 
+class Framebuffer;
 class Texture;
 class Color;
 class OpenGLStateImpl;
@@ -50,6 +53,7 @@
   void bind_texture(const Texture& texture);
   void set_blend_func(GLenum sfactor, GLenum dfactor);
 
+  void bind_framebuffer(const Framebuffer& framebuffer);
 
   void enable(GLenum cap);
   void disable(GLenum cap);

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/scene_context.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -23,9 +23,14 @@
 **  02111-1307, USA.
 */
 
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+
 #include "display/display.hpp"
 #include "display/surface.hpp"
 #include "display/opengl_state.hpp"
+#include "framebuffer.hpp"
 #include "scene_context.hpp"
 #include <assert.h>
 
@@ -40,6 +45,8 @@
   DrawingContext highlight; 
   unsigned int render_mask;
 
+  Framebuffer framebuffer;
+  
   Surface lightmap;
 
   SceneContextImpl() 
@@ -47,7 +54,11 @@
                   SceneContext::LIGHTMAP | 
                   SceneContext::HIGHLIGHTMAP | 
                   SceneContext::LIGHTMAPSCREEN),
-      lightmap(800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
+      framebuffer(256, 256),
+      lightmap(framebuffer.get_texture(), 
+               Rectf(0, 0, (800/LIGHTMAP_DIV)/256.0f, (600/LIGHTMAP_DIV)/256.0f),
+               800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
+      //lightmap(800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
   {
   }
 };
@@ -147,29 +158,45 @@
       
   if (impl->render_mask & LIGHTMAPSCREEN)
     {
-      Display::push_cliprect(Rect(Point(0, 0),
-                                  Size(impl->lightmap.get_width(), impl->lightmap.get_height())));
+      if (0)
+        { // render lightmap to screen
+          Display::push_cliprect(Rect(Point(0, 0),
+                                      Size(impl->lightmap.get_width(), impl->lightmap.get_height())));
 
-      glPushMatrix();
-      glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
+          glPushMatrix();
+          glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
 
-      impl->light.render();
-      glPopMatrix();
+          impl->light.render();
+          glPopMatrix();
       
-      {
-        OpenGLState state;
+          {
+            OpenGLState state;
         
-        // Weird y-pos is needed since OpenGL is upside down when it comes to y-coordinate
-        state.bind_texture(impl->lightmap.get_texture());
-        state.activate();
+            // Weird y-pos is needed since OpenGL is upside down when it comes to y-coordinate
+            state.bind_texture(impl->lightmap.get_texture());
+            state.activate();
 
-        glCopyTexSubImage2D(GL_TEXTURE_2D, 0,
-                            0, 0, 
-                            0, Display::get_height() - impl->lightmap.get_height(),
-                            impl->lightmap.get_width(), impl->lightmap.get_height());
-      }
+            glCopyTexSubImage2D(GL_TEXTURE_2D, 0,
+                                0, 0, 
+                                0, Display::get_height() - impl->lightmap.get_height(),
+                                impl->lightmap.get_width(), impl->lightmap.get_height());
+          }
 
-      Display::pop_cliprect();
+          Display::pop_cliprect();
+        }
+      else
+        {
+          glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->framebuffer.get_handle());
+          glClear(GL_DEPTH_BUFFER_BIT);
+
+          glPushMatrix();
+          glTranslatef(0, 600-(600/LIGHTMAP_DIV), 0);
+          glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
+          impl->light.render();
+          glPopMatrix();
+
+          glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+        }
     }
 
   if (impl->render_mask & COLORMAP)
@@ -179,6 +206,9 @@
 
   if (impl->render_mask & LIGHTMAP)
     {
+      // FIXME: 2006-01-09: shouldn't use Surface and just discard the
+      // borders of a power of two texture, but instead use them and
+      // set UV accordingly
       OpenGLState state;
 
       Rectf uv = impl->lightmap.get_uv();
@@ -199,14 +229,13 @@
       glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV, 0);
 
       glTexCoord2f(uv.right, uv.top);
-      glVertex2f(impl->lightmap.get_width()  * LIGHTMAP_DIV,
+      glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV,
                  impl->lightmap.get_height() * LIGHTMAP_DIV);
 
       glTexCoord2f(uv.left, uv.top);
       glVertex2f(0, impl->lightmap.get_height() * LIGHTMAP_DIV);
 
       glEnd();
-
     }
 
   if (impl->render_mask & HIGHLIGHTMAP)

Modified: trunk/src/display/surface.hpp
===================================================================
--- trunk/src/display/surface.hpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/surface.hpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -45,6 +45,14 @@
 public:
   Surface();
   Surface(const std::string& filename);
+  
+  /** 
+   * Create a new Surface object from a Texture
+   * @param texture The Texture to use
+   * @param rect The rectangle of the texture to use in (0-1) notation
+   * @param width  Width of the surface on the screen
+   * @param height Height of the surface on the screen
+   */
   Surface(Texture texture, const Rectf& rect, int width, int height);
   Surface(int width, int height);
   ~Surface();

Modified: trunk/src/display/surface_manager.cpp
===================================================================
--- trunk/src/display/surface_manager.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/surface_manager.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -7,7 +7,6 @@
 #include <stdexcept>
 #include <SDL_image.h>
 #include <GL/gl.h>
-#include <GL/glext.h>
 #include "util.hpp"
 #include "globals.hpp"
 #include "texture.hpp"

Modified: trunk/src/display/texture.cpp
===================================================================
--- trunk/src/display/texture.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/texture.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -27,7 +27,6 @@
 #include <stdexcept>
 #include <iostream>
 #include <GL/gl.h>
-#include <GL/glext.h>
 #include "texture.hpp"
 #include "display/opengl_state.hpp"
 #include "texture_manager.hpp"

Modified: trunk/src/display/texture_manager.cpp
===================================================================
--- trunk/src/display/texture_manager.cpp	2006-01-09 08:52:53 UTC (rev 1206)
+++ trunk/src/display/texture_manager.cpp	2006-01-09 11:16:27 UTC (rev 1207)
@@ -7,7 +7,6 @@
 #include <stdexcept>
 #include <SDL_image.h>
 #include <GL/gl.h>
-#include <GL/glext.h>
 #include "util.hpp"
 #include "globals.hpp"
 #include "texture.hpp"



From grumbel at berlios.de  Mon Jan  9 16:00:39 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Mon, 9 Jan 2006 16:00:39 +0100
Subject: [Windstille-commit] r1208 - in trunk/src: . display font
Message-ID: <200601091500.k09F0dkY009741@sheep.berlios.de>

Author: grumbel
Date: 2006-01-09 16:00:38 +0100 (Mon, 09 Jan 2006)
New Revision: 1208

Added:
   trunk/src/display/shader_object.cpp
   trunk/src/display/shader_object.hpp
   trunk/src/display/shader_program.cpp
   trunk/src/display/shader_program.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/opengl_state.cpp
   trunk/src/display/opengl_state.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/scene_context.hpp
   trunk/src/font/ttf_font.cpp
Log:
- added shader support

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/SConscript	2006-01-09 15:00:38 UTC (rev 1208)
@@ -108,6 +108,8 @@
 'display/surface_manager.cpp',
 'display/texture.cpp',
 'display/texture_manager.cpp',
+'display/shader_program.cpp',
+'display/shader_object.cpp',
 'font/border_font_effect.cpp',
 'font/fonts.cpp',
 'font/ttf_font.cpp',

Modified: trunk/src/display/opengl_state.cpp
===================================================================
--- trunk/src/display/opengl_state.cpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/opengl_state.cpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -35,6 +35,8 @@
 #include "display/display.hpp"
 #include "util.hpp"
 
+#define MAX_TEXTURE_UNITS 4
+
 class OpenGLStateImpl
 {
 public:
@@ -42,7 +44,7 @@
       somebody forget the final activate() call */
   bool was_activated;
 
-  Texture     texture;
+  Texture     texture[MAX_TEXTURE_UNITS];
   Framebuffer framebuffer;
 
   Color color;
@@ -96,7 +98,7 @@
 OpenGLState::OpenGLState()
   : impl(new OpenGLStateImpl())
 {
-  impl->state[GL_TEXTURE_2D]  = false;
+  //impl->state[GL_TEXTURE_2D]  = false;
   impl->state[GL_DEPTH_TEST]  = false;
   impl->state[GL_BLEND]       = false;
   impl->state[GL_LINE_SMOOTH] = false;
@@ -118,9 +120,10 @@
 }
 
 void
-OpenGLState::bind_texture(const Texture& texture)
+OpenGLState::bind_texture(const Texture& texture, int unit)
 {
-  impl->texture = texture;
+  assert(unit >= 0 && unit < MAX_TEXTURE_UNITS);
+  impl->texture[unit] = texture;
 }
 
 void
@@ -162,12 +165,16 @@
 void
 OpenGLState::enable(GLenum cap)
 {
+  if (cap == GL_TEXTURE_2D)// FIXME: HACK
+    return;
   set_state(cap, true);
 }
 
 void
 OpenGLState::disable(GLenum cap)
 {  
+  if (cap == GL_TEXTURE_2D)// FIXME: HACK
+    return;
   set_state(cap, false);
 }
 
@@ -267,18 +274,24 @@
       global->impl->blend_dfactor = impl->blend_dfactor;
     }
 
-  if (impl->texture != global->impl->texture)
+  for(int i = 0; i < MAX_TEXTURE_UNITS; ++i)
     {
-      if (impl->texture)
-        {
-          glBindTexture(GL_TEXTURE_2D, impl->texture.get_handle());
-          global->impl->texture = impl->texture;
+      if (impl->texture[i] != global->impl->texture[i])
+        { 
+          glActiveTexture(GL_TEXTURE0 + i);
+          if (impl->texture[i])
+            {
+              glBindTexture(GL_TEXTURE_2D, impl->texture[i].get_handle());
+              glEnable(GL_TEXTURE_2D);
+              global->impl->texture[i] = impl->texture[i];
+            }
+          else
+            {
+              glBindTexture(GL_TEXTURE_2D, 0);
+              glDisable(GL_TEXTURE_2D);
+              global->impl->texture[i] = impl->texture[i];
+            }
         }
-      else
-        {
-          glBindTexture(GL_TEXTURE_2D, 0);
-          global->impl->texture = impl->texture;
-        }
     }
 
   if (0)
@@ -335,13 +348,17 @@
       std::cout << "OpenGLState: dst blendfunc is out of sync" << std::endl;
     }
 
-  GLint texture_handle;
-  glGetIntegerv(GL_TEXTURE_2D_BINDING_EXT, &texture_handle);
-  if (impl->texture && static_cast<GLuint>(texture_handle) != impl->texture.get_handle())
+  if (1)
     {
-      std::cout << "OpenGLState: texture handle is out of sync: " << impl->texture.get_handle() << std::endl;
+      // FIXME: Add multitexture support here
+      GLint texture_handle;
+      glActiveTexture(GL_TEXTURE0);
+      glGetIntegerv(GL_TEXTURE_2D_BINDING_EXT, &texture_handle);
+      if (impl->texture[0] && static_cast<GLuint>(texture_handle) != impl->texture[0].get_handle())
+        {
+          std::cout << "OpenGLState: texture handle is out of sync: " << impl->texture[0].get_handle() << std::endl;
+        }
     }
-
   assert_gl("OpenGLState::verify");
 }
 

Modified: trunk/src/display/opengl_state.hpp
===================================================================
--- trunk/src/display/opengl_state.hpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/opengl_state.hpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -50,7 +50,7 @@
   OpenGLState();
   ~OpenGLState();
 
-  void bind_texture(const Texture& texture);
+  void bind_texture(const Texture& texture, int unit = 0);
   void set_blend_func(GLenum sfactor, GLenum dfactor);
 
   void bind_framebuffer(const Framebuffer& framebuffer);

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/scene_context.cpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -27,15 +27,21 @@
 #include <GL/gl.h>
 #include <GL/glext.h>
 
+#include <iostream>
+
 #include "display/display.hpp"
 #include "display/surface.hpp"
 #include "display/opengl_state.hpp"
+
+#include "shader_program.hpp"
+#include "shader_object.hpp"
 #include "framebuffer.hpp"
 #include "scene_context.hpp"
 #include <assert.h>
 
 // The lightmap has a resolution of screen.w/LIGHTMAP, screen.h/LIGHTMAP
 #define LIGHTMAP_DIV 4
+#define BLURMAP_DIV 1
 
 class SceneContextImpl
 {
@@ -46,20 +52,38 @@
   unsigned int render_mask;
 
   Framebuffer framebuffer;
-  
   Surface lightmap;
 
+  Framebuffer blur_framebuffer;
+  Surface     blur_surface;
+  ShaderProgram shader_program;
+
+  Texture noise;
+
   SceneContextImpl() 
     : render_mask(SceneContext::COLORMAP |
                   SceneContext::LIGHTMAP | 
                   SceneContext::HIGHLIGHTMAP | 
-                  SceneContext::LIGHTMAPSCREEN),
+                  SceneContext::LIGHTMAPSCREEN |
+                  SceneContext::BLURMAP
+                  ),
       framebuffer(256, 256),
       lightmap(framebuffer.get_texture(), 
                Rectf(0, 0, (800/LIGHTMAP_DIV)/256.0f, (600/LIGHTMAP_DIV)/256.0f),
-               800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
+               800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV),
       //lightmap(800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
+      blur_framebuffer(1024, 1024),
+      blur_surface(blur_framebuffer.get_texture(),
+               Rectf(0, 0, (800/BLURMAP_DIV)/1024.0f, (600/BLURMAP_DIV)/1024.0f),
+               800/BLURMAP_DIV, 600/BLURMAP_DIV)
   {
+    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "/tmp/shader.frag"));
+    shader_program.link();
+    blur_surface.get_texture().set_wrap(GL_REPEAT);
+    blur_surface.get_texture().set_filter(GL_LINEAR);
+    noise = Texture("images/noise3.png");
+    noise.set_wrap(GL_REPEAT);
+    noise.set_filter(GL_LINEAR);
   }
 };
 
@@ -243,6 +267,56 @@
       impl->highlight.render();
     }
 
+  if (impl->render_mask & BLURMAP)
+    {
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->blur_framebuffer.get_handle());
+      glClear(GL_DEPTH_BUFFER_BIT);
+
+      glPushMatrix();
+      glTranslatef(0, 600-(600/BLURMAP_DIV), 0);
+      glScalef(1.0f/BLURMAP_DIV, 1.0f/BLURMAP_DIV, 1.0f);
+      impl->color.render();
+      glPopMatrix();
+
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);     
+
+      OpenGLState state;
+
+      Rectf uv = impl->blur_surface.get_uv();
+
+      state.enable(GL_TEXTURE_2D);
+      state.bind_texture(impl->blur_surface.get_texture(), 0);
+      state.bind_texture(impl->noise, 1);
+
+      //state.enable(GL_BLEND);
+      //state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+      //state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+      state.activate();
+
+      glUseProgramObjectARB(impl->shader_program.get_handle());
+      glUniform1iARB(impl->shader_program.get_uniform_location("texture"), 0);
+      glUniform1iARB(impl->shader_program.get_uniform_location("noise"), 1);
+
+      glBegin(GL_QUADS);
+
+      glTexCoord2f(uv.left, uv.bottom);
+      glVertex2f(0, 0);
+
+      glTexCoord2f(uv.right, uv.bottom);
+      glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV, 0);
+
+      glTexCoord2f(uv.right, uv.top);
+      glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV,
+                 impl->blur_surface.get_height() * BLURMAP_DIV);
+
+      glTexCoord2f(uv.left, uv.top);
+      glVertex2f(0, impl->blur_surface.get_height() * BLURMAP_DIV);
+
+      glEnd();
+
+      glUseProgramObjectARB(0);
+    }
+
   // Clear all DrawingContexts
   impl->color.clear();
   impl->light.clear();

Modified: trunk/src/display/scene_context.hpp
===================================================================
--- trunk/src/display/scene_context.hpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/scene_context.hpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -79,10 +79,11 @@
       that will be shown on the screen */
   void render();
 
-  enum { COLORMAP     = 1<<0,
-         LIGHTMAP     = 1<<1,
-         HIGHLIGHTMAP = 1<<2,
-         LIGHTMAPSCREEN     = 1<<3
+  enum { COLORMAP       = 1<<0,
+         LIGHTMAP       = 1<<1,
+         HIGHLIGHTMAP   = 1<<2,
+         LIGHTMAPSCREEN = 1<<3,
+         BLURMAP        = 1<<4
   };
 
   void set_render_mask(unsigned int mask);

Added: trunk/src/display/shader_object.cpp
===================================================================
--- trunk/src/display/shader_object.cpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/shader_object.cpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -0,0 +1,138 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "shader_object.hpp"
+#include <iostream>
+#include <stdio.h>
+#include "util.hpp"
+
+/** Read a file, user must free() the returned pointer */
+static GLchar* load_file(const char* filename)
+{
+  size_t block_size = 4096;
+  size_t size = block_size;
+  size_t true_size = 0;
+  GLchar* str = (char*)(malloc(size));
+  FILE* f = fopen(filename, "r");
+  if (!f)
+    {
+      perror(filename);
+      exit(EXIT_FAILURE);
+    }
+  else
+    {
+      while ((true_size += fread(str, sizeof(GLchar), 4096, f)) == 4096)
+        {
+          size += block_size;
+          str = (GLchar*)realloc(str, size);
+        }
+      str = (GLchar*)realloc(str, true_size+1);
+      str[true_size] = '\0';
+    }
+
+  fclose(f);
+  return str;
+}
+
+class ShaderObjectImpl
+{
+public:
+  GLhandleARB handle;
+
+  ShaderObjectImpl(GLenum type)
+  {
+    handle = glCreateShaderObjectARB(type);
+  }
+
+  ~ShaderObjectImpl()
+  {
+    glDeleteObjectARB(handle);
+  }
+};
+
+ShaderObject::ShaderObject(GLenum type, const std::string& filename)
+  : impl(new ShaderObjectImpl(type))
+{
+  load(filename);
+  compile();
+  print_log();
+}
+
+ShaderObject::~ShaderObject()
+{
+}
+
+void
+ShaderObject::load(const std::string& filename)
+{
+  GLchar* buf = load_file(filename.c_str());
+  glShaderSourceARB(impl->handle, 1, const_cast<const GLchar**>(&buf), NULL);
+  assert_gl("load_source");
+
+  std::cout << "Source:\n" << buf << std::endl;
+  free(buf);
+}
+
+GLhandleARB 
+ShaderObject::get_handle() const
+{
+  return impl->handle;
+}
+
+void
+ShaderObject::compile()
+{
+  glCompileShaderARB(impl->handle);
+}
+
+void
+ShaderObject::print_log()
+{
+  int infologLength = 0;
+  int charsWritten  = 0;
+  GLcharARB *infoLog;
+
+  assert_gl("print_log1");
+
+  glGetObjectParameterivARB(impl->handle, GL_OBJECT_INFO_LOG_LENGTH_ARB,
+                            &infologLength);
+  assert_gl("print_log2");
+
+  if (infologLength > 0)
+    {
+      infoLog = (GLcharARB*)malloc(infologLength);
+      if (infoLog == NULL)
+        {
+          printf("ERROR: Could not allocate InfoLog buffer\n");
+          exit(1);
+        }
+      glGetInfoLogARB(impl->handle, infologLength, &charsWritten, infoLog);
+      printf("InfoLog:\n%s\n\n", infoLog);
+      free(infoLog);
+    }
+  assert_gl("print_log3");
+}
+
+/* EOF */

Added: trunk/src/display/shader_object.hpp
===================================================================
--- trunk/src/display/shader_object.hpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/shader_object.hpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -0,0 +1,54 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SHADER_OBJECT_HPP
+#define HEADER_SHADER_OBJECT_HPP
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+#include <string>
+#include "sharedptr.hpp"
+
+class ShaderObjectImpl;
+
+/** */
+class ShaderObject
+{
+public:
+  ShaderObject(GLenum type, const std::string& filename);
+  ~ShaderObject();
+
+  GLhandleARB get_handle() const;
+  void load(const std::string& filename);
+  void compile();
+  void print_log();
+private:
+  SharedPtr<ShaderObjectImpl> impl;
+};
+
+#endif
+
+/* EOF */

Added: trunk/src/display/shader_program.cpp
===================================================================
--- trunk/src/display/shader_program.cpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/shader_program.cpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -0,0 +1,85 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "shader_program.hpp"
+#include "shader_object.hpp"
+
+class ShaderProgramImpl
+{
+public:
+  GLhandleARB handle;
+
+  ShaderProgramImpl() {
+    handle = glCreateProgramObjectARB();
+  }
+
+  ~ShaderProgramImpl() {
+    glDeleteObjectARB(handle);
+  }
+};
+
+ShaderProgram::ShaderProgram()
+  : impl(new ShaderProgramImpl())
+{
+}
+
+ShaderProgram::~ShaderProgram()
+{
+}
+
+void
+ShaderProgram::attach(const ShaderObject& obj)
+{
+  glAttachObjectARB(impl->handle, obj.get_handle());
+}
+
+void
+ShaderProgram::link()
+{
+  glLinkProgramARB(impl->handle);
+}
+
+GLint
+ShaderProgram::get_uniform_location(const char* name)
+{
+  GLint loc;
+
+  loc = glGetUniformLocationARB(impl->handle, name);
+
+  if (loc == -1)
+    printf("No such uniform named \"%s\"\n", name);
+
+  //printOpenGLError();  // Check for OpenGL errors
+
+  return loc;
+}
+
+GLhandleARB 
+ShaderProgram::get_handle() const
+{
+  return impl->handle;
+}
+
+/* EOF */

Added: trunk/src/display/shader_program.hpp
===================================================================
--- trunk/src/display/shader_program.hpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/display/shader_program.hpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -0,0 +1,56 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SHADER_PROGRAM_HPP
+#define HEADER_SHADER_PROGRAM_HPP
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+#include "sharedptr.hpp"
+
+class ShaderProgramImpl;
+class ShaderObject;
+
+/** */
+class ShaderProgram
+{
+private:
+public:
+  ShaderProgram();
+  ~ShaderProgram();
+
+  void attach(const ShaderObject& obj);
+  void link();
+
+  GLint get_uniform_location(const char* name);
+  GLhandleARB get_handle() const;
+private:
+  SharedPtr<ShaderProgramImpl> impl;
+};
+
+#endif
+
+/* EOF */

Modified: trunk/src/font/ttf_font.cpp
===================================================================
--- trunk/src/font/ttf_font.cpp	2006-01-09 11:16:27 UTC (rev 1207)
+++ trunk/src/font/ttf_font.cpp	2006-01-09 15:00:38 UTC (rev 1208)
@@ -184,6 +184,10 @@
 void
 TTFFont::draw(float x_pos, float y_pos, const std::string& str, const Color& color)
 {
+  // FIXME: Little bit hacky to throw it just in
+  x_pos = static_cast<int>(x_pos);
+  y_pos = static_cast<int>(y_pos);
+
   OpenGLState state;
 
   state.enable(GL_BLEND);



From grumbel at berlios.de  Tue Jan 10 13:48:56 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 10 Jan 2006 13:48:56 +0100
Subject: [Windstille-commit] r1209 - in trunk: data data/shader src src/display src/font src/sprite3d
Message-ID: <200601101248.k0ACmux3017080@sheep.berlios.de>

Author: grumbel
Date: 2006-01-10 13:48:52 +0100 (Tue, 10 Jan 2006)
New Revision: 1209

Added:
   trunk/data/shader/
   trunk/data/shader/blacknwhite.frag
   trunk/data/shader/wooble.frag
Modified:
   trunk/src/display/opengl_state.cpp
   trunk/src/display/opengl_state.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/shader_program.cpp
   trunk/src/display/shader_program.hpp
   trunk/src/display/surface.cpp
   trunk/src/display/texture.cpp
   trunk/src/display/vertex_array_drawing_request.cpp
   trunk/src/font/ttf_font.cpp
   trunk/src/sprite3d/sprite3d.cpp
   trunk/src/text_area.cpp
Log:
- some cleanup in the shader support

Added: trunk/data/shader/blacknwhite.frag
===================================================================
--- trunk/data/shader/blacknwhite.frag	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/data/shader/blacknwhite.frag	2006-01-10 12:48:52 UTC (rev 1209)
@@ -0,0 +1,18 @@
+uniform sampler2D texture;
+
+void main()
+{
+  vec4 color = texture2D(texture, gl_TexCoord[0].xy);
+  float f = (color.r + color.b + color.g)/3.0;
+
+  float alpha = (float(gl_FragCoord.x)/800.0);
+
+  if (f > 0.5) 
+    gl_FragColor = mix(vec4(1,1,1,1), color, alpha);
+  else if (f > 0.3)
+    gl_FragColor = mix(vec4(0.5,0.5,0.5,1.0), color, alpha);
+  else
+    gl_FragColor = mix(vec4(0,0,0,1), color, alpha);
+}
+
+/* EOF */

Added: trunk/data/shader/wooble.frag
===================================================================
--- trunk/data/shader/wooble.frag	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/data/shader/wooble.frag	2006-01-10 12:48:52 UTC (rev 1209)
@@ -0,0 +1,21 @@
+uniform sampler2D texture;
+uniform sampler2D noise;
+uniform float time;
+
+void main()
+{
+  vec4 noise1 = texture2D(noise, gl_TexCoord[0].xy*2.0 + vec2(0, sin(time)));
+  vec4 noise2 = texture2D(noise, gl_TexCoord[0].xy*2.0 + vec2(-time*1.1));
+  vec2 offset = (noise1.rg + noise2.rg - 1.0) * 0.1;
+
+  float dx = gl_FragCoord.x/800.0 - 0.5;
+  float dy = gl_FragCoord.y/600.0 - 0.5;
+
+  float d = sqrt(dx*dx + dy*dy)/3.0;
+  offset *= d;
+  vec4 color = texture2D(texture, gl_TexCoord[0].xy + offset);
+
+  gl_FragColor = mix(color, vec4(1.0, 1.0, 1.0, 1.0), length(offset*10));
+}
+
+/* EOF */

Modified: trunk/src/display/opengl_state.cpp
===================================================================
--- trunk/src/display/opengl_state.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/opengl_state.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -28,7 +28,6 @@
 #include <assert.h>
 #include <map>
 #include <iostream>
-#include "framebuffer.hpp"
 #include "texture.hpp"
 #include "color.hpp"
 #include "globals.hpp"
@@ -45,7 +44,6 @@
   bool was_activated;
 
   Texture     texture[MAX_TEXTURE_UNITS];
-  Framebuffer framebuffer;
 
   Color color;
 
@@ -68,8 +66,9 @@
 void
 OpenGLState::init()
 {
+  assert(global_ == 0);
+
   // Init the default settings
-  glDisable(GL_TEXTURE_2D);
   glDisable(GL_DEPTH_TEST);
   glDisable(GL_BLEND);
 
@@ -98,7 +97,6 @@
 OpenGLState::OpenGLState()
   : impl(new OpenGLStateImpl())
 {
-  //impl->state[GL_TEXTURE_2D]  = false;
   impl->state[GL_DEPTH_TEST]  = false;
   impl->state[GL_BLEND]       = false;
   impl->state[GL_LINE_SMOOTH] = false;
@@ -165,16 +163,18 @@
 void
 OpenGLState::enable(GLenum cap)
 {
-  if (cap == GL_TEXTURE_2D)// FIXME: HACK
-    return;
+  // Texturing is enabled automatically when a texture is bind
+  assert(cap != GL_TEXTURE_2D);
+
   set_state(cap, true);
 }
 
 void
 OpenGLState::disable(GLenum cap)
 {  
-  if (cap == GL_TEXTURE_2D)// FIXME: HACK
-    return;
+  // Texturing is enabled automatically when a texture is bind
+  assert(cap != GL_TEXTURE_2D);
+
   set_state(cap, false);
 }
 
@@ -294,23 +294,6 @@
         }
     }
 
-  if (0)
-    {
-      if (impl->framebuffer != global->impl->framebuffer)
-        {
-          if (impl->framebuffer)
-            {
-              glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->framebuffer.get_handle());
-              global->impl->framebuffer = impl->framebuffer;
-            }
-          else
-            {
-              glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
-              global->impl->framebuffer = impl->framebuffer;
-            }
-        }
-    }
-
   if (debug)
     verify();
 }
@@ -362,10 +345,4 @@
   assert_gl("OpenGLState::verify");
 }
 
-void
-OpenGLState::bind_framebuffer(const Framebuffer& framebuffer)
-{
-  impl->framebuffer = framebuffer;
-}
-
 /* EOF */

Modified: trunk/src/display/opengl_state.hpp
===================================================================
--- trunk/src/display/opengl_state.hpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/opengl_state.hpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -36,32 +36,60 @@
 class Color;
 class OpenGLStateImpl;
 
-/** This class manages the state of a OpenGL context, meaning it tries
-    to reduce state changes and in addition to that it gives a well
-    default defined state to begin with. */
+/**
+ * This class manages the state of a OpenGL context, meaning it tries
+ * to reduce state changes and in addition to that it gives a well
+ * default defined state to begin with. It is *not* meant to replace
+ * the complete state managment of OpenGL, but limited to those states
+ * that are important to a single drawing operation, such as color,
+ * line width, blend mode, texture and vertex arrays. It does not
+ * handle things like framebuffer objects, since those are mainly
+ * usefull for more then a single operation.
+ *
+ * You use OpenGLState by first creating a object, then setting all
+ * those states you want and finally calling activate(), so activate
+ * the set state. Multiple calls to activate() are allowed.
+ */
 class OpenGLState
 {
 private:
+  // pointer to the global OpenGLState, ie. that that is currently
+  // used by the hardware
   static OpenGLState* global_;
+  static OpenGLState* global();
+
 public:
+  /**
+   * Init the global OpenGLState, must be called exactly once 
+   */
   static void init();
-  static OpenGLState* global();
 
+  /** 
+   * Creates a new OpenGLState with default settings, which are:
+   *
+   * - no texture is set
+   * - vertex array use is disabled
+   * - color is white, fully opaque
+   * - blending is enabled with (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
+   * - depth test is disabled
+   */
   OpenGLState();
   ~OpenGLState();
 
+  /** 
+   * Binds the given \a texture to the given texture \a unit and
+   * enables texturing via glEnable(GL_TEXTURE2D) for the unit.
+   */
   void bind_texture(const Texture& texture, int unit = 0);
+
   void set_blend_func(GLenum sfactor, GLenum dfactor);
 
-  void bind_framebuffer(const Framebuffer& framebuffer);
-
   void enable(GLenum cap);
   void disable(GLenum cap);
 
   void set_state(GLenum array, bool value);
   bool get_state(GLenum array) const;
   
-
   void enable_client_state(GLenum array);
   void disable_client_state(GLenum array);
 
@@ -70,11 +98,15 @@
 
   void color(const Color& color);
 
-  /** Activates the given state, you *must* call this before you issue
-      gl commands that depend on the given state */
+  /**
+   * Activates the given state, you *must* call this before you issue
+   * gl commands that depend on the given state 
+   */
   void activate();
   
-  /** Verify that all states got set as planed, for debugging purpose only */
+  /**
+   * Verify that all states got set as planed, for debugging purpose only
+   */
   void verify();
 private:
   std::auto_ptr<OpenGLStateImpl> impl;

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/scene_context.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -77,13 +77,19 @@
                Rectf(0, 0, (800/BLURMAP_DIV)/1024.0f, (600/BLURMAP_DIV)/1024.0f),
                800/BLURMAP_DIV, 600/BLURMAP_DIV)
   {
-    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "/tmp/shader.frag"));
+    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/blacknwhite.frag"));
     shader_program.link();
     blur_surface.get_texture().set_wrap(GL_REPEAT);
     blur_surface.get_texture().set_filter(GL_LINEAR);
     noise = Texture("images/noise3.png");
     noise.set_wrap(GL_REPEAT);
     noise.set_filter(GL_LINEAR);
+
+    glUseProgramObjectARB(shader_program.get_handle());
+    shader_program.set_uniform1i("texture", 0);
+    shader_program.set_uniform1i("noise",   1);
+    shader_program.set_uniform1f("time", fmod(SDL_GetTicks()/10000.0f, 1.0f));
+    glUseProgramObjectARB(0);
   }
 };
 
@@ -237,7 +243,6 @@
 
       Rectf uv = impl->lightmap.get_uv();
 
-      state.enable(GL_TEXTURE_2D);
       state.bind_texture(impl->lightmap.get_texture());
 
       state.enable(GL_BLEND);
@@ -284,7 +289,6 @@
 
       Rectf uv = impl->blur_surface.get_uv();
 
-      state.enable(GL_TEXTURE_2D);
       state.bind_texture(impl->blur_surface.get_texture(), 0);
       state.bind_texture(impl->noise, 1);
 
@@ -294,8 +298,6 @@
       state.activate();
 
       glUseProgramObjectARB(impl->shader_program.get_handle());
-      glUniform1iARB(impl->shader_program.get_uniform_location("texture"), 0);
-      glUniform1iARB(impl->shader_program.get_uniform_location("noise"), 1);
 
       glBegin(GL_QUADS);
 

Modified: trunk/src/display/shader_program.cpp
===================================================================
--- trunk/src/display/shader_program.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/shader_program.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -24,7 +24,9 @@
 */
 
 #include "shader_program.hpp"
+#include <iostream>
 #include "shader_object.hpp"
+#include "util.hpp"
 
 class ShaderProgramImpl
 {
@@ -71,7 +73,7 @@
   if (loc == -1)
     printf("No such uniform named \"%s\"\n", name);
 
-  //printOpenGLError();  // Check for OpenGL errors
+  assert_gl("ShaderProgram::get_uniform_location()");
 
   return loc;
 }
@@ -82,4 +84,84 @@
   return impl->handle;
 }
 
+void
+ShaderProgram::set_uniform1f(const char* name, GLfloat v0)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform1fARB(location, v0);
+}
+
+void
+ShaderProgram::set_uniform2f(const char* name, GLfloat v0, GLfloat v1)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform2fARB(location, v0, v1);
+}
+
+void
+ShaderProgram::set_uniform3f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform3fARB(location, v0, v1, v2);
+}
+
+void
+ShaderProgram::set_uniform4f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform4fARB(location, v0, v1, v2, v3);
+}
+
+void
+ShaderProgram::set_uniform1i(const char* name, GLint v0)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform1iARB(location, v0);
+}
+
+void
+ShaderProgram::set_uniform2i(const char* name, GLint v0, GLint v1)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform2iARB(location, v0, v1);
+}
+
+void
+ShaderProgram::set_uniform3i(const char* name, GLint v0, GLint v1, GLint v2)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform3iARB(location, v0, v1, v2);
+}
+
+void
+ShaderProgram::set_uniform4i(const char* name, GLint v0, GLint v1, GLint v2, GLint v3)
+{
+  GLint location = glGetUniformLocationARB(impl->handle, name);
+  if (location == -1)
+    std::cout << "No such uniform named \"" << name << "\"" << std::endl;
+  else
+    glUniform4iARB(location, v0, v1, v2, v3);
+}
+
 /* EOF */

Modified: trunk/src/display/shader_program.hpp
===================================================================
--- trunk/src/display/shader_program.hpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/shader_program.hpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -47,6 +47,19 @@
 
   GLint get_uniform_location(const char* name);
   GLhandleARB get_handle() const;
+
+  // FIXME: All these only work when you call
+  // glUseProgramObjectARB(shader_program.get_handle()); before them
+  void set_uniform1f(const char* name, GLfloat v0);
+  void set_uniform2f(const char* name, GLfloat v0, GLfloat v1);
+  void set_uniform3f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2);
+  void set_uniform4f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+
+  void set_uniform1i(const char* name, GLint v0);
+  void set_uniform2i(const char* name, GLint v0, GLint v1);
+  void set_uniform3i(const char* name, GLint v0, GLint v1, GLint v2);
+  void set_uniform4i(const char* name, GLint v0, GLint v1, GLint v2, GLint v3);
+
 private:
   SharedPtr<ShaderProgramImpl> impl;
 };

Modified: trunk/src/display/surface.cpp
===================================================================
--- trunk/src/display/surface.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/surface.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -145,7 +145,6 @@
   OpenGLState state;
   state.enable(GL_BLEND);
   state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-  state.enable(GL_TEXTURE_2D);
   state.bind_texture(impl->texture);
   state.activate();
 
@@ -170,7 +169,6 @@
 Surface::draw(const SurfaceDrawingParameters& params) const
 {
   OpenGLState state;
-  state.enable(GL_TEXTURE_2D);
   state.enable(GL_BLEND);
   state.set_blend_func(params.blendfunc_src, params.blendfunc_dst);
   state.bind_texture(impl->texture);

Modified: trunk/src/display/texture.cpp
===================================================================
--- trunk/src/display/texture.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/texture.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -123,7 +123,6 @@
         }
 
       OpenGLState state;
-      state.enable(GL_TEXTURE_2D);
       state.bind_texture(*this);
       state.activate();
 

Modified: trunk/src/display/vertex_array_drawing_request.cpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/display/vertex_array_drawing_request.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -67,13 +67,8 @@
   
   if (texture)
     {
-      state.enable(GL_TEXTURE_2D);
       state.bind_texture(texture);
     }
-  else
-    {
-      state.disable(GL_TEXTURE_2D);
-    }
 
   if (!colors.empty())
     {

Modified: trunk/src/font/ttf_font.cpp
===================================================================
--- trunk/src/font/ttf_font.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/font/ttf_font.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -192,7 +192,6 @@
 
   state.enable(GL_BLEND);
   state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-  state.enable(GL_TEXTURE_2D);
   state.bind_texture(impl->texture);
   state.color(color);
   state.activate();

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -333,7 +333,6 @@
   } 
 
   OpenGLState state;
-  state.enable(GL_TEXTURE_2D);
 
   if (blend_sfactor != GL_ONE || blend_dfactor != GL_ZERO)
     {

Modified: trunk/src/text_area.cpp
===================================================================
--- trunk/src/text_area.cpp	2006-01-09 15:00:38 UTC (rev 1208)
+++ trunk/src/text_area.cpp	2006-01-10 12:48:52 UTC (rev 1209)
@@ -154,7 +154,6 @@
 
   OpenGLState state;
   
-  state.enable(GL_TEXTURE_2D);
   state.bind_texture(impl->font->get_texture());
 
   state.enable(GL_BLEND);



From grumbel at berlios.de  Tue Jan 10 23:03:35 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 10 Jan 2006 23:03:35 +0100
Subject: [Windstille-commit] r1210 - in trunk: data/shader src/display
Message-ID: <200601102203.k0AM3Zms011154@sheep.berlios.de>

Author: grumbel
Date: 2006-01-10 23:03:34 +0100 (Tue, 10 Jan 2006)
New Revision: 1210

Added:
   trunk/data/shader/shockwave.frag
   trunk/data/shader/shockwave2.frag
Modified:
   trunk/src/display/opengl_state.hpp
   trunk/src/display/scene_context.cpp
Log:
- added shockwave, only hacked in, will seperate later

Added: trunk/data/shader/shockwave.frag
===================================================================
--- trunk/data/shader/shockwave.frag	2006-01-10 12:48:52 UTC (rev 1209)
+++ trunk/data/shader/shockwave.frag	2006-01-10 22:03:34 UTC (rev 1210)
@@ -0,0 +1,59 @@
+// -*- c++ -*-
+
+uniform float radius;
+uniform sampler2D background_tex;
+uniform sampler2D noise_tex;
+
+void main()
+{
+  if (0)
+    {
+      float deform_factor = 50.0;
+
+      vec4 noise_color = texture2D(noise_tex, gl_TexCoord[0].xy * 2.0 + gl_FragCoord.xy * 0.005);
+
+      vec4 noise_color2 = texture2D(noise_tex, gl_TexCoord[0].xy * 2.0 + vec2(0.5, 0.5));
+
+      vec2 offset = ((noise_color.xy - vec2(0.5, 0.5)) * deform_factor * gl_Color.a);
+
+      vec4 bg_color = texture2D(background_tex, vec2((float(gl_FragCoord.x + offset.x)/800.0),
+                                                     (float(gl_FragCoord.y + offset.y)/600.0)) 
+                                * vec2(800.0/1024.0, 600.0/1024.0));
+      bg_color = mix(bg_color, vec4(noise_color.r*0.5, noise_color.r, 1, 1), clamp(pow(gl_Color.a, 2.0), 0, 1.0));
+      gl_FragColor = mix(bg_color,
+                         gl_Color,
+                         clamp(pow(gl_Color.a, 2.0), 0, 1.0));
+    }
+  else
+    {
+      uniform sampler2D background_tex;
+      uniform sampler2D noise_tex;
+      varying vec2      tex_coord;
+      varying vec2      tex_coord2;
+
+        vec4 uv_col  = texture2D(noise_tex, tex_coord2.xy);
+        vec4 uv_col2 = texture2D(noise_tex, tex_coord2.xy + vec2(0.3, 0.3));
+
+        //  vec2 pos = tex_coord.xy;
+        vec2 pos = tex_coord.xy + ((uv_col.rg-0.5) * (uv_col.b*.05));
+        vec2 pos2 = pos + vec2(0.3, 0.3);
+        vec4 tex_col;
+        vec4 tex_col2;
+
+        // blur
+        for(int i = -2; i <= 2; ++i) {
+          tex_col += texture2D(background_tex, pos.xy + vec2(0, i*(1/128.0)));
+          tex_col += texture2D(background_tex, pos.xy + vec2(i*(1/128.0), 0));
+        }
+        tex_col *= 1.0/5.0;
+
+        float r = -tex_coord.y;
+        tex_col = mix(tex_col, vec4(r, r*0.5, 0, 1), r);
+
+        tex_col2= texture2D(background_tex, pos.xy);
+
+        gl_FragColor = mix(tex_col, tex_col2, clamp(pow(uv_col2.b*2, 1.5)/2.0, 0, 1.0));
+    }
+}
+
+/* EOF */

Added: trunk/data/shader/shockwave2.frag
===================================================================
--- trunk/data/shader/shockwave2.frag	2006-01-10 12:48:52 UTC (rev 1209)
+++ trunk/data/shader/shockwave2.frag	2006-01-10 22:03:34 UTC (rev 1210)
@@ -0,0 +1,41 @@
+// -*- c++ -*-
+
+// Shockwave shader, good look version
+
+uniform sampler2D background_tex;
+uniform sampler2D noise_tex;
+uniform float     radius;
+
+void main()
+{
+  float x_dist = gl_TexCoord[0].x - 0.5;
+  float y_dist = gl_TexCoord[0].y - 0.5;
+  // Distance from center of the explosion
+  float dist   = sqrt(x_dist*x_dist + y_dist*y_dist);
+
+  if (dist > radius || dist < radius - 164.0/512.0) 
+    {
+      discard;
+    } 
+  else 
+    {
+      vec2 pos = vec2(float(gl_FragCoord.x)/800.0, 
+                      float(gl_FragCoord.y)/600.0) * vec2(800.0/1024.0, 600.0/1024.0);
+
+      vec4 uv_col  = texture2D(noise_tex, gl_TexCoord[0].xy*1.5);
+      float h = 1.0 - clamp((radius - dist)*512.0/164.0, 0.0, 1.0);
+      h *= h;
+      vec4 col = texture2D(background_tex, pos + (uv_col.rb * uv_col.g) * h * 0.3);
+
+      float highlight = 1.0 - clamp((radius - dist)*512.0/32.0, 0.0, 1.0);
+
+      col += vec4(h * uv_col.r + highlight*0.9,
+                  h * uv_col.r + highlight*0.9,
+                  h*1.5 * uv_col.r + highlight, 
+                  1);
+
+      gl_FragColor = col;
+    }
+}
+
+/* EOF */

Modified: trunk/src/display/opengl_state.hpp
===================================================================
--- trunk/src/display/opengl_state.hpp	2006-01-10 12:48:52 UTC (rev 1209)
+++ trunk/src/display/opengl_state.hpp	2006-01-10 22:03:34 UTC (rev 1210)
@@ -96,6 +96,8 @@
   void set_client_state(GLenum array, bool value);
   bool get_client_state(GLenum array) const;
 
+  // FIXME: Color is a per vertex attribute, doesn't make much sense
+  // to have it here
   void color(const Color& color);
 
   /**

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-10 12:48:52 UTC (rev 1209)
+++ trunk/src/display/scene_context.cpp	2006-01-10 22:03:34 UTC (rev 1210)
@@ -77,7 +77,7 @@
                Rectf(0, 0, (800/BLURMAP_DIV)/1024.0f, (600/BLURMAP_DIV)/1024.0f),
                800/BLURMAP_DIV, 600/BLURMAP_DIV)
   {
-    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/blacknwhite.frag"));
+    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
     shader_program.link();
     blur_surface.get_texture().set_wrap(GL_REPEAT);
     blur_surface.get_texture().set_filter(GL_LINEAR);
@@ -86,13 +86,57 @@
     noise.set_filter(GL_LINEAR);
 
     glUseProgramObjectARB(shader_program.get_handle());
-    shader_program.set_uniform1i("texture", 0);
-    shader_program.set_uniform1i("noise",   1);
+    shader_program.set_uniform1i("background_tex", 0);
+    shader_program.set_uniform1i("noise_tex",   1);
     shader_program.set_uniform1f("time", fmod(SDL_GetTicks()/10000.0f, 1.0f));
     glUseProgramObjectARB(0);
   }
 };
 
+void draw_disc(int count)
+{
+  float radius = (count)*2.0f;
+  float minradius = 2.0f*count - 164.0f;
+  if (minradius < 0)
+    minradius = 0;
+  glClear(GL_DEPTH_BUFFER_BIT);
+
+  int segments = 64;
+  
+  glBegin(GL_QUADS);
+  for (int i = 0; i < segments; ++i)
+    {
+      float angel = (2*M_PI / segments);
+
+      float x1 =  sin(angel*i)*radius;
+      float y1 = -cos(angel*i)*radius;
+
+      float x2 =  sin(angel*(i+1))*radius;
+      float y2 = -cos(angel*(i+1))*radius;
+
+      glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+      glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
+      glVertex3f(x1+256, y1+256, 0);
+
+      glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
+      glVertex3f(x2+256, y2+256, 0);
+
+
+      float x3 =  sin(angel*i)*minradius;
+      float y3 = -cos(angel*i)*minradius;
+
+      float x4 =  sin(angel*(i+1))*minradius;
+      float y4 = -cos(angel*(i+1))*minradius;
+
+      glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
+      glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
+      glVertex3f(x4+256, y4+256, 0);
+      glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
+      glVertex3f(x3+256, y3+256, 0);
+    }
+  glEnd();
+}
+
 SceneContext::SceneContext()
 {
   impl = new SceneContextImpl();
@@ -244,7 +288,7 @@
       Rectf uv = impl->lightmap.get_uv();
 
       state.bind_texture(impl->lightmap.get_texture());
-
+      
       state.enable(GL_BLEND);
       state.set_blend_func(GL_DST_COLOR, GL_ZERO);
       state.activate();
@@ -285,40 +329,59 @@
 
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);     
 
-      OpenGLState state;
+      if (0)
+        { // Draw funny effect with shader
+          OpenGLState state;
 
-      Rectf uv = impl->blur_surface.get_uv();
+          Rectf uv = impl->blur_surface.get_uv();
 
-      state.bind_texture(impl->blur_surface.get_texture(), 0);
-      state.bind_texture(impl->noise, 1);
+          state.bind_texture(impl->blur_surface.get_texture(), 0);
+          state.bind_texture(impl->noise, 1);
+          state.disable(GL_BLEND);
 
-      //state.enable(GL_BLEND);
-      //state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-      //state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
-      state.activate();
+          //state.enable(GL_BLEND);
+          //state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+          //state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+          state.activate();
 
-      glUseProgramObjectARB(impl->shader_program.get_handle());
+          glUseProgramObjectARB(impl->shader_program.get_handle());
 
-      glBegin(GL_QUADS);
+          glBegin(GL_QUADS);
 
-      glTexCoord2f(uv.left, uv.bottom);
-      glVertex2f(0, 0);
+          glTexCoord2f(uv.left, uv.bottom);
+          glVertex2f(0, 0);
 
-      glTexCoord2f(uv.right, uv.bottom);
-      glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV, 0);
+          glTexCoord2f(uv.right, uv.bottom);
+          glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV, 0);
 
-      glTexCoord2f(uv.right, uv.top);
-      glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV,
-                 impl->blur_surface.get_height() * BLURMAP_DIV);
+          glTexCoord2f(uv.right, uv.top);
+          glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV,
+                     impl->blur_surface.get_height() * BLURMAP_DIV);
 
-      glTexCoord2f(uv.left, uv.top);
-      glVertex2f(0, impl->blur_surface.get_height() * BLURMAP_DIV);
+          glTexCoord2f(uv.left, uv.top);
+          glVertex2f(0, impl->blur_surface.get_height() * BLURMAP_DIV);
 
-      glEnd();
+          glEnd();
 
-      glUseProgramObjectARB(0);
+          glUseProgramObjectARB(0);
+        }
     }
 
+  {
+    OpenGLState state;
+    state.bind_texture(impl->blur_surface.get_texture(), 0);
+    state.bind_texture(impl->noise, 1);
+    state.disable(GL_BLEND);
+    state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+    state.activate();
+
+    glUseProgramObjectARB(impl->shader_program.get_handle());    
+    float radius = 100 * (sinf(SDL_GetTicks()/3000.0f) + 1.0f);
+    impl->shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
+    draw_disc(int(radius));
+    glUseProgramObjectARB(0);
+  }
+
   // Clear all DrawingContexts
   impl->color.clear();
   impl->light.clear();



From grumbel at berlios.de  Tue Jan 10 23:11:53 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 10 Jan 2006 23:11:53 +0100
Subject: [Windstille-commit] r1211 - trunk/data/images
Message-ID: <200601102211.k0AMBrni012358@sheep.berlios.de>

Author: grumbel
Date: 2006-01-10 23:11:49 +0100 (Tue, 10 Jan 2006)
New Revision: 1211

Added:
   trunk/data/images/noise3.png
Log:
- deplacment texture for shockwave

Added: trunk/data/images/noise3.png
===================================================================
(Binary files differ)


Property changes on: trunk/data/images/noise3.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream



From grumbel at berlios.de  Wed Jan 11 14:34:56 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 11 Jan 2006 14:34:56 +0100
Subject: [Windstille-commit] r1212 - in trunk: data/shader src src/display
Message-ID: <200601111334.k0BDYuUB029327@sheep.berlios.de>

Author: grumbel
Date: 2006-01-11 14:34:50 +0100 (Wed, 11 Jan 2006)
New Revision: 1212

Added:
   trunk/data/shader/simple.frag
Modified:
   trunk/data/shader/shockwave2.frag
   trunk/src/SConscript
   trunk/src/display/framebuffer.cpp
   trunk/src/display/framebuffer.hpp
   trunk/src/display/opengl_state.cpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/surface.cpp
   trunk/src/display/texture.cpp
   trunk/src/display/texture.hpp
   trunk/src/tile_packer.cpp
Log:
- added support for GL_TEXTURE_RECTANLE_ARB

Modified: trunk/data/shader/shockwave2.frag
===================================================================
--- trunk/data/shader/shockwave2.frag	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/data/shader/shockwave2.frag	2006-01-11 13:34:50 UTC (rev 1212)
@@ -2,40 +2,32 @@
 
 // Shockwave shader, good look version
 
-uniform sampler2D background_tex;
+uniform sampler2DRect background_tex;
 uniform sampler2D noise_tex;
 uniform float     radius;
 
 void main()
 {
+  float thickness = 164.0;
+
   float x_dist = gl_TexCoord[0].x - 0.5;
   float y_dist = gl_TexCoord[0].y - 0.5;
   // Distance from center of the explosion
   float dist   = sqrt(x_dist*x_dist + y_dist*y_dist);
 
-  if (dist > radius || dist < radius - 164.0/512.0) 
-    {
-      discard;
-    } 
-  else 
-    {
-      vec2 pos = vec2(float(gl_FragCoord.x)/800.0, 
-                      float(gl_FragCoord.y)/600.0) * vec2(800.0/1024.0, 600.0/1024.0);
+  vec4 uv_col  = texture2D(noise_tex, gl_TexCoord[0].xy*1.5);
+  float h = 1.0 - clamp((radius - dist)*512.0/thickness, 0.0, 1.0);
+  h *= h;
+  vec4 col = texture2DRect(background_tex, gl_FragCoord.xy + (uv_col.rb * uv_col.g) * h * 0.3 *300);
 
-      vec4 uv_col  = texture2D(noise_tex, gl_TexCoord[0].xy*1.5);
-      float h = 1.0 - clamp((radius - dist)*512.0/164.0, 0.0, 1.0);
-      h *= h;
-      vec4 col = texture2D(background_tex, pos + (uv_col.rb * uv_col.g) * h * 0.3);
+  float highlight = 1.0 - clamp((radius - dist)*512.0/32.0, 0.0, 1.0);
 
-      float highlight = 1.0 - clamp((radius - dist)*512.0/32.0, 0.0, 1.0);
+  col += vec4(h * uv_col.r + highlight*0.9,
+              h * uv_col.r + highlight*0.9,
+              h*1.5 * uv_col.r + highlight, 
+              1);
 
-      col += vec4(h * uv_col.r + highlight*0.9,
-                  h * uv_col.r + highlight*0.9,
-                  h*1.5 * uv_col.r + highlight, 
-                  1);
-
-      gl_FragColor = col;
-    }
+  gl_FragColor = col;
 }
 
 /* EOF */

Added: trunk/data/shader/simple.frag
===================================================================
--- trunk/data/shader/simple.frag	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/data/shader/simple.frag	2006-01-11 13:34:50 UTC (rev 1212)
@@ -0,0 +1,17 @@
+// -*- c++ -*-
+
+uniform sampler2DRect background;
+
+void main()
+{
+  if (gl_FragCoord.x < 300)
+    {
+      gl_FragColor = texture2DRect(background, gl_TexCoord[0].xy);
+    }
+  else
+    {
+      gl_FragColor = vec4(1.0, 1.0, 0.0, 1.0);
+    }
+}
+
+/* EOF */

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/SConscript	2006-01-11 13:34:50 UTC (rev 1212)
@@ -27,7 +27,7 @@
 SConscript("squirrel/SConstruct")
 
 env = Environment(CC = 'gcc',
-                  CCFLAGS = ['-O2', '-Wall', '-Werror', '-g', '-DDEBUG'])
+                  CCFLAGS = ['-O0', '-Wall', '-Werror', '-g', '-DDEBUG'])
 
 # env.Copy(LIBS = ['a', 'b'])
 

Modified: trunk/src/display/framebuffer.cpp
===================================================================
--- trunk/src/display/framebuffer.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/framebuffer.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -36,15 +36,15 @@
   GLuint  handle;
   Texture texture;
   
-  FramebufferImpl(int width, int height)
-    : texture(width, height)
+  FramebufferImpl(GLenum target, int width, int height)
+    : texture(target, width, height)
   {
     glGenFramebuffersEXT(1, &handle);
     assert_gl("Framebuffer1");
     glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, handle);
     assert_gl("Framebuffer2");
     glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, 
-                              GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, texture.get_handle(), 0);
+                              GL_COLOR_ATTACHMENT0_EXT, texture.get_target(), texture.get_handle(), 0);
     assert_gl("Framebuffer3");
     glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
   }
@@ -59,8 +59,8 @@
 {
 }
 
-Framebuffer::Framebuffer(int width, int height)
-  : impl(new FramebufferImpl(width, height))
+Framebuffer::Framebuffer(GLenum target, int width, int height)
+  : impl(new FramebufferImpl(target, width, height))
 {  
 }
 

Modified: trunk/src/display/framebuffer.hpp
===================================================================
--- trunk/src/display/framebuffer.hpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/framebuffer.hpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -35,7 +35,7 @@
 {
 public:
   Framebuffer();
-  Framebuffer(int width, int height);
+  Framebuffer(GLenum target, int width, int height);
   ~Framebuffer();
   
   int get_width()  const;

Modified: trunk/src/display/opengl_state.cpp
===================================================================
--- trunk/src/display/opengl_state.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/opengl_state.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -281,14 +281,40 @@
           glActiveTexture(GL_TEXTURE0 + i);
           if (impl->texture[i])
             {
-              glBindTexture(GL_TEXTURE_2D, impl->texture[i].get_handle());
-              glEnable(GL_TEXTURE_2D);
               global->impl->texture[i] = impl->texture[i];
+
+              switch (impl->texture[i].get_target())
+                {
+                case GL_TEXTURE_RECTANGLE_ARB:
+                  glBindTexture(GL_TEXTURE_RECTANGLE_ARB, impl->texture[i].get_handle());
+                  glEnable(GL_TEXTURE_RECTANGLE_ARB);
+
+                  //glBindTexture(GL_TEXTURE_2D, 0);
+                  //glDisable(GL_TEXTURE_2D);                  
+                  break;
+                  
+                case GL_TEXTURE_2D:
+                  glBindTexture(GL_TEXTURE_2D, impl->texture[i].get_handle());
+                  glEnable(GL_TEXTURE_2D);
+
+                  glBindTexture(GL_TEXTURE_RECTANGLE_ARB, 0);
+                  glDisable(GL_TEXTURE_RECTANGLE_ARB);
+                  break;
+                  
+                default:
+                  assert(!"Unknown texture target");
+                  break;
+                }
             }
           else
             {
+              // FIXME: Hacky, should disable only the right target
               glBindTexture(GL_TEXTURE_2D, 0);
+              glBindTexture(GL_TEXTURE_RECTANGLE_ARB, 0);
+
+              glDisable(GL_TEXTURE_RECTANGLE_ARB);
               glDisable(GL_TEXTURE_2D);
+
               global->impl->texture[i] = impl->texture[i];
             }
         }
@@ -331,7 +357,7 @@
       std::cout << "OpenGLState: dst blendfunc is out of sync" << std::endl;
     }
 
-  if (1)
+  if (0)
     {
       // FIXME: Add multitexture support here
       GLint texture_handle;

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/scene_context.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -29,6 +29,7 @@
 
 #include <iostream>
 
+#include "util.hpp"
 #include "display/display.hpp"
 #include "display/surface.hpp"
 #include "display/opengl_state.hpp"
@@ -55,9 +56,8 @@
   Surface lightmap;
 
   Framebuffer blur_framebuffer;
-  Surface     blur_surface;
   ShaderProgram shader_program;
-
+  ShaderProgram simple_program;
   Texture noise;
 
   SceneContextImpl() 
@@ -67,20 +67,16 @@
                   SceneContext::LIGHTMAPSCREEN |
                   SceneContext::BLURMAP
                   ),
-      framebuffer(256, 256),
+      framebuffer(GL_TEXTURE_2D, 256, 256),
       lightmap(framebuffer.get_texture(), 
                Rectf(0, 0, (800/LIGHTMAP_DIV)/256.0f, (600/LIGHTMAP_DIV)/256.0f),
                800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV),
       //lightmap(800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
-      blur_framebuffer(1024, 1024),
-      blur_surface(blur_framebuffer.get_texture(),
-               Rectf(0, 0, (800/BLURMAP_DIV)/1024.0f, (600/BLURMAP_DIV)/1024.0f),
-               800/BLURMAP_DIV, 600/BLURMAP_DIV)
+      //blur_framebuffer(GL_TEXTURE_2D, 1024, 1024)
+      blur_framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800, 600)
   {
     shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
     shader_program.link();
-    blur_surface.get_texture().set_wrap(GL_REPEAT);
-    blur_surface.get_texture().set_filter(GL_LINEAR);
     noise = Texture("images/noise3.png");
     noise.set_wrap(GL_REPEAT);
     noise.set_filter(GL_LINEAR);
@@ -90,53 +86,12 @@
     shader_program.set_uniform1i("noise_tex",   1);
     shader_program.set_uniform1f("time", fmod(SDL_GetTicks()/10000.0f, 1.0f));
     glUseProgramObjectARB(0);
+
+    simple_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/simple.frag"));
+    simple_program.link();
   }
 };
 
-void draw_disc(int count)
-{
-  float radius = (count)*2.0f;
-  float minradius = 2.0f*count - 164.0f;
-  if (minradius < 0)
-    minradius = 0;
-  glClear(GL_DEPTH_BUFFER_BIT);
-
-  int segments = 64;
-  
-  glBegin(GL_QUADS);
-  for (int i = 0; i < segments; ++i)
-    {
-      float angel = (2*M_PI / segments);
-
-      float x1 =  sin(angel*i)*radius;
-      float y1 = -cos(angel*i)*radius;
-
-      float x2 =  sin(angel*(i+1))*radius;
-      float y2 = -cos(angel*(i+1))*radius;
-
-      glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
-      glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
-      glVertex3f(x1+256, y1+256, 0);
-
-      glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
-      glVertex3f(x2+256, y2+256, 0);
-
-
-      float x3 =  sin(angel*i)*minradius;
-      float y3 = -cos(angel*i)*minradius;
-
-      float x4 =  sin(angel*(i+1))*minradius;
-      float y4 = -cos(angel*(i+1))*minradius;
-
-      glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
-      glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
-      glVertex3f(x4+256, y4+256, 0);
-      glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
-      glVertex3f(x3+256, y3+256, 0);
-    }
-  glEnd();
-}
-
 SceneContext::SceneContext()
 {
   impl = new SceneContextImpl();
@@ -225,6 +180,52 @@
   impl->highlight.reset_modelview();
 }
 
+
+void draw_disc(int count)
+{
+  float radius = (count)*2.0f;
+  float minradius = 2.0f*count - 164.0f;
+  if (minradius < 0)
+    minradius = 0;
+  glClear(GL_DEPTH_BUFFER_BIT);
+
+  int segments = 64;
+  
+  glBegin(GL_QUADS);
+  for (int i = 0; i < segments; ++i)
+    {
+      float angel = (2*M_PI / segments);
+
+      float x1 =  sin(angel*i)*radius;
+      float y1 = -cos(angel*i)*radius;
+
+      float x2 =  sin(angel*(i+1))*radius;
+      float y2 = -cos(angel*(i+1))*radius;
+
+      glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+      glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
+      glVertex3f(x1+256, y1+256, 0);
+
+      glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
+      glVertex3f(x2+256, y2+256, 0);
+
+
+      float x3 =  sin(angel*i)*minradius;
+      float y3 = -cos(angel*i)*minradius;
+
+      float x4 =  sin(angel*(i+1))*minradius;
+      float y4 = -cos(angel*(i+1))*minradius;
+
+      glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
+      glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
+      glVertex3f(x4+256, y4+256, 0);
+      glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
+      glVertex3f(x3+256, y3+256, 0);
+    }
+  glEnd();
+}
+
+
 void
 SceneContext::render()
 {
@@ -330,12 +331,46 @@
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);     
 
       if (0)
+        { // test render the blur buffer
+
+          Rectf uv(0, 0, 800, 600);
+          //Rectf uv(0, 0, 1, 1);
+
+          float div = 0.5f;
+          glUseProgramObjectARB(impl->simple_program.get_handle());
+          impl->simple_program.set_uniform1i("background", 0);
+
+          OpenGLState state;
+          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
+          state.activate();
+
+          glBegin(GL_QUADS);
+
+          glTexCoord2f(uv.left, uv.bottom);
+          glVertex2f(0, 0);
+
+          glTexCoord2f(uv.right, uv.bottom);
+          glVertex2f(impl->blur_framebuffer.get_width() * div, 0);
+
+          glTexCoord2f(uv.right, uv.top);
+          glVertex2f(impl->blur_framebuffer.get_width() * div,
+                     impl->blur_framebuffer.get_height() * div);
+
+          glTexCoord2f(uv.left, uv.top);
+          glVertex2f(0, impl->blur_framebuffer.get_height() * div);
+
+          glEnd();         
+          glUseProgramObjectARB(0);
+          glDisable(GL_TEXTURE_RECTANGLE_ARB);
+        }
+
+      if (0)
         { // Draw funny effect with shader
           OpenGLState state;
 
-          Rectf uv = impl->blur_surface.get_uv();
-
-          state.bind_texture(impl->blur_surface.get_texture(), 0);
+          Rectf uv(0, 0, 800, 600);
+          
+          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
           state.bind_texture(impl->noise, 1);
           state.disable(GL_BLEND);
 
@@ -352,14 +387,14 @@
           glVertex2f(0, 0);
 
           glTexCoord2f(uv.right, uv.bottom);
-          glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV, 0);
+          glVertex2f(impl->blur_framebuffer.get_width() * BLURMAP_DIV, 0);
 
           glTexCoord2f(uv.right, uv.top);
-          glVertex2f(impl->blur_surface.get_width() * BLURMAP_DIV,
-                     impl->blur_surface.get_height() * BLURMAP_DIV);
+          glVertex2f(impl->blur_framebuffer.get_width() * BLURMAP_DIV,
+                     impl->blur_framebuffer.get_height() * BLURMAP_DIV);
 
           glTexCoord2f(uv.left, uv.top);
-          glVertex2f(0, impl->blur_surface.get_height() * BLURMAP_DIV);
+          glVertex2f(0, impl->blur_framebuffer.get_height() * BLURMAP_DIV);
 
           glEnd();
 
@@ -367,21 +402,24 @@
         }
     }
 
-  {
-    OpenGLState state;
-    state.bind_texture(impl->blur_surface.get_texture(), 0);
-    state.bind_texture(impl->noise, 1);
-    state.disable(GL_BLEND);
-    state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
-    state.activate();
 
-    glUseProgramObjectARB(impl->shader_program.get_handle());    
-    float radius = 100 * (sinf(SDL_GetTicks()/3000.0f) + 1.0f);
-    impl->shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
-    draw_disc(int(radius));
-    glUseProgramObjectARB(0);
-  }
+  if (1) 
+    {
+      OpenGLState state;
+      state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
+      state.bind_texture(impl->noise, 1);
+      state.disable(GL_BLEND);
+      state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+      state.activate();
 
+      glUseProgramObjectARB(impl->shader_program.get_handle());    
+      float radius = 100 * (sinf(SDL_GetTicks()/3000.0f) + 1.0f);
+      impl->shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
+      draw_disc(int(radius));
+      glUseProgramObjectARB(0);
+    }
+
+
   // Clear all DrawingContexts
   impl->color.clear();
   impl->light.clear();

Modified: trunk/src/display/surface.cpp
===================================================================
--- trunk/src/display/surface.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/surface.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -64,7 +64,7 @@
   impl->width  = width;
   impl->height = height;
 
-  impl->texture = Texture(power_of_two(width), power_of_two(height));
+  impl->texture = Texture(GL_TEXTURE_2D, power_of_two(width), power_of_two(height));
   impl->uv      = Rectf(0, 0,
                         float(impl->width)  / impl->texture.get_width(),
                         float(impl->height) / impl->texture.get_height());

Modified: trunk/src/display/texture.cpp
===================================================================
--- trunk/src/display/texture.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/texture.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -35,6 +35,7 @@
 class TextureImpl
 {
 public:
+  GLenum target;
   GLuint handle;
   int    width;
   int    height;
@@ -62,9 +63,10 @@
   std::cout << "Filename: " << filename << " -> " << get_handle() << std::endl;
 }
 
-Texture::Texture(int width, int height, GLint format)
+Texture::Texture(GLenum target, int width, int height, GLint format)
   : impl(new TextureImpl())
 {
+  impl->target = target;
   impl->width  = width;
   impl->height = height;
 
@@ -72,14 +74,14 @@
   state.bind_texture(*this);
   state.activate();
 
-  glTexImage2D(GL_TEXTURE_2D, 0, format, width, height, 0, GL_RGBA,
+  glTexImage2D(target, 0, format, width, height, 0, GL_RGBA,
                GL_UNSIGNED_BYTE, 0);
 
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+  glTexParameteri(target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+  glTexParameteri(target, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+  glTexParameteri(target, GL_TEXTURE_WRAP_S, GL_CLAMP);
+  glTexParameteri(target, GL_TEXTURE_WRAP_T, GL_CLAMP);
+  glTexParameteri(target, GL_TEXTURE_WRAP_R, GL_CLAMP);
 }
 
 static inline bool is_power_of_2(int v)
@@ -90,6 +92,7 @@
 Texture::Texture(SDL_Surface* image, GLint glformat)
   : impl(new TextureImpl())
 {
+  impl->target = GL_TEXTURE_2D;
   impl->width  = image->w;
   impl->height = image->h;
 
@@ -128,17 +131,17 @@
 
       glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
       glPixelStorei(GL_UNPACK_ROW_LENGTH, image->pitch/format->BytesPerPixel);
-      glTexImage2D(GL_TEXTURE_2D, 0, glformat,
+      glTexImage2D(impl->target, 0, glformat,
                    image->w, image->h, 0, sdl_format,
                    GL_UNSIGNED_BYTE, image->pixels);
 
       assert_gl("creating texture");
 
-      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
-      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
-      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+      glTexParameteri(impl->target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      glTexParameteri(impl->target, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      glTexParameteri(impl->target, GL_TEXTURE_WRAP_S, GL_CLAMP);
+      glTexParameteri(impl->target, GL_TEXTURE_WRAP_T, GL_CLAMP);
+      glTexParameteri(impl->target, GL_TEXTURE_WRAP_R, GL_CLAMP);
 
       assert_gl("setting texture parameters");
     } 
@@ -196,7 +199,7 @@
   glPixelStorei(GL_UNPACK_ROW_LENGTH,
                 image->pitch / image->format->BytesPerPixel);
 
-  glTexSubImage2D(GL_TEXTURE_2D, 0, x, y,
+  glTexSubImage2D(impl->target, 0, x, y,
                   image->w, image->h, sdl_format, GL_UNSIGNED_BYTE,
                   image->pixels);
 }
@@ -208,9 +211,9 @@
   state.bind_texture(*this);
   state.activate();
 
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, mode);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, mode);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, mode); // FIXME: only good for 3d textures?!
+  glTexParameteri(impl->target, GL_TEXTURE_WRAP_S, mode);
+  glTexParameteri(impl->target, GL_TEXTURE_WRAP_T, mode);
+  glTexParameteri(impl->target, GL_TEXTURE_WRAP_R, mode); // FIXME: only good for 3d textures?!
 }
 
 void
@@ -220,8 +223,8 @@
   state.bind_texture(*this);
   state.activate();
 
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, mode);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, mode);
+  glTexParameteri(impl->target, GL_TEXTURE_MIN_FILTER, mode);
+  glTexParameteri(impl->target, GL_TEXTURE_MAG_FILTER, mode);
 }
 
 Texture::operator bool() const
@@ -241,4 +244,10 @@
   return impl.get() != other.impl.get();
 }
 
+GLenum
+Texture::get_target() const
+{
+  return impl->target;
+}
+
 /* EOF */

Modified: trunk/src/display/texture.hpp
===================================================================
--- trunk/src/display/texture.hpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/display/texture.hpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -53,7 +53,7 @@
   /** 
    * Create an empty Texture with the given dimensions
    */
-  explicit Texture(int width, int height, GLint format = GL_RGBA);
+  explicit Texture(GLenum target, int width, int height, GLint format = GL_RGBA);
 
   ~Texture();
 
@@ -74,6 +74,12 @@
   void put(SDL_Surface* image, int x, int y);
 
   GLuint get_handle() const;
+  
+  /**
+   * Return the target used by this texture, ie. GL_TEXTURE_2D or
+   * GL_TEXTURE_RECTANGLE_ARB
+   */ 
+  GLenum get_target() const;
 
   /** true if the Texture is valid and usable, false if not */
   operator bool() const;

Modified: trunk/src/tile_packer.cpp
===================================================================
--- trunk/src/tile_packer.cpp	2006-01-10 22:11:49 UTC (rev 1211)
+++ trunk/src/tile_packer.cpp	2006-01-11 13:34:50 UTC (rev 1212)
@@ -56,7 +56,7 @@
   impl->width  = width;
   impl->height = height;
 
-  impl->texture = Texture(width, height);
+  impl->texture = Texture(GL_TEXTURE_2D, width, height);
         
   assert_gl("setting TilePacker texture parameters"); 
 }



From line72 at berlios.de  Wed Jan 11 17:02:26 2006
From: line72 at berlios.de (line72 at BerliOS)
Date: Wed, 11 Jan 2006 17:02:26 +0100
Subject: [Windstille-commit] r1213 - in trunk/src: . display font gui input lisp math particles physfs signals sprite2d sprite3d
Message-ID: <200601111602.k0BG2QNl024623@sheep.berlios.de>

Author: line72
Date: 2006-01-11 17:02:25 +0100 (Wed, 11 Jan 2006)
New Revision: 1213

Modified:
   trunk/src/Jamfile
   trunk/src/display/Jamfile
   trunk/src/font/Jamfile
   trunk/src/gui/Jamfile
   trunk/src/input/Jamfile
   trunk/src/lisp/Jamfile
   trunk/src/math/Jamfile
   trunk/src/particles/Jamfile
   trunk/src/physfs/Jamfile
   trunk/src/signals/Jamfile
   trunk/src/sprite2d/Jamfile
   trunk/src/sprite3d/Jamfile
Log:
Updated Jamfiles to build everything correctly


Modified: trunk/src/Jamfile
===================================================================
--- trunk/src/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -4,7 +4,6 @@
 SubInclude TOP src collision ;
 SubInclude TOP src display ;
 SubInclude TOP src font ;
-SubInclude TOP src glutil ;
 SubInclude TOP src gui ;
 SubInclude TOP src input ;
 SubInclude TOP src lisp ;
@@ -34,12 +33,15 @@
         camera.hpp
         character.cpp
         character.hpp
-        console.cpp
-        console.hpp
+	color.hpp
         command_line.hpp
         command_line.cpp
         command_line_generic.hpp
         command_line_generic.cpp
+	config.cpp
+	config.hpp
+        console.cpp
+        console.hpp
         controller_def.cpp
         controller_def.hpp
         controller_help_window.hpp
@@ -48,15 +50,14 @@
         conversation.cpp
         dialog_manager.cpp
         dialog_manager.hpp
+	elevator.cpp
+	elevator.hpp
         energy_bar.cpp
         energy_bar.hpp
         entity.cpp
         entity.hpp
-        elevator.hpp
-        elevator.cpp
         field.hpp
-        config.hpp
-        config.cpp
+	file_reader.hpp
         game_object.cpp
         game_object.hpp
         game_session.cpp
@@ -73,19 +74,25 @@
         laser_pointer.cpp
         liquid.hpp
         liquid.cpp
+	lisp_getters.cpp
+	lisp_getters.hpp
         math.hpp
         nightvision.cpp
         nightvision.hpp
+	particle_viewer.cpp
+	particle_viewer.hpp
+        pda.cpp
+        pda.hpp
         physics.cpp
         physics.hpp
-        pda.cpp
-        pda.hpp
         pistol.cpp
         pistol.hpp
         player.cpp
         player.hpp
         random.cpp
         random.hpp
+	ref.hpp
+	refcounter.hpp
         screen.cpp
         screen.hpp
         screen_manager.cpp
@@ -96,23 +103,23 @@
         scriptable_object.cpp
         sector.cpp
         sector.hpp
+	sharedptr.hpp
         spawnpoint.cpp
         spawnpoint.hpp
         sprite3dview.hpp
         sprite3dview.cpp
-        sharedptr.hpp
         test_object.cpp
         test_object.hpp
         text_area.hpp
         text_area.cpp
-        tile.cpp
+	tile.cpp
+        tile.hpp
         tile_factory.cpp
         tile_factory.hpp
+	tile_map.cpp
+	tile_map.hpp
         tile_packer.cpp
         tile_packer.hpp
-        tile.hpp
-        tile_map.cpp
-        tile_map.hpp
         timer.hpp
         timer.cpp
         trigger.cpp
@@ -121,8 +128,7 @@
         util.hpp
         view.cpp
         view.hpp
-        lisp_getters.hpp
-        lisp_getters.cpp
+	weapon.hpp
         windstille_main.cpp
         windstille_main.hpp
 ;

Modified: trunk/src/display/Jamfile
===================================================================
--- trunk/src/display/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/display/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -1,13 +1,31 @@
 SubDir TOP src display ;
 
-sources = display.hpp
-          display.cpp
-          drawing_context.hpp
-          drawing_context.cpp
-          scene_context.hpp
-          scene_context.cpp
-          vertex_array_drawing_request.hpp
-          vertex_array_drawing_request.cpp
+sources = display.cpp
+	  display.hpp
+	  drawing_context.cpp
+	  drawing_context.hpp
+	  drawing_request.hpp
+	  framebuffer.cpp
+	  framebuffer.hpp
+	  opengl_state.cpp
+	  opengl_state.hpp
+	  scene_context.cpp
+	  scene_context.hpp
+	  shader_object.cpp
+	  shader_object.hpp
+	  shader_program.cpp
+	  shader_program.hpp
+	  surface.cpp
+	  surface.hpp
+	  surface_drawing_parameters.hpp
+	  surface_manager.cpp
+	  surface_manager.hpp
+	  texture.cpp
+	  texture.hpp
+	  texture_manager.cpp
+	  texture_manager.hpp
+	  vertex_array_drawing_request.cpp
+	  vertex_array_drawing_request.hpp
 ;
 
 TRANSLATABLE_SOURCES = [ SearchSource $(sources) ] ;

Modified: trunk/src/font/Jamfile
===================================================================
--- trunk/src/font/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/font/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -3,9 +3,9 @@
 sources = 
   border_font_effect.hpp
   border_font_effect.cpp
+  font_effect.hpp
   fonts.hpp
   fonts.cpp
-  font_effect.hpp
   ttf_font.cpp
   ttf_font.hpp
 ;

Modified: trunk/src/gui/Jamfile
===================================================================
--- trunk/src/gui/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/gui/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -9,18 +9,22 @@
   component.cpp
   component_factory.hpp
   component_factory.cpp
+  grid_component.hpp
+  grid_component.cpp
   gui_manager.hpp
   gui_manager.cpp
-  grid_component.hpp
-  grid_component.cpp
+  label.cpp
+  label.hpp
   list_view.hpp
   list_view.cpp
+  root_component.cpp
+  root_component.hpp
+  slider.cpp
+  slider.hpp
   tab_component.hpp
   tab_component.cpp
   text_view.hpp
   text_view.cpp
-  root_component.hpp
-  root_component.cpp
 ;
 
 TRANSLATABLE_SOURCES = [ SearchSource $(sources) ] ;

Modified: trunk/src/input/Jamfile
===================================================================
--- trunk/src/input/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/input/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -5,19 +5,16 @@
     controller.hpp
     controller_description.cpp
     controller_description.hpp
+    input_configurator.hpp
+    input_configurator.cpp
     input_event.hpp
-    input_manager_sdl.cpp
-    input_manager_sdl.hpp
     input_manager.cpp
     input_manager.hpp
     input_manager_impl.cpp
     input_manager_impl.hpp
-    input_manager_player.cpp
-    input_manager_player.hpp
-    input_recorder.cpp
-    input_recorder.hpp
-    input_configurator.hpp
-    input_configurator.cpp
+    input_manager_sdl.cpp
+    input_manager_sdl.hpp
+
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;

Modified: trunk/src/lisp/Jamfile
===================================================================
--- trunk/src/lisp/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/lisp/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -1,18 +1,19 @@
 SubDir TOP src lisp ;
 
 sources =
+  getters.hpp
+  getters.cpp
   lexer.cpp
   lexer.hpp
   lisp.cpp
   lisp.hpp
   parser.cpp
   parser.hpp
+  properties.cpp
+  properties.hpp
+  property_iterator.hpp
   writer.cpp
   writer.hpp
-  properties.cpp
-  properties.hpp
-  getters.hpp
-  getters.cpp
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;

Modified: trunk/src/math/Jamfile
===================================================================
--- trunk/src/math/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/math/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -2,16 +2,17 @@
 
 sources = matrix.hpp
           matrix.cpp
-          rect.hpp
-          rect.cpp
-          vector.hpp
-          vector.cpp
-          size.hpp
           origin.hpp
           origin.cpp
           point.hpp
           quaternion.hpp
           quaternion.cpp
+          rect.hpp
+          rect.cpp
+          size.hpp
+          vector.hpp
+          vector.cpp
+	  vector3.hpp
 ;
 
 TRANSLATABLE_SOURCES = [ SearchSource $(sources) ] ;

Modified: trunk/src/particles/Jamfile
===================================================================
--- trunk/src/particles/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/particles/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -1,13 +1,13 @@
 SubDir TOP src particles ;
 
-sources = particle_system.hpp
+sources = drawer.hpp
+	  particle_system.hpp
           particle_system.cpp
-          drawer.hpp
+          randomizer.hpp
           spark_drawer.cpp
           spark_drawer.hpp
           surface_drawer.cpp
           surface_drawer.hpp
-          randomizer.hpp
 ;
 
 TRANSLATABLE_SOURCES = [ SearchSource $(sources) ] ;

Modified: trunk/src/physfs/Jamfile
===================================================================
--- trunk/src/physfs/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/physfs/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -1,10 +1,10 @@
 SubDir TOP src physfs ;
 
 sources = 
+    physfs_sdl.cpp
+    physfs_sdl.hpp
     physfs_stream.cpp
     physfs_stream.hpp
-    physfs_sdl.cpp
-    physfs_sdl.hpp
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;

Modified: trunk/src/signals/Jamfile
===================================================================
--- trunk/src/signals/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/signals/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -1,11 +1,25 @@
 SubDir TOP src signals ;
 
-sources = 
-slot.cpp  slot_generic.cpp
-signal.hpp     signal_v3.hpp	  slotbuffer_v1.hpp   slot_v0.hpp  slot_v4.hpp
-signal_v0.hpp  signal_v4.hpp	   slot_v1.hpp  slot_v5.hpp
-signal_v1.hpp  signal_v5.hpp	  slot_generic.hpp    slot_v2.hpp
-signal_v2.hpp  slotbuffer_v0.hpp  slot.hpp	      slot_v3.hpp signals.hpp
+sources = signal.hpp
+	  signal_v0.hpp
+	  signal_v1.hpp
+	  signal_v2.hpp
+	  signal_v3.hpp
+	  signal_v4.hpp
+	  signal_v5.hpp
+	  signals.hpp
+	  slot.cpp
+	  slot.hpp
+	  slot_generic.cpp
+	  slot_generic.hpp
+	  slot_v0.hpp
+	  slot_v1.hpp
+	  slot_v2.hpp
+	  slot_v3.hpp
+	  slot_v4.hpp
+	  slot_v5.hpp
+	  slotbuffer_v0.hpp
+	  slotbuffer_v1.hpp
 ;
 
 TRANSLATABLE_SOURCES = [ SearchSource $(sources) ] ;

Modified: trunk/src/sprite2d/Jamfile
===================================================================
--- trunk/src/sprite2d/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/sprite2d/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -3,10 +3,10 @@
 sources =
     data.cpp
     data.hpp
+    manager.cpp
+    manager.hpp
     sprite.cpp
     sprite.hpp
-    manager.cpp
-    manager.hpp
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;

Modified: trunk/src/sprite3d/Jamfile
===================================================================
--- trunk/src/sprite3d/Jamfile	2006-01-11 13:34:50 UTC (rev 1212)
+++ trunk/src/sprite3d/Jamfile	2006-01-11 16:02:25 UTC (rev 1213)
@@ -3,10 +3,10 @@
 sources =
   data.cpp
   data.hpp
+  manager.cpp
+  manager.hpp
   sprite3d.cpp
   sprite3d.hpp
-  manager.cpp
-  manager.hpp
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;



From grumbel at berlios.de  Wed Jan 11 17:20:14 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 11 Jan 2006 17:20:14 +0100
Subject: [Windstille-commit] r1214 - in trunk/src: . display
Message-ID: <200601111620.k0BGKE85026453@sheep.berlios.de>

Author: grumbel
Date: 2006-01-11 17:20:12 +0100 (Wed, 11 Jan 2006)
New Revision: 1214

Modified:
   trunk/src/display/display.cpp
   trunk/src/display/display.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/scene_context.hpp
   trunk/src/screen_manager.cpp
Log:
- added screenshot support

Modified: trunk/src/display/display.cpp
===================================================================
--- trunk/src/display/display.cpp	2006-01-11 16:02:25 UTC (rev 1213)
+++ trunk/src/display/display.cpp	2006-01-11 16:20:12 UTC (rev 1214)
@@ -23,9 +23,13 @@
 **  02111-1307, USA.
 */
 
-#include <cmath>
+#include <png.h>
+#include <math.h>
+#include <errno.h>
+#include <fstream>
 #include <stdexcept>
 #include <SDL.h>
+#include "console.hpp"
 #include "config.hpp"
 #include "display/opengl_state.hpp"
 #include "display.hpp"
@@ -360,4 +364,86 @@
     }
 }
 
+void
+Display::save_screenshot(const std::string& filename)
+{
+  int len = get_width() * get_height() * 3;
+  GLbyte pixels[len];
+  glReadPixels(0, 0, get_width(), get_height(), GL_RGB, GL_UNSIGNED_BYTE, pixels);
+
+  if (0)
+    {
+      int pitch = get_width() * 3;
+
+      // save to ppm
+      std::ofstream out(filename.c_str());
+      out << "P6\n"
+          << "# Windstille Screenshot\n"
+          << get_width() << " " << get_height() << "\n"
+          << "255\n";
+      
+      for(int y = get_height()-1; y >= 0; --y)
+        out.write(reinterpret_cast<const char*>(pixels + y*pitch), pitch);
+
+      out.close();
+    }
+  else if (0) // BMP saving
+    {
+#if SDL_BYTEORDER == SDL_BIG_ENDIAN
+      SDL_Surface* surface = SDL_CreateRGBSurfaceFrom(pixels, get_width(), get_height(), 24, get_width()*3,
+                                                      0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
+#else
+      SDL_Surface* surface = SDL_CreateRGBSurfaceFrom(pixels, get_width(), get_height(), 24, get_width()*3,
+                                                      0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
+#endif
+
+      SDL_SaveBMP(surface, filename.c_str());
+      SDL_FreeSurface(surface);
+    }
+  else // PNG saving
+    {
+      FILE* fp = fopen(filename.c_str(), "w");
+
+      if (!fp)
+        {
+          console << "Error: Couldn't save screenshot: " << strerror(errno) << std::endl;
+          return;
+        }
+      else
+        {
+          int pitch   = get_width() * 3;
+          png_structp png_ptr;
+          png_infop   info_ptr;
+
+          png_ptr  = png_create_write_struct(PNG_LIBPNG_VER_STRING, NULL, NULL, NULL);
+          info_ptr = png_create_info_struct(png_ptr);
+
+          png_init_io(png_ptr, fp);
+
+          png_set_IHDR(png_ptr, info_ptr, 
+                       get_width(), get_height(), 8 /* bitdepth */,
+                       PNG_COLOR_TYPE_RGB,
+                       PNG_INTERLACE_NONE, 
+                       PNG_COMPRESSION_TYPE_BASE, 
+                       PNG_FILTER_TYPE_BASE);
+      
+          png_set_compression_level(png_ptr, 6);
+          png_write_info(png_ptr, info_ptr);
+
+          png_uint_32 height = get_height();
+          png_bytep row_pointers[height];
+   
+          // generate row pointers
+          for (unsigned int k = 0; k < height; k++)
+            row_pointers[k] = reinterpret_cast<png_byte*>(pixels + ((height - k - 1) * pitch));
+
+          png_write_image(png_ptr, row_pointers);
+
+          png_write_end(png_ptr, info_ptr);
+
+          fclose(fp);
+        }
+    }
+}
+
 /* EOF */

Modified: trunk/src/display/display.hpp
===================================================================
--- trunk/src/display/display.hpp	2006-01-11 16:02:25 UTC (rev 1213)
+++ trunk/src/display/display.hpp	2006-01-11 16:20:12 UTC (rev 1214)
@@ -59,6 +59,8 @@
 
   static void set_gamma(float r, float g, float b);
 
+  static void save_screenshot(const std::string& filename);
+
   static void init();
 };
 

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-11 16:02:25 UTC (rev 1213)
+++ trunk/src/display/scene_context.cpp	2006-01-11 16:20:12 UTC (rev 1214)
@@ -225,8 +225,53 @@
   glEnd();
 }
 
+void
+SceneContext::render_lightmap()
+{
+  // FIXME: 2006-01-09: shouldn't use Surface and just discard the
+  // borders of a power of two texture, but instead use them and
+  // set UV accordingly
+  OpenGLState state;
 
+  Rectf uv = impl->lightmap.get_uv();
+
+  state.bind_texture(impl->lightmap.get_texture());
+      
+  state.enable(GL_BLEND);
+  state.set_blend_func(GL_DST_COLOR, GL_ZERO);
+  state.activate();
+
+  glBegin(GL_QUADS);
+
+  glTexCoord2f(uv.left, uv.bottom);
+  glVertex2f(0, 0);
+
+  glTexCoord2f(uv.right, uv.bottom);
+  glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV, 0);
+
+  glTexCoord2f(uv.right, uv.top);
+  glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV,
+             impl->lightmap.get_height() * LIGHTMAP_DIV);
+
+  glTexCoord2f(uv.left, uv.top);
+  glVertex2f(0, impl->lightmap.get_height() * LIGHTMAP_DIV);
+
+  glEnd();
+}
+
 void
+SceneContext::render_colormap()
+{
+  
+}
+
+void
+SceneContext::render_highlightmap()
+{
+  
+}
+
+void
 SceneContext::render()
 {
   glClear(GL_DEPTH_BUFFER_BIT);
@@ -281,35 +326,7 @@
 
   if (impl->render_mask & LIGHTMAP)
     {
-      // FIXME: 2006-01-09: shouldn't use Surface and just discard the
-      // borders of a power of two texture, but instead use them and
-      // set UV accordingly
-      OpenGLState state;
-
-      Rectf uv = impl->lightmap.get_uv();
-
-      state.bind_texture(impl->lightmap.get_texture());
-      
-      state.enable(GL_BLEND);
-      state.set_blend_func(GL_DST_COLOR, GL_ZERO);
-      state.activate();
-
-      glBegin(GL_QUADS);
-
-      glTexCoord2f(uv.left, uv.bottom);
-      glVertex2f(0, 0);
-
-      glTexCoord2f(uv.right, uv.bottom);
-      glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV, 0);
-
-      glTexCoord2f(uv.right, uv.top);
-      glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV,
-                 impl->lightmap.get_height() * LIGHTMAP_DIV);
-
-      glTexCoord2f(uv.left, uv.top);
-      glVertex2f(0, impl->lightmap.get_height() * LIGHTMAP_DIV);
-
-      glEnd();
+      render_lightmap();
     }
 
   if (impl->render_mask & HIGHLIGHTMAP)
@@ -326,6 +343,8 @@
       glTranslatef(0, 600-(600/BLURMAP_DIV), 0);
       glScalef(1.0f/BLURMAP_DIV, 1.0f/BLURMAP_DIV, 1.0f);
       impl->color.render();
+      render_lightmap();
+      impl->highlight.render();
       glPopMatrix();
 
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);     
@@ -402,7 +421,34 @@
         }
     }
 
+      if (0)
+        { // Zoom
+          OpenGLState state;
 
+          Rectf uv(300+50, 200+50, 500-50, 400-50);
+          
+          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
+          state.activate();
+
+          glBegin(GL_QUADS);
+
+          glTexCoord2f(uv.left, uv.bottom);
+          glVertex2f(300, 200);
+
+          glTexCoord2f(uv.right, uv.bottom);
+          glVertex2f(500, 200);
+
+          glTexCoord2f(uv.right, uv.top);
+          glVertex2f(500, 400);
+
+          glTexCoord2f(uv.left, uv.top);
+          glVertex2f(300, 400);
+
+          glEnd();
+
+        }
+
+
   if (1) 
     {
       OpenGLState state;

Modified: trunk/src/display/scene_context.hpp
===================================================================
--- trunk/src/display/scene_context.hpp	2006-01-11 16:02:25 UTC (rev 1213)
+++ trunk/src/display/scene_context.hpp	2006-01-11 16:20:12 UTC (rev 1214)
@@ -91,6 +91,9 @@
 
   DrawingContext& get_layer(unsigned int t);
 
+  void render_lightmap();
+  void render_colormap();
+  void render_highlightmap();
 private:
   SceneContextImpl* impl;
 

Modified: trunk/src/screen_manager.cpp
===================================================================
--- trunk/src/screen_manager.cpp	2006-01-11 16:02:25 UTC (rev 1213)
+++ trunk/src/screen_manager.cpp	2006-01-11 16:20:12 UTC (rev 1214)
@@ -23,7 +23,9 @@
 **  02111-1307, USA.
 */
 
+#include <boost/format.hpp>
 #include <iostream>
+#include <unistd.h>
 #include "game_session.hpp"
 #include "input/input_manager_sdl.hpp"
 #include "display/display.hpp"
@@ -242,10 +244,17 @@
                   break;
               
                 case SDLK_F12:
-                  // FIXME: Implement me for SDL
                   {
-                    std::string filename = "screenshot.png";
-                    std::cout << "Saving screenshot *NOT* to: " << filename << std::endl;
+                    // FIXME: Replace this with Physfs stuff
+                    int count = 0;
+                    std::string filename;
+                    do {
+                      filename = (boost::format("/tmp/windstille%05d.png") % count).str();
+                      count += 1;
+                    } while(access(filename.c_str(), F_OK) == 0);
+
+                    Display::save_screenshot(filename);
+                    console << "Writing screenshot to: '" << filename << "'" << std::endl;
                   }
                   break;
               



From grumbel at berlios.de  Wed Jan 11 23:35:34 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 11 Jan 2006 23:35:34 +0100
Subject: [Windstille-commit] r1215 - in trunk/src: . display
Message-ID: <200601112235.k0BMZYP1004021@sheep.berlios.de>

Author: grumbel
Date: 2006-01-11 23:35:33 +0100 (Wed, 11 Jan 2006)
New Revision: 1215

Added:
   trunk/src/shockwave.cpp
   trunk/src/shockwave.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/drawing_context.cpp
   trunk/src/display/drawing_context.hpp
   trunk/src/display/drawing_request.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/scene_context.hpp
   trunk/src/screen_manager.cpp
   trunk/src/sector.cpp
Log:
- integrated shader support a bit better into the DrawingContext/Request stuff

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/SConscript	2006-01-11 22:35:33 UTC (rev 1215)
@@ -72,6 +72,7 @@
 'screen_manager.cpp',
 'scriptable_object.cpp',
 'script_manager.cpp',
+'shockwave.cpp',
 'sector.cpp',
 'spawnpoint.cpp',
 'sprite3dview.cpp',

Modified: trunk/src/display/drawing_context.cpp
===================================================================
--- trunk/src/display/drawing_context.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/display/drawing_context.cpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -33,6 +33,7 @@
 #include "display/opengl_state.hpp"
 #include "display/surface_drawing_parameters.hpp"
 #include "display/vertex_array_drawing_request.hpp"
+#include "display/scene_context.hpp"
 #include "display/surface.hpp"
 
 struct DrawingRequestsSorter
@@ -117,12 +118,15 @@
 }
 
 void
-DrawingContext::render()
+DrawingContext::render(SceneContext& sc)
 {
   std::stable_sort(drawingrequests.begin(), drawingrequests.end(), DrawingRequestsSorter());
   
   for(DrawingRequests::iterator i = drawingrequests.begin(); i != drawingrequests.end(); ++i)
     {
+      if ((*i)->needs_framebuffer())
+        (*i)->set_framebuffer_texture(sc.request_framebuffer_texture((*i)->framebuffer_rect()));
+      
       (*i)->draw();
     }
 }

Modified: trunk/src/display/drawing_context.hpp
===================================================================
--- trunk/src/display/drawing_context.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/display/drawing_context.hpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -35,6 +35,7 @@
 
 class Surface;
 class SurfaceDrawingParameters;
+class SceneContext;
 class Sprite;
 
 /** The DrawingContext collects all DrawingRequests and allows you to
@@ -56,7 +57,7 @@
   ~DrawingContext();
 
   /** Draws everything in the drawing context to the screen */
-  void render();
+  void render(SceneContext& sc);
 
   /** Empties the drawing context */
   void clear();

Modified: trunk/src/display/drawing_request.hpp
===================================================================
--- trunk/src/display/drawing_request.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/display/drawing_request.hpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -27,17 +27,19 @@
 #define HEADER_DRAWING_REQUEST_HXX
 
 #include "math/vector.hpp"
+#include "math/rect.hpp"
 #include "math/matrix.hpp"
+#include "texture.hpp"
 
 /** 
  */
 class DrawingRequest
 {
 protected:
-  Vector pos;
-  float  z_pos;
-  Matrix modelview;
-
+  Vector  pos;
+  float   z_pos;
+  Matrix  modelview;
+  Texture framebuffer_texture;
 public:
   DrawingRequest(const Vector& pos_, float z_pos = 0,  const Matrix& modelview_ = Matrix::identity())
     : pos(pos_), z_pos(z_pos), modelview(modelview_)
@@ -51,6 +53,10 @@
 
   Matrix get_modelview() const
   { return modelview; }
+
+  virtual bool  needs_framebuffer() { return false; }
+  virtual Rectf framebuffer_rect() { return Rectf(); }
+  void set_framebuffer_texture(const Texture& t) { framebuffer_texture = t; }
 private:
   DrawingRequest (const DrawingRequest&);
   DrawingRequest& operator= (const DrawingRequest&);

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/display/scene_context.cpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -50,16 +50,12 @@
   DrawingContext color;
   DrawingContext light;
   DrawingContext highlight; 
-  unsigned int render_mask;
+  unsigned int   render_mask;
 
-  Framebuffer framebuffer;
-  Surface lightmap;
-
-  Framebuffer blur_framebuffer;
-  ShaderProgram shader_program;
-  ShaderProgram simple_program;
-  Texture noise;
-
+  Framebuffer screen_framebuffer;
+  Framebuffer tmp_framebuffer;
+  Framebuffer lightmap_framebuffer;
+  
   SceneContextImpl() 
     : render_mask(SceneContext::COLORMAP |
                   SceneContext::LIGHTMAP | 
@@ -67,28 +63,10 @@
                   SceneContext::LIGHTMAPSCREEN |
                   SceneContext::BLURMAP
                   ),
-      framebuffer(GL_TEXTURE_2D, 256, 256),
-      lightmap(framebuffer.get_texture(), 
-               Rectf(0, 0, (800/LIGHTMAP_DIV)/256.0f, (600/LIGHTMAP_DIV)/256.0f),
-               800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV),
-      //lightmap(800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
-      //blur_framebuffer(GL_TEXTURE_2D, 1024, 1024)
-      blur_framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800, 600)
+      screen_framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800, 600),
+      tmp_framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800, 600),
+      lightmap_framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800/LIGHTMAP_DIV, 600/LIGHTMAP_DIV)
   {
-    shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
-    shader_program.link();
-    noise = Texture("images/noise3.png");
-    noise.set_wrap(GL_REPEAT);
-    noise.set_filter(GL_LINEAR);
-
-    glUseProgramObjectARB(shader_program.get_handle());
-    shader_program.set_uniform1i("background_tex", 0);
-    shader_program.set_uniform1i("noise_tex",   1);
-    shader_program.set_uniform1f("time", fmod(SDL_GetTicks()/10000.0f, 1.0f));
-    glUseProgramObjectARB(0);
-
-    simple_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/simple.frag"));
-    simple_program.link();
   }
 };
 
@@ -228,17 +206,14 @@
 void
 SceneContext::render_lightmap()
 {
-  // FIXME: 2006-01-09: shouldn't use Surface and just discard the
-  // borders of a power of two texture, but instead use them and
-  // set UV accordingly
+  Rect uv(0, 0, impl->lightmap_framebuffer.get_width(), impl->lightmap_framebuffer.get_height());
+
   OpenGLState state;
 
-  Rectf uv = impl->lightmap.get_uv();
-
-  state.bind_texture(impl->lightmap.get_texture());
+  state.bind_texture(impl->lightmap_framebuffer.get_texture());
       
   state.enable(GL_BLEND);
-  state.set_blend_func(GL_DST_COLOR, GL_ZERO);
+  state.set_blend_func(GL_DST_COLOR, GL_ZERO); // multiple the lightmap with the screen
   state.activate();
 
   glBegin(GL_QUADS);
@@ -247,14 +222,14 @@
   glVertex2f(0, 0);
 
   glTexCoord2f(uv.right, uv.bottom);
-  glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV, 0);
+  glVertex2f(impl->lightmap_framebuffer.get_width() * LIGHTMAP_DIV, 0);
 
   glTexCoord2f(uv.right, uv.top);
-  glVertex2f(impl->lightmap.get_width() * LIGHTMAP_DIV,
-             impl->lightmap.get_height() * LIGHTMAP_DIV);
+  glVertex2f(impl->lightmap_framebuffer.get_width() * LIGHTMAP_DIV,
+             impl->lightmap_framebuffer.get_height() * LIGHTMAP_DIV);
 
   glTexCoord2f(uv.left, uv.top);
-  glVertex2f(0, impl->lightmap.get_height() * LIGHTMAP_DIV);
+  glVertex2f(0, impl->lightmap_framebuffer.get_height() * LIGHTMAP_DIV);
 
   glEnd();
 }
@@ -278,194 +253,84 @@
       
   if (impl->render_mask & LIGHTMAPSCREEN)
     {
-      if (0)
-        { // render lightmap to screen
-          Display::push_cliprect(Rect(Point(0, 0),
-                                      Size(impl->lightmap.get_width(), impl->lightmap.get_height())));
+      // Render the lightmap to the lightmap_framebuffer
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->lightmap_framebuffer.get_handle());
 
-          glPushMatrix();
-          glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
+      glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
-          impl->light.render();
-          glPopMatrix();
-      
-          {
-            OpenGLState state;
-        
-            // Weird y-pos is needed since OpenGL is upside down when it comes to y-coordinate
-            state.bind_texture(impl->lightmap.get_texture());
-            state.activate();
+      glPushMatrix();
+      glTranslatef(0, 600-(600/LIGHTMAP_DIV), 0);
+      glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
+      impl->light.render(*this);
+      glPopMatrix();
 
-            glCopyTexSubImage2D(GL_TEXTURE_2D, 0,
-                                0, 0, 
-                                0, Display::get_height() - impl->lightmap.get_height(),
-                                impl->lightmap.get_width(), impl->lightmap.get_height());
-          }
-
-          Display::pop_cliprect();
-        }
-      else
-        {
-          glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->framebuffer.get_handle());
-          glClear(GL_DEPTH_BUFFER_BIT);
-
-          glPushMatrix();
-          glTranslatef(0, 600-(600/LIGHTMAP_DIV), 0);
-          glScalef(1.0f/LIGHTMAP_DIV, 1.0f/LIGHTMAP_DIV, 1.0f);
-          impl->light.render();
-          glPopMatrix();
-
-          glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
-        }
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 
   if (impl->render_mask & COLORMAP)
     {
-      impl->color.render();
+      // Render the colormap to the screen_framebuffer
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      impl->color.render(*this);
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 
+
   if (impl->render_mask & LIGHTMAP)
-    {
+    { // Renders the lightmap to the screen
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
       render_lightmap();
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 
   if (impl->render_mask & HIGHLIGHTMAP)
     {
-      impl->highlight.render();
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      impl->highlight.render(*this);
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 
-  if (impl->render_mask & BLURMAP)
     {
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->blur_framebuffer.get_handle());
-      glClear(GL_DEPTH_BUFFER_BIT);
+      // Render the screen framebuffer to the actual screen 
+      OpenGLState state;
 
-      glPushMatrix();
-      glTranslatef(0, 600-(600/BLURMAP_DIV), 0);
-      glScalef(1.0f/BLURMAP_DIV, 1.0f/BLURMAP_DIV, 1.0f);
-      impl->color.render();
-      render_lightmap();
-      impl->highlight.render();
-      glPopMatrix();
-
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);     
-
-      if (0)
-        { // test render the blur buffer
-
-          Rectf uv(0, 0, 800, 600);
-          //Rectf uv(0, 0, 1, 1);
-
-          float div = 0.5f;
-          glUseProgramObjectARB(impl->simple_program.get_handle());
-          impl->simple_program.set_uniform1i("background", 0);
-
-          OpenGLState state;
-          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
-          state.activate();
-
-          glBegin(GL_QUADS);
-
-          glTexCoord2f(uv.left, uv.bottom);
-          glVertex2f(0, 0);
-
-          glTexCoord2f(uv.right, uv.bottom);
-          glVertex2f(impl->blur_framebuffer.get_width() * div, 0);
-
-          glTexCoord2f(uv.right, uv.top);
-          glVertex2f(impl->blur_framebuffer.get_width() * div,
-                     impl->blur_framebuffer.get_height() * div);
-
-          glTexCoord2f(uv.left, uv.top);
-          glVertex2f(0, impl->blur_framebuffer.get_height() * div);
-
-          glEnd();         
-          glUseProgramObjectARB(0);
-          glDisable(GL_TEXTURE_RECTANGLE_ARB);
-        }
-
-      if (0)
-        { // Draw funny effect with shader
-          OpenGLState state;
-
-          Rectf uv(0, 0, 800, 600);
+      Rectf uv(0.375, 0.375, 
+               impl->screen_framebuffer.get_width()  + 0.375,
+               impl->screen_framebuffer.get_height() + 0.375);
           
-          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
-          state.bind_texture(impl->noise, 1);
-          state.disable(GL_BLEND);
+      state.bind_texture(impl->screen_framebuffer.get_texture(), 0);
+      state.activate();
 
-          //state.enable(GL_BLEND);
-          //state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-          //state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
-          state.activate();
+      glBegin(GL_QUADS);
 
-          glUseProgramObjectARB(impl->shader_program.get_handle());
+      glTexCoord2f(uv.left, uv.bottom);
+      glVertex2f(0, 0);
 
-          glBegin(GL_QUADS);
+      glTexCoord2f(uv.right, uv.bottom);
+      glVertex2f(800, 0);
 
-          glTexCoord2f(uv.left, uv.bottom);
-          glVertex2f(0, 0);
+      glTexCoord2f(uv.right, uv.top);
+      glVertex2f(800, 600);
 
-          glTexCoord2f(uv.right, uv.bottom);
-          glVertex2f(impl->blur_framebuffer.get_width() * BLURMAP_DIV, 0);
+      glTexCoord2f(uv.left, uv.top);
+      glVertex2f(0, 600);
 
-          glTexCoord2f(uv.right, uv.top);
-          glVertex2f(impl->blur_framebuffer.get_width() * BLURMAP_DIV,
-                     impl->blur_framebuffer.get_height() * BLURMAP_DIV);
-
-          glTexCoord2f(uv.left, uv.top);
-          glVertex2f(0, impl->blur_framebuffer.get_height() * BLURMAP_DIV);
-
-          glEnd();
-
-          glUseProgramObjectARB(0);
-        }
+      glEnd();
     }
 
-      if (0)
-        { // Zoom
-          OpenGLState state;
+    /*
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->blur_framebuffer.get_handle());
+      glClear(GL_DEPTH_BUFFER_BIT);
 
-          Rectf uv(300+50, 200+50, 500-50, 400-50);
-          
-          state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
-          state.activate();
+      glPushMatrix();
+      glTranslatef(0, 600-(600/BLURMAP_DIV), 0);
+      glScalef(1.0f/BLURMAP_DIV, 1.0f/BLURMAP_DIV, 1.0f);
+      impl->color.render();
+      render_lightmap();
+      impl->highlight.render();
+      glPopMatrix();
+    */
 
-          glBegin(GL_QUADS);
-
-          glTexCoord2f(uv.left, uv.bottom);
-          glVertex2f(300, 200);
-
-          glTexCoord2f(uv.right, uv.bottom);
-          glVertex2f(500, 200);
-
-          glTexCoord2f(uv.right, uv.top);
-          glVertex2f(500, 400);
-
-          glTexCoord2f(uv.left, uv.top);
-          glVertex2f(300, 400);
-
-          glEnd();
-
-        }
-
-
-  if (1) 
-    {
-      OpenGLState state;
-      state.bind_texture(impl->blur_framebuffer.get_texture(), 0);
-      state.bind_texture(impl->noise, 1);
-      state.disable(GL_BLEND);
-      state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
-      state.activate();
-
-      glUseProgramObjectARB(impl->shader_program.get_handle());    
-      float radius = 100 * (sinf(SDL_GetTicks()/3000.0f) + 1.0f);
-      impl->shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
-      draw_disc(int(radius));
-      glUseProgramObjectARB(0);
-    }
-
-
   // Clear all DrawingContexts
   impl->color.clear();
   impl->light.clear();
@@ -503,4 +368,41 @@
     }
 }
 
+Texture
+SceneContext::request_framebuffer_texture(const Rectf& rect)
+{
+  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
+
+  {
+    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+    // Render the screen framebuffer to the actual screen 
+    OpenGLState state;
+    state.bind_texture(impl->screen_framebuffer.get_texture(), 0);
+    state.activate();
+
+    glBegin(GL_QUADS);
+    
+    glTexCoord2f(rect.left, rect.bottom);
+    glVertex2f(rect.left, rect.top);
+
+    glTexCoord2f(rect.right, rect.bottom);
+    glVertex2f(rect.right, rect.top);
+
+    glTexCoord2f(rect.right, rect.top);
+    glVertex2f(rect.right, rect.bottom);
+
+    glTexCoord2f(rect.left, rect.top);
+    glVertex2f(rect.left, rect.bottom);
+    
+    glEnd();
+  } 
+
+  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+
+  // FIXME: Hacky, hacky, need something like push/pop_framebuffer to avoid this
+  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+
+  return impl->tmp_framebuffer.get_texture();
+}
+
 /* EOF */

Modified: trunk/src/display/scene_context.hpp
===================================================================
--- trunk/src/display/scene_context.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/display/scene_context.hpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -90,6 +90,7 @@
   unsigned int get_render_mask();
 
   DrawingContext& get_layer(unsigned int t);
+  Texture request_framebuffer_texture(const Rectf& rect);
 
   void render_lightmap();
   void render_colormap();

Modified: trunk/src/screen_manager.cpp
===================================================================
--- trunk/src/screen_manager.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/screen_manager.cpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -249,7 +249,7 @@
                     int count = 0;
                     std::string filename;
                     do {
-                      filename = (boost::format("/tmp/windstille%05d.png") % count).str();
+                      filename = (boost::format("/tmp/windstille%04d.png") % count).str();
                       count += 1;
                     } while(access(filename.c_str(), F_OK) == 0);
 

Modified: trunk/src/sector.cpp
===================================================================
--- trunk/src/sector.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/sector.cpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -46,6 +46,7 @@
 #include "laser_pointer.hpp"
 #include "badguy/swarm.hpp"
 #include "liquid.hpp"
+#include "shockwave.hpp"
 #include "badguy/hedgehog.hpp"
 #include "badguy/spider_mine.hpp"
 #include "box.hpp"
@@ -169,6 +170,8 @@
     add(new Trigger(props));
   } else if(name == "box") {
     add(new Box(props));
+  } else if(name == "shockwave") {
+    add(new Shockwave(props));
   } else if(name == "elevator") {
     add(new Elevator(props));
   } else if(name == "character") {    

Added: trunk/src/shockwave.cpp
===================================================================
--- trunk/src/shockwave.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/shockwave.cpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -0,0 +1,193 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "display/opengl_state.hpp"
+#include "display/drawing_request.hpp"
+#include "display/texture.hpp"
+#include "display/shader_program.hpp"
+#include "display/shader_object.hpp"
+#include "shockwave.hpp"
+
+class ShockwaveDrawingRequest : public DrawingRequest
+{
+public:
+  Texture       noise;
+  ShaderProgram shader_program;
+  float radius;
+
+  ShockwaveDrawingRequest(const Vector& pos, 
+                          const Texture&       noise_,
+                          const ShaderProgram& shader_program_,
+                          float r,
+                          const Matrix& modelview_) 
+    : DrawingRequest(pos, 500.0f, modelview_),
+      noise(noise_),
+      shader_program(shader_program_),
+      radius(r)
+  {
+  }
+
+  ~ShockwaveDrawingRequest()
+  {
+  }
+
+  bool  needs_framebuffer()
+  {
+    return true; 
+  }
+  
+  Rectf framebuffer_rect() 
+  {
+    return Rectf(0, 0, 800, 600); 
+  }
+  
+  void draw()
+  {
+    glPushMatrix();
+    glMultMatrixf(modelview.matrix);
+    if (0)
+      {
+        Rectf rect(0, 0, 800, 600);
+        // Render the screen framebuffer to the actual screen 
+        OpenGLState state;
+        state.bind_texture(framebuffer_texture, 0);
+        state.activate();
+
+        glBegin(GL_QUADS);
+    
+        glTexCoord2f(rect.left, rect.bottom);
+        glVertex2f(rect.left/2.0f, rect.bottom/2.0f);
+
+        glTexCoord2f(rect.right, rect.bottom);
+        glVertex2f(rect.right/2.0f, rect.bottom/2.0f);
+
+        glTexCoord2f(rect.right, rect.top);
+        glVertex2f(rect.right/2.0f, rect.top/2.0f);
+
+        glTexCoord2f(rect.left, rect.top);
+        glVertex2f(rect.left/2.0f, rect.top/2.0f);
+    
+        glEnd();
+      }
+    else
+      {
+        OpenGLState state;
+        state.bind_texture(framebuffer_texture, 0);
+        state.bind_texture(noise, 1);
+        state.disable(GL_BLEND);
+        state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+        state.activate();
+
+        glUseProgramObjectARB(shader_program.get_handle());    
+        shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
+        shader_program.set_uniform1i("background_tex", 0);
+        shader_program.set_uniform1i("noise_tex",   1);
+        draw_disc(int(radius));
+        glUseProgramObjectARB(0);
+      }
+    glPopMatrix();
+  }
+
+  void draw_disc(int count)
+  {
+    float radius = (count)*2.0f;
+    float minradius = 2.0f*count - 164.0f;
+    if (minradius < 0)
+      minradius = 0;
+    glClear(GL_DEPTH_BUFFER_BIT);
+
+    int segments = 64;
+  
+    glBegin(GL_QUADS);
+    for (int i = 0; i < segments; ++i)
+      {
+        float angel = (2*M_PI / segments);
+
+        float x1 =  sin(angel*i)*radius;
+        float y1 = -cos(angel*i)*radius;
+
+        float x2 =  sin(angel*(i+1))*radius;
+        float y2 = -cos(angel*(i+1))*radius;
+
+        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+        glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
+        glVertex3f(x1+256, y1+256, 0);
+
+        glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
+        glVertex3f(x2+256, y2+256, 0);
+
+
+        float x3 =  sin(angel*i)*minradius;
+        float y3 = -cos(angel*i)*minradius;
+
+        float x4 =  sin(angel*(i+1))*minradius;
+        float y4 = -cos(angel*(i+1))*minradius;
+
+        glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
+        glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
+        glVertex3f(x4+256, y4+256, 0);
+        glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
+        glVertex3f(x3+256, y3+256, 0);
+      }
+    glEnd();
+  }
+};
+
+Shockwave::Shockwave(FileReader& props)
+  : noise("images/noise3.png")
+{
+  props.get("pos", pos);
+  props.print_unused_warnings("Shockwave");
+
+  radius = 100.0f;
+
+  noise.set_wrap(GL_REPEAT);
+  noise.set_filter(GL_LINEAR);
+
+  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
+  shader_program.link();
+}
+
+Shockwave::~Shockwave()
+{
+}
+
+void
+Shockwave::draw (SceneContext& sc)
+{
+  sc.highlight().draw(new ShockwaveDrawingRequest(pos,
+                                                   noise,
+                                                   shader_program,
+                                                   radius,
+                                                   sc.color().get_modelview()));
+}
+
+void
+Shockwave::update (float delta)
+{
+  radius = (sinf(SDL_GetTicks() / 500.0f) + 1.0f) * 100.0f;
+}
+
+/* EOF */

Added: trunk/src/shockwave.hpp
===================================================================
--- trunk/src/shockwave.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/shockwave.hpp	2006-01-11 22:35:33 UTC (rev 1215)
@@ -0,0 +1,55 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SHOCKWAVE_HPP
+#define HEADER_SHOCKWAVE_HPP
+
+#include "display/shader_program.hpp"
+#include "display/texture.hpp"
+#include "game_object.hpp"
+
+/** */
+class Shockwave : public GameObject
+{
+private:
+  Vector        pos;
+  Texture       noise;
+  ShaderProgram shader_program;
+  float radius;
+public:
+  Shockwave(FileReader& props);
+  ~Shockwave();
+
+  void draw (SceneContext& context);
+  void update (float delta);
+
+private:
+  Shockwave (const Shockwave&);
+  Shockwave& operator= (const Shockwave&);
+};
+
+#endif
+
+/* EOF */



From line72 at berlios.de  Thu Jan 12 00:01:16 2006
From: line72 at berlios.de (line72 at BerliOS)
Date: Thu, 12 Jan 2006 00:01:16 +0100
Subject: [Windstille-commit] r1216 - trunk/src
Message-ID: <200601112301.k0BN1GXr006581@sheep.berlios.de>

Author: line72
Date: 2006-01-12 00:01:15 +0100 (Thu, 12 Jan 2006)
New Revision: 1216

Modified:
   trunk/src/Jamfile
Log:
updated jamfiles


Modified: trunk/src/Jamfile
===================================================================
--- trunk/src/Jamfile	2006-01-11 22:35:33 UTC (rev 1215)
+++ trunk/src/Jamfile	2006-01-11 23:01:15 UTC (rev 1216)
@@ -104,6 +104,8 @@
         sector.cpp
         sector.hpp
 	sharedptr.hpp
+	shockwave.cpp
+	shockwave.hpp
         spawnpoint.cpp
         spawnpoint.hpp
         sprite3dview.hpp



From grumbel at berlios.de  Thu Jan 12 00:04:21 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 12 Jan 2006 00:04:21 +0100
Subject: [Windstille-commit] r1217 - in trunk: data/shader src src/display
Message-ID: <200601112304.k0BN4L2x006936@sheep.berlios.de>

Author: grumbel
Date: 2006-01-12 00:04:21 +0100 (Thu, 12 Jan 2006)
New Revision: 1217

Modified:
   trunk/data/shader/shockwave2.frag
   trunk/src/display/scene_context.cpp
   trunk/src/shockwave.cpp
Log:
- added fadeout to shockwave

Modified: trunk/data/shader/shockwave2.frag
===================================================================
--- trunk/data/shader/shockwave2.frag	2006-01-11 23:01:15 UTC (rev 1216)
+++ trunk/data/shader/shockwave2.frag	2006-01-11 23:04:21 UTC (rev 1217)
@@ -18,7 +18,7 @@
   vec4 uv_col  = texture2D(noise_tex, gl_TexCoord[0].xy*1.5);
   float h = 1.0 - clamp((radius - dist)*512.0/thickness, 0.0, 1.0);
   h *= h;
-  vec4 col = texture2DRect(background_tex, gl_FragCoord.xy + (uv_col.rb * uv_col.g) * h * 0.3 *300);
+  vec4 col = texture2DRect(background_tex, gl_FragCoord.xy + (uv_col.rb * uv_col.g) * h * 0.3 * 300.0);
 
   float highlight = 1.0 - clamp((radius - dist)*512.0/32.0, 0.0, 1.0);
 
@@ -27,6 +27,8 @@
               h*1.5 * uv_col.r + highlight, 
               1);
 
+  col.a = clamp((250.0 - (radius*256.0))/50.0, 0.0, 1.0);
+
   gl_FragColor = col;
 }
 

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-11 23:01:15 UTC (rev 1216)
+++ trunk/src/display/scene_context.cpp	2006-01-11 23:04:21 UTC (rev 1217)
@@ -371,6 +371,8 @@
 Texture
 SceneContext::request_framebuffer_texture(const Rectf& rect)
 {
+  // FIXME: There is no reason to limit this to Rectf, *all* OpenGL
+  // primitve or plain drawing operations could be used for this!
   glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
 
   {

Modified: trunk/src/shockwave.cpp
===================================================================
--- trunk/src/shockwave.cpp	2006-01-11 23:01:15 UTC (rev 1216)
+++ trunk/src/shockwave.cpp	2006-01-11 23:04:21 UTC (rev 1217)
@@ -67,6 +67,7 @@
   {
     glPushMatrix();
     glMultMatrixf(modelview.matrix);
+    glTranslatef(pos.x, pos.y, 0);
     if (0)
       {
         Rectf rect(0, 0, 800, 600);
@@ -96,8 +97,8 @@
         OpenGLState state;
         state.bind_texture(framebuffer_texture, 0);
         state.bind_texture(noise, 1);
-        state.disable(GL_BLEND);
-        state.set_blend_func(GL_SRC_ALPHA, GL_ONE);
+        state.enable(GL_BLEND);
+        state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
         state.activate();
 
         glUseProgramObjectARB(shader_program.get_handle());    
@@ -187,7 +188,9 @@
 void
 Shockwave::update (float delta)
 {
-  radius = (sinf(SDL_GetTicks() / 500.0f) + 1.0f) * 100.0f;
+  radius += 150.0f * delta;
+  if (radius > 300.0f)
+    radius = 0;
 }
 
 /* EOF */



From grumbel at berlios.de  Thu Jan 12 03:56:58 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 12 Jan 2006 03:56:58 +0100
Subject: [Windstille-commit] r1218 - in trunk/src: . display objects scripting sprite3d
Message-ID: <200601120256.k0C2uwcO003548@sheep.berlios.de>

Author: grumbel
Date: 2006-01-12 03:55:49 +0100 (Thu, 12 Jan 2006)
New Revision: 1218

Added:
   trunk/src/objects/
   trunk/src/objects/background_gradient.cpp
   trunk/src/objects/background_gradient.hpp
   trunk/src/objects/bomb.cpp
   trunk/src/objects/bomb.hpp
   trunk/src/objects/nightvision.cpp
   trunk/src/objects/nightvision.hpp
   trunk/src/objects/shockwave.cpp
   trunk/src/objects/shockwave.hpp
   trunk/src/objects/test_object.cpp
   trunk/src/objects/test_object.hpp
Removed:
   trunk/src/background_gradient.cpp
   trunk/src/background_gradient.hpp
   trunk/src/badguy/
   trunk/src/bomb.cpp
   trunk/src/bomb.hpp
   trunk/src/nightvision.cpp
   trunk/src/nightvision.hpp
   trunk/src/objects/badguy.cpp
   trunk/src/objects/badguy.hpp
   trunk/src/shockwave.cpp
   trunk/src/shockwave.hpp
   trunk/src/test_object.cpp
   trunk/src/test_object.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/drawing_context.cpp
   trunk/src/display/drawing_request.hpp
   trunk/src/display/scene_context.cpp
   trunk/src/display/scene_context.hpp
   trunk/src/display/vertex_array_drawing_request.cpp
   trunk/src/display/vertex_array_drawing_request.hpp
   trunk/src/game_session.cpp
   trunk/src/objects/hedgehog.cpp
   trunk/src/objects/hedgehog.hpp
   trunk/src/objects/spider_mine.cpp
   trunk/src/objects/spider_mine.hpp
   trunk/src/player.cpp
   trunk/src/scripting/game_objects.hpp
   trunk/src/sector.cpp
   trunk/src/sprite3d/sprite3d.cpp
Log:
- moved badguy/ to objects/
- changed DrawingRequeset a bit (prepare() seems to work at the moment only for a single shockwave, not sure why)

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/SConscript	2006-01-12 02:55:49 UTC (rev 1218)
@@ -37,9 +37,7 @@
 
 env.Program('../windstille', [
 'baby_xml.cpp',
-'background_gradient.cpp',
 'blitter.cpp',
-'bomb.cpp',
 'box.cpp',
 'camera.cpp',
 'character.cpp',
@@ -62,7 +60,6 @@
 'inventory.cpp',
 'laser_pointer.cpp',
 'liquid.cpp',
-'nightvision.cpp',
 'pda.cpp',
 'physics.cpp',
 'pistol.cpp',
@@ -72,11 +69,9 @@
 'screen_manager.cpp',
 'scriptable_object.cpp',
 'script_manager.cpp',
-'shockwave.cpp',
 'sector.cpp',
 'spawnpoint.cpp',
 'sprite3dview.cpp',
-'test_object.cpp',
 'text_area.cpp',
 'tile.cpp',
 'tile_factory.cpp',
@@ -88,11 +83,15 @@
 'view.cpp',
 'lisp_getters.cpp',
 'windstille_main.cpp',
-'badguy/badguy.cpp',
-'badguy/hedgehog.cpp',
-'badguy/spider_mine.cpp',
-'badguy/swarm.cpp',
-'badguy/vrdummy.cpp',
+'objects/shockwave.cpp',
+'objects/test_object.cpp',
+'objects/bomb.cpp',
+'objects/background_gradient.cpp',
+'objects/hedgehog.cpp',
+'objects/spider_mine.cpp',
+'objects/swarm.cpp',
+'objects/vrdummy.cpp',
+'objects/nightvision.cpp',
 'collision/collision_data.cpp',
 'collision/collision_engine.cpp',
 'collision/collision_object.cpp',

Deleted: trunk/src/background_gradient.cpp
===================================================================
--- trunk/src/background_gradient.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/background_gradient.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,118 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "display/vertex_array_drawing_request.hpp"
-#include "background_gradient.hpp"
-
-BackgroundGradient::BackgroundGradient(FileReader& props)
-{
-  z_pos = 0.0;
-
-  props.get("z-pos",  z_pos);
-  props.get("colors", colors);
-  if (colors.size() % (3 + 4 + 4 + 2) != 0)
-    {
-      std::cout << "BackgroundGradient: specified color gradient is invalid" << std::endl;
-      /** Color gradients are in the format:
-          
-      (colors start midpoint end R1 G1 B1 A1 R2 G2 B2 A2 I I
-              start midpoint end R1 G1 B1 A1 R2 G2 B2 A2 I I
-              ...)
-
-              I is ignored
-
-          all specified in float, this is similar to Gimps gradients
-          so you can easily copy&paste
-       */
-      colors.clear();
-    }
-}
-
-BackgroundGradient::~BackgroundGradient()
-{  
-}
-  
-void
-BackgroundGradient::update(float delta)
-{
-}
-
-void
-BackgroundGradient::draw(SceneContext& sc)
-{
-  if (colors.empty())
-    return ;
-
-  // Reset modelview so we can draw in screen space
-  sc.color().push_modelview();
-  sc.color().set_modelview(Matrix::identity());
-  
-  Color topcolor(0.0f, 0.0f, 0.5f);
-  Color bottomcolor(0.5f, 0.5f, 1.0f);
-
-  Rect rect(0, 0, 800, 600);
-  VertexArrayDrawingRequest* array = new VertexArrayDrawingRequest(Vector(0, 0), z_pos, 
-                                                                   sc.color().get_modelview());
-
-  array->set_mode(GL_QUAD_STRIP);
-  array->set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-
-  for(int i = 0; i < int(colors.size()); i += (3 + 4 + 4 + 2))
-    {
-      float& start    = colors[i + 0];
-      float& midpoint = colors[i + 1];
-      float& end      = colors[i + 2];
-      Color color1(colors[i + 3], colors[i + 4], colors[i + 5], colors[i + 6]);
-      Color color2(colors[i + 7], colors[i + 8], colors[i + 9], colors[i + 10]);
-      Color midcolor((color1.r + color2.r)/2,
-                     (color1.g + color2.g)/2,
-                     (color1.b + color2.b)/2,
-                     (color1.a + color2.a)/2);
-
-      array->color(color1);
-      array->vertex(rect.left, rect.top + start*rect.get_height());
-
-      array->color(color1);
-      array->vertex(rect.right, rect.top + start*rect.get_height());
-
-      array->color(midcolor);
-      array->vertex(rect.left, rect.top + midpoint*rect.get_height());
-
-      array->color(midcolor);
-      array->vertex(rect.right, rect.top + midpoint*rect.get_height());
-
-      array->color(color2);
-      array->vertex(rect.left, rect.top + end*rect.get_height());
-
-      array->color(color2);
-      array->vertex(rect.right, rect.top + end*rect.get_height());  
-    }
-
-  sc.color().draw(array);  
-
-  sc.color().pop_modelview();
-}
-
-/* EOF */

Deleted: trunk/src/background_gradient.hpp
===================================================================
--- trunk/src/background_gradient.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/background_gradient.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,52 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_BACKGROUND_GRADIENT_HPP
-#define HEADER_BACKGROUND_GRADIENT_HPP
-
-#include "lisp/lisp.hpp"
-#include "game_object.hpp"
-
-/** */
-class BackgroundGradient : public GameObject
-{
-private:
-  std::vector<float> colors;
-  float z_pos; 
-public:
-  BackgroundGradient(FileReader& props);
-  ~BackgroundGradient();
-  
-  void update (float delta);
-  void draw (SceneContext& gc);
-    
-private:
-  BackgroundGradient (const BackgroundGradient&);
-  BackgroundGradient& operator= (const BackgroundGradient&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/src/bomb.cpp
===================================================================
--- trunk/src/bomb.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/bomb.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,120 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-*/
-
-#include "globals.hpp"
-#include "sector.hpp"
-#include "bomb.hpp"
-#include "badguy/badguy.hpp"
-
-Bomb::Bomb(int x, int y)
-  : sprite("images/bomb.sprite"),
-    explo("images/explo.sprite"),
-    light("images/bomblight.sprite"),
-    highlight("images/bombhighlight.sprite"),
-    explolight("images/explolight.sprite"),
-    pos(x, int(y/TILE_SIZE+1)*TILE_SIZE),
-    count(2.0f),
-    state(COUNTDOWN),
-    exploded(false)
-{
-}
-
-Bomb::~Bomb()
-{
-}
-
-void
-Bomb::update(float delta)
-{
-  if (explo.is_finished())
-    remove();
-
-  if (state == EXPLODE)
-    explo.update(delta);
-  else
-    sprite.update(delta);
-
-  count -= delta;
-
-  if (count < 0 && state != EXPLODE)
-    {
-      state = EXPLODE;
-      count = 0;
-      if (!exploded)
-        {
-          exploded = true;
-          explode();
-        }
-
-    }
-}
-
-void
-Bomb::draw(SceneContext& sc)
-{
-  if (state == EXPLODE)
-    {
-      sc.color().draw(explo, pos);
-      sc.light().draw(explolight, pos, 0);
-
-      explolight.set_alpha(0.5);
-      explolight.set_scale(0.5);
-
-      sc.highlight().draw(explolight, pos, 0);
-
-      explolight.set_alpha(1.0);
-      explolight.set_scale(1.0);
-    }
-  else
-    {
-      sc.color().draw(sprite, pos);
-      if (sprite.is_finished()) {
-        sc.light().draw(light, pos, 0);
-        sc.highlight().draw(highlight, pos, 0);
-      }
-    }
-}
-
-void 
-Bomb::explode()
-{
-  if (0)
-    { // FIXME: Should be handled by the collision system
-      std::vector<GameObject*>* objs = Sector::current()->get_objects();
-      for(std::vector<GameObject*>::iterator i = objs->begin(); i != objs->end(); ++i)
-        {
-          Badguy* badguy = dynamic_cast<Badguy*>(*i);
-          if (badguy)
-            {
-              if (badguy->get_pos().x > pos.x - 30 &&
-                  badguy->get_pos().x < pos.x + 30 &&
-                  badguy->get_pos().y > pos.y - 20 &&
-                  badguy->get_pos().y < pos.y + 20)
-                badguy->die();
-            }
-        }
-    }
-}
-
-/* EOF */

Deleted: trunk/src/bomb.hpp
===================================================================
--- trunk/src/bomb.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/bomb.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,60 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-*/
-
-#ifndef HEADER_BOMB_HXX
-#define HEADER_BOMB_HXX
-
-#include "sprite2d/sprite.hpp"
-#include "game_object.hpp"
-
-/** */
-class Bomb : public GameObject
-{
-private:
-  Sprite sprite;
-  Sprite explo;
-  Sprite light;
-  Sprite highlight;
-  Sprite explolight;
-
-  Vector pos;
-  float count;
-  enum { COUNTDOWN, EXPLODE } state;
-  bool exploded;
-
-public:
-  Bomb(int x, int y);
-  virtual ~Bomb();
-
-  void update(float delta);
-  void draw(SceneContext& gc);
-private:
-  void explode();
-  Bomb (const Bomb&);
-  Bomb& operator= (const Bomb&);
-};
-
-#endif
-
-/* EOF */

Modified: trunk/src/display/drawing_context.cpp
===================================================================
--- trunk/src/display/drawing_context.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/drawing_context.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -54,7 +54,7 @@
   }
   virtual ~FillScreenDrawingRequest() {}
 
-  void draw() {
+  void draw(const Texture& tmp_texture) {
     OpenGLState state;
     // FIXME: move clear color to opengl_state
     state.activate();
@@ -74,7 +74,7 @@
   {}
   virtual ~TextDrawingRequest() {}
 
-  void draw() {
+  void draw(const Texture& tmp_texture) {
     glPushMatrix();
     glMultMatrixf(modelview.matrix);
     Fonts::ttffont->draw(int(pos.x), int(pos.y), text);
@@ -96,7 +96,7 @@
   virtual ~SurfaceDrawingRequest()
   {}
 
-  void draw() 
+  void draw(const Texture& tmp_texture) 
   {
     glPushMatrix();
     glMultMatrixf(modelview.matrix);
@@ -124,10 +124,7 @@
   
   for(DrawingRequests::iterator i = drawingrequests.begin(); i != drawingrequests.end(); ++i)
     {
-      if ((*i)->needs_framebuffer())
-        (*i)->set_framebuffer_texture(sc.request_framebuffer_texture((*i)->framebuffer_rect()));
-      
-      (*i)->draw();
+      sc.eval(*i);
     }
 }
 

Modified: trunk/src/display/drawing_request.hpp
===================================================================
--- trunk/src/display/drawing_request.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/drawing_request.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -39,14 +39,35 @@
   Vector  pos;
   float   z_pos;
   Matrix  modelview;
-  Texture framebuffer_texture;
+
 public:
   DrawingRequest(const Vector& pos_, float z_pos = 0,  const Matrix& modelview_ = Matrix::identity())
     : pos(pos_), z_pos(z_pos), modelview(modelview_)
   {}
   virtual ~DrawingRequest() {}
   
-  virtual void draw() = 0;
+  /**
+   * The draw() method does the important work in DrawingRequest,
+   * ie. it is the place where you can access the screen with raw
+   * OpenGL methods. The \a tmp_texture provides a texture of the
+   * current framebuffer, you have to copy the \a screen_texture to it
+   * to contain usefull content
+   */
+  virtual void draw(const Texture& tmp_texture) = 0;
+
+  /**
+   * This method is called before draw() to allow the DrawingRequest
+   * to copy content from \a screen_texture, which is the current
+   * framebuffer to a temporary buffer which can then be used in
+   * draw() for deformation effects
+   */
+  virtual void prepare(const Texture& screen_texture) {}
+
+  /**
+   * Override this and let it return true if you need to prepare()
+   * function call
+   */
+  virtual bool needs_prepare() { return false; }
   
   /** Returns the position at which the request should be drawn */
   float get_z_pos() const { return z_pos; }
@@ -54,9 +75,6 @@
   Matrix get_modelview() const
   { return modelview; }
 
-  virtual bool  needs_framebuffer() { return false; }
-  virtual Rectf framebuffer_rect() { return Rectf(); }
-  void set_framebuffer_texture(const Texture& t) { framebuffer_texture = t; }
 private:
   DrawingRequest (const DrawingRequest&);
   DrawingRequest& operator= (const DrawingRequest&);

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/scene_context.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -290,6 +290,7 @@
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 
+  if (1) 
     {
       // Render the screen framebuffer to the actual screen 
       OpenGLState state;
@@ -297,8 +298,12 @@
       Rectf uv(0.375, 0.375, 
                impl->screen_framebuffer.get_width()  + 0.375,
                impl->screen_framebuffer.get_height() + 0.375);
-          
-      state.bind_texture(impl->screen_framebuffer.get_texture(), 0);
+
+      if (impl->render_mask & BLURMAP)
+        state.bind_texture(impl->screen_framebuffer.get_texture(), 0);
+      else
+        state.bind_texture(impl->tmp_framebuffer.get_texture(), 0);
+
       state.activate();
 
       glBegin(GL_QUADS);
@@ -318,19 +323,6 @@
       glEnd();
     }
 
-    /*
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->blur_framebuffer.get_handle());
-      glClear(GL_DEPTH_BUFFER_BIT);
-
-      glPushMatrix();
-      glTranslatef(0, 600-(600/BLURMAP_DIV), 0);
-      glScalef(1.0f/BLURMAP_DIV, 1.0f/BLURMAP_DIV, 1.0f);
-      impl->color.render();
-      render_lightmap();
-      impl->highlight.render();
-      glPopMatrix();
-    */
-
   // Clear all DrawingContexts
   impl->color.clear();
   impl->light.clear();
@@ -368,43 +360,20 @@
     }
 }
 
-Texture
-SceneContext::request_framebuffer_texture(const Rectf& rect)
+void
+SceneContext::eval(DrawingRequest* request)
 {
-  // FIXME: There is no reason to limit this to Rectf, *all* OpenGL
-  // primitve or plain drawing operations could be used for this!
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
-
-  {
-    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-    // Render the screen framebuffer to the actual screen 
-    OpenGLState state;
-    state.bind_texture(impl->screen_framebuffer.get_texture(), 0);
-    state.activate();
-
-    glBegin(GL_QUADS);
-    
-    glTexCoord2f(rect.left, rect.bottom);
-    glVertex2f(rect.left, rect.top);
-
-    glTexCoord2f(rect.right, rect.bottom);
-    glVertex2f(rect.right, rect.top);
-
-    glTexCoord2f(rect.right, rect.top);
-    glVertex2f(rect.right, rect.bottom);
-
-    glTexCoord2f(rect.left, rect.top);
-    glVertex2f(rect.left, rect.bottom);
-    
-    glEnd();
-  } 
-
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
-
-  // FIXME: Hacky, hacky, need something like push/pop_framebuffer to avoid this
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
-
-  return impl->tmp_framebuffer.get_texture();
+  if (request->needs_prepare())
+    {
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
+      request->prepare(impl->screen_framebuffer.get_texture());
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      request->draw(impl->tmp_framebuffer.get_texture());
+    }
+  else
+    {
+      request->draw(Texture());
+    }
 }
 
 /* EOF */

Modified: trunk/src/display/scene_context.hpp
===================================================================
--- trunk/src/display/scene_context.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/scene_context.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -90,11 +90,12 @@
   unsigned int get_render_mask();
 
   DrawingContext& get_layer(unsigned int t);
-  Texture request_framebuffer_texture(const Rectf& rect);
 
   void render_lightmap();
   void render_colormap();
   void render_highlightmap();
+
+  void eval(DrawingRequest* request);
 private:
   SceneContextImpl* impl;
 

Modified: trunk/src/display/vertex_array_drawing_request.cpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/vertex_array_drawing_request.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -46,7 +46,7 @@
 }
 
 void
-VertexArrayDrawingRequest::draw()
+VertexArrayDrawingRequest::draw(const Texture& tmp_texture)
 {
   draw(0, num_vertices());
 }

Modified: trunk/src/display/vertex_array_drawing_request.hpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/display/vertex_array_drawing_request.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -43,7 +43,7 @@
 public:
   VertexArrayDrawingRequest(const Vector& pos_, float z_pos_, const Matrix& modelview_);
 
-  void draw();
+  void draw(const Texture& tmp_texture);
   void draw(int start, int end);
 
   void vertex(float x, float y, float z = 0.0f);

Modified: trunk/src/game_session.cpp
===================================================================
--- trunk/src/game_session.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/game_session.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -54,7 +54,7 @@
 #include "sound/sound_manager.hpp"
 #include "conversation.hpp"
 #include "collision/collision_engine.hpp"
-#include "test_object.hpp"
+#include "objects/test_object.hpp"
 #include "inventory.hpp"
 #include "display/surface_manager.hpp"
 #include "display/surface.hpp"
@@ -356,6 +356,12 @@
               console << "Toggled LIGHTMAP: " << ((sc.get_render_mask() & SceneContext::LIGHTMAPSCREEN) > 0) << std::endl;
               break;
 
+            case SDLK_5:
+              sc.set_render_mask(sc.get_render_mask() ^ SceneContext::BLURMAP);
+              console << "Toggled blurmap: " << ((sc.get_render_mask() & SceneContext::BLURMAP) > 0) << std::endl;
+              break;
+
+
             case SDLK_c:
               if (debug) {
                 collision_debug = !collision_debug;

Deleted: trunk/src/nightvision.cpp
===================================================================
--- trunk/src/nightvision.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/nightvision.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,130 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "globals.hpp"
-#include "random.hpp"
-#include "math/matrix.hpp"
-#include "display/vertex_array_drawing_request.hpp"
-#include "display/texture_manager.hpp"
-#include "nightvision.hpp"
-
-Nightvision::Nightvision(FileReader& props)
-  : nightvision("images/nightvision.sprite")
-{
-  name = "nightvision";
-  noise = Texture("images/noise.png");
-  noise.set_wrap(GL_REPEAT);
-  noise.set_filter(GL_LINEAR);
-}
-
-Nightvision::~Nightvision()
-{
-}
-
-void
-Nightvision::draw(SceneContext& sc)
-{
-  // reset the modelview, so we can draw in screen coordinates
-  sc.light().push_modelview();
-  sc.light().set_modelview(Matrix::identity());
-
-  // try to stay above everything else with large z value
-  if (1)
-    {
-      nightvision.set_alpha(1.0f);
-      nightvision.set_blend_func(GL_ONE, GL_ZERO);
-      sc.light().draw(nightvision, Vector(0, 0), 10000);
-    }
-
-  if (1)
-    {
-      VertexArrayDrawingRequest* array = new VertexArrayDrawingRequest(Vector(0, 0), 10000,
-                                                                       sc.light().get_modelview());
-      array->set_mode(GL_QUADS);
-      array->set_texture(noise);
-      array->set_blend_func(GL_DST_COLOR, GL_ZERO);
-
-      float u = rnd.drand()/0.5f;
-      float v = rnd.drand()/0.5f;
-      float w = 4.0f/6.0f;
-      float h = 3.0f/6.0f;
-
-      array->texcoord(u, v);
-      array->vertex(0, 0);
-
-      array->texcoord(u + w, v);
-      array->vertex(800, 0);
-
-      array->texcoord(u + w, v + h);
-      array->vertex(800, 600);
-
-      array->texcoord(u, v + h);
-      array->vertex(0, 600);
-      
-      if (0) // second noise level
-        {
-          u = rnd.drand();
-          v = rnd.drand();
-          float size = 4.0f;
-
-          array->texcoord(u, v);
-          array->vertex(0, 0, 1.0f);
-
-          array->texcoord(u + size, v);
-          array->vertex(800, 0, 1.0f);
-
-          array->texcoord(u + size, v + size);
-          array->vertex(800, 600, 1.0f);
-
-          array->texcoord(u, v + size);
-          array->vertex(0, 600, 1.0f);
-        }
-
-      sc.light().draw(array);
-    }
-  sc.light().pop_modelview();
-
-  if (1)
-    {
-      // FIXME: might be better to copy the highlight over to the
-      // color layer, however that would require some changes to the
-      // DrawingContext structure
-      sc.highlight().clear();
-
-      sc.highlight().push_modelview();
-      sc.highlight().set_modelview(Matrix::identity());
-      nightvision.set_alpha(0.5f);
-      nightvision.set_blend_func(GL_SRC_ALPHA, GL_ONE);
-      sc.highlight().draw(nightvision, Vector(0, 0), 10000);
-      sc.highlight().pop_modelview();
-    }
-}
-
-void
-Nightvision::update(float )
-{
-}
-
-/* EOF */

Deleted: trunk/src/nightvision.hpp
===================================================================
--- trunk/src/nightvision.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/nightvision.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,55 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_NIGHTVISION_HPP
-#define HEADER_NIGHTVISION_HPP
-
-#include "lisp/lisp.hpp"
-#include "display/texture.hpp"
-#include "sprite2d/sprite.hpp"
-#include "game_object.hpp"
-
-// FIXME: shouldn't really be a game object, but makes testing easier
-class Nightvision : public GameObject
-{
-private:
-  Sprite  nightvision;
-  Texture noise;
-
-public:
-  Nightvision(FileReader& props);
-  ~Nightvision();
-
-  void draw(SceneContext& sc);
-  void update(float delta);
-  
-private:
-  Nightvision (const Nightvision&);
-  Nightvision& operator= (const Nightvision&);
-};
-
-#endif
-
-/* EOF */

Copied: trunk/src/objects (from rev 1214, trunk/src/badguy)

Copied: trunk/src/objects/background_gradient.cpp (from rev 1214, trunk/src/background_gradient.cpp)

Copied: trunk/src/objects/background_gradient.hpp (from rev 1214, trunk/src/background_gradient.hpp)

Deleted: trunk/src/objects/badguy.cpp
===================================================================
--- trunk/src/badguy/badguy.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/badguy.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,33 +0,0 @@
-/*  $Id: bomb.cpp 752 2005-07-25 10:00:44Z grumbel $
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-*/
-
-#include "badguy.hpp"
-
-Badguy::Badguy()
-{
-}
-
-Badguy::~Badguy()
-{
-}

Deleted: trunk/src/objects/badguy.hpp
===================================================================
--- trunk/src/badguy/badguy.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/badguy.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,41 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-*/
-
-#ifndef HEADER_BADGUY_HXX
-#define HEADER_BADGUY_HXX
-
-#include "entity.hpp"
-
-class Badguy : public Entity
-{
-public:
-  Badguy();
-  virtual ~Badguy();
-
-  virtual void die() = 0;
-};
-
-#endif
-
-/* EOF */

Copied: trunk/src/objects/bomb.cpp (from rev 1214, trunk/src/bomb.cpp)
===================================================================
--- trunk/src/bomb.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/bomb.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -0,0 +1,103 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+*/
+
+#include "globals.hpp"
+#include "sector.hpp"
+#include "bomb.hpp"
+
+Bomb::Bomb(int x, int y)
+  : sprite("images/bomb.sprite"),
+    explo("images/explo.sprite"),
+    light("images/bomblight.sprite"),
+    highlight("images/bombhighlight.sprite"),
+    explolight("images/explolight.sprite"),
+    pos(x, int(y/TILE_SIZE+1)*TILE_SIZE),
+    count(2.0f),
+    state(COUNTDOWN),
+    exploded(false)
+{
+}
+
+Bomb::~Bomb()
+{
+}
+
+void
+Bomb::update(float delta)
+{
+  if (explo.is_finished())
+    remove();
+
+  if (state == EXPLODE)
+    explo.update(delta);
+  else
+    sprite.update(delta);
+
+  count -= delta;
+
+  if (count < 0 && state != EXPLODE)
+    {
+      state = EXPLODE;
+      count = 0;
+      if (!exploded)
+        {
+          exploded = true;
+          explode();
+        }
+
+    }
+}
+
+void
+Bomb::draw(SceneContext& sc)
+{
+  if (state == EXPLODE)
+    {
+      sc.color().draw(explo, pos);
+      sc.light().draw(explolight, pos, 0);
+
+      explolight.set_alpha(0.5);
+      explolight.set_scale(0.5);
+
+      sc.highlight().draw(explolight, pos, 0);
+
+      explolight.set_alpha(1.0);
+      explolight.set_scale(1.0);
+    }
+  else
+    {
+      sc.color().draw(sprite, pos);
+      if (sprite.is_finished()) {
+        sc.light().draw(light, pos, 0);
+        sc.highlight().draw(highlight, pos, 0);
+      }
+    }
+}
+
+void 
+Bomb::explode()
+{
+}
+
+/* EOF */

Copied: trunk/src/objects/bomb.hpp (from rev 1214, trunk/src/bomb.hpp)

Modified: trunk/src/objects/hedgehog.cpp
===================================================================
--- trunk/src/badguy/hedgehog.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/hedgehog.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -34,7 +34,7 @@
     highlight("images/hedgehog_highlight.sprite")
 {
   props.get("name", name);
-  props.get("pos", pos);
+  props.get("pos",  pos);
   props.print_unused_warnings("hedgehog");
   
   direction_left = false;

Modified: trunk/src/objects/hedgehog.hpp
===================================================================
--- trunk/src/badguy/hedgehog.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/hedgehog.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -25,9 +25,9 @@
 #ifndef HEADER_HEDGEHOG_HXX
 #define HEADER_HEDGEHOG_HXX
 
-#include "badguy.hpp"
+#include "game_object.hpp"
 
-class Hedgehog : public Badguy
+class Hedgehog : public Entity
 {
 private:
   Sprite sprite;

Copied: trunk/src/objects/nightvision.cpp (from rev 1214, trunk/src/nightvision.cpp)

Copied: trunk/src/objects/nightvision.hpp (from rev 1214, trunk/src/nightvision.hpp)

Copied: trunk/src/objects/shockwave.cpp (from rev 1217, trunk/src/shockwave.cpp)
===================================================================
--- trunk/src/shockwave.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/objects/shockwave.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -0,0 +1,266 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "display/opengl_state.hpp"
+#include "display/drawing_request.hpp"
+#include "display/texture.hpp"
+#include "display/shader_program.hpp"
+#include "display/shader_object.hpp"
+#include "shockwave.hpp"
+
+class ShockwaveDrawingRequest : public DrawingRequest
+{
+public:
+  Texture       noise;
+  ShaderProgram shader_program;
+  float radius;
+
+  ShockwaveDrawingRequest(const Vector& pos, 
+                          const Texture&       noise_,
+                          const ShaderProgram& shader_program_,
+                          float r,
+                          const Matrix& modelview_) 
+    : DrawingRequest(pos, 500.0f, modelview_),
+      noise(noise_),
+      shader_program(shader_program_),
+      radius(r)
+  {
+  }
+
+  ~ShockwaveDrawingRequest()
+  {
+  }
+
+  bool  needs_prepare()
+  {
+    return true; 
+  }
+    
+  void prepare(const Texture& screen_texture)
+  {
+    // FIXME: Clear stuff is only for debugging
+    glClearColor(1.0, 0.0, 1.0, 1.0);
+    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+
+    glPushMatrix();
+    glMultMatrixf(modelview.matrix);
+    glTranslatef(pos.x, pos.y, 0);
+
+    { // Apply modelview matrix to texture matrix so that we can
+      // give texcoords as screencords
+      GLdouble modelview[16];
+      glMatrixMode(GL_MODELVIEW);
+      glGetDoublev(GL_MODELVIEW_MATRIX, modelview);
+      glMatrixMode(GL_TEXTURE);
+      glLoadIdentity();
+      glTranslatef(0, 599, 0);
+      glScalef(1, -1, 1);
+      glMultMatrixd(modelview);
+
+      //glLoadMatrixd(modelview);
+    }
+
+    int count = int(radius);
+    OpenGLState state;
+    state.bind_texture(screen_texture, 0);
+    state.activate();
+
+    float radius = (count)*2.0f + 20.0f; // enlarge radius by 20.0f to handle texture displacement 
+    float minradius = 2.0f*count - 164.0f;
+    if (minradius < 0)
+      minradius = 0;
+
+    int segments = 64;
+
+    glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+  
+    glBegin(GL_QUADS);
+    for (int i = 0; i < segments; ++i)
+      {
+        float angel = (2*M_PI / segments);
+
+        float x1 =  sin(angel*i)*radius;
+        float y1 = -cos(angel*i)*radius;
+
+        float x2 =  sin(angel*(i+1))*radius;
+        float y2 = -cos(angel*(i+1))*radius;
+
+        glTexCoord2f(x1+256, (y1+256));
+        glVertex3f(x1+256, y1+256, 0);
+
+        glTexCoord2f(x2+256, (y2+256));
+        glVertex3f(x2+256, y2+256, 0);
+
+
+        float x3 =  sin(angel*i)*minradius;
+        float y3 = -cos(angel*i)*minradius;
+
+        float x4 =  sin(angel*(i+1))*minradius;
+        float y4 = -cos(angel*(i+1))*minradius;
+
+        glTexCoord2f(x4+256, (y4+256));
+        glVertex3f(x4+256, y4+256, 0);
+        glTexCoord2f(x3+256, (y3+256));
+        glVertex3f(x3+256, y3+256, 0);
+      }
+    glEnd();
+
+    glMatrixMode(GL_TEXTURE);
+    glLoadIdentity();
+    glMatrixMode(GL_MODELVIEW);
+
+    glPopMatrix();
+  }
+
+  void draw(const Texture& tmp_texture)
+  {
+    glPushMatrix();
+    glMultMatrixf(modelview.matrix);
+    glTranslatef(pos.x, pos.y, 0);
+    if (0)
+      {
+        Rectf rect(0, 0, 800, 600);
+        // Render the screen framebuffer to the actual screen 
+        OpenGLState state;
+        state.bind_texture(tmp_texture, 0);
+        state.activate();
+
+        glBegin(GL_QUADS);
+    
+        glTexCoord2f(rect.left, rect.bottom);
+        glVertex2f(rect.left/2.0f, rect.bottom/2.0f);
+
+        glTexCoord2f(rect.right, rect.bottom);
+        glVertex2f(rect.right/2.0f, rect.bottom/2.0f);
+
+        glTexCoord2f(rect.right, rect.top);
+        glVertex2f(rect.right/2.0f, rect.top/2.0f);
+
+        glTexCoord2f(rect.left, rect.top);
+        glVertex2f(rect.left/2.0f, rect.top/2.0f);
+    
+        glEnd();
+      }
+    else
+      {
+        OpenGLState state;
+        state.bind_texture(tmp_texture, 0);
+        state.bind_texture(noise, 1);
+        state.enable(GL_BLEND);
+        state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+        state.activate();
+
+        glUseProgramObjectARB(shader_program.get_handle());    
+        shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
+        shader_program.set_uniform1i("background_tex", 0);
+        shader_program.set_uniform1i("noise_tex",   1);
+        draw_disc(int(radius));
+        glUseProgramObjectARB(0);
+      }
+    glPopMatrix();
+  }
+
+  void draw_disc(int count)
+  {
+    float radius = (count)*2.0f;
+    float minradius = 2.0f*count - 164.0f;
+    if (minradius < 0)
+      minradius = 0;
+
+    int segments = 64;
+  
+    glBegin(GL_QUADS);
+    for (int i = 0; i < segments; ++i)
+      {
+        float angel = (2*M_PI / segments);
+
+        float x1 =  sin(angel*i)*radius;
+        float y1 = -cos(angel*i)*radius;
+
+        float x2 =  sin(angel*(i+1))*radius;
+        float y2 = -cos(angel*(i+1))*radius;
+
+        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
+        glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
+        glVertex3f(x1+256, y1+256, 0);
+
+        glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
+        glVertex3f(x2+256, y2+256, 0);
+
+
+        float x3 =  sin(angel*i)*minradius;
+        float y3 = -cos(angel*i)*minradius;
+
+        float x4 =  sin(angel*(i+1))*minradius;
+        float y4 = -cos(angel*(i+1))*minradius;
+
+        glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
+        glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
+        glVertex3f(x4+256, y4+256, 0);
+        glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
+        glVertex3f(x3+256, y3+256, 0);
+      }
+    glEnd();
+  }
+};
+
+Shockwave::Shockwave(FileReader& props)
+  : noise("images/noise3.png")
+{
+  props.get("pos", pos);
+  props.print_unused_warnings("Shockwave");
+
+  radius = 100.0f;
+
+  noise.set_wrap(GL_REPEAT);
+  noise.set_filter(GL_LINEAR);
+
+  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
+  shader_program.link();
+}
+
+Shockwave::~Shockwave()
+{
+}
+
+void
+Shockwave::draw (SceneContext& sc)
+{
+  sc.highlight().draw(new ShockwaveDrawingRequest(pos,
+                                                   noise,
+                                                   shader_program,
+                                                   radius,
+                                                   sc.color().get_modelview()));
+}
+
+void
+Shockwave::update (float delta)
+{
+  radius += 150.0f * delta;
+  if (radius > 300.0f)
+    radius = 0;
+}
+
+/* EOF */

Copied: trunk/src/objects/shockwave.hpp (from rev 1215, trunk/src/shockwave.hpp)

Modified: trunk/src/objects/spider_mine.cpp
===================================================================
--- trunk/src/badguy/spider_mine.cpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/spider_mine.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -33,7 +33,7 @@
     explode_light("images/explolight.sprite")
 {
   props.get("name", name);
-  props.get("pos", pos);
+  props.get("pos",  pos);
   props.print_unused_warnings("spidermine");
   
   sprite = Sprite("images/spider_mine.sprite");

Modified: trunk/src/objects/spider_mine.hpp
===================================================================
--- trunk/src/badguy/spider_mine.hpp	2006-01-11 16:20:12 UTC (rev 1214)
+++ trunk/src/objects/spider_mine.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -25,10 +25,10 @@
 #ifndef HEADER_SPIDER_HPP
 #define HEADER_SPIDER_HPP
 
-#include "badguy.hpp"
+#include "entity.hpp"
 #include "sprite2d/sprite.hpp"
 
-class SpiderMine : public Badguy
+class SpiderMine : public Entity
 {
 private:
   Sprite sprite;

Copied: trunk/src/objects/test_object.cpp (from rev 1214, trunk/src/test_object.cpp)

Copied: trunk/src/objects/test_object.hpp (from rev 1214, trunk/src/test_object.hpp)

Modified: trunk/src/player.cpp
===================================================================
--- trunk/src/player.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/player.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -24,7 +24,7 @@
 #include "input/input_manager.hpp"
 #include "controller_def.hpp"
 #include "player.hpp"
-#include "bomb.hpp"
+#include "objects/bomb.hpp"
 #include "globals.hpp"
 #include "pda.hpp"
 #include "tile.hpp"

Modified: trunk/src/scripting/game_objects.hpp
===================================================================
--- trunk/src/scripting/game_objects.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/scripting/game_objects.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -3,7 +3,7 @@
 
 #ifndef SCRIPTING_API
 #include "game_object.hpp"
-#include "test_object.hpp"
+#include "objects/test_object.hpp"
 #include "player.hpp"
 #include "scriptable_object.hpp"
 #include "ref.hpp"

Modified: trunk/src/sector.cpp
===================================================================
--- trunk/src/sector.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/sector.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -26,29 +26,29 @@
 #include "lisp_getters.hpp"
 #include "globals.hpp"
 #include "display/scene_context.hpp"
-#include "background_gradient.hpp"
+#include "objects/background_gradient.hpp"
 #include "tile_map.hpp"
 #include "game_object.hpp"
 #include "player.hpp"
 #include "trigger.hpp"
-#include "test_object.hpp"
+#include "objects/test_object.hpp"
 #include "sector.hpp"
-#include "badguy/vrdummy.hpp"
+#include "objects/vrdummy.hpp"
 #include "spawnpoint.hpp"
 #include "sound/sound_manager.hpp"
 #include "script_manager.hpp"
 #include "collision/collision_engine.hpp"
 #include "particles/particle_system.hpp"
-#include "test_object.hpp"
+#include "objects/test_object.hpp"
 #include "elevator.hpp"
-#include "nightvision.hpp"
+#include "objects/nightvision.hpp"
 #include "character.hpp"
 #include "laser_pointer.hpp"
-#include "badguy/swarm.hpp"
+#include "objects/swarm.hpp"
 #include "liquid.hpp"
-#include "shockwave.hpp"
-#include "badguy/hedgehog.hpp"
-#include "badguy/spider_mine.hpp"
+#include "objects/shockwave.hpp"
+#include "objects/hedgehog.hpp"
+#include "objects/spider_mine.hpp"
 #include "box.hpp"
 #include "scriptable_object.hpp"
 #include "scripting/squirrel_error.hpp"

Deleted: trunk/src/shockwave.cpp
===================================================================
--- trunk/src/shockwave.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/shockwave.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,196 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "display/opengl_state.hpp"
-#include "display/drawing_request.hpp"
-#include "display/texture.hpp"
-#include "display/shader_program.hpp"
-#include "display/shader_object.hpp"
-#include "shockwave.hpp"
-
-class ShockwaveDrawingRequest : public DrawingRequest
-{
-public:
-  Texture       noise;
-  ShaderProgram shader_program;
-  float radius;
-
-  ShockwaveDrawingRequest(const Vector& pos, 
-                          const Texture&       noise_,
-                          const ShaderProgram& shader_program_,
-                          float r,
-                          const Matrix& modelview_) 
-    : DrawingRequest(pos, 500.0f, modelview_),
-      noise(noise_),
-      shader_program(shader_program_),
-      radius(r)
-  {
-  }
-
-  ~ShockwaveDrawingRequest()
-  {
-  }
-
-  bool  needs_framebuffer()
-  {
-    return true; 
-  }
-  
-  Rectf framebuffer_rect() 
-  {
-    return Rectf(0, 0, 800, 600); 
-  }
-  
-  void draw()
-  {
-    glPushMatrix();
-    glMultMatrixf(modelview.matrix);
-    glTranslatef(pos.x, pos.y, 0);
-    if (0)
-      {
-        Rectf rect(0, 0, 800, 600);
-        // Render the screen framebuffer to the actual screen 
-        OpenGLState state;
-        state.bind_texture(framebuffer_texture, 0);
-        state.activate();
-
-        glBegin(GL_QUADS);
-    
-        glTexCoord2f(rect.left, rect.bottom);
-        glVertex2f(rect.left/2.0f, rect.bottom/2.0f);
-
-        glTexCoord2f(rect.right, rect.bottom);
-        glVertex2f(rect.right/2.0f, rect.bottom/2.0f);
-
-        glTexCoord2f(rect.right, rect.top);
-        glVertex2f(rect.right/2.0f, rect.top/2.0f);
-
-        glTexCoord2f(rect.left, rect.top);
-        glVertex2f(rect.left/2.0f, rect.top/2.0f);
-    
-        glEnd();
-      }
-    else
-      {
-        OpenGLState state;
-        state.bind_texture(framebuffer_texture, 0);
-        state.bind_texture(noise, 1);
-        state.enable(GL_BLEND);
-        state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-        state.activate();
-
-        glUseProgramObjectARB(shader_program.get_handle());    
-        shader_program.set_uniform1f("radius",   radius/512.0f*2.0f);
-        shader_program.set_uniform1i("background_tex", 0);
-        shader_program.set_uniform1i("noise_tex",   1);
-        draw_disc(int(radius));
-        glUseProgramObjectARB(0);
-      }
-    glPopMatrix();
-  }
-
-  void draw_disc(int count)
-  {
-    float radius = (count)*2.0f;
-    float minradius = 2.0f*count - 164.0f;
-    if (minradius < 0)
-      minradius = 0;
-    glClear(GL_DEPTH_BUFFER_BIT);
-
-    int segments = 64;
-  
-    glBegin(GL_QUADS);
-    for (int i = 0; i < segments; ++i)
-      {
-        float angel = (2*M_PI / segments);
-
-        float x1 =  sin(angel*i)*radius;
-        float y1 = -cos(angel*i)*radius;
-
-        float x2 =  sin(angel*(i+1))*radius;
-        float y2 = -cos(angel*(i+1))*radius;
-
-        glColor4f(1.0f, 1.0f, 1.0f, 1.0f);
-        glTexCoord2f(x1/512.0f+0.5f, y1/512.0f+0.5f);
-        glVertex3f(x1+256, y1+256, 0);
-
-        glTexCoord2f(x2/512.0f+0.5f, y2/512.0f+0.5f);
-        glVertex3f(x2+256, y2+256, 0);
-
-
-        float x3 =  sin(angel*i)*minradius;
-        float y3 = -cos(angel*i)*minradius;
-
-        float x4 =  sin(angel*(i+1))*minradius;
-        float y4 = -cos(angel*(i+1))*minradius;
-
-        glColor4f(1.0f, 1.0f, 1.0f, 0.0f);
-        glTexCoord2f(x4/512.0f+0.5f, y4/512.0f+0.5f);
-        glVertex3f(x4+256, y4+256, 0);
-        glTexCoord2f(x3/512.0f+0.5f, y3/512.0f+0.5f);
-        glVertex3f(x3+256, y3+256, 0);
-      }
-    glEnd();
-  }
-};
-
-Shockwave::Shockwave(FileReader& props)
-  : noise("images/noise3.png")
-{
-  props.get("pos", pos);
-  props.print_unused_warnings("Shockwave");
-
-  radius = 100.0f;
-
-  noise.set_wrap(GL_REPEAT);
-  noise.set_filter(GL_LINEAR);
-
-  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/shockwave2.frag"));
-  shader_program.link();
-}
-
-Shockwave::~Shockwave()
-{
-}
-
-void
-Shockwave::draw (SceneContext& sc)
-{
-  sc.highlight().draw(new ShockwaveDrawingRequest(pos,
-                                                   noise,
-                                                   shader_program,
-                                                   radius,
-                                                   sc.color().get_modelview()));
-}
-
-void
-Shockwave::update (float delta)
-{
-  radius += 150.0f * delta;
-  if (radius > 300.0f)
-    radius = 0;
-}
-
-/* EOF */

Deleted: trunk/src/shockwave.hpp
===================================================================
--- trunk/src/shockwave.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/shockwave.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,55 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_SHOCKWAVE_HPP
-#define HEADER_SHOCKWAVE_HPP
-
-#include "display/shader_program.hpp"
-#include "display/texture.hpp"
-#include "game_object.hpp"
-
-/** */
-class Shockwave : public GameObject
-{
-private:
-  Vector        pos;
-  Texture       noise;
-  ShaderProgram shader_program;
-  float radius;
-public:
-  Shockwave(FileReader& props);
-  ~Shockwave();
-
-  void draw (SceneContext& context);
-  void update (float delta);
-
-private:
-  Shockwave (const Shockwave&);
-  Shockwave& operator= (const Shockwave&);
-};
-
-#endif
-
-/* EOF */

Modified: trunk/src/sprite3d/sprite3d.cpp
===================================================================
--- trunk/src/sprite3d/sprite3d.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/sprite3d/sprite3d.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -248,7 +248,7 @@
     : DrawingRequest(pos, z_pos, modelview), sprite(sprite)
   {}
 
-  void draw()
+  void draw(const Texture& tmp_texture)
   {
     sprite->draw(pos, modelview);
   }

Deleted: trunk/src/test_object.cpp
===================================================================
--- trunk/src/test_object.cpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/test_object.cpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,97 +0,0 @@
-#include <config.h>
-
-#include "test_object.hpp"
-#include "sprite3d/manager.hpp"
-#include "lisp/properties.hpp"
-#include "lisp_getters.hpp"
-
-TestObject::TestObject(FileReader& props)
-{
-  using namespace lisp;
-  pos = Vector(0, 0);
-  std::string spritename;
-
-  props.get("sprite", spritename);
-  props.get("pos", pos);
-  props.get("name", name);
-  props.print_unused_warnings("testobject");
-
-  if(spritename == "")
-    throw std::runtime_error("No sprite name specified in TestObject");
-  sprite = Sprite3D(spritename);
-}
-
-TestObject::~TestObject()
-{
-}
-
-void
-TestObject::draw(SceneContext& sc)
-{
-  sprite.draw(sc.color(), pos, 100);
-  for(std::vector<AttachedSprite>::iterator i = attached_sprites.begin();
-      i != attached_sprites.end(); ++i) {
-    sc.push_modelview();
-    sc.translate(pos.x, pos.y);
-    sc.mult_modelview(sprite.get_attachment_point_matrix(i->attachpoint));
-    
-    i->sprite.draw(sc.color(), Vector(0, 0), 100);
-    sc.pop_modelview();
-  }                                                                        
-}
-
-void
-TestObject::update(float delta)
-{
-  sprite.update(delta);
-  for(std::vector<AttachedSprite>::iterator i = attached_sprites.begin();
-      i != attached_sprites.end(); ++i) {
-    i->sprite.update(delta);
-  }
-}
-
-void
-TestObject::set_sprite(const std::string& filename)
-{
-  try {
-    sprite = Sprite3D(filename);
-  } catch(std::exception& e) {
-    std::cerr << "Couldn't change sprite to '" << filename << "': " 
-              << e.what() << "\n";
-  }
-}
-
-void
-TestObject::set_action(const std::string& action)
-{
-  try {
-    sprite.set_action(action);
-  } catch(std::exception& e) {
-    std::cerr << "Couldn't change action to '" << action << "': "
-              << e.what() << "\n";
-  }
-}
-
-void
-TestObject::set_pos(const Vector& pos)
-{
-  this->pos = pos;
-}
-
-void
-TestObject::set_vflip(bool vflip)
-{
-  sprite.set_rot(vflip);
-}
-
-void
-TestObject::attach(const std::string& spritename,
-                   const std::string& attachement_point)
-{
-  AttachedSprite asprite;
-  asprite.sprite = Sprite3D(spritename);
-  asprite.attachpoint = sprite.get_attachment_point_id(attachement_point);
-  attached_sprites.push_back(asprite);
-}
-
-/* EOF */

Deleted: trunk/src/test_object.hpp
===================================================================
--- trunk/src/test_object.hpp	2006-01-11 23:04:21 UTC (rev 1217)
+++ trunk/src/test_object.hpp	2006-01-12 02:55:49 UTC (rev 1218)
@@ -1,37 +0,0 @@
-#ifndef __TEST_OBJECT_HPP__
-#define __TEST_OBJECT_HPP__
-
-#include <vector>
-#include "game_object.hpp"
-#include "sprite3d/sprite3d.hpp"
-#include "math/vector.hpp"
-#include "lisp/lisp.hpp"
-
-class TestObject : public GameObject
-{
-public:
-  TestObject(FileReader& reader);
-  virtual ~TestObject();
-
-  void draw(SceneContext& context);
-  void update(float delta);
-
-  void set_sprite(const std::string& filename);
-  void set_action(const std::string& action);
-  void set_vflip(bool vflip);
-  void set_pos(const Vector& pos);
-  void attach(const std::string& spritename,
-		      const std::string& attachement_point);
-
-private:
-  Sprite3D sprite;
-  struct AttachedSprite {
-    Sprite3D sprite;
-    Sprite3D::PointID attachpoint;
-  };
-  std::vector<AttachedSprite> attached_sprites;
-  Vector pos;
-};
-
-#endif
-



From line72 at berlios.de  Thu Jan 12 13:29:09 2006
From: line72 at berlios.de (line72 at BerliOS)
Date: Thu, 12 Jan 2006 13:29:09 +0100
Subject: [Windstille-commit] r1219 - in trunk/src: . objects
Message-ID: <200601121229.k0CCT92n009054@sheep.berlios.de>

Author: line72
Date: 2006-01-12 13:28:59 +0100 (Thu, 12 Jan 2006)
New Revision: 1219

Modified:
   trunk/src/Jamfile
   trunk/src/objects/Jamfile
Log:
Updated Jamfiles


Modified: trunk/src/Jamfile
===================================================================
--- trunk/src/Jamfile	2006-01-12 02:55:49 UTC (rev 1218)
+++ trunk/src/Jamfile	2006-01-12 12:28:59 UTC (rev 1219)
@@ -1,6 +1,5 @@
 SubDir TOP src ;
 
-SubInclude TOP src badguy ;
 SubInclude TOP src collision ;
 SubInclude TOP src display ;
 SubInclude TOP src font ;
@@ -8,6 +7,7 @@
 SubInclude TOP src input ;
 SubInclude TOP src lisp ;
 SubInclude TOP src math ;
+SubInclude TOP src objects ;
 SubInclude TOP src particles ;
 SubInclude TOP src physfs ;
 SubInclude TOP src scripting ;
@@ -21,12 +21,8 @@
 sources = 
         baby_xml.cpp
         baby_xml.hpp
-        background_gradient.cpp
-        background_gradient.hpp
         blitter.cpp
         blitter.hpp        
-        bomb.cpp
-        bomb.hpp
 	box.cpp
  	box.hpp
         camera.cpp
@@ -77,8 +73,6 @@
 	lisp_getters.cpp
 	lisp_getters.hpp
         math.hpp
-        nightvision.cpp
-        nightvision.hpp
 	particle_viewer.cpp
 	particle_viewer.hpp
         pda.cpp
@@ -104,14 +98,10 @@
         sector.cpp
         sector.hpp
 	sharedptr.hpp
-	shockwave.cpp
-	shockwave.hpp
         spawnpoint.cpp
         spawnpoint.hpp
         sprite3dview.hpp
         sprite3dview.cpp
-        test_object.cpp
-        test_object.hpp
         text_area.hpp
         text_area.cpp
 	tile.cpp
@@ -138,9 +128,7 @@
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;
 
 Application windstille
-    :   $(badguy_objects)
-    
-        $(display_objects)
+    :   $(display_objects)
 
         $(font_objects)
 
@@ -152,6 +140,8 @@
 
         $(lisp_objects)
 
+        $(objects_objects)
+
         $(physfs_objects)
 
         $(scripting_objects)

Modified: trunk/src/objects/Jamfile
===================================================================
--- trunk/src/objects/Jamfile	2006-01-12 02:55:49 UTC (rev 1218)
+++ trunk/src/objects/Jamfile	2006-01-12 12:28:59 UTC (rev 1219)
@@ -1,18 +1,26 @@
-SubDir TOP src badguy ;
+SubDir TOP src objects ;
 
 sources =
-  badguy.cpp
-  badguy.hpp
+  background_gradient.cpp
+  background_gradient.hpp
+  bomb.cpp
+  bomb.hpp
   hedgehog.cpp
   hedgehog.hpp
+  nightvision.cpp
+  nightvision.hpp
+  shockwave.cpp
+  shockwave.hpp
   spider_mine.cpp
   spider_mine.hpp
+  swarm.cpp
   swarm.hpp
-  swarm.cpp
+  test_object.cpp
+  test_object.hpp
+  vrdummy.cpp
   vrdummy.hpp
-  vrdummy.cpp
 ;
 
 TRANSLATABLE_SOURCES += [ SearchSource $(sources) ] ;
-badguy_objects = [ CompileObjects $(sources) ] ;
+objects_objects = [ CompileObjects $(sources) ] ;
 



From grumbel at berlios.de  Fri Jan 13 18:02:11 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 13 Jan 2006 18:02:11 +0100
Subject: [Windstille-commit] r1220 - in trunk: data/images/particles data/particlesystems data/shader src/particles
Message-ID: <200601131702.k0DH2B4D001359@sheep.berlios.de>

Author: grumbel
Date: 2006-01-13 18:02:08 +0100 (Fri, 13 Jan 2006)
New Revision: 1220

Added:
   trunk/data/images/particles/deform.png
   trunk/data/images/particles/deform2.png
   trunk/data/particlesystems/deform.particles
   trunk/data/shader/particledeform.frag
   trunk/src/particles/deform_drawer.cpp
   trunk/src/particles/deform_drawer.hpp
Log:
- some experiments with heat deformation

Added: trunk/data/images/particles/deform.png
===================================================================
(Binary files differ)


Property changes on: trunk/data/images/particles/deform.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/data/images/particles/deform2.png
===================================================================
(Binary files differ)


Property changes on: trunk/data/images/particles/deform2.png
___________________________________________________________________
Name: svn:mime-type
   + application/octet-stream

Added: trunk/data/particlesystems/deform.particles
===================================================================
--- trunk/data/particlesystems/deform.particles	2006-01-12 12:28:59 UTC (rev 1219)
+++ trunk/data/particlesystems/deform.particles	2006-01-13 17:02:08 UTC (rev 1220)
@@ -0,0 +1,23 @@
+;; -*- scheme -*-
+
+(particle-systems
+
+ ;; Fire itself
+ (particle-system
+  (pos 0 0)
+        (lifetime 2.0)
+  (count 25)
+  (z-pos 1000)
+  (layer "highlight")
+  (velocity 200 300)
+  (cone -95 -85)
+  (gravity 0 -0.3)
+  (size 1.5 1.0)
+  (distribution (line-distribution (x1 -50) (y1 0) (x2 50) (y2 0)))
+  (drawer (deform-drawer (image "images/particles/smoke.png")
+                                 (blendfunc-src "src_alpha")
+                                  (blendfunc-dst "one"))))
+
+ )
+
+;; EOF ;;

Added: trunk/data/shader/particledeform.frag
===================================================================
--- trunk/data/shader/particledeform.frag	2006-01-12 12:28:59 UTC (rev 1219)
+++ trunk/data/shader/particledeform.frag	2006-01-13 17:02:08 UTC (rev 1220)
@@ -0,0 +1,13 @@
+// -*- c++ -*-
+
+uniform sampler2DRect screen;
+uniform sampler2DRect particles;
+
+void main()
+{
+  vec3 offset  = texture2DRect(particles, gl_FragCoord.xy).rgb;
+  vec3 color   = gl_FragCoord.rgb;
+  gl_FragColor = texture2DRect(screen, gl_FragCoord.xy + (offset.rg)* 50.0);
+}
+
+/* EOF */

Added: trunk/src/particles/deform_drawer.cpp
===================================================================
--- trunk/src/particles/deform_drawer.cpp	2006-01-12 12:28:59 UTC (rev 1219)
+++ trunk/src/particles/deform_drawer.cpp	2006-01-13 17:02:08 UTC (rev 1220)
@@ -0,0 +1,194 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+
+#include "display/shader_object.hpp"
+#include "particle_system.hpp"
+#include "display/drawing_request.hpp"
+#include "display/opengl_state.hpp"
+#include "deform_drawer.hpp"
+
+// FIXME: HACK
+extern GLuint current_framebuffer;
+
+class DeformDrawerRequest : public DrawingRequest
+{
+public:
+  Framebuffer&      framebuffer;
+  Surface&          surface;
+  ParticleSystem&   psys;
+  ShaderProgram&    shader_program;
+
+  DeformDrawerRequest(const Vector& pos_, float z_pos,  const Matrix& modelview_,
+                      Framebuffer& framebuffer_, Surface& surface_, ParticleSystem& psys_,
+                      ShaderProgram& shader_program_)
+    : DrawingRequest(pos_, z_pos, modelview_),
+      framebuffer(framebuffer_), surface(surface_), psys(psys_), 
+      shader_program(shader_program_)
+  {}
+  
+  virtual ~DeformDrawerRequest() {}
+  
+  void draw(const Texture& tmp_texture) 
+  {
+    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffer.get_handle());
+    glClear(GL_COLOR_BUFFER_BIT);
+    draw_particles();
+    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, current_framebuffer);
+
+    if (1) {
+      OpenGLState state;
+
+      glUseProgramObjectARB(shader_program.get_handle());    
+      shader_program.set_uniform1i("screen",      0);
+      shader_program.set_uniform1i("particles",   1);
+            
+      state.bind_texture(tmp_texture, 0);
+      state.bind_texture(framebuffer.get_texture(), 1);
+      state.color(Color(1.0f, 1.0f, 1.0f, 1.0f));
+      state.activate();
+
+      glBegin(GL_QUADS);
+      glTexCoord2f(0,0);
+      glVertex2f(0,0);
+
+      glTexCoord2f(800,0);
+      glVertex2f(800,0);
+
+      glTexCoord2f(800,600);
+      glVertex2f(800, 600);
+
+      glTexCoord2f(0, 600);
+      glVertex2f(0,600);
+      glEnd();
+
+      glUseProgramObjectARB(0);
+    }
+  }
+
+  void draw_particles()
+  {
+    glPushMatrix();
+    glMultMatrixf(get_modelview().matrix);
+    
+    OpenGLState state;
+    
+    state.bind_texture(surface.get_texture());
+    state.set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+    state.enable(GL_BLEND);
+    state.activate();    
+
+    glBegin(GL_QUADS);
+    for(ParticleSystem::Particles::iterator i = psys.begin(); i != psys.end(); ++i)
+      {
+        if (i->t != -1.0f)
+          {
+            float p = 1.0f - psys.get_progress(i->t);
+            Color color(psys.color_start.r * p + psys.color_stop.r * (1.0f - p),
+                        psys.color_start.g * p + psys.color_stop.g * (1.0f - p),
+                        psys.color_start.b * p + psys.color_stop.b * (1.0f - p),
+                        psys.color_start.a * p + psys.color_stop.a * (1.0f - p));
+
+            // scale
+            float scale  = psys.size_start + psys.get_progress(i->t)*(psys.size_stop - psys.size_start);
+          
+            float width  = surface.get_width()  * scale;
+            float height = surface.get_height() * scale;
+              
+            // rotate
+            float x_rot = width/2;
+            float y_rot = height/2; 
+
+            if (i->angle != 0)
+              {
+                float s = sinf(M_PI * i->angle/180.0f);
+                float c = cosf(M_PI * i->angle/180.0f);
+                x_rot = (width/2) * c - (height/2) * s;
+                y_rot = (width/2) * s + (height/2) * c;
+              }
+
+            glColor4f(color.r, color.g, color.b, color.a);
+            glTexCoord2f(0, 0);
+            glVertex2f(i->x - x_rot, i->y - y_rot);
+            glTexCoord2f(1, 0);
+            glVertex2f(i->x + y_rot, i->y - x_rot);
+            glTexCoord2f(1, 1);
+            glVertex2f(i->x + x_rot, i->y + y_rot);
+            glTexCoord2f(0, 1);
+            glVertex2f(i->x - y_rot, i->y + x_rot);
+          }
+      }
+    glEnd();
+
+    glPopMatrix();
+  }
+
+  void prepare(const Texture& screen_texture) 
+  {
+    OpenGLState state;
+    state.bind_texture(screen_texture);
+    state.activate();
+
+    glBegin(GL_QUADS);
+    glTexCoord2f(0,600);
+    glVertex2f(0,0);
+
+    glTexCoord2f(800,600);
+    glVertex2f(800,0);
+
+    glTexCoord2f(800, 0);
+    glVertex2f(800, 600);
+
+    glTexCoord2f(0, 0);
+    glVertex2f(0,600);
+    glEnd();
+  }
+
+  bool needs_prepare() { return true; }
+};
+
+DeformDrawer::DeformDrawer(FileReader& props)
+  : framebuffer(GL_TEXTURE_RECTANGLE_ARB, 800, 600),
+    surface("images/particles/deform2.png")
+{
+  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER_ARB, "data/shader/particledeform.frag"));
+  shader_program.link();
+}
+
+DeformDrawer::~DeformDrawer()
+{
+}
+
+void
+DeformDrawer::draw(DrawingContext& dc, ParticleSystem& psys)
+{
+  dc.draw(new DeformDrawerRequest(Vector(400, 300), 1200, dc.get_modelview(), 
+                                  framebuffer, surface, psys, shader_program));
+}
+
+/* EOF */

Added: trunk/src/particles/deform_drawer.hpp
===================================================================
--- trunk/src/particles/deform_drawer.hpp	2006-01-12 12:28:59 UTC (rev 1219)
+++ trunk/src/particles/deform_drawer.hpp	2006-01-13 17:02:08 UTC (rev 1220)
@@ -0,0 +1,62 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_DEFORM_DRAWER_HPP
+#define HEADER_DEFORM_DRAWER_HPP
+
+#include "display/surface.hpp"
+#include "display/shader_program.hpp"
+#include "display/framebuffer.hpp"
+#include "display/drawing_context.hpp"
+#include "drawer.hpp"
+
+class SceneContext;
+class ParticleSystem;
+
+/**
+ * DeformDrawer is similar to the SurfaceDrawer, it however doesn't
+ * draw the surfaces to the screen but to a seperate framebuffer which
+ * is then used as deform map over the screen, so it can be used for
+ * heat effects from fire and such.
+ */
+class DeformDrawer : public Drawer
+{
+private:
+  Framebuffer    framebuffer;
+  Surface        surface;
+  ShaderProgram  shader_program;
+public:
+  DeformDrawer(FileReader& props);
+  ~DeformDrawer();
+
+  void draw(DrawingContext& sc, ParticleSystem& psys);
+private:
+  DeformDrawer (const DeformDrawer&);
+  DeformDrawer& operator= (const DeformDrawer&);
+};
+
+#endif
+
+/* EOF */



From grumbel at berlios.de  Fri Jan 13 18:03:09 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 13 Jan 2006 18:03:09 +0100
Subject: [Windstille-commit] r1221 - in trunk/src: . display particles
Message-ID: <200601131703.k0DH39JX001518@sheep.berlios.de>

Author: grumbel
Date: 2006-01-13 18:03:08 +0100 (Fri, 13 Jan 2006)
New Revision: 1221

Modified:
   trunk/src/SConscript
   trunk/src/display/scene_context.cpp
   trunk/src/particles/drawer.hpp
   trunk/src/particles/particle_system.cpp
   trunk/src/particles/spark_drawer.cpp
   trunk/src/particles/spark_drawer.hpp
   trunk/src/particles/surface_drawer.cpp
   trunk/src/particles/surface_drawer.hpp
Log:
- some experiments with heat deformation

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/SConscript	2006-01-13 17:03:08 UTC (rev 1221)
@@ -145,6 +145,7 @@
 'particle_viewer.cpp',
 'particles/particle_system.cpp',
 'particles/spark_drawer.cpp',
+'particles/deform_drawer.cpp',
 'particles/surface_drawer.cpp',
 'physfs/physfs_sdl.cpp',
 'physfs/physfs_stream.cpp',

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/display/scene_context.cpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -44,6 +44,10 @@
 #define LIGHTMAP_DIV 4
 #define BLURMAP_DIV 1
 
+GLuint current_framebuffer;
+
+
+
 class SceneContextImpl
 {
 public:
@@ -255,6 +259,7 @@
     {
       // Render the lightmap to the lightmap_framebuffer
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->lightmap_framebuffer.get_handle());
+      current_framebuffer = impl->lightmap_framebuffer.get_handle();
 
       glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
@@ -271,6 +276,7 @@
     {
       // Render the colormap to the screen_framebuffer
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      current_framebuffer = impl->screen_framebuffer.get_handle();
       impl->color.render(*this);
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
@@ -279,6 +285,7 @@
   if (impl->render_mask & LIGHTMAP)
     { // Renders the lightmap to the screen
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      current_framebuffer = impl->screen_framebuffer.get_handle();
       render_lightmap();
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
@@ -286,6 +293,7 @@
   if (impl->render_mask & HIGHLIGHTMAP)
     {
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      current_framebuffer = impl->screen_framebuffer.get_handle();
       impl->highlight.render(*this);
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
@@ -366,8 +374,10 @@
   if (request->needs_prepare())
     {
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
+      current_framebuffer = impl->tmp_framebuffer.get_handle();
       request->prepare(impl->screen_framebuffer.get_texture());
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
+      current_framebuffer = impl->screen_framebuffer.get_handle();
       request->draw(impl->tmp_framebuffer.get_texture());
     }
   else

Modified: trunk/src/particles/drawer.hpp
===================================================================
--- trunk/src/particles/drawer.hpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/drawer.hpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -29,6 +29,7 @@
 class DrawingContext;
 class ParticleSystem;
 
+// FIXME: Rename this to ParticleDrawer or move it into a "namespace particles"
 class Drawer
 {
 public:

Modified: trunk/src/particles/particle_system.cpp
===================================================================
--- trunk/src/particles/particle_system.cpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/particle_system.cpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -32,7 +32,9 @@
 #include "lisp/properties.hpp"
 #include "lisp/property_iterator.hpp"
 #include "lisp_getters.hpp"
+#include "file_reader.hpp"
 #include "spark_drawer.hpp"
+#include "deform_drawer.hpp"
 #include "surface_drawer.hpp"
 #include "randomizer.hpp"
 
@@ -140,12 +142,19 @@
         while(iter.next()) {
           if (iter.item() == "surface-drawer") 
             {
-              set_drawer(new SurfaceDrawer(*iter));
+              lisp::Properties props(*iter);
+              set_drawer(new SurfaceDrawer(props));
             } 
           else if (iter.item() == "spark-drawer") 
             {
-              set_drawer(new SparkDrawer(*iter));
+              lisp::Properties props(*iter);
+              set_drawer(new SparkDrawer(props));
             } 
+          else if (iter.item() == "deform-drawer")
+            {
+              lisp::Properties props(*iter);
+              set_drawer(new DeformDrawer(props));
+            }
           else 
             {
               std::cout << "Unknown drawer: " << iter.item() << std::endl;

Modified: trunk/src/particles/spark_drawer.cpp
===================================================================
--- trunk/src/particles/spark_drawer.cpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/spark_drawer.cpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -31,11 +31,10 @@
 #include "color.hpp"
 #include "spark_drawer.hpp"
 
-SparkDrawer::SparkDrawer(const lisp::Lisp* lisp)
+SparkDrawer::SparkDrawer(FileReader& props)
 {
   width = 1.0f;
   color = Color(1.0f, 1.0f, 1.0f);
-  lisp::Properties props(lisp);
   props.get("color", color);
   props.get("width", width);
 }

Modified: trunk/src/particles/spark_drawer.hpp
===================================================================
--- trunk/src/particles/spark_drawer.hpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/spark_drawer.hpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -38,7 +38,7 @@
   float width;
 
 public:
-  SparkDrawer(const lisp::Lisp* lisp);
+  SparkDrawer(FileReader& props);
   void draw(DrawingContext& dc, ParticleSystem& psys);
 };
 

Modified: trunk/src/particles/surface_drawer.cpp
===================================================================
--- trunk/src/particles/surface_drawer.cpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/surface_drawer.cpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -58,13 +58,12 @@
   }
 }
 
-SurfaceDrawer::SurfaceDrawer(const lisp::Lisp* lisp)
+SurfaceDrawer::SurfaceDrawer(FileReader& props)
 {
   std::string blendfunc_src_str = "src_alpha";
   std::string blendfunc_dst_str = "one_minus_src_alpha";
   std::string surface_file;
 
-  lisp::Properties props(lisp);
   props.get("image", surface_file);
   props.get("blendfunc-src", blendfunc_src_str);
   props.get("blendfunc-dst", blendfunc_dst_str);

Modified: trunk/src/particles/surface_drawer.hpp
===================================================================
--- trunk/src/particles/surface_drawer.hpp	2006-01-13 17:02:08 UTC (rev 1220)
+++ trunk/src/particles/surface_drawer.hpp	2006-01-13 17:03:08 UTC (rev 1221)
@@ -38,12 +38,13 @@
   GLenum blendfunc_dest;
   
 public:
-  SurfaceDrawer(const lisp::Lisp* lisp);
+  SurfaceDrawer(FileReader& props);
   SurfaceDrawer(Surface surface);
   virtual ~SurfaceDrawer();
   
   void set_texture(Surface surface);
   void set_blendfuncs(GLenum blendfunc_src, GLenum blendfunc_dst);
+
   void draw(DrawingContext& sc, ParticleSystem& psys);
 };
 



From grumbel at berlios.de  Tue Jan 17 19:59:59 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 19:59:59 +0100
Subject: [Windstille-commit] r1222 - in trunk/src: . display particles
Message-ID: <200601171859.k0HIxxki003540@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 19:59:55 +0100 (Tue, 17 Jan 2006)
New Revision: 1222

Added:
   trunk/src/tile_description.cpp
   trunk/src/tile_description.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/display.cpp
   trunk/src/display/display.hpp
   trunk/src/display/framebuffer.cpp
   trunk/src/display/scene_context.cpp
   trunk/src/particles/deform_drawer.cpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_factory.hpp
Log:
- no code change, just moved class into different file

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/SConscript	2006-01-17 18:59:55 UTC (rev 1222)
@@ -77,6 +77,7 @@
 'tile_factory.cpp',
 'tile_map.cpp',
 'tile_packer.cpp',
+'tile_description.cpp',
 'timer.cpp',
 'trigger.cpp',
 'util.cpp',

Modified: trunk/src/display/display.cpp
===================================================================
--- trunk/src/display/display.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/display/display.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -36,8 +36,11 @@
 #include "util.hpp"
 #include <assert.h>
 
+namespace {
 SDL_Surface* Display::window       = 0;
 std::vector<Rect> Display::cliprects;
+std::vector<Framebuffer> framebuffers;
+}
 
 void
 Display::draw_line(const Vector& pos1, const Vector& pos2, const Color& color)
@@ -446,4 +449,37 @@
     }
 }
 
+void
+Display::push_framebuffer(Framebuffer& framebuffer)
+{
+  framebuffers.push_back(framebuffer);
+  // FIXME: How expensive is it to switch framebuffers? might be worth
+  // to optimze some switches away
+  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffers.back().get_handle());
+}
+
+void
+Display::pop_framebuffer()
+{
+  framebuffers.pop_back();
+
+  if (framebuffers.empty())
+    {
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffers.back().get_handle());
+    }
+  else
+    {
+      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+    }
+}
+
+Framebuffer
+Display::get_framebuffer()
+{
+  if (framebuffers.empty())
+    return Framebuffer();
+  else
+    return framebuffers.back();
+}
+
 /* EOF */

Modified: trunk/src/display/display.hpp
===================================================================
--- trunk/src/display/display.hpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/display/display.hpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -30,6 +30,7 @@
 #include <SDL.h>
 #include "math/rect.hpp"
 #include "color.hpp"
+#include "display/framebuffer.hpp"
 
 class Display
 {
@@ -57,6 +58,10 @@
   static void push_cliprect(const Rect& rect);
   static void pop_cliprect();
 
+  static void push_framebuffer(Framebuffer& framebuffer);
+  static void pop_framebuffer();
+  static Framebuffer get_framebuffer();
+
   static void set_gamma(float r, float g, float b);
 
   static void save_screenshot(const std::string& filename);

Modified: trunk/src/display/framebuffer.cpp
===================================================================
--- trunk/src/display/framebuffer.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/display/framebuffer.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -41,6 +41,9 @@
   {
     glGenFramebuffersEXT(1, &handle);
     assert_gl("Framebuffer1");
+
+    // FIXME: Should use push/pop_framebuffer instead, but don't have
+    // pointer to Framebuffer here
     glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, handle);
     assert_gl("Framebuffer2");
     glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, 

Modified: trunk/src/display/scene_context.cpp
===================================================================
--- trunk/src/display/scene_context.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/display/scene_context.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -44,10 +44,6 @@
 #define LIGHTMAP_DIV 4
 #define BLURMAP_DIV 1
 
-GLuint current_framebuffer;
-
-
-
 class SceneContextImpl
 {
 public:
@@ -258,9 +254,8 @@
   if (impl->render_mask & LIGHTMAPSCREEN)
     {
       // Render the lightmap to the lightmap_framebuffer
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->lightmap_framebuffer.get_handle());
-      current_framebuffer = impl->lightmap_framebuffer.get_handle();
-
+      Display::push_framebuffer(impl->lightmap_framebuffer);
+      
       glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
       glPushMatrix();
@@ -269,33 +264,30 @@
       impl->light.render(*this);
       glPopMatrix();
 
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+      Display::pop_framebuffer();
     }
 
   if (impl->render_mask & COLORMAP)
     {
       // Render the colormap to the screen_framebuffer
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
-      current_framebuffer = impl->screen_framebuffer.get_handle();
+      Display::push_framebuffer(impl->screen_framebuffer);
       impl->color.render(*this);
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+      Display::pop_framebuffer();
     }
 
 
   if (impl->render_mask & LIGHTMAP)
     { // Renders the lightmap to the screen
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
-      current_framebuffer = impl->screen_framebuffer.get_handle();
+      Display::push_framebuffer(impl->screen_framebuffer);
       render_lightmap();
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+      Display::pop_framebuffer();
     }
 
   if (impl->render_mask & HIGHLIGHTMAP)
     {
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
-      current_framebuffer = impl->screen_framebuffer.get_handle();
+      Display::push_framebuffer(impl->screen_framebuffer);
       impl->highlight.render(*this);
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+      Display::pop_framebuffer();
     }
 
   if (1) 
@@ -373,12 +365,13 @@
 {
   if (request->needs_prepare())
     {
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->tmp_framebuffer.get_handle());
-      current_framebuffer = impl->tmp_framebuffer.get_handle();
+      Display::push_framebuffer(impl->tmp_framebuffer);
       request->prepare(impl->screen_framebuffer.get_texture());
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, impl->screen_framebuffer.get_handle());
-      current_framebuffer = impl->screen_framebuffer.get_handle();
+      Display::pop_framebuffer();
+      
+      Display::push_framebuffer(impl->screen_framebuffer);
       request->draw(impl->tmp_framebuffer.get_texture());
+      Display::pop_framebuffer();
     }
   else
     {

Modified: trunk/src/particles/deform_drawer.cpp
===================================================================
--- trunk/src/particles/deform_drawer.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/particles/deform_drawer.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -27,15 +27,13 @@
 #include <GL/gl.h>
 #include <GL/glext.h>
 
+#include "display/display.hpp"
 #include "display/shader_object.hpp"
 #include "particle_system.hpp"
 #include "display/drawing_request.hpp"
 #include "display/opengl_state.hpp"
 #include "deform_drawer.hpp"
 
-// FIXME: HACK
-extern GLuint current_framebuffer;
-
 class DeformDrawerRequest : public DrawingRequest
 {
 public:
@@ -56,10 +54,10 @@
   
   void draw(const Texture& tmp_texture) 
   {
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffer.get_handle());
+    Display::push_framebuffer(framebuffer);
     glClear(GL_COLOR_BUFFER_BIT);
     draw_particles();
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, current_framebuffer);
+    Display::pop_framebuffer();
 
     if (1) {
       OpenGLState state;

Added: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/tile_description.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -0,0 +1,152 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <SDL.h>
+#include <SDL_image.h>
+#include "physfs/physfs_sdl.hpp"
+#include "globals.hpp"
+#include "tile.hpp"
+#include "tile_packer.hpp"
+#include "tile_factory.hpp"
+#include "tile_description.hpp"
+
+/** Check if the given region of the given image is fully transparent */
+static bool surface_empty(SDL_Surface* image, int sx, int sy, int w, int h)
+{
+  SDL_LockSurface(image);
+  
+  unsigned char* data = static_cast<unsigned char*>(image->pixels);
+  
+  for(int y = sy; y < sy + h; ++y)
+    for(int x = sx; x < sx + w; ++x)
+      {
+        if (data[y * image->pitch + 4*x + 3] != 0)
+          { 
+            SDL_UnlockSurface(image);
+            return false;
+          }
+      }
+
+  SDL_UnlockSurface(image);
+  return true;
+}
+
+TileDescription::TileDescription(FileReader& props)
+  : width(0), height(0)
+{
+  props.get("ids",    ids);
+  props.get("image",  filename);
+  props.get("colmap", colmap);
+  props.get("width",  width);
+  props.get("height", height);
+    
+  props.print_unused_warnings("tiles");
+
+  if(filename == "")
+    throw std::runtime_error("Missing color-image");
+}
+
+void
+TileDescription::load(TileFactory* factory)
+{
+  if (debug)
+    std::cout << "Loading tiles: " << filename << std::endl;
+
+  SDL_Surface* image = IMG_Load_RW(get_physfs_SDLRWops(filename), 1);
+  if(!image) 
+    {
+      std::ostringstream msg;
+      msg << "Couldn't load image '" << filename << "': " << SDL_GetError();
+      throw std::runtime_error(msg.str());
+    }
+ 
+  try {
+    int num_tiles = width * height; //(image->w/TILE_RESOLUTION) * (image->h/TILE_RESOLUTION);
+    if (int(colmap.size()) != num_tiles)
+      {
+        std::ostringstream str;
+        str << "'colmap' information and num_tiles mismatch (" 
+            << colmap.size() << " != " << num_tiles << ") for image '" << filename << "'";
+        throw std::runtime_error(str.str());
+      }
+
+    if (int(ids.size()) != num_tiles)
+      {
+        std::ostringstream str;
+        str << "'ids' information and num_tiles mismatch (" 
+            << ids.size() << " != " << num_tiles << ") for image '" << filename << "'";
+        throw std::runtime_error(str.str());
+      }
+    
+    int i = 0;
+    for (int y = 0; y < height*TILE_RESOLUTION; y += TILE_RESOLUTION)
+      {
+        for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
+          {
+            int id = ids[i];
+            int collider = colmap[i];
+            i++;
+
+            if(id == -1)
+              continue;
+
+            if(id < (int) factory->tiles.size() && factory->tiles[id] != 0)
+              {
+                std::ostringstream msg;
+                msg << "Duplicate tile id: " << filename << " " << id;
+                throw std::runtime_error(msg.str());
+              } 
+
+            if (id >= int(factory->tiles.size()))
+              factory->tiles.resize(id + 1, 0);
+
+            factory->tiles[id] = new Tile(collider); 
+            Tile& tile = *(factory->tiles[id]);
+            tile.id = id;
+
+            if (surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))
+              continue;
+            
+            if(factory->packers[factory->color_packer]->is_full())
+              {
+                factory->packers.push_back(new TilePacker(1024, 1024));
+                factory->color_packer = factory->packers.size() - 1;
+              }
+
+            Rectf rect = factory->packers[factory->color_packer]->pack(image, x, y,
+                                                                       TILE_RESOLUTION, TILE_RESOLUTION);
+            tile.color_rect   = rect;
+            tile.color_packer = factory->color_packer;
+            tile.texture      = factory->packers[factory->color_packer]->get_texture();
+          }
+      }
+  } catch(...) {
+    SDL_FreeSurface(image);
+    throw;
+  }
+  SDL_FreeSurface(image);
+}
+
+/* EOF */

Added: trunk/src/tile_description.hpp
===================================================================
--- trunk/src/tile_description.hpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/tile_description.hpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -0,0 +1,57 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TILE_DESCRIPTION_HPP
+#define HEADER_TILE_DESCRIPTION_HPP
+
+#include <vector>
+#include <string>
+#include "file_reader.hpp"
+
+class TileFactory;
+
+/**
+ * The TileDescription descriptes a set of tiles
+ */
+class TileDescription
+{
+public:
+  std::vector<int> ids;
+  std::vector<int> colmap;
+  std::string filename;
+  int width;
+  int height;
+
+  TileDescription(FileReader& props);
+
+  /**
+   * Load the TileDescription into the give TileFactory
+   */
+  void load(TileFactory* factory);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/tile_factory.cpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -30,6 +30,7 @@
 #include "tile.hpp"
 #include "tile_packer.hpp"
 #include "tile_factory.hpp"
+#include "tile_description.hpp"
 #include "lisp/lisp.hpp"
 #include "lisp/parser.hpp"
 #include "lisp/properties.hpp"
@@ -41,138 +42,6 @@
 
 std::string TileFactory::tile_def_file = "tiles.scm";
 
-/** Check if the given region of the given image is fully transparent */
-static bool surface_empty(SDL_Surface* image, int sx, int sy, int w, int h)
-{
-  SDL_LockSurface(image);
-  
-  unsigned char* data = static_cast<unsigned char*>(image->pixels);
-  
-  for(int y = sy; y < sy + h; ++y)
-    for(int x = sx; x < sx + w; ++x)
-      {
-        if (data[y * image->pitch + 4*x + 3] != 0)
-          { 
-            SDL_UnlockSurface(image);
-            return false;
-          }
-      }
-
-  SDL_UnlockSurface(image);
-  return true;
-}
-
-class TileDescription
-{
-public:
-  TileFactory* factory;
-
-  std::vector<int> ids;
-  std::vector<int> colmap;
-  std::string filename;
-  int width;
-  int height;
-
-
-  TileDescription(TileFactory* factory_, const lisp::Lisp* data)
-    : factory(factory_), width(0), height(0)
-  {
-    assert(data);
-    lisp::Properties props(data);
-
-    props.get("ids",    ids);
-    props.get("image",  filename);
-    props.get("colmap", colmap);
-    props.get("width",  width);
-    props.get("height", height);
-    
-    props.print_unused_warnings("tiles");
-
-    if(filename == "")
-      throw std::runtime_error("Missing color-image");
-  }
-
-  void load()
-  {
-    if (debug)
-      std::cout << "Loading tiles: " << filename << std::endl;
-
-    SDL_Surface* image = IMG_Load_RW(get_physfs_SDLRWops(filename), 1);
-    if(!image) 
-      {
-        std::ostringstream msg;
-        msg << "Couldn't load image '" << filename << "': " << SDL_GetError();
-        throw std::runtime_error(msg.str());
-      }
- 
-    try {
-      int num_tiles = width * height; //(image->w/TILE_RESOLUTION) * (image->h/TILE_RESOLUTION);
-      if (int(colmap.size()) != num_tiles)
-        {
-          std::ostringstream str;
-          str << "'colmap' information and num_tiles mismatch (" 
-              << colmap.size() << " != " << num_tiles << ") for image '" << filename << "'";
-          throw std::runtime_error(str.str());
-        }
-
-      if (int(ids.size()) != num_tiles)
-        {
-          std::ostringstream str;
-          str << "'ids' information and num_tiles mismatch (" 
-              << ids.size() << " != " << num_tiles << ") for image '" << filename << "'";
-          throw std::runtime_error(str.str());
-        }
-    
-      int i = 0;
-      for (int y = 0; y < height*TILE_RESOLUTION; y += TILE_RESOLUTION)
-        {
-          for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
-            {
-              int id = ids[i];
-              int collider = colmap[i];
-              i++;
-
-              if(id == -1)
-                continue;
-
-              if(id < (int) factory->tiles.size() && factory->tiles[id] != 0)
-                {
-                  std::ostringstream msg;
-                  msg << "Duplicate tile id: " << filename << " " << id;
-                  throw std::runtime_error(msg.str());
-                } 
-
-              if (id >= int(factory->tiles.size()))
-                factory->tiles.resize(id + 1, 0);
-
-              factory->tiles[id] = new Tile(collider); 
-              Tile& tile = *(factory->tiles[id]);
-              tile.id = id;
-
-              if (surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))
-                continue;
-            
-              if(factory->packers[factory->color_packer]->is_full())
-                {
-                  factory->packers.push_back(new TilePacker(1024, 1024));
-                  factory->color_packer = factory->packers.size() - 1;
-                }
-
-              Rectf rect = factory->packers[factory->color_packer]->pack(image, x, y,
-                                                                         TILE_RESOLUTION, TILE_RESOLUTION);
-              tile.color_rect   = rect;
-              tile.color_packer = factory->color_packer;
-              tile.texture      = factory->packers[factory->color_packer]->get_texture();
-            }
-        }
-    } catch(...) {
-      SDL_FreeSurface(image);
-      throw;
-    }
-    SDL_FreeSurface(image);
-  }
-};
-
 TileFactory::TileFactory (const std::string& filename)
 {
   using namespace lisp;
@@ -215,17 +84,22 @@
   using namespace lisp;
   assert(data);
 
-  TileDescription desc(this, data);
-
-  desc.load();
+  lisp::Properties props(data);
+  TileDescription desc(props);
+  desc.load(this);
 }
 
 Tile*
 TileFactory::create(int id)
 {
   if(id < 0 || id >= (int) tiles.size())
-    return 0;
-  return tiles[id];
+    {
+      return 0;
+    }
+  else
+    {
+      return tiles[id];
+    }
 }
 
 void
@@ -235,7 +109,7 @@
   current_ = new TileFactory(tile_def_file);
 }
 
-/** Destroy the default TileFactor*/
+/** Destroy the default TileFactor */
 void
 TileFactory::deinit()
 {

Modified: trunk/src/tile_factory.hpp
===================================================================
--- trunk/src/tile_factory.hpp	2006-01-13 17:03:08 UTC (rev 1221)
+++ trunk/src/tile_factory.hpp	2006-01-17 18:59:55 UTC (rev 1222)
@@ -52,13 +52,12 @@
   TileFactory(const std::string& filename);
   ~TileFactory();
 
-  /** Create a new tile, or loads&creates it if it is not already available */
+  /**
+   * Create a new tile, or loads&create it if it is not already
+   * available
+   */
   Tile* create(int tile_id);
 
-  Texture get_texture(int tile_id);
-
-  void add(int id, Tile* tile);
-
   /** Create the default TileFactor*/
   static void init();
 



From grumbel at berlios.de  Tue Jan 17 20:01:36 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 20:01:36 +0100
Subject: [Windstille-commit] r1223 - in trunk/src: collision font scripting
Message-ID: <200601171901.k0HJ1aub004670@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 20:01:31 +0100 (Tue, 17 Jan 2006)
New Revision: 1223

Modified:
   trunk/src/collision/
   trunk/src/font/
   trunk/src/scripting/
Log:
- some svn:ignore


Property changes on: trunk/src/collision
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/font
___________________________________________________________________
Name: svn:ignore
   - .sconsign

   + 
.sconsign
semantic.cache



Property changes on: trunk/src/scripting
___________________________________________________________________
Name: svn:ignore
   - 
.sconsign
semantic.cache

   + 
miniswig.tmp
.sconsign
semantic.cache




From grumbel at berlios.de  Tue Jan 17 20:05:43 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 20:05:43 +0100
Subject: [Windstille-commit] r1224 - trunk/src/display
Message-ID: <200601171905.k0HJ5hNM007293@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 20:05:41 +0100 (Tue, 17 Jan 2006)
New Revision: 1224

Modified:
   trunk/src/display/display.cpp
Log:
- little bugfix

Modified: trunk/src/display/display.cpp
===================================================================
--- trunk/src/display/display.cpp	2006-01-17 19:01:31 UTC (rev 1223)
+++ trunk/src/display/display.cpp	2006-01-17 19:05:41 UTC (rev 1224)
@@ -461,15 +461,17 @@
 void
 Display::pop_framebuffer()
 {
+  assert(!framebuffers.empty());
+
   framebuffers.pop_back();
-
-  if (framebuffers.empty())
+  
+  if (!framebuffers.empty())
     {
       glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffers.back().get_handle());
     }
   else
     {
-      glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+          glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
     }
 }
 



From grumbel at berlios.de  Tue Jan 17 21:02:58 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 21:02:58 +0100
Subject: [Windstille-commit] r1225 - in trunk/src: . display particles
Message-ID: <200601172002.k0HK2wDs012586@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 21:02:46 +0100 (Tue, 17 Jan 2006)
New Revision: 1225

Modified:
   trunk/src/display/surface.cpp
   trunk/src/display/surface.hpp
   trunk/src/display/vertex_array_drawing_request.cpp
   trunk/src/display/vertex_array_drawing_request.hpp
   trunk/src/particles/surface_drawer.cpp
   trunk/src/tile.hpp
   trunk/src/tile_description.cpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_factory.hpp
Log:
- bit of cleanup

Modified: trunk/src/display/surface.cpp
===================================================================
--- trunk/src/display/surface.cpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/display/surface.cpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -34,8 +34,7 @@
 {
 public:
   Texture texture;
-  float texcoords[8];
-  Rectf  uv;
+  Rectf   uv;
 
   int width;
   int height;
@@ -68,19 +67,8 @@
   impl->uv      = Rectf(0, 0,
                         float(impl->width)  / impl->texture.get_width(),
                         float(impl->height) / impl->texture.get_height());
-
-  // Keep the texcoords in array form for convenience
-  impl->texcoords[0] = impl->uv.left;
-  impl->texcoords[1] = impl->uv.top;
-  impl->texcoords[2] = impl->uv.right;
-  impl->texcoords[3] = impl->uv.top;
-  impl->texcoords[4] = impl->uv.right;
-  impl->texcoords[5] = impl->uv.bottom;
-  impl->texcoords[6] = impl->uv.left;
-  impl->texcoords[7] = impl->uv.bottom;
 }
 
-
 Surface::Surface(Texture texture, const Rectf& rect, int width, int height)
   : impl(new SurfaceImpl())
 {
@@ -88,16 +76,6 @@
   impl->width   = width;
   impl->height  = height;
   impl->uv      = rect;
-
-  // Keep the texcoords in array form for convenience
-  impl->texcoords[0] = rect.left;
-  impl->texcoords[1] = rect.top;
-  impl->texcoords[2] = rect.right;
-  impl->texcoords[3] = rect.top;
-  impl->texcoords[4] = rect.right;
-  impl->texcoords[5] = rect.bottom;
-  impl->texcoords[6] = rect.left;
-  impl->texcoords[7] = rect.bottom;
 }
 
 Surface::~Surface()
@@ -122,12 +100,6 @@
   return impl->texture;
 }
 
-const float*
-Surface::get_texcoords() const
-{
-  return impl->texcoords; 
-}
-
 Rectf
 Surface::get_uv() const
 {

Modified: trunk/src/display/surface.hpp
===================================================================
--- trunk/src/display/surface.hpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/display/surface.hpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -62,9 +62,6 @@
 
   Texture get_texture() const;
 
-  /** Returns texture coordinates for the Surface rectangle (float[8]) */
-  const float* get_texcoords() const;
-
   /** Returns texture coordinates for the Surface rectangle */
   Rectf get_uv() const;
 

Modified: trunk/src/display/vertex_array_drawing_request.cpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.cpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/display/vertex_array_drawing_request.cpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -129,6 +129,19 @@
 }
 
 void
+VertexArrayDrawingRequest::add_texcoords(const Rectf& rect)
+{
+  texcoords.push_back(rect.left);
+  texcoords.push_back(rect.top);
+  texcoords.push_back(rect.right);
+  texcoords.push_back(rect.top);
+  texcoords.push_back(rect.right);
+  texcoords.push_back(rect.bottom);
+  texcoords.push_back(rect.left);
+  texcoords.push_back(rect.bottom);
+}
+
+void
 VertexArrayDrawingRequest::add_texcoords(const float* coords, size_t n)
 {
   assert(n % 2 == 0);

Modified: trunk/src/display/vertex_array_drawing_request.hpp
===================================================================
--- trunk/src/display/vertex_array_drawing_request.hpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/display/vertex_array_drawing_request.hpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -52,6 +52,12 @@
   void texcoord(float u, float v);
   void color(const Color& color);
   void add_texcoords(const float* coords, size_t n);
+  /**
+   * Add eight texcoords for use with a quad from a given rect. The
+   * coords are clockwise around the rect, ie:
+   * left, top, right, top, right, bottom, left, bottom,
+   */
+  void add_texcoords(const Rectf& coords);
 
   int num_vertices() const;
 

Modified: trunk/src/particles/surface_drawer.cpp
===================================================================
--- trunk/src/particles/surface_drawer.cpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/particles/surface_drawer.cpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -131,7 +131,7 @@
               y_rot = (width/2) * s + (height/2) * c;
             }
 
-          buffer->add_texcoords(surface.get_texcoords(), 8);
+          buffer->add_texcoords(surface.get_uv());
 
           buffer->color(color);
           buffer->vertex(i->x - x_rot, i->y - y_rot);

Modified: trunk/src/tile.hpp
===================================================================
--- trunk/src/tile.hpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/tile.hpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -45,8 +45,8 @@
 
   // FIXME: Using a surface here might be a worthy consideration, just
   // need to find a way to properly bucket-sort the request
+  int     color_packer;
   Rectf   color_rect;
-  int     color_packer;
   Texture texture;
 
   /** bitmap that holds the collision attributes for this tile */

Modified: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/tile_description.cpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -71,6 +71,9 @@
 void
 TileDescription::load(TileFactory* factory)
 {
+  // FIXME: This function messes far to much around with TileFactory's
+  // internals
+  
   if (debug)
     std::cout << "Loading tiles: " << filename << std::endl;
 

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/tile_factory.cpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -85,7 +85,10 @@
   assert(data);
 
   lisp::Properties props(data);
-  TileDescription desc(props);
+
+  descriptions.push_back(TileDescription(props));
+  
+  TileDescription& desc = descriptions.back();
   desc.load(this);
 }
 

Modified: trunk/src/tile_factory.hpp
===================================================================
--- trunk/src/tile_factory.hpp	2006-01-17 19:05:41 UTC (rev 1224)
+++ trunk/src/tile_factory.hpp	2006-01-17 20:02:46 UTC (rev 1225)
@@ -23,6 +23,7 @@
 #include <map>
 #include <string>
 #include "lisp/lisp.hpp"
+#include "tile_description.hpp"
 
 class Tile;
 class TilePacker;
@@ -40,6 +41,9 @@
   static TileFactory* current_;
 
   friend class TileDescription;
+
+  std::vector<TileDescription> descriptions;
+  
 public:
   static std::string tile_def_file;
 



From grumbel at berlios.de  Tue Jan 17 21:05:58 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 21:05:58 +0100
Subject: [Windstille-commit] r1226 - trunk/src/display
Message-ID: <200601172005.k0HK5wcs017686@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 21:05:56 +0100 (Tue, 17 Jan 2006)
New Revision: 1226

Modified:
   trunk/src/display/surface.cpp
Log:
- replaced width/height with size


Modified: trunk/src/display/surface.cpp
===================================================================
--- trunk/src/display/surface.cpp	2006-01-17 20:02:46 UTC (rev 1225)
+++ trunk/src/display/surface.cpp	2006-01-17 20:05:56 UTC (rev 1226)
@@ -33,11 +33,20 @@
 class SurfaceImpl
 {
 public:
+  /**
+   * Texture on which the surface is located
+   */
   Texture texture;
+
+  /** 
+   * uv coordinates of the Surface in [0,1] range
+   */
   Rectf   uv;
 
-  int width;
-  int height;
+  /**
+   * The size of the Surface in pixels
+   */
+  Size size;
 };
 
 Surface::Surface()
@@ -60,21 +69,20 @@
 Surface::Surface(int width, int height)
   : impl(new SurfaceImpl())
 {
-  impl->width  = width;
-  impl->height = height;
+  impl->size  = Size(width, height);
 
   impl->texture = Texture(GL_TEXTURE_2D, power_of_two(width), power_of_two(height));
   impl->uv      = Rectf(0, 0,
-                        float(impl->width)  / impl->texture.get_width(),
-                        float(impl->height) / impl->texture.get_height());
+                        float(impl->size.width)  / impl->texture.get_width(),
+                        float(impl->size.height) / impl->texture.get_height());
 }
 
 Surface::Surface(Texture texture, const Rectf& rect, int width, int height)
   : impl(new SurfaceImpl())
 {
   impl->texture = texture;
-  impl->width   = width;
-  impl->height  = height;
+  impl->size.width   = width;
+  impl->size.height  = height;
   impl->uv      = rect;
 }
 
@@ -85,13 +93,13 @@
 int
 Surface::get_width()  const
 {
-  return impl->width;
+  return impl->size.width;
 }
 
 int
 Surface::get_height() const
 { 
-  return impl->height; 
+  return impl->size.height; 
 }
 
 Texture
@@ -126,13 +134,13 @@
   glVertex2f(pos.x, pos.y);
 
   glTexCoord2f(impl->uv.right, impl->uv.top);
-  glVertex2f(pos.x + impl->width, pos.y);
+  glVertex2f(pos.x + impl->size.width, pos.y);
 
   glTexCoord2f(impl->uv.right, impl->uv.bottom);
-  glVertex2f(pos.x + impl->width, pos.y + impl->height);
+  glVertex2f(pos.x + impl->size.width, pos.y + impl->size.height);
 
   glTexCoord2f(impl->uv.left, impl->uv.bottom);
-  glVertex2f(pos.x, pos.y + impl->height);
+  glVertex2f(pos.x, pos.y + impl->size.height);
 
   glEnd();
 }
@@ -155,13 +163,14 @@
   glVertex2f(params.pos.x, params.pos.y);
 
   glTexCoord2f(impl->uv.right, impl->uv.top);
-  glVertex2f(params.pos.x + impl->width * params.scale, params.pos.y);
+  glVertex2f(params.pos.x + impl->size.width * params.scale, params.pos.y);
 
   glTexCoord2f(impl->uv.right, impl->uv.bottom);
-  glVertex2f(params.pos.x + impl->width * params.scale, params.pos.y + impl->height * params.scale);
+  glVertex2f(params.pos.x + impl->size.width * params.scale, 
+             params.pos.y + impl->size.height * params.scale);
 
   glTexCoord2f(impl->uv.left, impl->uv.bottom);
-  glVertex2f(params.pos.x, params.pos.y + impl->height * params.scale);
+  glVertex2f(params.pos.x, params.pos.y + impl->size.height * params.scale);
 
   glEnd(); 
 }



From grumbel at berlios.de  Tue Jan 17 22:08:41 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 22:08:41 +0100
Subject: [Windstille-commit] r1227 - in trunk/src: . display
Message-ID: <200601172108.k0HL8f2X011911@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 22:08:40 +0100 (Tue, 17 Jan 2006)
New Revision: 1227

Added:
   trunk/src/display/render_buffer.cpp
   trunk/src/display/render_buffer.hpp
Modified:
   trunk/src/SConscript
   trunk/src/display/framebuffer.cpp
Log:
- added depth buffer support to framebuffer

Modified: trunk/src/SConscript
===================================================================
--- trunk/src/SConscript	2006-01-17 20:05:56 UTC (rev 1226)
+++ trunk/src/SConscript	2006-01-17 21:08:40 UTC (rev 1227)
@@ -65,6 +65,7 @@
 'pistol.cpp',
 'player.cpp',
 'random.cpp',
+'display/render_buffer.cpp',
 'screen.cpp',
 'screen_manager.cpp',
 'scriptable_object.cpp',

Modified: trunk/src/display/framebuffer.cpp
===================================================================
--- trunk/src/display/framebuffer.cpp	2006-01-17 20:05:56 UTC (rev 1226)
+++ trunk/src/display/framebuffer.cpp	2006-01-17 21:08:40 UTC (rev 1227)
@@ -28,6 +28,7 @@
 #include <GL/glext.h>
 #include "util.hpp"
 #include "texture.hpp"
+#include "render_buffer.hpp"
 #include "framebuffer.hpp"
 
 class FramebufferImpl
@@ -35,26 +36,32 @@
 public:
   GLuint  handle;
   Texture texture;
+  RenderBuffer render_buffer;
   
   FramebufferImpl(GLenum target, int width, int height)
-    : texture(target, width, height)
+    : texture(target, width, height),
+      render_buffer(GL_DEPTH_COMPONENT24, width, height)
   {
     glGenFramebuffersEXT(1, &handle);
     assert_gl("Framebuffer1");
 
-    // FIXME: Should use push/pop_framebuffer instead, but don't have
-    // pointer to Framebuffer here
+    // FIXME: Should use push/pop_framebuffer instead, but don't have pointer to Framebuffer here
     glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, handle);
     assert_gl("Framebuffer2");
     glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, 
                               GL_COLOR_ATTACHMENT0_EXT, texture.get_target(), texture.get_handle(), 0);
     assert_gl("Framebuffer3");
+    
+    glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, 
+                                 GL_DEPTH_ATTACHMENT_EXT, // FIXME: must not hardcode this
+                                 GL_RENDERBUFFER_EXT, render_buffer.get_handle());
+
     glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
   }
 
   ~FramebufferImpl()
   {
-    glDeleteRenderbuffersEXT(1, &handle);
+    glDeleteFramebuffersEXT(1, &handle);
   }
 };
 

Added: trunk/src/display/render_buffer.cpp
===================================================================
--- trunk/src/display/render_buffer.cpp	2006-01-17 20:05:56 UTC (rev 1226)
+++ trunk/src/display/render_buffer.cpp	2006-01-17 21:08:40 UTC (rev 1227)
@@ -0,0 +1,64 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#define GL_GLEXT_PROTOTYPES 1
+#include <GL/gl.h>
+#include <GL/glext.h>
+
+#include "render_buffer.hpp"
+
+class RenderBufferImpl
+{
+public:
+  GLuint handle;
+
+  RenderBufferImpl(GLenum format, int width, int height)
+  {
+    glGenRenderbuffersEXT(1, &handle);
+
+    glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, handle);
+    glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, format, width, height);
+    
+    glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, 0);
+  }
+
+  ~RenderBufferImpl()
+  {
+    glDeleteRenderbuffersEXT(1, &handle);
+  }
+};
+
+RenderBuffer::RenderBuffer(GLenum format, int width, int height)
+  : impl(new RenderBufferImpl(format, width, height))
+{
+}
+
+GLuint
+RenderBuffer::get_handle() const
+{
+  return impl->handle;
+}
+
+/* EOF */

Added: trunk/src/display/render_buffer.hpp
===================================================================
--- trunk/src/display/render_buffer.hpp	2006-01-17 20:05:56 UTC (rev 1226)
+++ trunk/src/display/render_buffer.hpp	2006-01-17 21:08:40 UTC (rev 1227)
@@ -0,0 +1,52 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_RENDER_BUFFER_HPP
+#define HEADER_RENDER_BUFFER_HPP
+
+#include <GL/gl.h>
+#include "sharedptr.hpp"
+
+class RenderBufferImpl;
+
+/** */
+class RenderBuffer
+{
+public:
+  /**
+   * @param width  Width of the Renderbuffer
+   * @param height Height of the Renderbuffer
+   * @param format GL_DEPTH_COMPONENT24, GL_STENCIL_INDEX, ...
+   */
+  RenderBuffer(GLenum format, int width, int height);
+  
+  GLuint get_handle() const;
+private:
+  SharedPtr<RenderBufferImpl> impl;
+};
+
+#endif
+
+/* EOF */



From grumbel at berlios.de  Tue Jan 17 22:21:24 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 22:21:24 +0100
Subject: [Windstille-commit] r1228 - in trunk/src: . font
Message-ID: <200601172121.k0HLLOEi013817@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 22:21:21 +0100 (Tue, 17 Jan 2006)
New Revision: 1228

Modified:
   trunk/src/font/ttf_font.cpp
   trunk/src/windstille_main.cpp
Log:
- 'fixed' argument handling
- changed font texture to GL_NEAREST (looks better on zoom-in, but worse on zoom-out)

Modified: trunk/src/font/ttf_font.cpp
===================================================================
--- trunk/src/font/ttf_font.cpp	2006-01-17 21:08:40 UTC (rev 1227)
+++ trunk/src/font/ttf_font.cpp	2006-01-17 21:21:21 UTC (rev 1228)
@@ -156,6 +156,7 @@
 
   try {
     impl->texture = Texture(pixelbuffer);
+    impl->texture.set_filter(GL_NEAREST);
   } catch(...) {
     SDL_FreeSurface(pixelbuffer);
     throw;

Modified: trunk/src/windstille_main.cpp
===================================================================
--- trunk/src/windstille_main.cpp	2006-01-17 21:08:40 UTC (rev 1227)
+++ trunk/src/windstille_main.cpp	2006-01-17 21:21:21 UTC (rev 1228)
@@ -72,6 +72,8 @@
     dictionaryManager->add_directory("locale");
 
     config.load();
+    
+    config.parse_args(argc, argv);
 
     init_modules();
 



From grumbel at berlios.de  Tue Jan 17 23:04:23 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Tue, 17 Jan 2006 23:04:23 +0100
Subject: [Windstille-commit] r1229 - trunk/src
Message-ID: <200601172204.k0HM4N3G019193@sheep.berlios.de>

Author: grumbel
Date: 2006-01-17 23:04:22 +0100 (Tue, 17 Jan 2006)
New Revision: 1229

Modified:
   trunk/src/tile.cpp
   trunk/src/tile.hpp
   trunk/src/tile_description.cpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_factory.hpp
Log:
- added some crude load-on-demand for tiles

Modified: trunk/src/tile.cpp
===================================================================
--- trunk/src/tile.cpp	2006-01-17 21:21:21 UTC (rev 1228)
+++ trunk/src/tile.cpp	2006-01-17 22:04:22 UTC (rev 1229)
@@ -25,6 +25,7 @@
   : colmap(arg_colmap)
 {
   color_packer = -1;
+  desc = 0;
 }
 
 /* EOF */

Modified: trunk/src/tile.hpp
===================================================================
--- trunk/src/tile.hpp	2006-01-17 21:21:21 UTC (rev 1228)
+++ trunk/src/tile.hpp	2006-01-17 22:04:22 UTC (rev 1229)
@@ -33,6 +33,8 @@
   TILE_RIGHT  = (1 << 3)
 };
 
+class TileDescription;
+
 /** A Tile is a surface or sprite together with information for
  *  collision detection (aka colmap). The collision map is at a
  *  resolution of 8x8 bits. Position information is handled in the
@@ -51,6 +53,7 @@
 
   /** bitmap that holds the collision attributes for this tile */
   unsigned int colmap;
+  TileDescription* desc;
 
   Tile(unsigned int arg_colmap);
 

Modified: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-17 21:21:21 UTC (rev 1228)
+++ trunk/src/tile_description.cpp	2006-01-17 22:04:22 UTC (rev 1229)
@@ -109,13 +109,15 @@
         for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
           {
             int id = ids[i];
-            int collider = colmap[i];
+            int colval = colmap[i];
             i++;
 
             if(id == -1)
               continue;
 
-            if(id < (int) factory->tiles.size() && factory->tiles[id] != 0)
+            if(id < int(factory->tiles.size())
+               && factory->tiles[id] != 0
+               && factory->tiles[id]->desc == 0)
               {
                 std::ostringstream msg;
                 msg << "Duplicate tile id: " << filename << " " << id;
@@ -125,8 +127,10 @@
             if (id >= int(factory->tiles.size()))
               factory->tiles.resize(id + 1, 0);
 
-            factory->tiles[id] = new Tile(collider); 
+            delete factory->tiles[id];
+            factory->tiles[id] = new Tile(colval); 
             Tile& tile = *(factory->tiles[id]);
+            tile.desc = 0;
             tile.id = id;
 
             if (surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-17 21:21:21 UTC (rev 1228)
+++ trunk/src/tile_factory.cpp	2006-01-17 22:04:22 UTC (rev 1229)
@@ -86,10 +86,29 @@
 
   lisp::Properties props(data);
 
-  descriptions.push_back(TileDescription(props));
+  descriptions.push_back(new TileDescription(props));
+  TileDescription& desc = *descriptions.back();
   
-  TileDescription& desc = descriptions.back();
-  desc.load(this);
+  if (0)
+    {
+      desc.load(this);
+    }
+  else
+    {
+      for(std::vector<int>::size_type i = 0; i < desc.ids.size(); ++i)
+        { // FIXME: Very very ugly load on demand
+          int& id = desc.ids[i];
+          if (id != 0)
+            {
+              if (id >= int(tiles.size()))
+                tiles.resize(id + 1, 0);
+    
+              delete tiles[id];
+              tiles[id] = new Tile(desc.colmap[i]);
+              tiles[id]->desc = &desc;
+            }
+        }
+    }
 }
 
 Tile*
@@ -101,6 +120,10 @@
     }
   else
     {
+      // FIXME: Ugly load on demand
+      if (tiles[id] && tiles[id]->desc)
+        tiles[id]->desc->load(this);
+
       return tiles[id];
     }
 }

Modified: trunk/src/tile_factory.hpp
===================================================================
--- trunk/src/tile_factory.hpp	2006-01-17 21:21:21 UTC (rev 1228)
+++ trunk/src/tile_factory.hpp	2006-01-17 22:04:22 UTC (rev 1229)
@@ -42,7 +42,7 @@
 
   friend class TileDescription;
 
-  std::vector<TileDescription> descriptions;
+  std::vector<TileDescription*> descriptions;
   
 public:
   static std::string tile_def_file;



From grumbel at berlios.de  Wed Jan 18 01:52:53 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 18 Jan 2006 01:52:53 +0100
Subject: [Windstille-commit] r1230 - trunk/src
Message-ID: <200601180052.k0I0qr7b010905@sheep.berlios.de>

Author: grumbel
Date: 2006-01-18 01:52:43 +0100 (Wed, 18 Jan 2006)
New Revision: 1230

Modified:
   trunk/src/tile_description.cpp
   trunk/src/tile_packer.cpp
Log:
- replaced float with int (not sure why it was float in the first place)
- replaced some confusing continues with if-blocks

Modified: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-17 22:04:22 UTC (rev 1229)
+++ trunk/src/tile_description.cpp	2006-01-18 00:52:43 UTC (rev 1230)
@@ -108,45 +108,45 @@
       {
         for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
           {
-            int id = ids[i];
-            int colval = colmap[i];
-            i++;
-
-            if(id == -1)
-              continue;
-
-            if(id < int(factory->tiles.size())
-               && factory->tiles[id] != 0
-               && factory->tiles[id]->desc == 0)
+            int& id = ids[i];
+            
+            if(id != -1)
               {
-                std::ostringstream msg;
-                msg << "Duplicate tile id: " << filename << " " << id;
-                throw std::runtime_error(msg.str());
-              } 
+                if(id < int(factory->tiles.size())
+                   && factory->tiles[id] != 0
+                   && factory->tiles[id]->desc == 0)
+                  {
+                    std::cout << "Warning: Duplicate tile id: " << filename << "', ignoring" << id << std::endl;
+                  }
+                else
+                  {
+                    if (id >= int(factory->tiles.size()))
+                      factory->tiles.resize(id + 1, 0);
 
-            if (id >= int(factory->tiles.size()))
-              factory->tiles.resize(id + 1, 0);
+                    delete factory->tiles[id];
+                    factory->tiles[id] = new Tile(colmap[i]);
+                    Tile& tile = *(factory->tiles[id]);
+                    tile.desc = 0;
+                    tile.id = id;
 
-            delete factory->tiles[id];
-            factory->tiles[id] = new Tile(colval); 
-            Tile& tile = *(factory->tiles[id]);
-            tile.desc = 0;
-            tile.id = id;
+                    if (!surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))
+                      {
+                        if(factory->packers[factory->color_packer]->is_full())
+                          {
+                            factory->packers.push_back(new TilePacker(1024, 1024));
+                            factory->color_packer = factory->packers.size() - 1;
+                          }
 
-            if (surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))
-              continue;
-            
-            if(factory->packers[factory->color_packer]->is_full())
-              {
-                factory->packers.push_back(new TilePacker(1024, 1024));
-                factory->color_packer = factory->packers.size() - 1;
+                        Rectf rect = factory->packers[factory->color_packer]->pack(image, x, y,
+                                                                                   TILE_RESOLUTION, TILE_RESOLUTION);
+                        tile.color_rect   = rect;
+                        tile.color_packer = factory->color_packer;
+                        tile.texture      = factory->packers[factory->color_packer]->get_texture();
+                      }
+                  }
               }
 
-            Rectf rect = factory->packers[factory->color_packer]->pack(image, x, y,
-                                                                       TILE_RESOLUTION, TILE_RESOLUTION);
-            tile.color_rect   = rect;
-            tile.color_packer = factory->color_packer;
-            tile.texture      = factory->packers[factory->color_packer]->get_texture();
+            i += 1; 
           }
       }
   } catch(...) {

Modified: trunk/src/tile_packer.cpp
===================================================================
--- trunk/src/tile_packer.cpp	2006-01-17 22:04:22 UTC (rev 1229)
+++ trunk/src/tile_packer.cpp	2006-01-18 00:52:43 UTC (rev 1230)
@@ -42,9 +42,9 @@
   int y_pos;
 
   Texture texture;
-  // width+height of the texture
-  float width;
-  float height;  
+
+  int width;
+  int height;
 };
 
 TilePacker::TilePacker(int width, int height)



From grumbel at berlios.de  Wed Jan 18 02:57:19 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 18 Jan 2006 02:57:19 +0100
Subject: [Windstille-commit] r1231 - trunk/src
Message-ID: <200601180157.k0I1vJYS009161@sheep.berlios.de>

Author: grumbel
Date: 2006-01-18 02:56:58 +0100 (Wed, 18 Jan 2006)
New Revision: 1231

Modified:
   trunk/src/tile_description.cpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_factory.hpp
Log:
- cleaned tile code up a bit

Modified: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-18 00:52:43 UTC (rev 1230)
+++ trunk/src/tile_description.cpp	2006-01-18 01:56:58 UTC (rev 1231)
@@ -32,27 +32,6 @@
 #include "tile_factory.hpp"
 #include "tile_description.hpp"
 
-/** Check if the given region of the given image is fully transparent */
-static bool surface_empty(SDL_Surface* image, int sx, int sy, int w, int h)
-{
-  SDL_LockSurface(image);
-  
-  unsigned char* data = static_cast<unsigned char*>(image->pixels);
-  
-  for(int y = sy; y < sy + h; ++y)
-    for(int x = sx; x < sx + w; ++x)
-      {
-        if (data[y * image->pitch + 4*x + 3] != 0)
-          { 
-            SDL_UnlockSurface(image);
-            return false;
-          }
-      }
-
-  SDL_UnlockSurface(image);
-  return true;
-}
-
 TileDescription::TileDescription(FileReader& props)
   : width(0), height(0)
 {
@@ -84,76 +63,49 @@
       msg << "Couldn't load image '" << filename << "': " << SDL_GetError();
       throw std::runtime_error(msg.str());
     }
- 
-  try {
-    int num_tiles = width * height; //(image->w/TILE_RESOLUTION) * (image->h/TILE_RESOLUTION);
-    if (int(colmap.size()) != num_tiles)
-      {
-        std::ostringstream str;
-        str << "'colmap' information and num_tiles mismatch (" 
-            << colmap.size() << " != " << num_tiles << ") for image '" << filename << "'";
-        throw std::runtime_error(str.str());
-      }
+  else
+    {
+      try 
+        {
+          int num_tiles = width * height; //(image->w/TILE_RESOLUTION) * (image->h/TILE_RESOLUTION);
+          if (int(colmap.size()) != num_tiles)
+            {
+              std::ostringstream str;
+              str << "'colmap' information and num_tiles mismatch (" 
+                  << colmap.size() << " != " << num_tiles << ") for image '" << filename << "'";
+              throw std::runtime_error(str.str());
+            }
 
-    if (int(ids.size()) != num_tiles)
-      {
-        std::ostringstream str;
-        str << "'ids' information and num_tiles mismatch (" 
-            << ids.size() << " != " << num_tiles << ") for image '" << filename << "'";
-        throw std::runtime_error(str.str());
-      }
+          if (int(ids.size()) != num_tiles)
+            {
+              std::ostringstream str;
+              str << "'ids' information and num_tiles mismatch (" 
+                  << ids.size() << " != " << num_tiles << ") for image '" << filename << "'";
+              throw std::runtime_error(str.str());
+            }
     
-    int i = 0;
-    for (int y = 0; y < height*TILE_RESOLUTION; y += TILE_RESOLUTION)
-      {
-        for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
-          {
-            int& id = ids[i];
-            
-            if(id != -1)
-              {
-                if(id < int(factory->tiles.size())
-                   && factory->tiles[id] != 0
-                   && factory->tiles[id]->desc == 0)
-                  {
-                    std::cout << "Warning: Duplicate tile id: " << filename << "', ignoring" << id << std::endl;
-                  }
-                else
-                  {
-                    if (id >= int(factory->tiles.size()))
-                      factory->tiles.resize(id + 1, 0);
+          int i = 0;
+          for (int y = 0; y < height*TILE_RESOLUTION; y += TILE_RESOLUTION)
+            {
+              for (int x = 0; x < width*TILE_RESOLUTION; x += TILE_RESOLUTION)
+                {
+                  if(ids[i] != -1)
+                    {
+                      factory->pack(ids[i], colmap[i], image,
+                                    Rect(x, y, x+TILE_RESOLUTION, y+TILE_RESOLUTION));
+                    }
 
-                    delete factory->tiles[id];
-                    factory->tiles[id] = new Tile(colmap[i]);
-                    Tile& tile = *(factory->tiles[id]);
-                    tile.desc = 0;
-                    tile.id = id;
-
-                    if (!surface_empty(image, x, y, TILE_RESOLUTION, TILE_RESOLUTION))
-                      {
-                        if(factory->packers[factory->color_packer]->is_full())
-                          {
-                            factory->packers.push_back(new TilePacker(1024, 1024));
-                            factory->color_packer = factory->packers.size() - 1;
-                          }
-
-                        Rectf rect = factory->packers[factory->color_packer]->pack(image, x, y,
-                                                                                   TILE_RESOLUTION, TILE_RESOLUTION);
-                        tile.color_rect   = rect;
-                        tile.color_packer = factory->color_packer;
-                        tile.texture      = factory->packers[factory->color_packer]->get_texture();
-                      }
-                  }
-              }
-
-            i += 1; 
-          }
-      }
-  } catch(...) {
-    SDL_FreeSurface(image);
-    throw;
-  }
-  SDL_FreeSurface(image);
+                  i += 1; 
+                }
+            }
+        } 
+      catch(...) 
+        {
+          SDL_FreeSurface(image);
+          throw;
+        }
+      SDL_FreeSurface(image);
+    }
 }
 
 /* EOF */

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-18 00:52:43 UTC (rev 1230)
+++ trunk/src/tile_factory.cpp	2006-01-18 01:56:58 UTC (rev 1231)
@@ -42,6 +42,27 @@
 
 std::string TileFactory::tile_def_file = "tiles.scm";
 
+/** Check if the given region of the given image is fully transparent */
+bool surface_empty(SDL_Surface* image, int sx, int sy, int w, int h)
+{
+  SDL_LockSurface(image);
+  
+  unsigned char* data = static_cast<unsigned char*>(image->pixels);
+  
+  for(int y = sy; y < sy + h; ++y)
+    for(int x = sx; x < sx + w; ++x)
+      {
+        if (data[y * image->pitch + 4*x + 3] != 0)
+          { 
+            SDL_UnlockSurface(image);
+            return false;
+          }
+      }
+
+  SDL_UnlockSurface(image);
+  return true;
+}
+
 TileFactory::TileFactory (const std::string& filename)
 {
   using namespace lisp;
@@ -76,6 +97,11 @@
       delete *i;
     }
   tiles.clear();
+
+  for(std::vector<TileDescription*>::iterator i = descriptions.begin(); i != descriptions.end(); ++i)
+    {
+      delete *i;
+    }
 }
 
 void
@@ -90,11 +116,11 @@
   TileDescription& desc = *descriptions.back();
   
   if (0)
-    {
+    { // Load all on startup
       desc.load(this);
     }
   else
-    {
+    { // Load on demand
       for(std::vector<int>::size_type i = 0; i < desc.ids.size(); ++i)
         { // FIXME: Very very ugly load on demand
           int& id = desc.ids[i];
@@ -111,6 +137,43 @@
     }
 }
 
+void
+TileFactory::pack(int id, int colmap, SDL_Surface* image, const Rect& rect)
+{
+  if(id < int(tiles.size())
+     && tiles[id] != 0
+     && tiles[id]->desc == 0)
+    {
+      std::cout << "Warning: Duplicate tile id '" << id << "' ignoring" << std::endl;
+    }
+  else
+    {      
+      if (id >= int(tiles.size()))
+        tiles.resize(id + 1, 0);
+
+      delete tiles[id];
+      tiles[id]  = new Tile(colmap);
+      tiles[id]->desc  = 0;
+      tiles[id]->id    = id;
+
+      if (!surface_empty(image, rect.left, rect.top, rect.get_width(), rect.get_height()))
+        {
+          if(packers[color_packer]->is_full())
+            {
+              packers.push_back(new TilePacker(1024, 1024));
+              color_packer = packers.size() - 1;
+            }
+          
+          Rectf uv = packers[color_packer]->pack(image, 
+                                                 rect.left, rect.top,
+                                                 rect.get_width(), rect.get_height());
+          tiles[id]->color_rect   = uv;
+          tiles[id]->color_packer = color_packer;
+          tiles[id]->texture      = packers[color_packer]->get_texture();
+        }
+    }
+}
+
 Tile*
 TileFactory::create(int id)
 {

Modified: trunk/src/tile_factory.hpp
===================================================================
--- trunk/src/tile_factory.hpp	2006-01-18 00:52:43 UTC (rev 1230)
+++ trunk/src/tile_factory.hpp	2006-01-18 01:56:58 UTC (rev 1231)
@@ -62,6 +62,8 @@
    */
   Tile* create(int tile_id);
 
+  void pack(int id, int colmap, SDL_Surface* image, const Rect& rect);
+
   /** Create the default TileFactor*/
   static void init();
 



From grumbel at berlios.de  Wed Jan 18 03:17:49 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 18 Jan 2006 03:17:49 +0100
Subject: [Windstille-commit] r1232 - trunk/src
Message-ID: <200601180217.k0I2Hng1018688@sheep.berlios.de>

Author: grumbel
Date: 2006-01-18 03:16:48 +0100 (Wed, 18 Jan 2006)
New Revision: 1232

Modified:
   trunk/src/tile.hpp
   trunk/src/tile_description.cpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_factory.hpp
   trunk/src/tile_map.cpp
Log:
- some more cleanup

Modified: trunk/src/tile.hpp
===================================================================
--- trunk/src/tile.hpp	2006-01-18 01:56:58 UTC (rev 1231)
+++ trunk/src/tile.hpp	2006-01-18 02:16:48 UTC (rev 1232)
@@ -48,7 +48,7 @@
   // FIXME: Using a surface here might be a worthy consideration, just
   // need to find a way to properly bucket-sort the request
   int     color_packer;
-  Rectf   color_rect;
+  Rectf   uv;
   Texture texture;
 
   /** bitmap that holds the collision attributes for this tile */

Modified: trunk/src/tile_description.cpp
===================================================================
--- trunk/src/tile_description.cpp	2006-01-18 01:56:58 UTC (rev 1231)
+++ trunk/src/tile_description.cpp	2006-01-18 02:16:48 UTC (rev 1232)
@@ -49,10 +49,7 @@
 
 void
 TileDescription::load(TileFactory* factory)
-{
-  // FIXME: This function messes far to much around with TileFactory's
-  // internals
-  
+{  
   if (debug)
     std::cout << "Loading tiles: " << filename << std::endl;
 

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-18 01:56:58 UTC (rev 1231)
+++ trunk/src/tile_factory.cpp	2006-01-18 02:16:48 UTC (rev 1232)
@@ -122,7 +122,7 @@
   else
     { // Load on demand
       for(std::vector<int>::size_type i = 0; i < desc.ids.size(); ++i)
-        { // FIXME: Very very ugly load on demand
+        { 
           int& id = desc.ids[i];
           if (id != 0)
             {
@@ -167,7 +167,7 @@
           Rectf uv = packers[color_packer]->pack(image, 
                                                  rect.left, rect.top,
                                                  rect.get_width(), rect.get_height());
-          tiles[id]->color_rect   = uv;
+          tiles[id]->uv   = uv;
           tiles[id]->color_packer = color_packer;
           tiles[id]->texture      = packers[color_packer]->get_texture();
         }
@@ -183,7 +183,6 @@
     }
   else
     {
-      // FIXME: Ugly load on demand
       if (tiles[id] && tiles[id]->desc)
         tiles[id]->desc->load(this);
 

Modified: trunk/src/tile_factory.hpp
===================================================================
--- trunk/src/tile_factory.hpp	2006-01-18 01:56:58 UTC (rev 1231)
+++ trunk/src/tile_factory.hpp	2006-01-18 02:16:48 UTC (rev 1232)
@@ -62,6 +62,9 @@
    */
   Tile* create(int tile_id);
 
+  /** 
+   * Adds a surface to the TileFactory
+   */
   void pack(int id, int colmap, SDL_Surface* image, const Rect& rect);
 
   /** Create the default TileFactor*/

Modified: trunk/src/tile_map.cpp
===================================================================
--- trunk/src/tile_map.cpp	2006-01-18 01:56:58 UTC (rev 1231)
+++ trunk/src/tile_map.cpp	2006-01-18 02:16:48 UTC (rev 1232)
@@ -127,35 +127,36 @@
     for (int x = rect.left; x < rect.right; ++x)
       {
         Tile* tile = field(x, y);
-        if(tile == 0 || tile->color_packer < 0)
-          continue;                                    
 
-        int packer = tile->color_packer; 
+        if (!(tile == 0 || tile->color_packer < 0))
+          {
+            int packer = tile->color_packer; 
 
-        if(packer >= int(requests.size()))
-          requests.resize(packer+1);
+            if(packer >= int(requests.size()))
+              requests.resize(packer+1);
 
-        VertexArrayDrawingRequest*& request = requests[packer];
-        if (!request)
-          {
-            request = new VertexArrayDrawingRequest(Vector(0, 0), z_pos,
-                                                    sc.color().get_modelview());
-            request->set_mode(GL_QUADS);
-            request->set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
-            request->set_texture(tile->texture);
-          }
+            VertexArrayDrawingRequest*& request = requests[packer];
+            if (!request)
+              {
+                request = new VertexArrayDrawingRequest(Vector(0, 0), z_pos,
+                                                        sc.color().get_modelview());
+                request->set_mode(GL_QUADS);
+                request->set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
+                request->set_texture(tile->texture);
+              }
             
-        request->texcoord(tile->color_rect.left, tile->color_rect.top);
-        request->vertex(x * TILE_SIZE, y * TILE_SIZE);
+            request->texcoord(tile->uv.left, tile->uv.top);
+            request->vertex(x * TILE_SIZE, y * TILE_SIZE);
 
-        request->texcoord(tile->color_rect.right, tile->color_rect.top);
-        request->vertex(x * TILE_SIZE + TILE_SIZE, y * TILE_SIZE);
+            request->texcoord(tile->uv.right, tile->uv.top);
+            request->vertex(x * TILE_SIZE + TILE_SIZE, y * TILE_SIZE);
 
-        request->texcoord(tile->color_rect.right, tile->color_rect.bottom);
-        request->vertex(x * TILE_SIZE + TILE_SIZE, y * TILE_SIZE + TILE_SIZE);
+            request->texcoord(tile->uv.right, tile->uv.bottom);
+            request->vertex(x * TILE_SIZE + TILE_SIZE, y * TILE_SIZE + TILE_SIZE);
             
-        request->texcoord(tile->color_rect.left, tile->color_rect.bottom);
-        request->vertex(x * TILE_SIZE, y * TILE_SIZE + TILE_SIZE); 
+            request->texcoord(tile->uv.left, tile->uv.bottom);
+            request->vertex(x * TILE_SIZE, y * TILE_SIZE + TILE_SIZE); 
+          }
       }
 
   for(std::vector<VertexArrayDrawingRequest*>::iterator i = requests.begin(); i != requests.end(); ++i)



From grumbel at berlios.de  Wed Jan 18 03:22:49 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 18 Jan 2006 03:22:49 +0100
Subject: [Windstille-commit] r1233 - trunk/src
Message-ID: <200601180222.k0I2MnLb020927@sheep.berlios.de>

Author: grumbel
Date: 2006-01-18 03:21:34 +0100 (Wed, 18 Jan 2006)
New Revision: 1233

Modified:
   trunk/src/tile.cpp
   trunk/src/tile.hpp
   trunk/src/tile_factory.cpp
   trunk/src/tile_map.cpp
Log:
- some more cleanup

Modified: trunk/src/tile.cpp
===================================================================
--- trunk/src/tile.cpp	2006-01-18 02:16:48 UTC (rev 1232)
+++ trunk/src/tile.cpp	2006-01-18 02:21:34 UTC (rev 1233)
@@ -24,7 +24,7 @@
 Tile::Tile(unsigned int arg_colmap)
   : colmap(arg_colmap)
 {
-  color_packer = -1;
+  packer = -1;
   desc = 0;
 }
 

Modified: trunk/src/tile.hpp
===================================================================
--- trunk/src/tile.hpp	2006-01-18 02:16:48 UTC (rev 1232)
+++ trunk/src/tile.hpp	2006-01-18 02:21:34 UTC (rev 1233)
@@ -47,7 +47,11 @@
 
   // FIXME: Using a surface here might be a worthy consideration, just
   // need to find a way to properly bucket-sort the request
-  int     color_packer;
+
+  /**
+   * Id of the packer
+   */
+  int     packer;
   Rectf   uv;
   Texture texture;
 

Modified: trunk/src/tile_factory.cpp
===================================================================
--- trunk/src/tile_factory.cpp	2006-01-18 02:16:48 UTC (rev 1232)
+++ trunk/src/tile_factory.cpp	2006-01-18 02:21:34 UTC (rev 1233)
@@ -167,9 +167,9 @@
           Rectf uv = packers[color_packer]->pack(image, 
                                                  rect.left, rect.top,
                                                  rect.get_width(), rect.get_height());
-          tiles[id]->uv   = uv;
-          tiles[id]->color_packer = color_packer;
-          tiles[id]->texture      = packers[color_packer]->get_texture();
+          tiles[id]->uv      = uv;
+          tiles[id]->packer  = color_packer;
+          tiles[id]->texture = packers[color_packer]->get_texture();
         }
     }
 }

Modified: trunk/src/tile_map.cpp
===================================================================
--- trunk/src/tile_map.cpp	2006-01-18 02:16:48 UTC (rev 1232)
+++ trunk/src/tile_map.cpp	2006-01-18 02:21:34 UTC (rev 1233)
@@ -128,9 +128,9 @@
       {
         Tile* tile = field(x, y);
 
-        if (!(tile == 0 || tile->color_packer < 0))
+        if (!(tile == 0 || tile->packer < 0))
           {
-            int packer = tile->color_packer; 
+            int packer = tile->packer; 
 
             if(packer >= int(requests.size()))
               requests.resize(packer+1);



From grumbel at berlios.de  Wed Jan 18 13:11:52 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Wed, 18 Jan 2006 13:11:52 +0100
Subject: [Windstille-commit] r1234 - trunk/tools
Message-ID: <200601181211.k0ICBqmF008679@sheep.berlios.de>

Author: grumbel
Date: 2006-01-18 13:11:22 +0100 (Wed, 18 Jan 2006)
New Revision: 1234

Modified:
   trunk/tools/windstille_export.py
Log:
- some cleanup

Modified: trunk/tools/windstille_export.py
===================================================================
--- trunk/tools/windstille_export.py	2006-01-18 02:21:34 UTC (rev 1233)
+++ trunk/tools/windstille_export.py	2006-01-18 12:11:22 UTC (rev 1234)
@@ -10,7 +10,8 @@
 ##  $Id: windstille_main.hxx,v 1.4 2003/11/07 13:00:39 grumbel Exp $
 ## 
 ##  Windstille - A Jump'n Shoot Game
-##  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+##  Copyright (C) 2005 Matthias Braun <matze at braunis.de>,
+##                     Ingo Ruhnke <grumbel at gmx.de>
 ##
 ##  This program is free software; you can redistribute it and/or
 ##  modify it under the terms of the GNU General Public License
@@ -76,7 +77,7 @@
     x = (m[2][0] + m[0][2]) * s
     y = (m[1][2] + m[2][1]) * s
     w = (m[0][1] - m[1][0]) * s
-    
+
   return quaternion_normalize([w, x, y, z])
 
 def quaternion_normalize(q):
@@ -100,7 +101,7 @@
     if res == lex.eof:
       raise Exception, "Expected string, got EOF"
     return res
-    
+
   def expect_int():
     res = lex.get_token()
     if res == lex.eof:
@@ -153,13 +154,17 @@
       markers.append( (marker_name, marker_frame) )
       token = lex.get_token()
     lex.push_token(token)
-      
+
     actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
     print "Config: %-20s - %s" % (action_name, str(actionconfig[action_name]))
 
   return actionconfig
 
 class ActionConfig:
+  """ActionConfig handles the properties of an
+  action, ie. when it starts, when it stops, its speed, how many
+  spamles should be taken, etc."""
+
   def __init__(self, first_frame, last_frame, speed, samplerate, markers):
     self.first_frame = first_frame
     self.last_frame  = last_frame
@@ -172,8 +177,11 @@
     return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
                                                            self.speed, self.samplerate)
 
-# return contents of a text in the blender scene
+##########################################################
 def get_text(textname):
+  """Little shortcut function to return the content of
+  Blender.Text.get(textname) as a single string and do a little error
+  handling in addition""" 
   try:
     textobj = Blender.Text.Get(textname)
   except:                                                         
@@ -186,121 +194,129 @@
     text += line + "\n"
   return text
 
+##########################################################
 class WindstilleExporter:
+  """ WindstilleExporter bundles all kind of functions... """
+
+  ########################################################
   def __init__(self):
     self.meshes    = []
     self.attachement_objects = []
     self.actions = []
     self.objvertmaps = {}
-    self.file = None
     self.armatureobj = None
 
+  ########################################################
   def export(self, filename):
-    # parse actionconfig
+    """ parse actionconfig """
     try:
       self.actionconfigs = parse_actionconfig(get_text("actionconfig"))
     except Exception, message:
       raise Exception, "Parse Error in actionconfig:" + str(message)
-    
+
     self.export_lowlevel()
-    
-    self.file = open(filename, "wb")
-    self.write_file()
-    self.file.close()
 
-  def write_file(self):
-    # write file header
-    self.file.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
+    file = open(filename, "wb")
+    self.write_file(file)
+    file.close()
+
+  ### begin: save_frame()
+  def save_frame(self, out):
+    """ """
+    for obj in self.meshes:
+      data = Blender.NMesh.GetRawFromObject(obj.getName())
+      m = obj.getMatrix()
+      # action/frame/mesh/vertices
+      for nv in self.objvertmaps[obj.getName()]:
+        v = data.verts[nv]
+        t = [0, 0, 0]
+        t[0] = m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]
+        t[1] = m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]        
+        t[2] = m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]
+        t[0] *= ZOOM
+        t[1] *= ZOOM
+        t[2] *= ZOOM
+        out.write(struct.pack("=fff", t[1], -t[2], -t[0]))
+
+    # attachement points
+    for obj in self.attachement_objects:
+      m = obj.matrixWorld
+      loc = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
+      out.write(struct.pack("=fff", loc[1], -loc[2], -loc[0]))
+      quat = matrix2quaternion(m)
+      out.write(struct.pack("=ffff", quat[0], quat[2], quat[3], quat[1]))
+    ### end: save_frame()
+
+  ########################################################    
+  def write_file(self, out):
+    """ write file header """
+    out.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
           len(self.meshes), len(self.attachement_objects), len(self.actions)))
 
     # Mesh Headers + Data
     for obj in self.meshes:
-      self.export_mesh_header(obj)
-      
+      self.export_mesh_header(out, obj)
+
     # Attachement Point Headers
     for obj in self.attachement_objects:
-      self.file.write(struct.pack("=64s", obj.getName()[2:]))
+      out.write(struct.pack("=64s", obj.getName()[2:]))
 
     # Action Headers + actions
-    def save_frame():
-      for obj in self.meshes:
-        data = Blender.NMesh.GetRawFromObject(obj.getName())
-        m = obj.getMatrix()
-        # action/frame/mesh/vertices
-        for nv in self.objvertmaps[obj.getName()]:
-          v = data.verts[nv]
-          t = [0, 0, 0]
-          t[0] = m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]
-          t[1] = m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]        
-          t[2] = m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]
-          t[0] *= ZOOM
-          t[1] *= ZOOM
-          t[2] *= ZOOM
-          self.file.write(struct.pack("=fff", t[1], -t[2], -t[0]))
-
-      # attachement points
-      for obj in self.attachement_objects:
-        m = obj.matrixWorld
-        loc = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
-        self.file.write(struct.pack("=fff", loc[1], -loc[2], -loc[0]))
-        quat = matrix2quaternion(m)
-        self.file.write(struct.pack("=ffff", quat[0], quat[2], quat[3], quat[1]))
-
     actionnum = 0
 
-    for action in self.actions:
-      # special case, no armature+animations
-      if not self.armatureobj:
-        self.file.write(struct.pack("=64sfHH", "Default", \
-                   DEFAULT_SPEED * SPEED_MULTIPLIER, 0, 1))
-        save_frame()
-        break
+    # special case, no armature+animations
+    if not self.armatureobj:
+      out.write(struct.pack("=64sfHH", "Default", \
+                            DEFAULT_SPEED * SPEED_MULTIPLIER, 0, 1))
+      self.save_frame(out)
+    else:
+      for action in self.actions:
+        # enable action
+        action.setActive(self.armatureobj)
 
-      # enable action
-      action.setActive(self.armatureobj)
+        # find/autodetect config
+        if self.actionconfigs.has_key(action.getName()):
+          actioncfg = self.actionconfigs[action.getName()]
+        else:
+          print "Error: No config for action '%s' defined." % action.getName()
+          actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
 
-      # find/autodetect config
-      if self.actionconfigs.has_key(action.getName()):
-        actioncfg = self.actionconfigs[action.getName()]
-      else:
-        print "Error: No config for action '%s' defined." % action.getName()
-        actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
+        # calculate number of frames and stuff for the header
+        resultframes = 0
+        for i in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
+          resultframes += 1
+        progress = 1.0/float(len(self.actions)) * actionnum
 
-      # calculate number of frames and stuff for the header
-      resultframes = 0
-      for i in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-        resultframes += 1
-      progress = 1.0/float(len(self.actions)) * actionnum
+        print "Exporting Action %s (%d frames)" \
+                % (action.getName(), resultframes)
+        Window.DrawProgressBar(progress, "Exporting Action %s (%d frames)" \
+                % (action.getName(), resultframes))
+        actionnum += 1
+        out.write(struct.pack("=64sfHH", action.getName(), \
+              actioncfg.speed * SPEED_MULTIPLIER, len(actioncfg.markers), resultframes))
 
-      print "Exporting Action %s (%d frames)" \
-              % (action.getName(), resultframes)
-      Window.DrawProgressBar(progress, "Exporting Action %s (%d frames)" \
-              % (action.getName(), resultframes))
-      actionnum += 1
-      self.file.write(struct.pack("=64sfHH", action.getName(), \
-            actioncfg.speed * SPEED_MULTIPLIER, len(actioncfg.markers), resultframes))
+        def blenderframe_to_wspriteframe(frame):
+          return (frame - actioncfg.first_frame) / actioncfg.samplerate
 
-      def blenderframe_to_wspriteframe(frame):
-        return (frame - actioncfg.first_frame) / actioncfg.samplerate
+        # write markers
+        for marker in actioncfg.markers:
+          out.write(struct.pack("=64sH", marker[0], \
+                blenderframe_to_wspriteframe(marker[1])))
 
-      # write markers
-      for marker in actioncfg.markers:
-        self.file.write(struct.pack("=64sH", marker[0], \
-              blenderframe_to_wspriteframe(marker[1])))
+        # output for all frames for all meshs all vertex positions
+        frs = 0
+        for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
+          frs += 1
+          Blender.Set("curframe", int(frame))
+          self.save_frame(out)
+  ### end: write_file()
 
-      # output for all frames for all meshs all vertex positions
-      frs = 0
-      for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-        frs += 1
-        Blender.Set("curframe", int(frame))
-        save_frame()
-    
-  def export_mesh_header(self, obj):
+  def export_mesh_header(self, out, obj):
     print "Exporting Mesh %s" % obj.getName()
     data = obj.getData()
 
     print "Faces: %s" % (len(data.faces))
-    
+
     texture = data.faces[0].image
     texture_filename = texture.filename
     texture_filename = os.path.basename(texture_filename)
@@ -312,29 +328,34 @@
     facecount = 0
     texturewarning = False
 
+    ##############################
     def mapvertex(index, u, v):
+      """Inline helper function"""
       for mv in xrange(0, len(vertexmap)):
         if vertexmap[mv] == index and uvs[mv] == (u, v):
           return mv
       vertexmap.append(index)
       uvs.append( (u, v) )
       return len(vertexmap)-1
-    
+    ##############################
+
     for face in data.faces:
       if face.image != texture and not texturewarning:
         print "WARNING: Mesh '%s' has more than 1 material" % obj.getName()
         texturewarning = True
 
+      # Write out triangle
       for v in [0, 1, 2]:
         bodydata += struct.pack("=H", \
               mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
+      facecount += 1
+
+      # Write out another triangle in case we have a quad
       if len(face.v) == 4:
-        facecount += 2
+        facecount += 1
         for v in [0, 2, 3]:
           bodydata += struct.pack("=H", \
                 mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
-      else:
-        facecount += 1
 
     # normals
     for face in data.faces:
@@ -346,17 +367,21 @@
     for uv in uvs:
       bodydata += struct.pack("=ff", uv[0], 1.0-uv[1])
 
-    self.file.write(struct.pack("=64sHH", texture_filename, facecount, len(vertexmap)))
+    out.write(struct.pack("=64sHH", texture_filename, facecount, len(vertexmap)))
     print "Exporting Mesh Tex: %s Facecount: %d Vertices: %d" \
             % (texture_filename, facecount, len(vertexmap))
-    self.file.write(bodydata)
+    out.write(bodydata)
 
     self.objvertmaps[obj.getName()] = vertexmap
+  ### end: export_mesh()
 
   def export_lowlevel(self):
+    """Convert Blender data structures into something that is used by
+    this export script"""
+
     scene = Blender.Scene.getCurrent()
     layers = scene.Layers
-    
+
     # compose list of meshs to export
     for obj in Blender.Object.Get():
       data = obj.getData()
@@ -395,7 +420,11 @@
     else:
       for action in Blender.Armature.NLA.GetActions().iteritems():
         self.actions.append(action[1])
-      
+  ## end: exporter_lowlevel()
+
+### end: WindstilleExporter
+
+########################################################
 def fs_callback(filename):
   print "=== Exporting: %s ===" % (filename)
   exporter = WindstilleExporter()
@@ -404,7 +433,7 @@
 
 defaultname = Blender.Get("filename")
 if defaultname.endswith(".blend"):
-    defaultname = defaultname[0:len(defaultname) - len(".blend")] + ".wsprite"
+  defaultname = defaultname[0:len(defaultname) - len(".blend")] + ".wsprite"
 Window.FileSelector(fs_callback, "Windstille Export", defaultname)
 
 # EOF #



From grumbel at berlios.de  Thu Jan 19 00:07:06 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 19 Jan 2006 00:07:06 +0100
Subject: [Windstille-commit] r1235 - trunk/tools
Message-ID: <200601182307.k0IN76BH023233@sheep.berlios.de>

Author: grumbel
Date: 2006-01-19 00:07:06 +0100 (Thu, 19 Jan 2006)
New Revision: 1235

Modified:
   trunk/tools/windstille_export.py
Log:
- in the progress of allowing multiple textures per mesh

Modified: trunk/tools/windstille_export.py
===================================================================
--- trunk/tools/windstille_export.py	2006-01-18 12:11:22 UTC (rev 1234)
+++ trunk/tools/windstille_export.py	2006-01-18 23:07:06 UTC (rev 1235)
@@ -160,8 +160,92 @@
 
   return actionconfig
 
+##########################################################
+def get_text(textname):
+  """Little shortcut function to return the content of
+  Blender.Text.get(textname) as a single string and do a little error
+  handling in addition""" 
+  try:
+    textobj = Blender.Text.Get(textname)
+  except:                                                         
+    print "WARNING: Text '%s' not found" % textname
+    return ""
+
+  lines = textobj.asLines()
+  text = ""
+  for line in lines:
+    text += line + "\n"
+  return text
+
+class MeshData:
+  def __init__(self, texture_filename, faces = []):
+    # Filename of the used texture
+    self.texture_filename = texture_filename
+
+    # [[MeshVertexData, MeshVertexData, MeshVertexData], ...]
+    self.faces            = faces
+
+    # Table to translate (object, index) to new_index
+    # Format: [[object, index, new_index], ...]
+    self.transtable       = []
+
+  def transtable_has_vertex(self, new_object, new_index):
+    for (object, index, new_index) in self.transtable:
+      if object == new_object and index == new_object:
+        return True
+      else:
+        return False
+
+  def finalize(self):
+    """Reorders vertex indexes"""
+
+    for face in self.faces:
+      for vert in face:
+        if not self.transtable_has_vertex(vert.object, vert.index):
+          self.transtable += [[vert.object, vert.index, len(self.transtable)]]
+
+    # print "FINALIZE"
+    # print self.transtable
+    # print "FINALIZE END"
+
+  def vertices(self):
+    return self.transtable
+
+  def translate(self, arg_object, arg_index):
+    """Translate a vertex given as object, index pair to its
+    corresponding index, as used in the wsprite file"""
+   
+    for (object, index, new_index) in self.transtable:
+      if arg_object == object and arg_index == index:
+        return new_index
+    raise "MeshData: Couldn't translate vertex: %s, %s" % (arg_object, arg_index)
+
+class MeshVertexData:
+  def __init__(self, object, index, uv, normal):
+    self.object = object
+    self.index  = index
+    self.uv     = uv
+    # FIXME: Shouldn't the normal be a per per vertex data?
+    self.normal = normal
+
+class AttachmentPointData:
+  """Data for an attachment point, its location and its rotation"""
+  def __init__(self, loc, quat):
+    self.loc  = loc
+    self.quat = quat
+
+class FrameData:
+  """ Data used for a single frame in an action """
+  def __init__(self, vertex_locs, attachment_points):
+    # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
+    self.vertex_locs        = vertex_locs
+    
+    # [AttachmentPointData, ...]
+    self.attachment_points = attachment_points
+
+
 class ActionConfig:
-  """ActionConfig handles the properties of an
+  """ActionConfig handles the properties of a single
   action, ie. when it starts, when it stops, its speed, how many
   spamles should be taken, etc."""
 
@@ -177,35 +261,40 @@
     return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
                                                            self.speed, self.samplerate)
 
-##########################################################
-def get_text(textname):
-  """Little shortcut function to return the content of
-  Blender.Text.get(textname) as a single string and do a little error
-  handling in addition""" 
-  try:
-    textobj = Blender.Text.Get(textname)
-  except:                                                         
-    print "WARNING: Text '%s' not found" % textname
-    return ""
+class ActionData:
+  def __init__(self, name, config):
+    # name as string
+    self.name       = name
 
-  lines = textobj.asLines()
-  text = ""
-  for line in lines:
-    text += line + "\n"
-  return text
+    # ActionConfig
+    self.config     = config
 
+    # FrameData (filled out later in the WindstilleExporter)
+    self.frame_data = None
+
 ##########################################################
 class WindstilleExporter:
   """ WindstilleExporter bundles all kind of functions... """
 
   ########################################################
   def __init__(self):
-    self.meshes    = []
-    self.attachement_objects = []
+    # List of objects that should get exported (everything on seperate layer is ignored)
+    self.mesh_objects    = []
+
+    # List of mesh_data
+    self.mesh_data   = []
+    
+    self.attachment_objects = []
+
+    # Name of the actions as string
     self.actions = []
+    
     self.objvertmaps = {}
     self.armatureobj = None
 
+    # { actionname : ActionConfig, ... }
+    self.actionconfigs = {}
+
   ########################################################
   def export(self, filename):
     """ parse actionconfig """
@@ -218,28 +307,25 @@
 
     file = open(filename, "wb")
     self.write_file(file)
+    self.collect_scene_data()
     file.close()
 
   ### begin: save_frame()
   def save_frame(self, out):
-    """ """
-    for obj in self.meshes:
+    """Write out vertex position and position of attachment points in a frame"""
+    for obj in self.mesh_objects:
       data = Blender.NMesh.GetRawFromObject(obj.getName())
       m = obj.getMatrix()
-      # action/frame/mesh/vertices
+      # location: action/frame/mesh/vertices
       for nv in self.objvertmaps[obj.getName()]:
         v = data.verts[nv]
-        t = [0, 0, 0]
-        t[0] = m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]
-        t[1] = m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]        
-        t[2] = m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]
-        t[0] *= ZOOM
-        t[1] *= ZOOM
-        t[2] *= ZOOM
-        out.write(struct.pack("=fff", t[1], -t[2], -t[0]))
+        out.write(struct.pack("=fff",
+                              +(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
+                              -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
+                              -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM))
 
-    # attachement points
-    for obj in self.attachement_objects:
+    # attachment points
+    for obj in self.attachment_objects:
       m = obj.matrixWorld
       loc = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
       out.write(struct.pack("=fff", loc[1], -loc[2], -loc[0]))
@@ -251,14 +337,14 @@
   def write_file(self, out):
     """ write file header """
     out.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
-          len(self.meshes), len(self.attachement_objects), len(self.actions)))
+          len(self.mesh_objects), len(self.attachment_objects), len(self.actions)))
 
     # Mesh Headers + Data
-    for obj in self.meshes:
+    for obj in self.mesh_objects:
       self.export_mesh_header(out, obj)
 
-    # Attachement Point Headers
-    for obj in self.attachement_objects:
+    # Attachment Point Headers
+    for obj in self.attachment_objects:
       out.write(struct.pack("=64s", obj.getName()[2:]))
 
     # Action Headers + actions
@@ -344,19 +430,22 @@
         print "WARNING: Mesh '%s' has more than 1 material" % obj.getName()
         texturewarning = True
 
-      # Write out triangle
+      # Write out triangle: ((index, u, v), (index, u, v), (index, u, v))
       for v in [0, 1, 2]:
         bodydata += struct.pack("=H", \
               mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
       facecount += 1
 
-      # Write out another triangle in case we have a quad
+      # Write out another triangle in case we have a quad: index, u, v
       if len(face.v) == 4:
         facecount += 1
         for v in [0, 2, 3]:
           bodydata += struct.pack("=H", \
                 mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
 
+    # FIXME: saving normals doesn't make sense per-mesh, should be per
+    # frame, unless I am overlooking something
+    
     # normals
     for face in data.faces:
       bodydata += struct.pack("=fff", face.normal[1], -face.normal[2], -face.normal[0])
@@ -394,7 +483,7 @@
       if not texture:
         print "Skipping Mesh %s: no texture" % obj.getName()
         continue
-      self.meshes.append(obj)
+      self.mesh_objects.append(obj)
 
     # search for armature object
     armatures = Blender.Armature.Get()
@@ -409,10 +498,10 @@
         armature = obj.getData()
         break
 
-    # compose list of objects for attachement points
+    # compose list of objects for attachment points
     for obj in Blender.Object.Get():
       if obj.getType() == 'Empty' and obj.getName().startswith("A:"):
-        self.attachement_objects.append(obj)
+        self.attachment_objects.append(obj)
 
     # compose list of actions to export
     if not self.armatureobj:
@@ -422,6 +511,116 @@
         self.actions.append(action[1])
   ## end: exporter_lowlevel()
 
+  def collect_scene_data(self):
+    self.collect_object_data()
+
+    for action in self.actions:
+      action.setActive(self.armatureobj)
+    
+      # find/autodetect config
+      if self.actionconfigs.has_key(action.getName()):
+        actioncfg = self.actionconfigs[action.getName()]
+      else:
+        print "Error: No config for action '%s' defined." % action.getName()
+        actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
+
+    for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
+      Blender.Set("curframe", int(frame))
+      print self.collect_frame_data()
+
+  def collect_object_data(self):
+    for obj in self.mesh_objects:
+      self.mesh_data += self.collect_mesh_data(obj)
+
+    # insert code to merge meshes here
+
+    # Create the transtable
+    for mesh in self.mesh_data:
+      mesh.finalize()
+
+    print "############# Begin: MeshDATA ##############"
+    for val in self.collect_mesh_data(obj):
+      print val
+    print "############# End: MeshDATA ##############"
+
+  def collect_mesh_data(self, obj):
+    """
+    Returns mesh_data as dict with format:
+    key: texture_filename
+    val: MeshData
+    """
+    mesh_data = {}
+
+    for face in obj.getData().faces:
+      if face.image:
+        texture_filename = face.image.filename
+      else:
+        texture_filename = "404.png"
+        
+      if not mesh_data.has_key(texture_filename):
+        mesh_data[texture_filename] = MeshData(texture_filename)
+
+      faces = []
+      for v in [0, 1, 2]:
+        faces += [MeshVertexData(obj, face.v[v].index,
+                                [face.uv[v][0], 1.0-face.uv[v][1]],
+                                [face.normal[1], -face.normal[2], -face.normal[0]])]
+      mesh_data[texture_filename].faces += [faces]
+
+      # Write out another triangle in case we have a quad: index, u, v
+      if len(face.v) == 4:
+        for v in [0, 2, 3]:
+          faces += [MeshVertexData(obj, face.v[v].index,
+                                  [face.uv[v][0], 1.0-face.uv[v][1]],
+                                  [face.normal[1], -face.normal[2], -face.normal[0]])]
+        mesh_data[texture_filename].faces += [faces]
+      
+    return mesh_data.values()
+
+  def collect_frame_data(self):
+    """
+    Collect all data for the given object in a single frame, frame
+    has to be selected outside of this function.
+    Format:
+      [[[vertex_pos_x, vertex_pos_y, vertex_pos_z], ...],
+       [[attachment_pos_x, attachment_pos_y, attachment_pos_z,
+         attachment_quat1, attachment_quat2, attachment_quat3, attachment_quat4], ...]]
+    """
+   
+    meshs = []
+    attachment_points = []
+
+    obj = None
+
+    # no triangles here (those are global), just vertexes (those are local)
+    for mesh_data in self.mesh_data:
+      vertex_positions = []
+      for vertex in mesh_data.vertices():
+        if obj != vertex[0]:
+          obj  = vertex[0]
+          data = Blender.NMesh.GetRawFromObject(obj.getName())
+          
+        index = vertex[1]
+        
+        m = obj.getMatrix()
+
+        # location: action/frame/mesh/vertices
+        v = data.verts[index]
+        vertex_positions += [[+(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
+                              -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
+                              -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM]]
+      meshs += [vertex_positions]
+
+    # attachment points
+    for obj in self.attachment_objects:
+      m    = obj.matrixWorld
+      loc  = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
+      quat = matrix2quaternion(m)      
+      attachment_points += [AttachmentPoint([loc[1], -loc[2], -loc[0]],
+                                            [quat[0], quat[2], quat[3], quat[1]])]
+
+    return FrameData(meshs, attachment_points)
+
 ### end: WindstilleExporter
 
 ########################################################
@@ -429,7 +628,7 @@
   print "=== Exporting: %s ===" % (filename)
   exporter = WindstilleExporter()
   exporter.export(filename)
-  print "=== Done ==="
+  print "=== Windstille Exporter done, wrote %s ===" % (filename)
 
 defaultname = Blender.Get("filename")
 if defaultname.endswith(".blend"):



From grumbel at berlios.de  Thu Jan 19 02:21:52 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Thu, 19 Jan 2006 02:21:52 +0100
Subject: [Windstille-commit] r1236 - trunk/tools
Message-ID: <200601190121.k0J1Lqh0012552@sheep.berlios.de>

Author: grumbel
Date: 2006-01-19 02:21:48 +0100 (Thu, 19 Jan 2006)
New Revision: 1236

Modified:
   trunk/tools/windstille_export.py
Log:
- in the progress of allowing multiple textures per mesh

Modified: trunk/tools/windstille_export.py
===================================================================
--- trunk/tools/windstille_export.py	2006-01-18 23:07:06 UTC (rev 1235)
+++ trunk/tools/windstille_export.py	2006-01-19 01:21:48 UTC (rev 1236)
@@ -182,7 +182,7 @@
     # Filename of the used texture
     self.texture_filename = texture_filename
 
-    # [[MeshVertexData, MeshVertexData, MeshVertexData], ...]
+    # [[VertexData, VertexData, VertexData], ...]
     self.faces            = faces
 
     # Table to translate (object, index) to new_index
@@ -220,12 +220,17 @@
         return new_index
     raise "MeshData: Couldn't translate vertex: %s, %s" % (arg_object, arg_index)
 
-class MeshVertexData:
+class FaceData:
+  def __init__(self, vertices, normal):
+    self.vertices = []
+    self.normal   = normal
+
+
+class VertexData:
   def __init__(self, object, index, uv, normal):
     self.object = object
     self.index  = index
     self.uv     = uv
-    # FIXME: Shouldn't the normal be a per per vertex data?
     self.normal = normal
 
 class AttachmentPointData:
@@ -288,6 +293,9 @@
 
     # Name of the actions as string
     self.actions = []
+
+    # Used to store animation data (vertex position and such)
+    self.action_data = []
     
     self.objvertmaps = {}
     self.armatureobj = None
@@ -305,9 +313,10 @@
 
     self.export_lowlevel()
 
+    self.collect_scene_data()
+
     file = open(filename, "wb")
     self.write_file(file)
-    self.collect_scene_data()
     file.close()
 
   ### begin: save_frame()
@@ -433,7 +442,7 @@
       # Write out triangle: ((index, u, v), (index, u, v), (index, u, v))
       for v in [0, 1, 2]:
         bodydata += struct.pack("=H", \
-              mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
+                                mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
       facecount += 1
 
       # Write out another triangle in case we have a quad: index, u, v
@@ -562,17 +571,17 @@
 
       faces = []
       for v in [0, 1, 2]:
-        faces += [MeshVertexData(obj, face.v[v].index,
-                                [face.uv[v][0], 1.0-face.uv[v][1]],
-                                [face.normal[1], -face.normal[2], -face.normal[0]])]
+        faces += [VertexData(obj, face.v[v].index,
+                             [face.uv[v][0], 1.0-face.uv[v][1]],
+                             [face.normal[1], -face.normal[2], -face.normal[0]])]
       mesh_data[texture_filename].faces += [faces]
 
       # Write out another triangle in case we have a quad: index, u, v
       if len(face.v) == 4:
         for v in [0, 2, 3]:
-          faces += [MeshVertexData(obj, face.v[v].index,
-                                  [face.uv[v][0], 1.0-face.uv[v][1]],
-                                  [face.normal[1], -face.normal[2], -face.normal[0]])]
+          faces += [VertexData(obj, face.v[v].index,
+                               [face.uv[v][0], 1.0-face.uv[v][1]],
+                               [face.normal[1], -face.normal[2], -face.normal[0]])]
         mesh_data[texture_filename].faces += [faces]
       
     return mesh_data.values()
@@ -621,6 +630,63 @@
 
     return FrameData(meshs, attachment_points)
 
+  def write(self, out):
+    """This is a new version of write_file(), instead of using blender
+    internals, it uses the collected data"""
+
+    ### Write magic, version and counts for mesh, attachment_points and actions
+    out.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
+                          len(self.mesh_objects),
+                          len(self.attachment_objects),
+                          len(self.actions)))
+
+    ### Mesh Header:
+    for mesh in self.mesh_data:
+      out.write(struct.pack("=64sHH", mesh.texture_filename, len(mesh.faces), len(mesh.vertices()) * 2))
+      ### Mesh Data:
+      ## Vertex indices of triangles
+      for face in mesh.faces:
+        out.write(struct.pack("=HHH", face[0].index,  face[1].index,  face[2].index))
+
+      ## Normal
+      for face in mesh.faces: ## FIXME: Wrong
+        out.write(struct.pack("=fff", face[0].normal, face[1].normal, face[2].normal))
+
+      ## UV Coordinates
+      for face in mesh.faces: 
+        out.write(struct.pack("=ff",  face.uv[0], face.uv[1]))
+
+    ### Attachment points
+    for obj in self.attachment_objects:
+      out.write(struct.pack("=64s", obj.getName()[2:]))
+
+    ## Action Header
+    for action in self.action_configs:
+      out.write(struct.pack("=64sfHH", action.name, 
+                            action.config.speed * SPEED_MULTIPLIER,
+                            len(action.config.markers), len(action.frame_data)))
+
+    ## Marker, FIXME: Are markers per action, or global?
+    for marker in action.config.markers:
+      out.write(struct.pack("=64sH", marker[0], \
+                            (frame - action.config.first_frame) / action.config.samplerate))
+
+    ## Action Data
+    for action in self.action_data:
+      for frame in action.frame_data:
+        ### Vertex positions
+        for mesh in frame.vertex_locs:
+          for vert in mesh:
+           out.write(struct.pack("=fff", vert[0], vert[1], vert[2]))
+        ### Attachment Points
+        for at in frame.attachment_point:
+          out.write(struct.pack("=fffffff",
+                                at.loc[0],  at.loc[1],  at.loc[2],
+                                at.quat[0], at.quat[1], at.quat[2], at.quat[3]))
+
+    ### DONE ###
+
+
 ### end: WindstilleExporter
 
 ########################################################



From grumbel at berlios.de  Fri Jan 20 02:04:30 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 20 Jan 2006 02:04:30 +0100
Subject: [Windstille-commit] r1237 - trunk/tools
Message-ID: <200601200104.k0K14UL8020018@sheep.berlios.de>

Author: grumbel
Date: 2006-01-20 02:04:23 +0100 (Fri, 20 Jan 2006)
New Revision: 1237

Added:
   trunk/tools/data.py
   trunk/tools/helper.py
   trunk/tools/windstille_export2.py
Modified:
   trunk/tools/windstille_export.py
Log:
- rewrote most of the exporter

Added: trunk/tools/data.py
===================================================================
--- trunk/tools/data.py	2006-01-19 01:21:48 UTC (rev 1236)
+++ trunk/tools/data.py	2006-01-20 01:04:23 UTC (rev 1237)
@@ -0,0 +1,179 @@
+import struct, shlex, os.path, math
+
+# SAMPLEFRAMES, only export every nth frame of the animation
+DEFAULT_SAMPLERATE = 5
+# ZOOM, is multiplied with all vertex coordinates
+ZOOM = 32.0
+DEFAULT_SPEED = 1.0
+SPEED_MULTIPLIER = 9.8
+
+class MeshData:
+  def __init__(self, texture_filename):
+    # Filename of the used texture
+    self.texture_filename = texture_filename
+
+    # [FaceData, ...]
+    self.faces            = []
+
+    self.vertices         = []
+
+    # Table to translate (object, index) to new_index
+    # Format: [[object, index, new_index], ...]
+    self.transtable       = []
+
+  def transtable_has_vertex(self, new_object, new_index):
+      for (object, index, new_index) in self.transtable:
+          if object == new_object and index == new_object:
+              return True
+          else:
+              return False
+
+  def translate(self, vert):
+      """Translate a vertex given as object, index pair to its
+      corresponding index, as used in the wsprite file"""
+      
+      for (object, index, new_index) in self.transtable:
+          if object == vert.object and index == vert.index:
+              return new_index
+      
+      print "MeshData: Couldn't translate vertex: %s, %s" % (vert.object, vert.index)
+      return 0
+
+  def finalize(self):
+      """Reorders vertex indexes and merge vertexes which have the same
+      UV coordinates"""
+
+      for face in self.faces:
+          for vert in face.verts:
+              if not self.transtable_has_vertex(vert.object, vert.index):
+                  new_index = len(self.transtable)
+                  self.transtable.append([vert.object, vert.index, new_index])
+                  self.vertices.append(vert)
+
+class FaceData:
+    def __init__(self, verts, normal):
+        self.verts   = verts
+        self.normal  = normal
+
+class VertexData:
+    def __init__(self, object, index, uv, normal):
+        self.object = object
+        self.index  = index
+        self.uv     = uv
+        self.normal = normal
+
+class AttachmentPointData:
+    """Data for an attachment point, its location and its rotation"""
+    def __init__(self, loc, quat):
+        self.loc  = loc
+        self.quat = quat
+
+class FrameData:
+    """ Data used for a single frame in an action """
+    def __init__(self, vertex_locs, attachment_points):
+        # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
+        self.vertex_locs        = vertex_locs
+
+        # [AttachmentPointData, ...]
+        self.attachment_points = attachment_points
+
+
+class ActionConfig:
+    """ActionConfig handles the properties of a single
+    action, ie. when it starts, when it stops, its speed, how many
+    spamles should be taken, etc."""
+
+    def __init__(self, first_frame, last_frame, speed, samplerate, markers):
+        self.first_frame = first_frame
+        self.last_frame  = last_frame
+        self.speed       = speed
+        self.samplerate  = samplerate
+        self.markers     = markers
+        self.numframes   = last_frame - first_frame + 1
+
+    def __str__(self):
+        return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
+                                                                         self.speed, self.samplerate)
+
+    # config entry (first_frame, last_frame, speed, samplerate, markers[])
+    #  a marker is (name, frame)
+    def parse(text):     
+        def expect_string():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected string, got EOF"
+            return res
+
+        def expect_int():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected in, got EOF"
+            return int(res)
+
+        def expect_float():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected float, got EOF"
+            return float(res)
+
+        def expect_dash():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected '-', got EOF"
+            elif res != "-":
+                raise Exception, "Expected '-', got '%s'" % res
+
+        lex = shlex.shlex(text)
+        lex.wordchars += "."
+
+        actionconfig = {}
+        while True:
+            token = lex.get_token()
+            if token == lex.eof:
+                break
+            lex.push_token(token)
+            action_name = expect_string()
+            first_frame = expect_int()
+            expect_dash()
+            last_frame = expect_int()
+
+            token = lex.get_token()
+            if token == "speed":
+                speed = expect_float()
+            else:
+                lex.push_token(token)
+                speed = DEFAULT_SPEED
+
+            token = lex.get_token()
+            if token == "samplerate":
+                samplerate = expect_int()
+            else:
+                lex.push_token(token)
+                samplerate = DEFAULT_SAMPLERATE
+
+            token = lex.get_token()
+            markers = []
+            while token == "marker":
+                marker_name = expect_string()
+                marker_frame = expect_int()
+                markers.append( (marker_name, marker_frame) )
+                token = lex.get_token()
+            lex.push_token(token)
+
+            actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
+
+        return actionconfig
+    parse = staticmethod(parse)
+
+class ActionData:
+  def __init__(self, name, config, frame_data):
+    # name as string
+    self.name       = name
+
+    # ActionConfig
+    self.config     = config
+
+    # FrameData (filled out later in the WindstilleExporter)
+    self.frame_data = frame_data
+
+# EOF #

Added: trunk/tools/helper.py
===================================================================
--- trunk/tools/helper.py	2006-01-19 01:21:48 UTC (rev 1236)
+++ trunk/tools/helper.py	2006-01-20 01:04:23 UTC (rev 1237)
@@ -0,0 +1,60 @@
+import Blender
+import string
+
+def matrix2quaternion(m):
+  tr = 1.0 + m[0][0] + m[1][1] + m[2][2]
+  if tr > .00001:
+    s = math.sqrt(tr)
+    w = s / 2.0
+    s = 0.5 / s
+    x = (m[1][2] - m[2][1]) * s
+    y = (m[2][0] - m[0][2]) * s
+    z = (m[0][1] - m[1][0]) * s
+  elif m[0][0] > m[1][1] and m[0][0] > m[2][2]:
+    s = math.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2])
+    x = s / 2.0
+    s = 0.5 / s
+    y = (m[0][1] + m[1][0]) * s
+    z = (m[2][0] + m[0][2]) * s
+    w = (m[1][2] - m[2][1]) * s
+  elif m[1][1] > m[2][2]:
+    s = math.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2])
+    y = s / 2.0
+    s = 0.5 / s
+    x = (m[0][1] + m[1][0]) * s
+    z = (m[1][2] + m[2][1]) * s
+    w = (m[2][0] - m[0][2]) * s
+  else:
+    s = math.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1])
+    z = s / 2.0
+    s = 0.5 / s
+    x = (m[2][0] + m[0][2]) * s
+    y = (m[1][2] + m[2][1]) * s
+    w = (m[0][1] - m[1][0]) * s
+
+  return quaternion_normalize([w, x, y, z])
+
+def quaternion_normalize(q):
+  l = math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
+  return q[0] / l, q[1] / l, q[2] / l, q[3] / l
+
+def quaternion_to_axisangle(q):
+  cos_a = q[0]
+  angle = math.acos(cos_a) * 2.0
+  sin_a = math.sqrt(1.0 - cos_a * cos_a)
+  if(sin_a < .0005 or sin_a > .0005): sin_a = 1
+  return angle, q[1]/sin_a, q[2]/sin_a, q[3]/sin_a
+
+##########################################################
+def get_text(textname):
+  """Little shortcut function to return the content of
+  Blender.Text.get(textname) as a single string and do a little error
+  handling in addition""" 
+  textobj = Blender.Text.Get(textname)
+  if not textobj:
+    print "WARNING: Text '%s' not found" % textname
+    return ""
+  else:
+    return string.join(textobj.asLines(), "\n")
+
+# EOF #

Modified: trunk/tools/windstille_export.py
===================================================================
--- trunk/tools/windstille_export.py	2006-01-19 01:21:48 UTC (rev 1236)
+++ trunk/tools/windstille_export.py	2006-01-20 01:04:23 UTC (rev 1237)
@@ -47,50 +47,6 @@
 # DO NOT change this
 FORMAT_VERSION = 2
 
-def matrix2quaternion(m):
-  tr = 1.0 + m[0][0] + m[1][1] + m[2][2]
-  if tr > .00001:
-    s = math.sqrt(tr)
-    w = s / 2.0
-    s = 0.5 / s
-    x = (m[1][2] - m[2][1]) * s
-    y = (m[2][0] - m[0][2]) * s
-    z = (m[0][1] - m[1][0]) * s
-  elif m[0][0] > m[1][1] and m[0][0] > m[2][2]:
-    s = math.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2])
-    x = s / 2.0
-    s = 0.5 / s
-    y = (m[0][1] + m[1][0]) * s
-    z = (m[2][0] + m[0][2]) * s
-    w = (m[1][2] - m[2][1]) * s
-  elif m[1][1] > m[2][2]:
-    s = math.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2])
-    y = s / 2.0
-    s = 0.5 / s
-    x = (m[0][1] + m[1][0]) * s
-    z = (m[1][2] + m[2][1]) * s
-    w = (m[2][0] - m[0][2]) * s
-  else:
-    s = math.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1])
-    z = s / 2.0
-    s = 0.5 / s
-    x = (m[2][0] + m[0][2]) * s
-    y = (m[1][2] + m[2][1]) * s
-    w = (m[0][1] - m[1][0]) * s
-
-  return quaternion_normalize([w, x, y, z])
-
-def quaternion_normalize(q):
-  l = math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
-  return q[0] / l, q[1] / l, q[2] / l, q[3] / l
-
-def quaternion_to_axisangle(q):
-  cos_a = q[0]
-  angle = math.acos(cos_a) * 2.0
-  sin_a = math.sqrt(1.0 - cos_a * cos_a)
-  if(sin_a < .0005 or sin_a > .0005): sin_a = 1
-  return angle, q[1]/sin_a, q[2]/sin_a, q[3]/sin_a
-
 # config entry (first_frame, last_frame, speed, samplerate, markers[])
 #  a marker is (name, frame)
 def parse_actionconfig(text):
@@ -182,7 +138,7 @@
     # Filename of the used texture
     self.texture_filename = texture_filename
 
-    # [[VertexData, VertexData, VertexData], ...]
+    # [FaceData, ...]
     self.faces            = faces
 
     # Table to translate (object, index) to new_index
@@ -221,11 +177,10 @@
     raise "MeshData: Couldn't translate vertex: %s, %s" % (arg_object, arg_index)
 
 class FaceData:
-  def __init__(self, vertices, normal):
-    self.vertices = []
-    self.normal   = normal
+  def __init__(self, verts, normal):
+    self.verts   = verts
+    self.normal  = normal
 
-
 class VertexData:
   def __init__(self, object, index, uv, normal):
     self.object = object
@@ -646,11 +601,11 @@
       ### Mesh Data:
       ## Vertex indices of triangles
       for face in mesh.faces:
-        out.write(struct.pack("=HHH", face[0].index,  face[1].index,  face[2].index))
+        out.write(struct.pack("=HHH", face.verts[0].index,  face.verts[1].index,  face.verts[2].index))
 
       ## Normal
-      for face in mesh.faces: ## FIXME: Wrong
-        out.write(struct.pack("=fff", face[0].normal, face[1].normal, face[2].normal))
+      for face in mesh.faces:
+        out.write(struct.pack("=fff", face.normal, face.normal, face.normal))
 
       ## UV Coordinates
       for face in mesh.faces: 
@@ -669,7 +624,7 @@
     ## Marker, FIXME: Are markers per action, or global?
     for marker in action.config.markers:
       out.write(struct.pack("=64sH", marker[0], \
-                            (frame - action.config.first_frame) / action.config.samplerate))
+                            (marker[1] - action.config.first_frame) / action.config.samplerate))
 
     ## Action Data
     for action in self.action_data:

Added: trunk/tools/windstille_export2.py
===================================================================
--- trunk/tools/windstille_export2.py	2006-01-19 01:21:48 UTC (rev 1236)
+++ trunk/tools/windstille_export2.py	2006-01-20 01:04:23 UTC (rev 1237)
@@ -0,0 +1,360 @@
+#!BPY
+
+"""
+Name: 'Windstille Exporter V2'
+Blender: 233
+Group: 'Export'
+Tip: 'Export meshes/actions to windstille format'
+"""
+
+##  $Id: windstille_main.hxx,v 1.4 2003/11/07 13:00:39 grumbel Exp $
+## 
+##  Windstille - A Jump'n Shoot Game
+##  Copyright (C) 2005 Matthias Braun <matze at braunis.de>,
+##                     Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software; you can redistribute it and/or
+##  modify it under the terms of the GNU General Public License
+##  as published by the Free Software Foundation; either version 2
+##  of the License, or (at your option) any later version.
+##
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+## 
+##  You should have received a copy of the GNU General Public License
+##  along with this program; if not, write to the Free Software
+##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
+
+# Simple Python script that shows how to export animations from
+# Blender
+# Put this script in your $HOME/.blender/scripts directory.
+#
+# See windstille/docs/models.txt for more details
+
+import struct, shlex, os.path, math
+import Blender
+from Blender import NMesh
+from Blender import Window
+from helper import *
+from data import * 
+
+# SAMPLEFRAMES, only export every nth frame of the animation
+DEFAULT_SAMPLERATE = 5
+# ZOOM, is multiplied with all vertex coordinates
+ZOOM = 32.0
+DEFAULT_SPEED = 1.0
+SPEED_MULTIPLIER = 9.8
+# DO NOT change this
+FORMAT_VERSION = 2
+
+class WindstilleSprite:
+  ########################################################
+  def __init__(self):
+      """ Create a WindstilleSprite from the current scene"""
+      ### References to Blender internals
+      # List of Blender mesh objects that should get exported (everything on
+      # seperate layer is ignored)
+      self.mesh_objects    = []
+
+      # Blender armature object
+      self.armature_object = None
+
+      # Blender attachment objects, ie. Empties
+      self.attachment_objects = []
+
+      # Name of the actions as string
+      self.actions = []
+
+      # { actionname : ActionConfig, ... }
+      self.actionconfigs = {}
+      
+      ### Converted Data
+      # List of mesh_data, ie. data we collected and converted ourself from Blender
+      self.mesh_data   = []
+            
+      # Used to store animation data (vertex position and such)
+      self.action_data = []
+
+      ### Start collecting data
+      # Collect Action Config
+      self.collect_actionconfig()
+      # Fill out Blender internal references
+      self.collect_data()
+      # Data for all Meshes
+      self.collect_object_data()
+      # Collect data for the Actions and Animations
+      self.collect_animation_data()
+
+  def collect_actionconfig(self):
+      try:
+          self.actionconfigs = ActionConfig.parse(get_text("actionconfig"))
+      except Exception, message:
+          raise Exception, "Error: Parse Error in actionconfig:" + str(message)
+      
+  def collect_data(self):
+      """Convert Blender data structures into something that is used by
+      this export script"""
+
+      scene  = Blender.Scene.getCurrent()
+      layers = scene.Layers
+
+      # compose list of meshs to export
+      for obj in Blender.Object.Get():
+          data = obj.getData()
+          if (type(data) is not Blender.Types.NMeshType) or not data.faces:
+              pass # ignore anything that isn't a mesh
+          elif (obj.Layers & layers) == 0:
+              print "Skipping \"%s\" because it is on different layer" % obj.getName()
+          else:
+              texture = data.faces[0].image
+              self.mesh_objects.append(obj)
+
+      # search for armature object
+      self.armature_object = Blender.Object.Get("Armature")
+      if self.armature_object and self.armature_object.getType() != "Armature":
+          print "Warning: object named 'Armature' is not an armature!"
+          self.armature_object = None
+
+      # compose list of objects for attachment points
+      for obj in Blender.Object.Get():
+          if obj.getType() == 'Empty' and obj.getName().startswith("A:"):
+              self.attachment_objects.append(obj)
+
+      # compose list of actions to export
+      if not self.armature_object:
+          self.actions.append("Default")
+      else:
+          for action in Blender.Armature.NLA.GetActions().iteritems():
+              self.actions.append(action[1])
+        
+  ### END: def collect_data()
+
+  def collect_animation_data(self):
+      for index, action in enumerate(self.actions):
+          Window.DrawProgressBar(float(index)/len(self.mesh_data)*0.5,
+                                 "Collection Action %s" % (action.name))
+          
+          action.setActive(self.armature_object)
+
+          # find/autodetect config
+          if self.actionconfigs.has_key(action.getName()):
+              actioncfg = self.actionconfigs[action.getName()]
+          else:
+              print "Error: No config for action '%s' defined." % action.getName()
+              actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
+
+          frame_data = []
+          for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
+              Blender.Set("curframe", int(frame))
+              frame_data.append(self.collect_frame_data())
+
+          self.action_data.append(ActionData(action.getName(), actioncfg, frame_data))
+
+  def collect_object_data(self):
+    for obj in self.mesh_objects:
+      self.mesh_data += self.collect_mesh_data(obj)
+
+    # insert code to merge meshes here
+
+    # Create the transtable
+    for mesh in self.mesh_data:
+      mesh.finalize()
+
+  def collect_mesh_data(self, obj):
+      """
+      Returns mesh_data as dict with format:
+      key: texture_filename
+      val: MeshData
+      """
+      mesh_data = {}
+
+      for face in obj.getData().faces:
+          if face.image:
+              texture_filename = face.image.filename
+          else:
+              texture_filename = "//404.png" # FIXME: what is // good for?
+
+          if not mesh_data.has_key(texture_filename):
+              mesh_data[texture_filename] = MeshData(texture_filename)
+
+          faces = []
+          for v in [0, 1, 2]:
+              faces.append(VertexData(obj, face.v[v].index,
+                                      [face.uv[v][0], 1.0-face.uv[v][1]],
+                                      [face.normal[1], -face.normal[2], -face.normal[0]]))
+          mesh_data[texture_filename].faces.append(FaceData(faces,
+                                                            [face.normal[1], -face.normal[2], -face.normal[0]]))
+
+          # Write out another triangle in case we have a quad: index, u, v
+          faces = []
+          if len(face.v) == 4:
+              for v in [0, 2, 3]:
+                  faces.append(VertexData(obj, face.v[v].index,
+                                          [face.uv[v][0], 1.0-face.uv[v][1]],
+                                          [face.normal[1], -face.normal[2], -face.normal[0]]))
+              mesh_data[texture_filename].faces.append(FaceData(faces,
+                                                                [face.normal[1], -face.normal[2], -face.normal[0]]))
+
+      return mesh_data.values()
+
+  def collect_frame_data(self):
+      """
+      Collect all data for the given object in a single frame, frame
+      has to be selected outside of this function.
+      Format:
+      [[[vertex_pos_x, vertex_pos_y, vertex_pos_z], ...],
+      [[attachment_pos_x, attachment_pos_y, attachment_pos_z,
+      attachment_quat1, attachment_quat2, attachment_quat3, attachment_quat4], ...]]
+       """
+   
+      meshs = []
+      attachment_points = []
+
+      obj = None
+
+      # no triangles here (those are global), just vertexes (those are local)
+      for mesh_data in self.mesh_data:
+          vertex_positions = []
+          for vertex in mesh_data.transtable:
+              if obj != vertex[0]:
+                  obj  = vertex[0]
+                  data = Blender.NMesh.GetRawFromObject(obj.getName())
+
+              index = vertex[1]
+
+              m = obj.getMatrix()
+
+              # location: action/frame/mesh/vertices
+              v = data.verts[index]
+              vertex_positions.append([+(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
+                                       -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
+                                       -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM])
+          meshs.append(vertex_positions)
+
+      # attachment points
+      for obj in self.attachment_objects:
+          m    = obj.matrixWorld
+          loc  = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
+          quat = matrix2quaternion(m)      
+          attachment_points.append(AttachmentPoint([loc[1], -loc[2], -loc[0]],
+                                                   [quat[0], quat[2], quat[3], quat[1]]))
+
+      return FrameData(meshs, attachment_points)
+
+  def write(self, out):
+      """This is a new version of write_file(), instead of using blender
+      internals, it uses the collected data"""
+
+      ### Write magic, version and counts for mesh, attachment_points and actions
+      out.write(struct.pack("=4sHHHH", "W3DS",
+                            FORMAT_VERSION, \
+                            len(self.mesh_data),
+                            len(self.attachment_objects),
+                            len(self.action_data)))
+
+      ### Mesh Header:
+      for mesh in self.mesh_data:
+          out.write(struct.pack("=64sHH",
+                                mesh.texture_filename,
+                                len(mesh.faces),
+                                len(mesh.vertices)))
+          ### Mesh Data:
+          ## Vertex indices of triangles
+          for face in mesh.faces:
+              out.write(struct.pack("=HHH",
+                                    mesh.translate(face.verts[0]),
+                                    mesh.translate(face.verts[1]),
+                                    mesh.translate(face.verts[2])))
+
+          ## Normal
+          for face in mesh.faces:
+              out.write(struct.pack("=fff", face.normal[0], face.normal[1], face.normal[2]))
+
+          ## UV Coordinates
+          for vert in mesh.vertices:
+            out.write(struct.pack("=ff", vert.uv[0], vert.uv[1]))
+
+      ### Attachment points
+      for obj in self.attachment_objects:
+          out.write(struct.pack("=64s", obj.getName()[2:]))
+
+      ## Action Header
+      for index, action in enumerate(self.action_data):
+          Window.DrawProgressBar(0.5 + float(index)/len(self.mesh_data) * 0.5,
+                                 "Writing Action %s" % (action.name))
+
+          out.write(struct.pack("=64sfHH",
+                                action.name, 
+                                action.config.speed * SPEED_MULTIPLIER,
+                                len(action.config.markers),
+                                len(action.frame_data)))
+          
+          ## Marker
+          for (marker_name, marker_frame) in action.config.markers:
+              out.write(struct.pack("=64sH",
+                                    marker_name, 
+                                    (marker_frame - action.config.first_frame) / action.config.samplerate))
+
+          ## Action Data
+          for frame in action.frame_data:
+              ### Vertex positions
+              for mesh in frame.vertex_locs:
+                  for vert in mesh:
+                      out.write(struct.pack("=fff", vert[0], vert[1], vert[2]))
+              ### Attachment Points
+              for at in frame.attachment_points:
+                  out.write(struct.pack("=fffffff",
+                                        at.loc[0],  at.loc[1],  at.loc[2],
+                                        at.quat[0], at.quat[1], at.quat[2], at.quat[3]))
+    ### DONE ###
+
+  def print_stats(self):
+      """Print some stats, vertex count, face count and such"""
+      print "+===================================================================="
+      print "| WindstilleSprite"
+      print "+===================================================================="
+      print "| Mesh Count:     ", len(self.mesh_data)
+      print "| Mesh Objects:   ", self.mesh_objects
+      print "| Actions:        ", self.actions
+      print "| AttachmentObjs: ", self.attachment_objects
+      print "| Meshs: "
+      for mesh in self.mesh_data:
+          print "|   Mesh:       ", mesh
+          print "|     Texture:  ", mesh.texture_filename
+          print "|     Faces:    ", len(mesh.faces)
+          print "|     Vertices: ", len(mesh.vertices)
+          print "|"
+      print "| Actions: "
+      for action in self.action_data:
+          print "|   Name:        ", action.name
+          print "|   Config:      ", action.config
+          print "|   Frames:      ", len(action.frame_data)
+          print "|   Vertices:    ", [len(x) for x in action.frame_data[0].vertex_locs]
+          print "|   Attachments: ", len(action.frame_data[0].attachment_points)
+          print "|"
+      print "+===================================================================="
+    
+def export(filename):
+    data = WindstilleSprite()
+
+    file = open(filename, "wb")
+    data.write(file)
+    file.close()
+
+    data.print_stats()
+
+########################################################
+def fs_callback(filename):
+    print "=== Exporting: %s ===" % (filename)
+    export(filename)
+    Window.DrawProgressBar(1.0, "Finished writing %s" % (filename)) 
+    print "=== Windstille Exporter done, wrote %s ===" % (filename)
+
+defaultname = Blender.Get("filename")
+if defaultname.endswith(".blend"):
+    defaultname = defaultname[0:len(defaultname) - len(".blend")] + ".wsprite"
+Window.FileSelector(fs_callback, "Windstille Export", defaultname)
+
+# EOF #



From grumbel at berlios.de  Fri Jan 20 20:39:58 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 20 Jan 2006 20:39:58 +0100
Subject: [Windstille-commit] r1238 - trunk/tools
Message-ID: <200601201939.k0KJdw3M013859@sheep.berlios.de>

Author: grumbel
Date: 2006-01-20 20:39:57 +0100 (Fri, 20 Jan 2006)
New Revision: 1238

Modified:
   trunk/tools/data.py
   trunk/tools/helper.py
   trunk/tools/windstille_export2.py
Log:
- optimized a bit and added vertex and mesh moving

Modified: trunk/tools/data.py
===================================================================
--- trunk/tools/data.py	2006-01-20 01:04:23 UTC (rev 1237)
+++ trunk/tools/data.py	2006-01-20 19:39:57 UTC (rev 1238)
@@ -17,39 +17,44 @@
 
     self.vertices         = []
 
-    # Table to translate (object, index) to new_index
-    # Format: [[object, index, new_index], ...]
-    self.transtable       = []
+  def merge(self, mesh):
+      """Merges a mesh with self"""
+      if self.texture_filename != mesh.texture_filename:
+          raise Exception, "Error: MeshData:merge: meshes can only be merged if they have the same texture"
+      elif self.vertices != []:
+          raise Exception, "Error: MeshData:merge: Must merge the meshes before finalization"
+      else:
+          self.faces += mesh.faces
 
-  def transtable_has_vertex(self, new_object, new_index):
-      for (object, index, new_index) in self.transtable:
-          if object == new_object and index == new_object:
-              return True
-          else:
-              return False
-
-  def translate(self, vert):
-      """Translate a vertex given as object, index pair to its
-      corresponding index, as used in the wsprite file"""
-      
-      for (object, index, new_index) in self.transtable:
-          if object == vert.object and index == vert.index:
-              return new_index
-      
-      print "MeshData: Couldn't translate vertex: %s, %s" % (vert.object, vert.index)
-      return 0
-
   def finalize(self):
-      """Reorders vertex indexes and merge vertexes which have the same
-      UV coordinates"""
+      """Reorders vertex indexes and merge vertexes which have the
+      same UV coordinates, thus bringing the MeshData into a stage
+      where it is ready to be written out to file"""
 
+      # Merge vertices with the same UV
+      vertices = {}
       for face in self.faces:
           for vert in face.verts:
-              if not self.transtable_has_vertex(vert.object, vert.index):
-                  new_index = len(self.transtable)
-                  self.transtable.append([vert.object, vert.index, new_index])
-                  self.vertices.append(vert)
+              key = (vert.uv[0], vert.uv[1])
+              vertices[key] = vert
 
+      print "Vertices: ", len(vertices)
+
+      # FIXME: This might not work with vertices that have the same
+      # uv, but different positions
+      for face in self.faces:
+          for vi in range(0, len(face.verts)):
+              key = (face.verts[vi].uv[0], face.verts[vi].uv[1])
+              face.verts[vi] = vertices[key]
+
+      # Generate new index numbering
+      self.vertices = vertices.values()
+      for i, vert in enumerate(self.vertices):
+          vert.new_index = i
+
+      ## Remove '//' infront of the filename that Blender inserts there
+      self.texture_filename = self.texture_filename[2:]
+      
 class FaceData:
     def __init__(self, verts, normal):
         self.verts   = verts
@@ -57,10 +62,11 @@
 
 class VertexData:
     def __init__(self, object, index, uv, normal):
-        self.object = object
-        self.index  = index
-        self.uv     = uv
-        self.normal = normal
+        self.object    = object
+        self.index     = index
+        self.uv        = uv
+        self.normal    = normal
+        self.new_index = -1
 
 class AttachmentPointData:
     """Data for an attachment point, its location and its rotation"""

Modified: trunk/tools/helper.py
===================================================================
--- trunk/tools/helper.py	2006-01-20 01:04:23 UTC (rev 1237)
+++ trunk/tools/helper.py	2006-01-20 19:39:57 UTC (rev 1238)
@@ -49,10 +49,11 @@
 def get_text(textname):
   """Little shortcut function to return the content of
   Blender.Text.get(textname) as a single string and do a little error
-  handling in addition""" 
-  textobj = Blender.Text.Get(textname)
-  if not textobj:
-    print "WARNING: Text '%s' not found" % textname
+  handling in addition"""
+  try:
+    textobj = Blender.Text.Get(textname)
+  except Exception, err:
+    print "WARNING: ", err
     return ""
   else:
     return string.join(textobj.asLines(), "\n")

Modified: trunk/tools/windstille_export2.py
===================================================================
--- trunk/tools/windstille_export2.py	2006-01-20 01:04:23 UTC (rev 1237)
+++ trunk/tools/windstille_export2.py	2006-01-20 19:39:57 UTC (rev 1238)
@@ -33,6 +33,12 @@
 #
 # See windstille/docs/models.txt for more details
 
+### TODO ###
+# - add merging of vertices with the same uv
+# - add merging of meshes with the same texture
+# - add handling of meshes with armatures, but without actions
+############
+
 import struct, shlex, os.path, math
 import Blender
 from Blender import NMesh
@@ -153,16 +159,22 @@
           self.action_data.append(ActionData(action.getName(), actioncfg, frame_data))
 
   def collect_object_data(self):
+    self.mesh_data = {}
     for obj in self.mesh_objects:
-      self.mesh_data += self.collect_mesh_data(obj)
+      ### Convert mesh_objects to MeshData and merge all meshes with
+      ### the same texture     
+      for (texture, mesh) in self.collect_mesh_data(obj).iteritems():
+        if self.mesh_data.has_key(texture):
+          self.mesh_data[texture].merge(mesh)
+        else:
+          self.mesh_data[texture] = mesh
+    self.mesh_data = self.mesh_data.values()
 
-    # insert code to merge meshes here
-
-    # Create the transtable
+    # Optimize the meshs by merging meshes and vertices
     for mesh in self.mesh_data:
       mesh.finalize()
 
-  def collect_mesh_data(self, obj):
+  def collect_mesh_data(self, obj): # returns { texture_filename : MeshData, ...}
       """
       Returns mesh_data as dict with format:
       key: texture_filename
@@ -174,7 +186,7 @@
           if face.image:
               texture_filename = face.image.filename
           else:
-              texture_filename = "//404.png" # FIXME: what is // good for?
+              texture_filename = "//404.png"
 
           if not mesh_data.has_key(texture_filename):
               mesh_data[texture_filename] = MeshData(texture_filename)
@@ -197,7 +209,7 @@
               mesh_data[texture_filename].faces.append(FaceData(faces,
                                                                 [face.normal[1], -face.normal[2], -face.normal[0]]))
 
-      return mesh_data.values()
+      return mesh_data
 
   def collect_frame_data(self):
       """
@@ -217,12 +229,12 @@
       # no triangles here (those are global), just vertexes (those are local)
       for mesh_data in self.mesh_data:
           vertex_positions = []
-          for vertex in mesh_data.transtable:
-              if obj != vertex[0]:
-                  obj  = vertex[0]
+          for vertex in mesh_data.vertices:
+              if obj != vertex.object:
+                  obj  = vertex.object
                   data = Blender.NMesh.GetRawFromObject(obj.getName())
 
-              index = vertex[1]
+              index = vertex.index
 
               m = obj.getMatrix()
 
@@ -264,9 +276,9 @@
           ## Vertex indices of triangles
           for face in mesh.faces:
               out.write(struct.pack("=HHH",
-                                    mesh.translate(face.verts[0]),
-                                    mesh.translate(face.verts[1]),
-                                    mesh.translate(face.verts[2])))
+                                    face.verts[0].new_index,
+                                    face.verts[1].new_index,
+                                    face.verts[2].new_index))
 
           ## Normal
           for face in mesh.faces:



From grumbel at berlios.de  Fri Jan 20 21:59:18 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 20 Jan 2006 21:59:18 +0100
Subject: [Windstille-commit] r1239 - trunk/tools
Message-ID: <200601202059.k0KKxIhK018480@sheep.berlios.de>

Author: grumbel
Date: 2006-01-20 21:59:18 +0100 (Fri, 20 Jan 2006)
New Revision: 1239

Removed:
   trunk/tools/data.py
   trunk/tools/helper.py
Modified:
   trunk/tools/
   trunk/tools/windstille_export2.py
Log:
- optimized windstille_exporter2.py
- merged data.py and helper.py into windstille_exporter2.py


Property changes on: trunk/tools
___________________________________________________________________
Name: svn:ignore
   + semantic.cache


Deleted: trunk/tools/data.py
===================================================================
--- trunk/tools/data.py	2006-01-20 19:39:57 UTC (rev 1238)
+++ trunk/tools/data.py	2006-01-20 20:59:18 UTC (rev 1239)
@@ -1,185 +0,0 @@
-import struct, shlex, os.path, math
-
-# SAMPLEFRAMES, only export every nth frame of the animation
-DEFAULT_SAMPLERATE = 5
-# ZOOM, is multiplied with all vertex coordinates
-ZOOM = 32.0
-DEFAULT_SPEED = 1.0
-SPEED_MULTIPLIER = 9.8
-
-class MeshData:
-  def __init__(self, texture_filename):
-    # Filename of the used texture
-    self.texture_filename = texture_filename
-
-    # [FaceData, ...]
-    self.faces            = []
-
-    self.vertices         = []
-
-  def merge(self, mesh):
-      """Merges a mesh with self"""
-      if self.texture_filename != mesh.texture_filename:
-          raise Exception, "Error: MeshData:merge: meshes can only be merged if they have the same texture"
-      elif self.vertices != []:
-          raise Exception, "Error: MeshData:merge: Must merge the meshes before finalization"
-      else:
-          self.faces += mesh.faces
-
-  def finalize(self):
-      """Reorders vertex indexes and merge vertexes which have the
-      same UV coordinates, thus bringing the MeshData into a stage
-      where it is ready to be written out to file"""
-
-      # Merge vertices with the same UV
-      vertices = {}
-      for face in self.faces:
-          for vert in face.verts:
-              key = (vert.uv[0], vert.uv[1])
-              vertices[key] = vert
-
-      print "Vertices: ", len(vertices)
-
-      # FIXME: This might not work with vertices that have the same
-      # uv, but different positions
-      for face in self.faces:
-          for vi in range(0, len(face.verts)):
-              key = (face.verts[vi].uv[0], face.verts[vi].uv[1])
-              face.verts[vi] = vertices[key]
-
-      # Generate new index numbering
-      self.vertices = vertices.values()
-      for i, vert in enumerate(self.vertices):
-          vert.new_index = i
-
-      ## Remove '//' infront of the filename that Blender inserts there
-      self.texture_filename = self.texture_filename[2:]
-      
-class FaceData:
-    def __init__(self, verts, normal):
-        self.verts   = verts
-        self.normal  = normal
-
-class VertexData:
-    def __init__(self, object, index, uv, normal):
-        self.object    = object
-        self.index     = index
-        self.uv        = uv
-        self.normal    = normal
-        self.new_index = -1
-
-class AttachmentPointData:
-    """Data for an attachment point, its location and its rotation"""
-    def __init__(self, loc, quat):
-        self.loc  = loc
-        self.quat = quat
-
-class FrameData:
-    """ Data used for a single frame in an action """
-    def __init__(self, vertex_locs, attachment_points):
-        # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
-        self.vertex_locs        = vertex_locs
-
-        # [AttachmentPointData, ...]
-        self.attachment_points = attachment_points
-
-
-class ActionConfig:
-    """ActionConfig handles the properties of a single
-    action, ie. when it starts, when it stops, its speed, how many
-    spamles should be taken, etc."""
-
-    def __init__(self, first_frame, last_frame, speed, samplerate, markers):
-        self.first_frame = first_frame
-        self.last_frame  = last_frame
-        self.speed       = speed
-        self.samplerate  = samplerate
-        self.markers     = markers
-        self.numframes   = last_frame - first_frame + 1
-
-    def __str__(self):
-        return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
-                                                                         self.speed, self.samplerate)
-
-    # config entry (first_frame, last_frame, speed, samplerate, markers[])
-    #  a marker is (name, frame)
-    def parse(text):     
-        def expect_string():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected string, got EOF"
-            return res
-
-        def expect_int():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected in, got EOF"
-            return int(res)
-
-        def expect_float():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected float, got EOF"
-            return float(res)
-
-        def expect_dash():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected '-', got EOF"
-            elif res != "-":
-                raise Exception, "Expected '-', got '%s'" % res
-
-        lex = shlex.shlex(text)
-        lex.wordchars += "."
-
-        actionconfig = {}
-        while True:
-            token = lex.get_token()
-            if token == lex.eof:
-                break
-            lex.push_token(token)
-            action_name = expect_string()
-            first_frame = expect_int()
-            expect_dash()
-            last_frame = expect_int()
-
-            token = lex.get_token()
-            if token == "speed":
-                speed = expect_float()
-            else:
-                lex.push_token(token)
-                speed = DEFAULT_SPEED
-
-            token = lex.get_token()
-            if token == "samplerate":
-                samplerate = expect_int()
-            else:
-                lex.push_token(token)
-                samplerate = DEFAULT_SAMPLERATE
-
-            token = lex.get_token()
-            markers = []
-            while token == "marker":
-                marker_name = expect_string()
-                marker_frame = expect_int()
-                markers.append( (marker_name, marker_frame) )
-                token = lex.get_token()
-            lex.push_token(token)
-
-            actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
-
-        return actionconfig
-    parse = staticmethod(parse)
-
-class ActionData:
-  def __init__(self, name, config, frame_data):
-    # name as string
-    self.name       = name
-
-    # ActionConfig
-    self.config     = config
-
-    # FrameData (filled out later in the WindstilleExporter)
-    self.frame_data = frame_data
-
-# EOF #

Deleted: trunk/tools/helper.py
===================================================================
--- trunk/tools/helper.py	2006-01-20 19:39:57 UTC (rev 1238)
+++ trunk/tools/helper.py	2006-01-20 20:59:18 UTC (rev 1239)
@@ -1,61 +0,0 @@
-import Blender
-import string
-
-def matrix2quaternion(m):
-  tr = 1.0 + m[0][0] + m[1][1] + m[2][2]
-  if tr > .00001:
-    s = math.sqrt(tr)
-    w = s / 2.0
-    s = 0.5 / s
-    x = (m[1][2] - m[2][1]) * s
-    y = (m[2][0] - m[0][2]) * s
-    z = (m[0][1] - m[1][0]) * s
-  elif m[0][0] > m[1][1] and m[0][0] > m[2][2]:
-    s = math.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2])
-    x = s / 2.0
-    s = 0.5 / s
-    y = (m[0][1] + m[1][0]) * s
-    z = (m[2][0] + m[0][2]) * s
-    w = (m[1][2] - m[2][1]) * s
-  elif m[1][1] > m[2][2]:
-    s = math.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2])
-    y = s / 2.0
-    s = 0.5 / s
-    x = (m[0][1] + m[1][0]) * s
-    z = (m[1][2] + m[2][1]) * s
-    w = (m[2][0] - m[0][2]) * s
-  else:
-    s = math.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1])
-    z = s / 2.0
-    s = 0.5 / s
-    x = (m[2][0] + m[0][2]) * s
-    y = (m[1][2] + m[2][1]) * s
-    w = (m[0][1] - m[1][0]) * s
-
-  return quaternion_normalize([w, x, y, z])
-
-def quaternion_normalize(q):
-  l = math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
-  return q[0] / l, q[1] / l, q[2] / l, q[3] / l
-
-def quaternion_to_axisangle(q):
-  cos_a = q[0]
-  angle = math.acos(cos_a) * 2.0
-  sin_a = math.sqrt(1.0 - cos_a * cos_a)
-  if(sin_a < .0005 or sin_a > .0005): sin_a = 1
-  return angle, q[1]/sin_a, q[2]/sin_a, q[3]/sin_a
-
-##########################################################
-def get_text(textname):
-  """Little shortcut function to return the content of
-  Blender.Text.get(textname) as a single string and do a little error
-  handling in addition"""
-  try:
-    textobj = Blender.Text.Get(textname)
-  except Exception, err:
-    print "WARNING: ", err
-    return ""
-  else:
-    return string.join(textobj.asLines(), "\n")
-
-# EOF #

Modified: trunk/tools/windstille_export2.py
===================================================================
--- trunk/tools/windstille_export2.py	2006-01-20 19:39:57 UTC (rev 1238)
+++ trunk/tools/windstille_export2.py	2006-01-20 20:59:18 UTC (rev 1239)
@@ -34,8 +34,6 @@
 # See windstille/docs/models.txt for more details
 
 ### TODO ###
-# - add merging of vertices with the same uv
-# - add merging of meshes with the same texture
 # - add handling of meshes with armatures, but without actions
 ############
 
@@ -55,6 +53,250 @@
 # DO NOT change this
 FORMAT_VERSION = 2
 
+def progress(percent, str):
+#    print "%3.2f%% - %s" % (percent*100, str)
+    Window.DrawProgressBar(percent, str)
+
+### Some math helper functions ###
+def matrix2quaternion(m):
+  tr = 1.0 + m[0][0] + m[1][1] + m[2][2]
+  if tr > .00001:
+    s = math.sqrt(tr)
+    w = s / 2.0
+    s = 0.5 / s
+    x = (m[1][2] - m[2][1]) * s
+    y = (m[2][0] - m[0][2]) * s
+    z = (m[0][1] - m[1][0]) * s
+  elif m[0][0] > m[1][1] and m[0][0] > m[2][2]:
+    s = math.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2])
+    x = s / 2.0
+    s = 0.5 / s
+    y = (m[0][1] + m[1][0]) * s
+    z = (m[2][0] + m[0][2]) * s
+    w = (m[1][2] - m[2][1]) * s
+  elif m[1][1] > m[2][2]:
+    s = math.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2])
+    y = s / 2.0
+    s = 0.5 / s
+    x = (m[0][1] + m[1][0]) * s
+    z = (m[1][2] + m[2][1]) * s
+    w = (m[2][0] - m[0][2]) * s
+  else:
+    s = math.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1])
+    z = s / 2.0
+    s = 0.5 / s
+    x = (m[2][0] + m[0][2]) * s
+    y = (m[1][2] + m[2][1]) * s
+    w = (m[0][1] - m[1][0]) * s
+
+  return quaternion_normalize([w, x, y, z])
+
+def quaternion_normalize(q):
+  l = math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
+  return q[0] / l, q[1] / l, q[2] / l, q[3] / l
+
+def quaternion_to_axisangle(q):
+  cos_a = q[0]
+  angle = math.acos(cos_a) * 2.0
+  sin_a = math.sqrt(1.0 - cos_a * cos_a)
+  if(sin_a < .0005 or sin_a > .0005): sin_a = 1
+  return angle, q[1]/sin_a, q[2]/sin_a, q[3]/sin_a
+
+##########################################################
+def get_text(textname):
+  """Little shortcut function to return the content of
+  Blender.Text.get(textname) as a single string and do a little error
+  handling in addition"""
+  try:
+    textobj = Blender.Text.Get(textname)
+  except Exception, err:
+    print "WARNING: ", err
+    return ""
+  else:
+    return string.join(textobj.asLines(), "\n")
+
+### Data Structures to hold the Mesh ###
+class MeshData:
+  def __init__(self, texture_filename):
+    # Filename of the used texture
+    self.texture_filename = texture_filename
+
+    # [FaceData, ...]
+    self.faces            = []
+
+    self.vertices         = []
+
+  def merge(self, mesh):
+      """Merges a mesh with self"""
+      if self.texture_filename != mesh.texture_filename:
+          raise Exception, "Error: MeshData:merge: meshes can only be merged if they have the same texture"
+      elif self.vertices != []:
+          raise Exception, "Error: MeshData:merge: Must merge the meshes before finalization"
+      else:
+          self.faces += mesh.faces
+
+  def finalize(self):
+      """Reorders vertex indexes and merge vertexes which have the
+      same UV coordinates, thus bringing the MeshData into a stage
+      where it is ready to be written out to file"""
+
+      # Merge vertices with the same UV
+      vertices = {}
+      for face in self.faces:
+          for vert in face.verts:
+              key = (vert.uv[0], vert.uv[1])
+              vertices[key] = vert
+
+      print "Vertices: ", len(vertices)
+
+      # FIXME: This might not work with vertices that have the same
+      # uv, but different positions
+      for face in self.faces:
+          for vi in range(0, len(face.verts)):
+              key = (face.verts[vi].uv[0], face.verts[vi].uv[1])
+              face.verts[vi] = vertices[key]
+
+      self.vertices = vertices.values()
+
+      # Sort the vertices by object to allow faster export in collect_frame_data()
+      self.vertices.sort(lambda x, y: cmp(x.object.getName(), y.object.getName()))
+      
+      # Generate new index numbering
+      for i, vert in enumerate(self.vertices):
+          vert.new_index = i
+
+      ## Remove '//' infront of the filename that Blender inserts there
+      self.texture_filename = self.texture_filename[2:]
+      
+class FaceData:
+    def __init__(self, verts, normal):
+        self.verts   = verts
+        self.normal  = normal
+
+class VertexData:
+    def __init__(self, object, index, uv, normal):
+        self.object    = object
+        self.index     = index
+        self.uv        = uv
+        self.normal    = normal
+        self.new_index = -1
+
+class AttachmentPointData:
+    """Data for an attachment point, its location and its rotation"""
+    def __init__(self, loc, quat):
+        self.loc  = loc
+        self.quat = quat
+
+class FrameData:
+    """ Data used for a single frame in an action """
+    def __init__(self, vertex_locs, attachment_points):
+        # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
+        self.vertex_locs        = vertex_locs
+
+        # [AttachmentPointData, ...]
+        self.attachment_points = attachment_points
+
+
+class ActionConfig:
+    """ActionConfig handles the properties of a single
+    action, ie. when it starts, when it stops, its speed, how many
+    spamles should be taken, etc."""
+
+    def __init__(self, first_frame, last_frame, speed, samplerate, markers):
+        self.first_frame = first_frame
+        self.last_frame  = last_frame
+        self.speed       = speed
+        self.samplerate  = samplerate
+        self.markers     = markers
+        self.numframes   = last_frame - first_frame + 1
+
+    def __str__(self):
+        return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
+                                                                         self.speed, self.samplerate)
+
+    # config entry (first_frame, last_frame, speed, samplerate, markers[])
+    #  a marker is (name, frame)
+    def parse(text):     
+        def expect_string():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected string, got EOF"
+            return res
+
+        def expect_int():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected in, got EOF"
+            return int(res)
+
+        def expect_float():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected float, got EOF"
+            return float(res)
+
+        def expect_dash():
+            res = lex.get_token()
+            if res == lex.eof:
+                raise Exception, "Expected '-', got EOF"
+            elif res != "-":
+                raise Exception, "Expected '-', got '%s'" % res
+
+        lex = shlex.shlex(text)
+        lex.wordchars += "."
+
+        actionconfig = {}
+        while True:
+            token = lex.get_token()
+            if token == lex.eof:
+                break
+            lex.push_token(token)
+            action_name = expect_string()
+            first_frame = expect_int()
+            expect_dash()
+            last_frame = expect_int()
+
+            token = lex.get_token()
+            if token == "speed":
+                speed = expect_float()
+            else:
+                lex.push_token(token)
+                speed = DEFAULT_SPEED
+
+            token = lex.get_token()
+            if token == "samplerate":
+                samplerate = expect_int()
+            else:
+                lex.push_token(token)
+                samplerate = DEFAULT_SAMPLERATE
+
+            token = lex.get_token()
+            markers = []
+            while token == "marker":
+                marker_name = expect_string()
+                marker_frame = expect_int()
+                markers.append( (marker_name, marker_frame) )
+                token = lex.get_token()
+            lex.push_token(token)
+
+            actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
+
+        return actionconfig
+    parse = staticmethod(parse)
+
+class ActionData:
+  def __init__(self, name, config, frame_data):
+    # name as string
+    self.name       = name
+
+    # ActionConfig
+    self.config     = config
+
+    # FrameData (filled out later in the WindstilleExporter)
+    self.frame_data = frame_data
+
+### end: Data Structures to hold the Mesh ###
+
 class WindstilleSprite:
   ########################################################
   def __init__(self):
@@ -118,15 +360,15 @@
               self.mesh_objects.append(obj)
 
       # search for armature object
-      self.armature_object = Blender.Object.Get("Armature")
-      if self.armature_object and self.armature_object.getType() != "Armature":
-          print "Warning: object named 'Armature' is not an armature!"
-          self.armature_object = None
+      armatures = [obj for obj in Blender.Object.Get() if obj.getType() == "Armature"]
+      if len(armatures) > 1:
+          raise Exception, "Need to have at most 1 armature in the scene"
+      else:
+          self.armature_object = armatures[0]
 
       # compose list of objects for attachment points
-      for obj in Blender.Object.Get():
-          if obj.getType() == 'Empty' and obj.getName().startswith("A:"):
-              self.attachment_objects.append(obj)
+      self.attachment_objects += [obj for obj in Blender.Object.Get() 
+                                  if (obj.getType() == 'Empty' and obj.getName().startswith("A:"))]
 
       # compose list of actions to export
       if not self.armature_object:
@@ -139,8 +381,7 @@
 
   def collect_animation_data(self):
       for index, action in enumerate(self.actions):
-          Window.DrawProgressBar(float(index)/len(self.mesh_data)*0.5,
-                                 "Collection Action %s" % (action.name))
+          progress(float(index)/len(self.actions)*0.5, "Collecting Action %s" % (action.name))
           
           action.setActive(self.armature_object)
 
@@ -153,6 +394,9 @@
 
           frame_data = []
           for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
+              #progress((index + (float(frame)/(actioncfg.last_frame+1 - actioncfg.first_frame)))
+              #         /len(self.actions)*0.5,
+              #         "Collecting Action %s" % (action.name))
               Blender.Set("curframe", int(frame))
               frame_data.append(self.collect_frame_data())
 
@@ -220,7 +464,7 @@
       [[attachment_pos_x, attachment_pos_y, attachment_pos_z,
       attachment_quat1, attachment_quat2, attachment_quat3, attachment_quat4], ...]]
        """
-   
+      # FIXME: This is by far the slowest function of all, optimizing might help
       meshs = []
       attachment_points = []
 
@@ -233,13 +477,10 @@
               if obj != vertex.object:
                   obj  = vertex.object
                   data = Blender.NMesh.GetRawFromObject(obj.getName())
+                  m    = obj.getMatrix()
 
-              index = vertex.index
-
-              m = obj.getMatrix()
-
               # location: action/frame/mesh/vertices
-              v = data.verts[index]
+              v = data.verts[vertex.index]
               vertex_positions.append([+(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
                                        -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
                                        -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM])
@@ -250,8 +491,8 @@
           m    = obj.matrixWorld
           loc  = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
           quat = matrix2quaternion(m)      
-          attachment_points.append(AttachmentPoint([loc[1], -loc[2], -loc[0]],
-                                                   [quat[0], quat[2], quat[3], quat[1]]))
+          attachment_points.append(AttachmentPointData([loc[1], -loc[2], -loc[0]],
+                                                       [quat[0], quat[2], quat[3], quat[1]]))
 
       return FrameData(meshs, attachment_points)
 
@@ -294,8 +535,8 @@
 
       ## Action Header
       for index, action in enumerate(self.action_data):
-          Window.DrawProgressBar(0.5 + float(index)/len(self.mesh_data) * 0.5,
-                                 "Writing Action %s" % (action.name))
+          progress(0.5 + float(index)/len(self.action_data) * 0.5,
+                   "Writing Action %s" % (action.name))
 
           out.write(struct.pack("=64sfHH",
                                 action.name, 



From grumbel at berlios.de  Fri Jan 20 22:00:14 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 20 Jan 2006 22:00:14 +0100
Subject: [Windstille-commit] r1241 - trunk/tools
Message-ID: <200601202100.k0KL0EbU018648@sheep.berlios.de>

Author: grumbel
Date: 2006-01-20 22:00:13 +0100 (Fri, 20 Jan 2006)
New Revision: 1241

Added:
   trunk/tools/windstille_export.py
Removed:
   trunk/tools/windstille_export2.py
Log:
- renamed new export script

Copied: trunk/tools/windstille_export.py (from rev 1240, trunk/tools/windstille_export2.py)

Deleted: trunk/tools/windstille_export2.py
===================================================================
--- trunk/tools/windstille_export2.py	2006-01-20 21:00:02 UTC (rev 1240)
+++ trunk/tools/windstille_export2.py	2006-01-20 21:00:13 UTC (rev 1241)
@@ -1,613 +0,0 @@
-#!BPY
-
-"""
-Name: 'Windstille Exporter'
-Blender: 233
-Group: 'Export'
-Tip: 'Export meshes/actions to windstille format'
-"""
-
-##  $Id: windstille_main.hxx,v 1.4 2003/11/07 13:00:39 grumbel Exp $
-## 
-##  Windstille - A Jump'n Shoot Game
-##  Copyright (C) 2005 Matthias Braun <matze at braunis.de>,
-##                     Ingo Ruhnke <grumbel at gmx.de>
-##
-##  This program is free software; you can redistribute it and/or
-##  modify it under the terms of the GNU General Public License
-##  as published by the Free Software Foundation; either version 2
-##  of the License, or (at your option) any later version.
-##
-##  This program is distributed in the hope that it will be useful,
-##  but WITHOUT ANY WARRANTY; without even the implied warranty of
-##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-##  GNU General Public License for more details.
-## 
-##  You should have received a copy of the GNU General Public License
-##  along with this program; if not, write to the Free Software
-##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-# Simple Python script that shows how to export animations from
-# Blender
-# Put this script in your $HOME/.blender/scripts directory.
-#
-# See windstille/docs/models.txt for more details
-
-### TODO ###
-# - add handling of meshes with armatures, but without actions
-############
-
-import struct, shlex, os.path, math
-import Blender
-from Blender import NMesh
-from Blender import Window
-from helper import *
-from data import * 
-
-# SAMPLEFRAMES, only export every nth frame of the animation
-DEFAULT_SAMPLERATE = 5
-# ZOOM, is multiplied with all vertex coordinates
-ZOOM = 32.0
-DEFAULT_SPEED = 1.0
-SPEED_MULTIPLIER = 9.8
-# DO NOT change this
-FORMAT_VERSION = 2
-
-def progress(percent, str):
-#    print "%3.2f%% - %s" % (percent*100, str)
-    Window.DrawProgressBar(percent, str)
-
-### Some math helper functions ###
-def matrix2quaternion(m):
-  tr = 1.0 + m[0][0] + m[1][1] + m[2][2]
-  if tr > .00001:
-    s = math.sqrt(tr)
-    w = s / 2.0
-    s = 0.5 / s
-    x = (m[1][2] - m[2][1]) * s
-    y = (m[2][0] - m[0][2]) * s
-    z = (m[0][1] - m[1][0]) * s
-  elif m[0][0] > m[1][1] and m[0][0] > m[2][2]:
-    s = math.sqrt(1.0 + m[0][0] - m[1][1] - m[2][2])
-    x = s / 2.0
-    s = 0.5 / s
-    y = (m[0][1] + m[1][0]) * s
-    z = (m[2][0] + m[0][2]) * s
-    w = (m[1][2] - m[2][1]) * s
-  elif m[1][1] > m[2][2]:
-    s = math.sqrt(1.0 + m[1][1] - m[0][0] - m[2][2])
-    y = s / 2.0
-    s = 0.5 / s
-    x = (m[0][1] + m[1][0]) * s
-    z = (m[1][2] + m[2][1]) * s
-    w = (m[2][0] - m[0][2]) * s
-  else:
-    s = math.sqrt(1.0 + m[2][2] - m[0][0] - m[1][1])
-    z = s / 2.0
-    s = 0.5 / s
-    x = (m[2][0] + m[0][2]) * s
-    y = (m[1][2] + m[2][1]) * s
-    w = (m[0][1] - m[1][0]) * s
-
-  return quaternion_normalize([w, x, y, z])
-
-def quaternion_normalize(q):
-  l = math.sqrt(q[0] * q[0] + q[1] * q[1] + q[2] * q[2] + q[3] * q[3])
-  return q[0] / l, q[1] / l, q[2] / l, q[3] / l
-
-def quaternion_to_axisangle(q):
-  cos_a = q[0]
-  angle = math.acos(cos_a) * 2.0
-  sin_a = math.sqrt(1.0 - cos_a * cos_a)
-  if(sin_a < .0005 or sin_a > .0005): sin_a = 1
-  return angle, q[1]/sin_a, q[2]/sin_a, q[3]/sin_a
-
-##########################################################
-def get_text(textname):
-  """Little shortcut function to return the content of
-  Blender.Text.get(textname) as a single string and do a little error
-  handling in addition"""
-  try:
-    textobj = Blender.Text.Get(textname)
-  except Exception, err:
-    print "WARNING: ", err
-    return ""
-  else:
-    return string.join(textobj.asLines(), "\n")
-
-### Data Structures to hold the Mesh ###
-class MeshData:
-  def __init__(self, texture_filename):
-    # Filename of the used texture
-    self.texture_filename = texture_filename
-
-    # [FaceData, ...]
-    self.faces            = []
-
-    self.vertices         = []
-
-  def merge(self, mesh):
-      """Merges a mesh with self"""
-      if self.texture_filename != mesh.texture_filename:
-          raise Exception, "Error: MeshData:merge: meshes can only be merged if they have the same texture"
-      elif self.vertices != []:
-          raise Exception, "Error: MeshData:merge: Must merge the meshes before finalization"
-      else:
-          self.faces += mesh.faces
-
-  def finalize(self):
-      """Reorders vertex indexes and merge vertexes which have the
-      same UV coordinates, thus bringing the MeshData into a stage
-      where it is ready to be written out to file"""
-
-      # Merge vertices with the same UV
-      vertices = {}
-      for face in self.faces:
-          for vert in face.verts:
-              key = (vert.uv[0], vert.uv[1])
-              vertices[key] = vert
-
-      print "Vertices: ", len(vertices)
-
-      # FIXME: This might not work with vertices that have the same
-      # uv, but different positions
-      for face in self.faces:
-          for vi in range(0, len(face.verts)):
-              key = (face.verts[vi].uv[0], face.verts[vi].uv[1])
-              face.verts[vi] = vertices[key]
-
-      self.vertices = vertices.values()
-
-      # Sort the vertices by object to allow faster export in collect_frame_data()
-      self.vertices.sort(lambda x, y: cmp(x.object.getName(), y.object.getName()))
-      
-      # Generate new index numbering
-      for i, vert in enumerate(self.vertices):
-          vert.new_index = i
-
-      ## Remove '//' infront of the filename that Blender inserts there
-      self.texture_filename = self.texture_filename[2:]
-      
-class FaceData:
-    def __init__(self, verts, normal):
-        self.verts   = verts
-        self.normal  = normal
-
-class VertexData:
-    def __init__(self, object, index, uv, normal):
-        self.object    = object
-        self.index     = index
-        self.uv        = uv
-        self.normal    = normal
-        self.new_index = -1
-
-class AttachmentPointData:
-    """Data for an attachment point, its location and its rotation"""
-    def __init__(self, loc, quat):
-        self.loc  = loc
-        self.quat = quat
-
-class FrameData:
-    """ Data used for a single frame in an action """
-    def __init__(self, vertex_locs, attachment_points):
-        # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
-        self.vertex_locs        = vertex_locs
-
-        # [AttachmentPointData, ...]
-        self.attachment_points = attachment_points
-
-
-class ActionConfig:
-    """ActionConfig handles the properties of a single
-    action, ie. when it starts, when it stops, its speed, how many
-    spamles should be taken, etc."""
-
-    def __init__(self, first_frame, last_frame, speed, samplerate, markers):
-        self.first_frame = first_frame
-        self.last_frame  = last_frame
-        self.speed       = speed
-        self.samplerate  = samplerate
-        self.markers     = markers
-        self.numframes   = last_frame - first_frame + 1
-
-    def __str__(self):
-        return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
-                                                                         self.speed, self.samplerate)
-
-    # config entry (first_frame, last_frame, speed, samplerate, markers[])
-    #  a marker is (name, frame)
-    def parse(text):     
-        def expect_string():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected string, got EOF"
-            return res
-
-        def expect_int():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected in, got EOF"
-            return int(res)
-
-        def expect_float():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected float, got EOF"
-            return float(res)
-
-        def expect_dash():
-            res = lex.get_token()
-            if res == lex.eof:
-                raise Exception, "Expected '-', got EOF"
-            elif res != "-":
-                raise Exception, "Expected '-', got '%s'" % res
-
-        lex = shlex.shlex(text)
-        lex.wordchars += "."
-
-        actionconfig = {}
-        while True:
-            token = lex.get_token()
-            if token == lex.eof:
-                break
-            lex.push_token(token)
-            action_name = expect_string()
-            first_frame = expect_int()
-            expect_dash()
-            last_frame = expect_int()
-
-            token = lex.get_token()
-            if token == "speed":
-                speed = expect_float()
-            else:
-                lex.push_token(token)
-                speed = DEFAULT_SPEED
-
-            token = lex.get_token()
-            if token == "samplerate":
-                samplerate = expect_int()
-            else:
-                lex.push_token(token)
-                samplerate = DEFAULT_SAMPLERATE
-
-            token = lex.get_token()
-            markers = []
-            while token == "marker":
-                marker_name = expect_string()
-                marker_frame = expect_int()
-                markers.append( (marker_name, marker_frame) )
-                token = lex.get_token()
-            lex.push_token(token)
-
-            actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
-
-        return actionconfig
-    parse = staticmethod(parse)
-
-class ActionData:
-  def __init__(self, name, config, frame_data):
-    # name as string
-    self.name       = name
-
-    # ActionConfig
-    self.config     = config
-
-    # FrameData (filled out later in the WindstilleExporter)
-    self.frame_data = frame_data
-
-### end: Data Structures to hold the Mesh ###
-
-class WindstilleSprite:
-  ########################################################
-  def __init__(self):
-      """ Create a WindstilleSprite from the current scene"""
-      ### References to Blender internals
-      # List of Blender mesh objects that should get exported (everything on
-      # seperate layer is ignored)
-      self.mesh_objects    = []
-
-      # Blender armature object
-      self.armature_object = None
-
-      # Blender attachment objects, ie. Empties
-      self.attachment_objects = []
-
-      # Name of the actions as string
-      self.actions = []
-
-      # { actionname : ActionConfig, ... }
-      self.actionconfigs = {}
-      
-      ### Converted Data
-      # List of mesh_data, ie. data we collected and converted ourself from Blender
-      self.mesh_data   = []
-            
-      # Used to store animation data (vertex position and such)
-      self.action_data = []
-
-      ### Start collecting data
-      # Collect Action Config
-      self.collect_actionconfig()
-      # Fill out Blender internal references
-      self.collect_data()
-      # Data for all Meshes
-      self.collect_object_data()
-      # Collect data for the Actions and Animations
-      self.collect_animation_data()
-
-  def collect_actionconfig(self):
-      try:
-          self.actionconfigs = ActionConfig.parse(get_text("actionconfig"))
-      except Exception, message:
-          raise Exception, "Error: Parse Error in actionconfig:" + str(message)
-      
-  def collect_data(self):
-      """Convert Blender data structures into something that is used by
-      this export script"""
-
-      scene  = Blender.Scene.getCurrent()
-      layers = scene.Layers
-
-      # compose list of meshs to export
-      for obj in Blender.Object.Get():
-          data = obj.getData()
-          if (type(data) is not Blender.Types.NMeshType) or not data.faces:
-              pass # ignore anything that isn't a mesh
-          elif (obj.Layers & layers) == 0:
-              print "Skipping \"%s\" because it is on different layer" % obj.getName()
-          else:
-              texture = data.faces[0].image
-              self.mesh_objects.append(obj)
-
-      # search for armature object
-      armatures = [obj for obj in Blender.Object.Get() if obj.getType() == "Armature"]
-      if len(armatures) > 1:
-          raise Exception, "Need to have at most 1 armature in the scene"
-      else:
-          self.armature_object = armatures[0]
-
-      # compose list of objects for attachment points
-      self.attachment_objects += [obj for obj in Blender.Object.Get() 
-                                  if (obj.getType() == 'Empty' and obj.getName().startswith("A:"))]
-
-      # compose list of actions to export
-      if not self.armature_object:
-          self.actions.append("Default")
-      else:
-          for action in Blender.Armature.NLA.GetActions().iteritems():
-              self.actions.append(action[1])
-        
-  ### END: def collect_data()
-
-  def collect_animation_data(self):
-      for index, action in enumerate(self.actions):
-          progress(float(index)/len(self.actions)*0.5, "Collecting Action %s" % (action.name))
-          
-          action.setActive(self.armature_object)
-
-          # find/autodetect config
-          if self.actionconfigs.has_key(action.getName()):
-              actioncfg = self.actionconfigs[action.getName()]
-          else:
-              print "Error: No config for action '%s' defined." % action.getName()
-              actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
-
-          frame_data = []
-          for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-              #progress((index + (float(frame)/(actioncfg.last_frame+1 - actioncfg.first_frame)))
-              #         /len(self.actions)*0.5,
-              #         "Collecting Action %s" % (action.name))
-              Blender.Set("curframe", int(frame))
-              frame_data.append(self.collect_frame_data())
-
-          self.action_data.append(ActionData(action.getName(), actioncfg, frame_data))
-
-  def collect_object_data(self):
-    self.mesh_data = {}
-    for obj in self.mesh_objects:
-      ### Convert mesh_objects to MeshData and merge all meshes with
-      ### the same texture     
-      for (texture, mesh) in self.collect_mesh_data(obj).iteritems():
-        if self.mesh_data.has_key(texture):
-          self.mesh_data[texture].merge(mesh)
-        else:
-          self.mesh_data[texture] = mesh
-    self.mesh_data = self.mesh_data.values()
-
-    # Optimize the meshs by merging meshes and vertices
-    for mesh in self.mesh_data:
-      mesh.finalize()
-
-  def collect_mesh_data(self, obj): # returns { texture_filename : MeshData, ...}
-      """
-      Returns mesh_data as dict with format:
-      key: texture_filename
-      val: MeshData
-      """
-      mesh_data = {}
-
-      for face in obj.getData().faces:
-          if face.image:
-              texture_filename = face.image.filename
-          else:
-              texture_filename = "//404.png"
-
-          if not mesh_data.has_key(texture_filename):
-              mesh_data[texture_filename] = MeshData(texture_filename)
-
-          faces = []
-          for v in [0, 1, 2]:
-              faces.append(VertexData(obj, face.v[v].index,
-                                      [face.uv[v][0], 1.0-face.uv[v][1]],
-                                      [face.normal[1], -face.normal[2], -face.normal[0]]))
-          mesh_data[texture_filename].faces.append(FaceData(faces,
-                                                            [face.normal[1], -face.normal[2], -face.normal[0]]))
-
-          # Write out another triangle in case we have a quad: index, u, v
-          faces = []
-          if len(face.v) == 4:
-              for v in [0, 2, 3]:
-                  faces.append(VertexData(obj, face.v[v].index,
-                                          [face.uv[v][0], 1.0-face.uv[v][1]],
-                                          [face.normal[1], -face.normal[2], -face.normal[0]]))
-              mesh_data[texture_filename].faces.append(FaceData(faces,
-                                                                [face.normal[1], -face.normal[2], -face.normal[0]]))
-
-      return mesh_data
-
-  def collect_frame_data(self):
-      """
-      Collect all data for the given object in a single frame, frame
-      has to be selected outside of this function.
-      Format:
-      [[[vertex_pos_x, vertex_pos_y, vertex_pos_z], ...],
-      [[attachment_pos_x, attachment_pos_y, attachment_pos_z,
-      attachment_quat1, attachment_quat2, attachment_quat3, attachment_quat4], ...]]
-       """
-      # FIXME: This is by far the slowest function of all, optimizing might help
-      meshs = []
-      attachment_points = []
-
-      obj = None
-
-      # no triangles here (those are global), just vertexes (those are local)
-      for mesh_data in self.mesh_data:
-          vertex_positions = []
-          for vertex in mesh_data.vertices:
-              if obj != vertex.object:
-                  obj  = vertex.object
-                  data = Blender.NMesh.GetRawFromObject(obj.getName())
-                  m    = obj.getMatrix()
-
-              # location: action/frame/mesh/vertices
-              v = data.verts[vertex.index]
-              vertex_positions.append([+(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
-                                       -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
-                                       -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM])
-          meshs.append(vertex_positions)
-
-      # attachment points
-      for obj in self.attachment_objects:
-          m    = obj.matrixWorld
-          loc  = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
-          quat = matrix2quaternion(m)      
-          attachment_points.append(AttachmentPointData([loc[1], -loc[2], -loc[0]],
-                                                       [quat[0], quat[2], quat[3], quat[1]]))
-
-      return FrameData(meshs, attachment_points)
-
-  def write(self, out):
-      """This is a new version of write_file(), instead of using blender
-      internals, it uses the collected data"""
-
-      ### Write magic, version and counts for mesh, attachment_points and actions
-      out.write(struct.pack("=4sHHHH", "W3DS",
-                            FORMAT_VERSION, \
-                            len(self.mesh_data),
-                            len(self.attachment_objects),
-                            len(self.action_data)))
-
-      ### Mesh Header:
-      for mesh in self.mesh_data:
-          out.write(struct.pack("=64sHH",
-                                mesh.texture_filename,
-                                len(mesh.faces),
-                                len(mesh.vertices)))
-          ### Mesh Data:
-          ## Vertex indices of triangles
-          for face in mesh.faces:
-              out.write(struct.pack("=HHH",
-                                    face.verts[0].new_index,
-                                    face.verts[1].new_index,
-                                    face.verts[2].new_index))
-
-          ## Normal
-          for face in mesh.faces:
-              out.write(struct.pack("=fff", face.normal[0], face.normal[1], face.normal[2]))
-
-          ## UV Coordinates
-          for vert in mesh.vertices:
-            out.write(struct.pack("=ff", vert.uv[0], vert.uv[1]))
-
-      ### Attachment points
-      for obj in self.attachment_objects:
-          out.write(struct.pack("=64s", obj.getName()[2:]))
-
-      ## Action Header
-      for index, action in enumerate(self.action_data):
-          progress(0.5 + float(index)/len(self.action_data) * 0.5,
-                   "Writing Action %s" % (action.name))
-
-          out.write(struct.pack("=64sfHH",
-                                action.name, 
-                                action.config.speed * SPEED_MULTIPLIER,
-                                len(action.config.markers),
-                                len(action.frame_data)))
-          
-          ## Marker
-          for (marker_name, marker_frame) in action.config.markers:
-              out.write(struct.pack("=64sH",
-                                    marker_name, 
-                                    (marker_frame - action.config.first_frame) / action.config.samplerate))
-
-          ## Action Data
-          for frame in action.frame_data:
-              ### Vertex positions
-              for mesh in frame.vertex_locs:
-                  for vert in mesh:
-                      out.write(struct.pack("=fff", vert[0], vert[1], vert[2]))
-              ### Attachment Points
-              for at in frame.attachment_points:
-                  out.write(struct.pack("=fffffff",
-                                        at.loc[0],  at.loc[1],  at.loc[2],
-                                        at.quat[0], at.quat[1], at.quat[2], at.quat[3]))
-    ### DONE ###
-
-  def print_stats(self):
-      """Print some stats, vertex count, face count and such"""
-      print "+===================================================================="
-      print "| WindstilleSprite"
-      print "+===================================================================="
-      print "| Mesh Count:     ", len(self.mesh_data)
-      print "| Mesh Objects:   ", self.mesh_objects
-      print "| Actions:        ", self.actions
-      print "| AttachmentObjs: ", self.attachment_objects
-      print "| Meshs: "
-      for mesh in self.mesh_data:
-          print "|   Mesh:       ", mesh
-          print "|     Texture:  ", mesh.texture_filename
-          print "|     Faces:    ", len(mesh.faces)
-          print "|     Vertices: ", len(mesh.vertices)
-          print "|"
-      print "| Actions: "
-      for action in self.action_data:
-          print "|   Name:        ", action.name
-          print "|   Config:      ", action.config
-          print "|   Frames:      ", len(action.frame_data)
-          print "|   Vertices:    ", [len(x) for x in action.frame_data[0].vertex_locs]
-          print "|   Attachments: ", len(action.frame_data[0].attachment_points)
-          print "|"
-      print "+===================================================================="
-    
-def export(filename):
-    data = WindstilleSprite()
-
-    file = open(filename, "wb")
-    data.write(file)
-    file.close()
-
-    data.print_stats()
-
-########################################################
-def fs_callback(filename):
-    print "=== Exporting: %s ===" % (filename)
-    export(filename)
-    Window.DrawProgressBar(1.0, "Finished writing %s" % (filename)) 
-    print "=== Windstille Exporter done, wrote %s ===" % (filename)
-
-defaultname = Blender.Get("filename")
-if defaultname.endswith(".blend"):
-    defaultname = defaultname[0:len(defaultname) - len(".blend")] + ".wsprite"
-Window.FileSelector(fs_callback, "Windstille Export", defaultname)
-
-# EOF #



From grumbel at berlios.de  Fri Jan 20 22:00:02 2006
From: grumbel at berlios.de (grumbel at BerliOS)
Date: Fri, 20 Jan 2006 22:00:02 +0100
Subject: [Windstille-commit] r1240 - trunk/tools
Message-ID: <200601202100.k0KL02r4018584@sheep.berlios.de>

Author: grumbel
Date: 2006-01-20 22:00:02 +0100 (Fri, 20 Jan 2006)
New Revision: 1240

Removed:
   trunk/tools/windstille_export.py
Modified:
   trunk/tools/windstille_export2.py
Log:
- removed old export script

Deleted: trunk/tools/windstille_export.py
===================================================================
--- trunk/tools/windstille_export.py	2006-01-20 20:59:18 UTC (rev 1239)
+++ trunk/tools/windstille_export.py	2006-01-20 21:00:02 UTC (rev 1240)
@@ -1,659 +0,0 @@
-#!BPY
-
-"""
-Name: 'Windstille Exporter'
-Blender: 233
-Group: 'Export'
-Tip: 'Export meshes/actions to windstille format'
-"""
-
-##  $Id: windstille_main.hxx,v 1.4 2003/11/07 13:00:39 grumbel Exp $
-## 
-##  Windstille - A Jump'n Shoot Game
-##  Copyright (C) 2005 Matthias Braun <matze at braunis.de>,
-##                     Ingo Ruhnke <grumbel at gmx.de>
-##
-##  This program is free software; you can redistribute it and/or
-##  modify it under the terms of the GNU General Public License
-##  as published by the Free Software Foundation; either version 2
-##  of the License, or (at your option) any later version.
-##
-##  This program is distributed in the hope that it will be useful,
-##  but WITHOUT ANY WARRANTY; without even the implied warranty of
-##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-##  GNU General Public License for more details.
-## 
-##  You should have received a copy of the GNU General Public License
-##  along with this program; if not, write to the Free Software
-##  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
-
-# Simple Python script that shows how to export animations from
-# Blender
-# Put this script in your $HOME/.blender/scripts directory.
-#
-# See windstille/docs/models.txt for more details
-
-import struct, shlex, os.path, math
-import Blender
-from Blender import NMesh
-from Blender import Window
-
-# SAMPLEFRAMES, only export every nth frame of the animation
-DEFAULT_SAMPLERATE = 5
-# ZOOM, is multiplied with all vertex coordinates
-ZOOM = 32.0
-DEFAULT_SPEED = 1.0
-SPEED_MULTIPLIER = 9.8
-# DO NOT change this
-FORMAT_VERSION = 2
-
-# config entry (first_frame, last_frame, speed, samplerate, markers[])
-#  a marker is (name, frame)
-def parse_actionconfig(text):
-  lex = shlex.shlex(text)
-  lex.wordchars += "."
-  def expect_string():
-    res = lex.get_token()
-    if res == lex.eof:
-      raise Exception, "Expected string, got EOF"
-    return res
-
-  def expect_int():
-    res = lex.get_token()
-    if res == lex.eof:
-      raise Exception, "Expected in, got EOF"
-    return int(res)
-
-  def expect_float():
-    res = lex.get_token()
-    if res == lex.eof:
-      raise Exception, "Expected float, got EOF"
-    return float(res)
-
-  def expect_dash():
-    res = lex.get_token()
-    if res == lex.eof:
-      raise Exception, "Expected '-', got EOF"
-    elif res != "-":
-      raise Exception, "Expected '-', got '%s'" % res
-
-  actionconfig = {}
-  while True:
-    token = lex.get_token()
-    if token == lex.eof:
-      break
-    lex.push_token(token)
-    action_name = expect_string()
-    first_frame = expect_int()
-    expect_dash()
-    last_frame = expect_int()
-
-    token = lex.get_token()
-    if token == "speed":
-      speed = expect_float()
-    else:
-      lex.push_token(token)
-      speed = DEFAULT_SPEED
-
-    token = lex.get_token()
-    if token == "samplerate":
-      samplerate = expect_int()
-    else:
-      lex.push_token(token)
-      samplerate = DEFAULT_SAMPLERATE
-
-    token = lex.get_token()
-    markers = []
-    while token == "marker":
-      marker_name = expect_string()
-      marker_frame = expect_int()
-      markers.append( (marker_name, marker_frame) )
-      token = lex.get_token()
-    lex.push_token(token)
-
-    actionconfig[action_name] = ActionConfig(first_frame, last_frame, speed, samplerate, markers)
-    print "Config: %-20s - %s" % (action_name, str(actionconfig[action_name]))
-
-  return actionconfig
-
-##########################################################
-def get_text(textname):
-  """Little shortcut function to return the content of
-  Blender.Text.get(textname) as a single string and do a little error
-  handling in addition""" 
-  try:
-    textobj = Blender.Text.Get(textname)
-  except:                                                         
-    print "WARNING: Text '%s' not found" % textname
-    return ""
-
-  lines = textobj.asLines()
-  text = ""
-  for line in lines:
-    text += line + "\n"
-  return text
-
-class MeshData:
-  def __init__(self, texture_filename, faces = []):
-    # Filename of the used texture
-    self.texture_filename = texture_filename
-
-    # [FaceData, ...]
-    self.faces            = faces
-
-    # Table to translate (object, index) to new_index
-    # Format: [[object, index, new_index], ...]
-    self.transtable       = []
-
-  def transtable_has_vertex(self, new_object, new_index):
-    for (object, index, new_index) in self.transtable:
-      if object == new_object and index == new_object:
-        return True
-      else:
-        return False
-
-  def finalize(self):
-    """Reorders vertex indexes"""
-
-    for face in self.faces:
-      for vert in face:
-        if not self.transtable_has_vertex(vert.object, vert.index):
-          self.transtable += [[vert.object, vert.index, len(self.transtable)]]
-
-    # print "FINALIZE"
-    # print self.transtable
-    # print "FINALIZE END"
-
-  def vertices(self):
-    return self.transtable
-
-  def translate(self, arg_object, arg_index):
-    """Translate a vertex given as object, index pair to its
-    corresponding index, as used in the wsprite file"""
-   
-    for (object, index, new_index) in self.transtable:
-      if arg_object == object and arg_index == index:
-        return new_index
-    raise "MeshData: Couldn't translate vertex: %s, %s" % (arg_object, arg_index)
-
-class FaceData:
-  def __init__(self, verts, normal):
-    self.verts   = verts
-    self.normal  = normal
-
-class VertexData:
-  def __init__(self, object, index, uv, normal):
-    self.object = object
-    self.index  = index
-    self.uv     = uv
-    self.normal = normal
-
-class AttachmentPointData:
-  """Data for an attachment point, its location and its rotation"""
-  def __init__(self, loc, quat):
-    self.loc  = loc
-    self.quat = quat
-
-class FrameData:
-  """ Data used for a single frame in an action """
-  def __init__(self, vertex_locs, attachment_points):
-    # Format: [[[x,y,z], ...], [[x,y,z],  ...], ...] (one list for each Mesh)
-    self.vertex_locs        = vertex_locs
-    
-    # [AttachmentPointData, ...]
-    self.attachment_points = attachment_points
-
-
-class ActionConfig:
-  """ActionConfig handles the properties of a single
-  action, ie. when it starts, when it stops, its speed, how many
-  spamles should be taken, etc."""
-
-  def __init__(self, first_frame, last_frame, speed, samplerate, markers):
-    self.first_frame = first_frame
-    self.last_frame  = last_frame
-    self.speed       = speed
-    self.samplerate  = samplerate
-    self.markers     = markers
-    self.numframes   = last_frame - first_frame + 1
-
-  def __str__(self):
-    return "Frames: %3i - %3i, speed: %3.2f, Samplerate: %3d" % (self.first_frame, self.last_frame,
-                                                           self.speed, self.samplerate)
-
-class ActionData:
-  def __init__(self, name, config):
-    # name as string
-    self.name       = name
-
-    # ActionConfig
-    self.config     = config
-
-    # FrameData (filled out later in the WindstilleExporter)
-    self.frame_data = None
-
-##########################################################
-class WindstilleExporter:
-  """ WindstilleExporter bundles all kind of functions... """
-
-  ########################################################
-  def __init__(self):
-    # List of objects that should get exported (everything on seperate layer is ignored)
-    self.mesh_objects    = []
-
-    # List of mesh_data
-    self.mesh_data   = []
-    
-    self.attachment_objects = []
-
-    # Name of the actions as string
-    self.actions = []
-
-    # Used to store animation data (vertex position and such)
-    self.action_data = []
-    
-    self.objvertmaps = {}
-    self.armatureobj = None
-
-    # { actionname : ActionConfig, ... }
-    self.actionconfigs = {}
-
-  ########################################################
-  def export(self, filename):
-    """ parse actionconfig """
-    try:
-      self.actionconfigs = parse_actionconfig(get_text("actionconfig"))
-    except Exception, message:
-      raise Exception, "Parse Error in actionconfig:" + str(message)
-
-    self.export_lowlevel()
-
-    self.collect_scene_data()
-
-    file = open(filename, "wb")
-    self.write_file(file)
-    file.close()
-
-  ### begin: save_frame()
-  def save_frame(self, out):
-    """Write out vertex position and position of attachment points in a frame"""
-    for obj in self.mesh_objects:
-      data = Blender.NMesh.GetRawFromObject(obj.getName())
-      m = obj.getMatrix()
-      # location: action/frame/mesh/vertices
-      for nv in self.objvertmaps[obj.getName()]:
-        v = data.verts[nv]
-        out.write(struct.pack("=fff",
-                              +(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
-                              -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
-                              -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM))
-
-    # attachment points
-    for obj in self.attachment_objects:
-      m = obj.matrixWorld
-      loc = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
-      out.write(struct.pack("=fff", loc[1], -loc[2], -loc[0]))
-      quat = matrix2quaternion(m)
-      out.write(struct.pack("=ffff", quat[0], quat[2], quat[3], quat[1]))
-    ### end: save_frame()
-
-  ########################################################    
-  def write_file(self, out):
-    """ write file header """
-    out.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
-          len(self.mesh_objects), len(self.attachment_objects), len(self.actions)))
-
-    # Mesh Headers + Data
-    for obj in self.mesh_objects:
-      self.export_mesh_header(out, obj)
-
-    # Attachment Point Headers
-    for obj in self.attachment_objects:
-      out.write(struct.pack("=64s", obj.getName()[2:]))
-
-    # Action Headers + actions
-    actionnum = 0
-
-    # special case, no armature+animations
-    if not self.armatureobj:
-      out.write(struct.pack("=64sfHH", "Default", \
-                            DEFAULT_SPEED * SPEED_MULTIPLIER, 0, 1))
-      self.save_frame(out)
-    else:
-      for action in self.actions:
-        # enable action
-        action.setActive(self.armatureobj)
-
-        # find/autodetect config
-        if self.actionconfigs.has_key(action.getName()):
-          actioncfg = self.actionconfigs[action.getName()]
-        else:
-          print "Error: No config for action '%s' defined." % action.getName()
-          actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
-
-        # calculate number of frames and stuff for the header
-        resultframes = 0
-        for i in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-          resultframes += 1
-        progress = 1.0/float(len(self.actions)) * actionnum
-
-        print "Exporting Action %s (%d frames)" \
-                % (action.getName(), resultframes)
-        Window.DrawProgressBar(progress, "Exporting Action %s (%d frames)" \
-                % (action.getName(), resultframes))
-        actionnum += 1
-        out.write(struct.pack("=64sfHH", action.getName(), \
-              actioncfg.speed * SPEED_MULTIPLIER, len(actioncfg.markers), resultframes))
-
-        def blenderframe_to_wspriteframe(frame):
-          return (frame - actioncfg.first_frame) / actioncfg.samplerate
-
-        # write markers
-        for marker in actioncfg.markers:
-          out.write(struct.pack("=64sH", marker[0], \
-                blenderframe_to_wspriteframe(marker[1])))
-
-        # output for all frames for all meshs all vertex positions
-        frs = 0
-        for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-          frs += 1
-          Blender.Set("curframe", int(frame))
-          self.save_frame(out)
-  ### end: write_file()
-
-  def export_mesh_header(self, out, obj):
-    print "Exporting Mesh %s" % obj.getName()
-    data = obj.getData()
-
-    print "Faces: %s" % (len(data.faces))
-
-    texture = data.faces[0].image
-    texture_filename = texture.filename
-    texture_filename = os.path.basename(texture_filename)
-
-    # triangles
-    vertexmap = []
-    uvs = []
-    bodydata = ""
-    facecount = 0
-    texturewarning = False
-
-    ##############################
-    def mapvertex(index, u, v):
-      """Inline helper function"""
-      for mv in xrange(0, len(vertexmap)):
-        if vertexmap[mv] == index and uvs[mv] == (u, v):
-          return mv
-      vertexmap.append(index)
-      uvs.append( (u, v) )
-      return len(vertexmap)-1
-    ##############################
-
-    for face in data.faces:
-      if face.image != texture and not texturewarning:
-        print "WARNING: Mesh '%s' has more than 1 material" % obj.getName()
-        texturewarning = True
-
-      # Write out triangle: ((index, u, v), (index, u, v), (index, u, v))
-      for v in [0, 1, 2]:
-        bodydata += struct.pack("=H", \
-                                mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
-      facecount += 1
-
-      # Write out another triangle in case we have a quad: index, u, v
-      if len(face.v) == 4:
-        facecount += 1
-        for v in [0, 2, 3]:
-          bodydata += struct.pack("=H", \
-                mapvertex(face.v[v].index, face.uv[v][0], face.uv[v][1]))
-
-    # FIXME: saving normals doesn't make sense per-mesh, should be per
-    # frame, unless I am overlooking something
-    
-    # normals
-    for face in data.faces:
-      bodydata += struct.pack("=fff", face.normal[1], -face.normal[2], -face.normal[0])
-      if len(face.v) == 4:
-        bodydata += struct.pack("=fff", face.normal[1], -face.normal[2], -face.normal[0])
-
-    # uv coords per vertex
-    for uv in uvs:
-      bodydata += struct.pack("=ff", uv[0], 1.0-uv[1])
-
-    out.write(struct.pack("=64sHH", texture_filename, facecount, len(vertexmap)))
-    print "Exporting Mesh Tex: %s Facecount: %d Vertices: %d" \
-            % (texture_filename, facecount, len(vertexmap))
-    out.write(bodydata)
-
-    self.objvertmaps[obj.getName()] = vertexmap
-  ### end: export_mesh()
-
-  def export_lowlevel(self):
-    """Convert Blender data structures into something that is used by
-    this export script"""
-
-    scene = Blender.Scene.getCurrent()
-    layers = scene.Layers
-
-    # compose list of meshs to export
-    for obj in Blender.Object.Get():
-      data = obj.getData()
-      if (type(data) is not Blender.Types.NMeshType) or not data.faces:
-        continue
-      if (obj.Layers & layers) == 0:
-        print "Skipping \"%s\" because it is on different layer" % obj.getName()
-        continue
-      texture = data.faces[0].image
-      if not texture:
-        print "Skipping Mesh %s: no texture" % obj.getName()
-        continue
-      self.mesh_objects.append(obj)
-
-    # search for armature object
-    armatures = Blender.Armature.Get()
-    if len(armatures) > 1:
-      raise Exception, "Need to have at most 1 armature in the scene"
-
-    for obj in Blender.Object.Get():
-      print "Type: " + obj.getType()
-      if obj.getType() == "Armature":
-        print "found"
-        self.armatureobj = obj
-        armature = obj.getData()
-        break
-
-    # compose list of objects for attachment points
-    for obj in Blender.Object.Get():
-      if obj.getType() == 'Empty' and obj.getName().startswith("A:"):
-        self.attachment_objects.append(obj)
-
-    # compose list of actions to export
-    if not self.armatureobj:
-      self.actions.append("Default")
-    else:
-      for action in Blender.Armature.NLA.GetActions().iteritems():
-        self.actions.append(action[1])
-  ## end: exporter_lowlevel()
-
-  def collect_scene_data(self):
-    self.collect_object_data()
-
-    for action in self.actions:
-      action.setActive(self.armatureobj)
-    
-      # find/autodetect config
-      if self.actionconfigs.has_key(action.getName()):
-        actioncfg = self.actionconfigs[action.getName()]
-      else:
-        print "Error: No config for action '%s' defined." % action.getName()
-        actioncfg = ActionConfig(1, 1, DEFAULT_SPEED, DEFAULT_SAMPLERATE, [])
-
-    for frame in range(actioncfg.first_frame, actioncfg.last_frame+1, actioncfg.samplerate):
-      Blender.Set("curframe", int(frame))
-      print self.collect_frame_data()
-
-  def collect_object_data(self):
-    for obj in self.mesh_objects:
-      self.mesh_data += self.collect_mesh_data(obj)
-
-    # insert code to merge meshes here
-
-    # Create the transtable
-    for mesh in self.mesh_data:
-      mesh.finalize()
-
-    print "############# Begin: MeshDATA ##############"
-    for val in self.collect_mesh_data(obj):
-      print val
-    print "############# End: MeshDATA ##############"
-
-  def collect_mesh_data(self, obj):
-    """
-    Returns mesh_data as dict with format:
-    key: texture_filename
-    val: MeshData
-    """
-    mesh_data = {}
-
-    for face in obj.getData().faces:
-      if face.image:
-        texture_filename = face.image.filename
-      else:
-        texture_filename = "404.png"
-        
-      if not mesh_data.has_key(texture_filename):
-        mesh_data[texture_filename] = MeshData(texture_filename)
-
-      faces = []
-      for v in [0, 1, 2]:
-        faces += [VertexData(obj, face.v[v].index,
-                             [face.uv[v][0], 1.0-face.uv[v][1]],
-                             [face.normal[1], -face.normal[2], -face.normal[0]])]
-      mesh_data[texture_filename].faces += [faces]
-
-      # Write out another triangle in case we have a quad: index, u, v
-      if len(face.v) == 4:
-        for v in [0, 2, 3]:
-          faces += [VertexData(obj, face.v[v].index,
-                               [face.uv[v][0], 1.0-face.uv[v][1]],
-                               [face.normal[1], -face.normal[2], -face.normal[0]])]
-        mesh_data[texture_filename].faces += [faces]
-      
-    return mesh_data.values()
-
-  def collect_frame_data(self):
-    """
-    Collect all data for the given object in a single frame, frame
-    has to be selected outside of this function.
-    Format:
-      [[[vertex_pos_x, vertex_pos_y, vertex_pos_z], ...],
-       [[attachment_pos_x, attachment_pos_y, attachment_pos_z,
-         attachment_quat1, attachment_quat2, attachment_quat3, attachment_quat4], ...]]
-    """
-   
-    meshs = []
-    attachment_points = []
-
-    obj = None
-
-    # no triangles here (those are global), just vertexes (those are local)
-    for mesh_data in self.mesh_data:
-      vertex_positions = []
-      for vertex in mesh_data.vertices():
-        if obj != vertex[0]:
-          obj  = vertex[0]
-          data = Blender.NMesh.GetRawFromObject(obj.getName())
-          
-        index = vertex[1]
-        
-        m = obj.getMatrix()
-
-        # location: action/frame/mesh/vertices
-        v = data.verts[index]
-        vertex_positions += [[+(m[0][1]*v[0] + m[1][1]*v[1] + m[2][1]*v[2] + m[3][1]) * ZOOM,
-                              -(m[0][2]*v[0] + m[1][2]*v[1] + m[2][2]*v[2] + m[3][2]) * ZOOM,
-                              -(m[0][0]*v[0] + m[1][0]*v[1] + m[2][0]*v[2] + m[3][0]) * ZOOM]]
-      meshs += [vertex_positions]
-
-    # attachment points
-    for obj in self.attachment_objects:
-      m    = obj.matrixWorld
-      loc  = (m[3][0] * ZOOM, m[3][1] * ZOOM, m[3][2] * ZOOM)
-      quat = matrix2quaternion(m)      
-      attachment_points += [AttachmentPoint([loc[1], -loc[2], -loc[0]],
-                                            [quat[0], quat[2], quat[3], quat[1]])]
-
-    return FrameData(meshs, attachment_points)
-
-  def write(self, out):
-    """This is a new version of write_file(), instead of using blender
-    internals, it uses the collected data"""
-
-    ### Write magic, version and counts for mesh, attachment_points and actions
-    out.write(struct.pack("=4sHHHH", "W3DS", FORMAT_VERSION, \
-                          len(self.mesh_objects),
-                          len(self.attachment_objects),
-                          len(self.actions)))
-
-    ### Mesh Header:
-    for mesh in self.mesh_data:
-      out.write(struct.pack("=64sHH", mesh.texture_filename, len(mesh.faces), len(mesh.vertices()) * 2))
-      ### Mesh Data:
-      ## Vertex indices of triangles
-      for face in mesh.faces:
-        out.write(struct.pack("=HHH", face.verts[0].index,  face.verts[1].index,  face.verts[2].index))
-
-      ## Normal
-      for face in mesh.faces:
-        out.write(struct.pack("=fff", face.normal, face.normal, face.normal))
-
-      ## UV Coordinates
-      for face in mesh.faces: 
-        out.write(struct.pack("=ff",  face.uv[0], face.uv[1]))
-
-    ### Attachment points
-    for obj in self.attachment_objects:
-      out.write(struct.pack("=64s", obj.getName()[2:]))
-
-    ## Action Header
-    for action in self.action_configs:
-      out.write(struct.pack("=64sfHH", action.name, 
-                            action.config.speed * SPEED_MULTIPLIER,
-                            len(action.config.markers), len(action.frame_data)))
-
-    ## Marker, FIXME: Are markers per action, or global?
-    for marker in action.config.markers:
-      out.write(struct.pack("=64sH", marker[0], \
-                            (marker[1] - action.config.first_frame) / action.config.samplerate))
-
-    ## Action Data
-    for action in self.action_data:
-      for frame in action.frame_data:
-        ### Vertex positions
-        for mesh in frame.vertex_locs:
-          for vert in mesh:
-           out.write(struct.pack("=fff", vert[0], vert[1], vert[2]))
-        ### Attachment Points
-        for at in frame.attachment_point:
-          out.write(struct.pack("=fffffff",
-                                at.loc[0],  at.loc[1],  at.loc[2],
-                                at.quat[0], at.quat[1], at.quat[2], at.quat[3]))
-
-    ### DONE ###
-
-
-### end: WindstilleExporter
-
-########################################################
-def fs_callback(filename):
-  print "=== Exporting: %s ===" % (filename)
-  exporter = WindstilleExporter()
-  exporter.export(filename)
-  print "=== Windstille Exporter done, wrote %s ===" % (filename)
-
-defaultname = Blender.Get("filename")
-if defaultname.endswith(".blend"):
-  defaultname = defaultname[0:len(defaultname) - len(".blend")] + ".wsprite"
-Window.FileSelector(fs_callback, "Windstille Export", defaultname)
-
-# EOF #

Modified: trunk/tools/windstille_export2.py
===================================================================
--- trunk/tools/windstille_export2.py	2006-01-20 20:59:18 UTC (rev 1239)
+++ trunk/tools/windstille_export2.py	2006-01-20 21:00:02 UTC (rev 1240)
@@ -1,7 +1,7 @@
 #!BPY
 
 """
-Name: 'Windstille Exporter V2'
+Name: 'Windstille Exporter'
 Blender: 233
 Group: 'Export'
 Tip: 'Export meshes/actions to windstille format'



