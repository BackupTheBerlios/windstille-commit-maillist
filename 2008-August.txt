From grumbel at mail.berlios.de  Tue Aug  5 22:26:12 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 5 Aug 2008 22:26:12 +0200
Subject: [Windstille-commit] r2274 - in trunk/griv: . new new/math
Message-ID: <200808052026.m75KQCRu003245@sheep.berlios.de>

Author: grumbel
Date: 2008-08-05 22:26:11 +0200 (Tue, 05 Aug 2008)
New Revision: 2274

Added:
   trunk/griv/new/
   trunk/griv/new/SConstruct
   trunk/griv/new/TODO
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/math.cpp
   trunk/griv/new/math.hpp
   trunk/griv/new/math/
   trunk/griv/new/math/origin.cpp
   trunk/griv/new/math/origin.hpp
   trunk/griv/new/math/rect.cpp
   trunk/griv/new/math/rect.hpp
   trunk/griv/new/math/size.cpp
   trunk/griv/new/math/size.hpp
   trunk/griv/new/math/vector2f.cpp
   trunk/griv/new/math/vector2f.hpp
   trunk/griv/new/math/vector2i.cpp
   trunk/griv/new/math/vector2i.hpp
   trunk/griv/new/math/vector3f.cpp
   trunk/griv/new/math/vector3f.hpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
   trunk/griv/new/url.cpp
   trunk/griv/new/url.hpp
Log:
Started reimplementation of griv


Property changes on: trunk/griv/new
___________________________________________________________________
Name: svn:ignore
   + griv


Added: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/SConstruct	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,18 @@
+# Zoomable Image Viewer
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], 
+                       LIBS=['freeimage', 'jpeg', 'mhash', 'GL', 'GLU'])
+griv_env.ParseConfig("sdl-config --libs --cflags")
+griv_env.ParseConfig("pkg-config sqlite3 --libs --cflags")
+griv_env.Program('griv', [
+        'math.cpp',
+        'math/size.cpp',
+        'math/rect.cpp',
+        'math/vector2i.cpp',
+        'math/vector2f.cpp',
+        'software_surface.cpp',
+        'url.cpp',
+        'file_database.cpp',
+        'tile_database.cpp',
+        'griv.cpp'])
+
+# EOF #

Added: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/TODO	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,8 @@
+[[ Griv ToDo ]]
+
+* SQLite Backend
+* SoftwareSurface: load from memory, save to memory
+* all GL stuff
+
+
+# EOF #
\ No newline at end of file

Added: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/file_database.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,107 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "file_database.hpp"
+
+FileDatabase::FileDatabase(sqlite3* db)
+  : db(db)
+{
+  if (sqlite3_prepare_v2(db,
+                         "INSERT OR REPLACE INTO files (filename, md5, filesize, width, height, mtime)"
+                         "           VALUES (      ?1,  ?2,       ?3,    ?4,     ?5,    ?6);", -1, &store_stmt,  0)
+      != SQLITE_OK)
+    {
+      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));
+    }
+  
+  if (sqlite3_prepare_v2(db, "SELECT * FROM files WHERE filename = ?1", -1, &get_by_file_id_stmt,  0))
+    {
+      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));      
+    }
+
+  if (sqlite3_prepare_v2(db, "SELECT * FROM files WHERE rowid = ?1",  -1, &get_by_file_id_stmt,  0))
+    {
+      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));      
+    }
+
+}
+  
+int
+FileDatabase::store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime)
+{
+  sqlite3_bind_blob(store_stmt, 1, filename.c_str(), filename.size(), SQLITE_STATIC);
+  sqlite3_bind_text(store_stmt, 2, md5.c_str(), -1, SQLITE_STATIC); 
+  sqlite3_bind_int (store_stmt, 3, filesize); // filesize
+  sqlite3_bind_int (store_stmt, 4, width);    // width
+  sqlite3_bind_int (store_stmt, 5, height);   // height
+  sqlite3_bind_int (store_stmt, 6, 0);        // mtime
+
+  // execute
+  int rc = sqlite3_step(store_stmt);
+  if (rc != SQLITE_DONE)
+    {
+      std::cout << "Something went wrong: " << sqlite3_errmsg(db) << std::endl;
+    }
+  else
+    {
+      std::cout << "added " << filename << std::endl;
+    }
+
+  sqlite3_reset(store_stmt);
+  sqlite3_clear_bindings(store_stmt);  
+
+  return 0; // row_id
+}
+
+FileEntry
+FileDatabase::get_file_entry(const std::string& filename)
+{
+  sqlite3_bind_text(get_by_filename_stmt, 1, filename.c_str(), -1, SQLITE_STATIC);
+
+  // execute
+  int rc = sqlite3_step(get_by_filename_stmt);
+  if (rc != SQLITE_DONE)
+    {
+      std::cout << "Something went wrong: " << sqlite3_errmsg(db) << std::endl;
+    }
+  else
+    {
+      std::cout << "added " << filename << std::endl;
+    }
+
+  sqlite3_reset(get_by_filename_stmt);
+  sqlite3_clear_bindings(get_by_filename_stmt);  
+  return FileEntry();
+}
+
+FileEntry
+FileDatabase::get_file_entry(uint32_t file_id)
+{
+  sqlite3_bind_int(get_by_file_id_stmt, 1, file_id);
+  return FileEntry();
+}
+
+/* EOF */


Property changes on: trunk/griv/new/file_database.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/file_database.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,64 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FILE_DATABASE_HPP
+#define HEADER_FILE_DATABASE_HPP
+
+#include <sqlite3.h>
+#include <string>
+
+struct FileEntry 
+{
+  std::string filename; // 
+  uint32_t    mtime;    // mtime of the file
+  int         width;    // image width
+  int         height;   // image height
+};
+
+/** */
+class FileDatabase
+{
+private:
+  sqlite3* db;
+  sqlite3_stmt* store_stmt;
+  sqlite3_stmt* get_by_filename_stmt;
+  sqlite3_stmt* get_by_file_id_stmt;
+  
+public:
+  FileDatabase(sqlite3* db);
+  
+  int store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime);
+
+  FileEntry get_file_entry(const std::string& filename);
+  FileEntry get_file_entry(uint32_t file_id);
+
+private:
+  FileDatabase (const FileDatabase&);
+  FileDatabase& operator= (const FileDatabase&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/file_database.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/griv.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,114 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <sstream>
+#include <stdexcept>
+#include <iostream>
+#include <string>
+#include <vector>
+#include "FreeImage.h"
+
+#include "math/size.hpp"
+#include "math/rect.hpp"
+#include "math/vector2i.hpp"
+#include "url.hpp"
+#include "software_surface.hpp"
+#include "griv.hpp"
+
+Griv::Griv()
+{
+  FreeImage_Initialise();
+}
+
+Griv::~Griv()
+{
+  FreeImage_DeInitialise();
+}
+
+int
+Griv::main(int argc, char** argv)
+{
+  std::vector<std::string> rest;
+
+  for(int i = 1; i < argc; ++i)
+    {
+      if (argv[i][0] == '-')
+        { // option
+          
+        }
+      else
+        { // rest
+          rest.push_back(argv[i]);
+        }
+    }
+
+  for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
+    {
+      // Generate Image Tiles
+      SoftwareSurface surface(rest[i]);
+      
+      int scale = 0;
+
+      do
+        {
+          if (scale != 0)
+            {
+              surface = surface.scale(Size(surface.get_width()/2, 
+                                           surface.get_height()/2));
+            }
+
+          for(int y = 0; y <= surface.get_height()/256; ++y)
+            for(int x = 0; x <= surface.get_width()/256; ++x)
+              {
+                std::ostringstream out;
+                out << "/tmp/out/tile-" << scale << "-" << y << "+" << x << ".jpg";
+
+                SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
+                                                                   Size(256, 256)));
+                croped_surface.save(out.str());
+              }
+
+          scale += 1;
+        } while (surface.get_width() > 32 ||
+                 surface.get_height() > 32);
+    }
+
+  return 0;
+}
+
+int main(int argc, char** argv)
+{
+  try 
+    {
+      Griv app;
+      return app.main(argc, argv);
+    }
+  catch(std::exception& err) 
+    {
+      std::cout << "Exception: " << err.what() << std::endl;
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/new/griv.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/griv.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,41 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_GRIV_HPP
+#define HEADER_GRIV_HPP
+
+class Griv
+{
+private:
+public:
+  Griv();
+  ~Griv();
+
+  int main(int argc, char** argv);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/griv.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/origin.cpp
===================================================================
--- trunk/griv/new/math/origin.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/origin.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,92 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+#include "origin.hpp"
+
+Origin string2origin(const std::string& str)
+{
+  if (str == "top_left")
+    return origin_top_left;
+  else if (str == "top_center")
+    return origin_top_center;
+  else if (str == "top_right")
+    return origin_top_right;
+  else if (str == "center_left")
+    return origin_center_left;
+  else if (str == "center")
+    return origin_center;
+  else if (str == "center_right")
+    return origin_center_right;
+  else if (str == "bottom_left")
+    return origin_bottom_left;
+  else if (str == "bottom_center")
+    return origin_bottom_center;
+  else if (str == "bottom_right")
+    return origin_bottom_right;
+  else 
+    return origin_top_left;
+}
+
+Vector2i calc_origin(Origin origin, const Size &size)
+{
+  switch(origin)
+    {
+    case origin_top_left:
+    default:
+      return Vector2i(0, 0);
+      break;
+    case origin_top_center:
+      return Vector2i(size.width / 2, 0);
+      break;
+    case origin_top_right:
+      return Vector2i(size.width, 0);
+      break;
+    case origin_center_left:
+      return Vector2i(0, size.height / 2);
+      break;
+    case origin_center:
+      return Vector2i(size.width / 2, size.height / 2);
+      break;
+    case origin_center_right:
+      return Vector2i(size.width, size.height / 2);
+      break;
+    case origin_bottom_left:
+      return Vector2i(0, size.height);
+      break;
+    case origin_bottom_center:
+      return Vector2i(size.width / 2, size.height);
+      break;
+    case origin_bottom_right:
+      return Vector2i(size.width, size.height);
+      break;
+    }
+}
+
+/* EOF */
+


Property changes on: trunk/griv/new/math/origin.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/origin.hpp
===================================================================
--- trunk/griv/new/math/origin.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/origin.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,64 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+//! clanCore="Math"
+//! header=core.h
+
+#ifndef header_origin
+#define header_origin
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <string>
+#include "vector2i.hpp"
+#include "size.hpp"
+
+//: Alignment origins.
+//- !group=Core/Math!
+//- !header=core.h!
+enum Origin
+{
+	origin_top_left,
+	origin_top_center,
+	origin_top_right,
+	origin_center_left,
+	origin_center,
+	origin_center_right,
+	origin_bottom_left,
+	origin_bottom_center,
+	origin_bottom_right
+};
+
+Origin string2origin(const std::string& str);
+
+Vector2i calc_origin(Origin origin, const Size& size);
+
+#endif


Property changes on: trunk/griv/new/math/origin.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/rect.cpp
===================================================================
--- trunk/griv/new/math/rect.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/rect.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,42 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+#include <iostream>
+#include "rect.hpp"
+
+#define cl_min(a,b) ((a < b) ? a : b)
+#define cl_max(a,b) ((a > b) ? a : b)
+
+std::ostream& operator<<(std::ostream& s, const Rect& rect)
+{
+  return s << "Rect(" << rect.left << ", " << rect.top << ", "
+           << rect.right << ", " << rect.bottom << ")";
+}
+
+/* EOF */


Property changes on: trunk/griv/new/math/rect.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/rect.hpp
===================================================================
--- trunk/griv/new/math/rect.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/rect.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,359 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+#ifndef __MATH_RECT_HPP__
+#define __MATH_RECT_HPP__
+
+#include <iosfwd>
+#include "origin.hpp"
+#include "vector3f.hpp"
+#include "size.hpp"
+
+class Rectf;
+
+//: 2D (left,top,right,bottom) rectangle structure.
+//- !group=Core/Math!
+//- !header=core.h!
+class Rect
+{
+  //! Construction:
+public:
+  //: Constructs an rectangle.
+  //param left: Initial left position of rectangle.
+  //param top: Initial top position of rectangle.
+  //param right: Initial right position of rectangle.
+  //param bottom: Initial bottom position of rectangle.
+  //param point: Initial top-left position of rectangle.
+  //param size: Initial size of rectangle.
+  //param rect: Initial rectangle position and size.
+  Rect() { left = right = top = bottom = 0; }
+
+  explicit Rect(const Rectf& rect);
+
+  Rect(int new_left, int new_top, int new_right, int new_bottom)
+  { left = new_left; top = new_top; right = new_right; bottom = new_bottom; }
+
+  Rect(const Vector2i &p, const Size &size)
+  { left = p.x; top = p.y; right = left + size.width; bottom = top + size.height; }
+
+  Rect(const Rect &rect)
+  { left = rect.left; top = rect.top; right = rect.right; bottom = rect.bottom; }
+
+  // Moves each edge b away from the center, thus width = old_width + 2*b
+  Rect grow(int b) const {
+    return Rect(left   - b, 
+                top    - b,
+                right  + b,
+                bottom + b);
+  }
+
+  //: Rect += Rect operator.
+  Rect &operator+=(const Rect &r)
+  { left += r.left; top += r.top; right += r.right; bottom += r.bottom; return *this; }
+
+  //: Rect -= Rect operator.
+  Rect &operator-=(const Rect &r)
+  { left -= r.left; top -= r.top; right -= r.right; bottom -= r.bottom; return *this; }
+	
+  //: Rect += Point operator.
+  Rect &operator+=(const Vector2i &p)
+  { left += p.x; top += p.y; right += p.x; bottom += p.y; return *this; }
+
+  //: Rect -= Point operator.
+  Rect &operator-=(const Vector2i &p)
+  { left -= p.x; top -= p.y; right -= p.x; bottom -= p.y; return *this; }
+
+  //: Rect + Rect operator.
+  Rect operator+(const Rect &r) const
+  { return Rect(left + r.left, top + r.top, right + r.right, bottom + r.bottom); }
+
+  //: Rect - Rect operator.
+  Rect operator-(const Rect &r) const
+  { return Rect(left - r.left, top - r.top, right - r.right, bottom - r.bottom); }
+
+  //: Rect + Point operator.
+  Rect operator+(const Vector2i &p) const
+  { return Rect(left + p.x, top + p.y, right + p.x, bottom + p.y); }
+
+  //: Rect - Point operator.
+  Rect operator-(const Vector2i &p) const
+  { return Rect(left - p.x, top - p.y, right - p.x, bottom - p.y); }
+
+  //: Rect == Rect operator.
+  bool operator==(const Rect &r) const
+  { return (left == r.left && top == r.top && right == r.right && bottom && r.bottom); }
+
+  //: Rect != Rect operator.
+  bool operator!=(const Rect &r) const
+  { return (left != r.left || top != r.top || right != r.right || bottom != r.bottom); }
+
+  //! Attributes:
+public:
+  //: X1-coordinate.
+  int left;
+	
+  //: Y1-coordinate.
+  int top;
+	
+  //: X2-coordinate.
+  int right;
+	
+  //: Y2-coordinate.
+  int bottom;
+	
+  //: Returns the width of the rectangle.
+  int get_width() const { return right - left; }
+	
+  //: Returns the height of the rectangle.
+  int get_height() const { return bottom - top; }
+
+  //: Returns the size of the rectangle.
+  Size get_size() const { return Size(right - left, bottom - top); }
+	
+  //: Returns true if point is inside the rectangle.
+  bool is_inside(const Vector2i &p) const { return (p.x >= left && p.y >= top && p.x <= right && p.y <= bottom); }
+
+  //: Returns true if rectangle passed is overlapping or inside this rectangle.
+  bool is_overlapped(const Rect &r) const 
+  {
+    return (r.left < right && r.right > left && r.top < bottom && r.bottom > top);
+  }
+
+  bool is_normal() const 
+  {
+    return left <= right && top <= bottom;
+  }
+
+  //! Operations:
+public:
+  //: Sets the size of the rectangle, maintaining top/left position.
+  void set_size(const Size &size)
+  {
+    right = left + size.width;
+    bottom = top + size.height;
+  }
+
+  //: Calculates and returns the union of two rectangles.
+  Rect calc_union(const Rect &rect)
+  {
+    Rect result;
+    if (left   > rect.left)   result.left   = left;   else result.left   = rect.left;
+    if (right  < rect.right)  result.right  = right;  else result.right  = rect.right;
+    if (top    > rect.top)    result.top    = top;    else result.top    = rect.top;
+    if (bottom < rect.bottom) result.bottom = bottom; else result.bottom = rect.bottom;
+    return result;
+  }
+
+  //: Normalize rectangle. Ensures that left is less than right and top is less than bottom.
+  void normalize()
+  {
+    if (left > right)
+      {
+        int temp = right;
+        right = left;
+        left = temp;
+      }
+
+    if (top > bottom)
+      {
+        int temp = bottom;
+        bottom = top;
+        top = temp;
+      }
+  }
+	
+  //: Applies an origin and offset pair to this rectangle
+  //param origin: The new origin to adjust to from default upper-left position
+  //param x, y: Offsets applied negatively to each corner of the rectangle
+  void apply_alignment(Origin origin, int x, int y)
+  {
+    Vector2i offset = calc_origin(origin, get_size());
+    offset.x -= x;
+    offset.y -= y;
+		
+    left += offset.x;
+    top += offset.y;
+    right += offset.x;
+    bottom += offset.y;
+  }
+};
+
+//: 2D (left,top,right,bottom) floating point rectangle structure.
+class Rectf
+{
+  //! Construction:
+public:
+  //: Constructs an rectangle.
+  //param left: Initial left position of rectangle.
+  //param top: Initial top position of rectangle.
+  //param right: Initial right position of rectangle.
+  //param bottom: Initial bottom position of rectangle.
+  //param point: Initial top-left position of rectangle.
+  //param size: Initial size of rectangle.
+  //param rect: Initial rectangle position and size.
+  Rectf() { left = right = top = bottom = 0.0f; }
+
+  Rectf(const Rect& rect)
+    : left(static_cast<float>(rect.left)), 
+      top(static_cast<float>(rect.top)), 
+      right(static_cast<float>(rect.right)), 
+      bottom(static_cast<float>(rect.bottom))
+  {}
+
+  Rectf(float new_left, float new_top, float new_right, float new_bottom)
+  { left = new_left; top = new_top; right = new_right; bottom = new_bottom; }
+
+  Rectf(const Vector3f &p, const Sizef &size)
+  { left = p.x; top = p.y; right = left + size.width; bottom = top + size.height; }
+
+  Rectf(const Rectf &rect)
+  { left = rect.left; top = rect.top; right = rect.right; bottom = rect.bottom; }
+
+  //: Rect += Rect operator.
+  Rectf &operator+=(const Rectf &r)
+  { left += r.left; top += r.top; right += r.right; bottom += r.bottom; return *this; }
+
+  //: Rect -= Rect operator.
+  Rectf &operator-=(const Rectf &r)
+  { left -= r.left; top -= r.top; right -= r.right; bottom -= r.bottom; return *this; }
+	
+  //: Rect += Point operator.
+  Rectf &operator+=(const Vector3f &p)
+  { left += p.x; top += p.y; right += p.x; bottom += p.y; return *this; }
+
+  //: Rect -= Point operator.
+  Rectf &operator-=(const Vector3f &p)
+  { left -= p.x; top -= p.y; right -= p.x; bottom -= p.y; return *this; }
+
+  //: Rect + Rect operator.
+  Rectf operator+(const Rectf &r) const
+  { return Rectf(left + r.left, top + r.top, right + r.right, bottom + r.bottom); }
+
+  //: Rect - Rect operator.
+  Rectf operator-(const Rectf &r) const
+  { return Rectf(left - r.left, top - r.top, right - r.right, bottom - r.bottom); }
+
+  //: Rect + Point operator.
+  Rectf operator+(const Vector3f &p) const
+  { return Rectf(left + p.x, top + p.y, right + p.x, bottom + p.y); }
+
+  //: Rect - Point operator.
+  Rectf operator-(const Vector3f &p) const
+  { return Rectf(left - p.x, top - p.y, right - p.x, bottom - p.y); }
+
+  //: Rect == Rect operator.
+  bool operator==(const Rectf &r) const
+  { return (left == r.left && top == r.top && right == r.right && bottom && r.bottom); }
+
+  //: Rect != Rect operator.
+  bool operator!=(const Rect &r) const
+  { return (left != r.left || top != r.top || right != r.right || bottom != r.bottom); }
+
+  //! Attributes:
+public:
+  //: X1-coordinate.
+  float left;
+	
+  //: Y1-coordinate.
+  float top;
+	
+  //: X2-coordinate.
+  float right;
+	
+  //: Y2-coordinate.
+  float bottom;
+	
+  //: Returns the width of the rectangle.
+  float get_width() const { return right - left; }
+	
+  //: Returns the height of the rectangle.
+  float get_height() const { return bottom - top; }
+
+  //: Returns the size of the rectangle.
+  Sizef get_size() const { return Sizef(right - left, bottom - top); }
+	
+  //: Returns true if point is inside the rectangle.
+  bool is_inside(const Vector3f &p) const { return (p.x >= left && p.y >= top && p.x <= right && p.y <= bottom); }
+	
+  //: Returns true if rectangle passed is overlapping or inside this rectangle.
+  bool is_overlapped(const Rectf &r) const 
+  {
+    return (r.left < right && r.right > left && r.top < bottom && r.bottom > top);
+  }
+	
+  //! Operations:
+public:
+  //: Sets the size of the rectangle, maintaining top/left position.
+  void set_size(const Size &size)
+  {
+    right = left + size.width;
+    bottom = top + size.height;
+  }
+
+  //: Calculates and returns the union of two rectangles.
+  Rectf calc_union(const Rectf &rect)
+  {
+    Rectf result;
+    if (left   > rect.left)   result.left   = left;   else result.left   = rect.left;
+    if (right  < rect.right)  result.right  = right;  else result.right  = rect.right;
+    if (top    > rect.top)    result.top    = top;    else result.top    = rect.top;
+    if (bottom < rect.bottom) result.bottom = bottom; else result.bottom = rect.bottom;
+    return result;
+  }
+
+  //: Normalize rectangle. Ensures that left<right and top<bottom.
+  void normalize()
+  {
+    if (left > right)
+      std::swap(left, right);
+    
+    if (top > bottom)
+      std::swap(top, bottom);
+  }
+
+  // Moves each edge f away from the center, thus width = old_width + 2*f
+  Rectf grow(float f) const {
+    return Rectf(left   - f, 
+                 top    - f,
+                 right  + f,
+                 bottom + f);
+  }
+};
+
+inline Rect::Rect(const Rectf& rect)
+  : left(static_cast<int>(rect.left)), 
+    top(static_cast<int>(rect.top)), 
+    right(static_cast<int>(rect.right)), 
+    bottom(static_cast<int>(rect.bottom))
+{}
+
+std::ostream& operator<<(std::ostream& s, const Rect& r);
+
+#endif
+


Property changes on: trunk/griv/new/math/rect.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/size.cpp
===================================================================
--- trunk/griv/new/math/size.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/size.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,33 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**/
+
+#include <iostream>
+#include "size.hpp"
+
+std::ostream& operator<<(std::ostream& os, const Size& size)
+{
+  return os << "Size(" << size.width << ", " << size.height << ")";
+}
+
+/* EOF */


Property changes on: trunk/griv/new/math/size.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/size.hpp
===================================================================
--- trunk/griv/new/math/size.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/size.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,166 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    (if your name is missing here, please add it)
+*/
+
+//! clanCore="Math"
+//! header=core.h
+
+#ifndef HEADER_MATH_SIZE_HPP
+#define HEADER_MATH_SIZE_HPP
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <iosfwd>
+
+class Sizef;
+
+//: 2D (width,height) size structure.
+//- !group=Core/Math!
+//- !header=core.h!
+class Size
+{
+//! Construction:
+public:
+	//: Constructs a size structure.
+	//param width: Initial width of size structure.
+	//param height: Initial height of size structure.
+	//param size: Size structure to construct this one from.
+	Size() : width(0), height(0) { return; }
+
+	Size(int width, int height)
+	: width(width), height(height) { }
+
+	Size(const Size &s)
+	{ width = s.width; height = s.height; }
+
+	explicit Size(const Sizef& s);
+
+//! Attributes:
+public:
+	//: Size width.
+	int width;
+
+	//: Size height.
+	int height;
+
+//! Operations:
+public:
+	//: Size += Size operator.
+	Size &operator+=(const Size &s)
+	{ width += s.width; height += s.height; return *this; }
+
+	//: Size -= Size operator.
+	Size &operator-=(const Size &s)
+	{ width -= s.width; height -= s.height; return *this; }
+	
+	//: Size + Size operator.
+	Size operator+(const Size &s) const
+	{ return Size(width + s.width, height + s.height); }
+
+	//: Size - Size operator.
+	Size operator-(const Size &s) const
+	{ return Size(width - s.width, height - s.height); }
+
+	//: Size == Size operator (deep compare).
+	bool operator==(const Size &s) const
+	{ return (width == s.width) && (height == s.height); }
+
+	//: Size != Size operator (deep compare).
+	bool operator!=(const Size &s) const
+	{ return (width != s.width) || (height != s.height); }
+  
+	int get_area() const { return width * height; }
+};
+
+//: 2D (width,height) floating point size structure.
+class Sizef
+{
+//! Construction:
+public:
+	//: Constructs a size structure.
+	//param width: Initial width of size structure.
+	//param height: Initial height of size structure.
+	//param size: Size structure to construct this one from.
+	Sizef() : width(0.f), height(0.f) { return; }
+
+	Sizef(const Size& s) 
+          : width(static_cast<float>(s.width)),
+            height(static_cast<float>(s.height))
+	{}
+
+	Sizef(float width, float height)
+	: width(width), height(height) { }
+
+	Sizef(const Sizef &s)
+	{ width = s.width; height = s.height; }
+
+//! Attributes:
+public:
+	//: Size width.
+	float width;
+
+	//: Size height.
+	float height;
+
+//! Operations:
+public:
+	//: Size += Size operator.
+	Sizef &operator+=(const Sizef &s)
+	{ width += s.width; height += s.height; return *this; }
+
+	//: Size -= Size operator.
+	Sizef &operator-=(const Sizef &s)
+	{ width -= s.width; height -= s.height; return *this; }
+	
+	//: Size + Size operator.
+	Sizef operator+(const Sizef &s) const
+	{ return Sizef(width + s.width, height + s.height); }
+
+	//: Size - Size operator.
+	Sizef operator-(const Sizef &s) const
+	{ return Sizef(width - s.width, height - s.height); }
+
+	//: Size == Size operator (deep compare).
+	bool operator==(const Sizef &s) const
+	{ return (width == s.width) && (height == s.height); }
+
+	//: Size != Size operator (deep compare).
+	bool operator!=(const Size &s) const
+	{ return (width != s.width) || (height != s.height); }
+};
+
+inline Size::Size(const Sizef& s)
+	: width(static_cast<int>(s.width)),
+	  height(static_cast<int>(s.height))
+{}
+
+std::ostream& operator<<(std::ostream& os, const Size& size);
+
+#endif


Property changes on: trunk/griv/new/math/size.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector2f.cpp
===================================================================
--- trunk/griv/new/math/vector2f.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector2f.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,54 @@
+
+//  SuperTux -  A Jump'n Run
+//  Copyright (C) 2004 Matthias Braun <matze at braunis.de
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <iostream>
+#include "../math.hpp"
+#include "vector2f.hpp"
+
+void
+Vector2f::normalize()
+{
+  float mag = magnitude();
+  x /= mag;
+  y /= mag;
+}
+
+Vector2f Vector2f::unit() const
+{
+  return *this / magnitude();
+}
+
+float
+Vector2f::magnitude() const
+{
+  return Math::sqrt(x*x + y*y);
+}
+
+Vector2f
+Vector2f::rotate(float angle) const
+{
+  float len = magnitude();
+  return Vector2f(len * Math::cos(angle), len * Math::sin(angle));
+}
+
+std::ostream& operator<<(std::ostream& s, const Vector2f& v)
+{
+  s << "Vector2f(" << v.x << ", " << v.y << ")";
+  return s;
+}
+
+/* EOF */


Property changes on: trunk/griv/new/math/vector2f.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector2f.hpp
===================================================================
--- trunk/griv/new/math/vector2f.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector2f.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,137 @@
+
+//  SuperTux -  A Jump'n Run
+//  Copyright (C) 2004 Matthias Braun <matze at braunis.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#ifndef SUPERTUX_VECTOR_H
+#define SUPERTUX_VECTOR_H
+
+#include <iosfwd>
+#include "vector2i.hpp"
+
+/** Simple two dimensional vector. */
+class Vector2f
+{
+public:
+  Vector2f(float nx, float ny)
+    : x(nx), y(ny)
+  { }
+  Vector2f(const Vector2f& other)
+    : x(other.x), y(other.y)
+  { }
+  Vector2f(const Vector2i& other)
+    : x(static_cast<float>(other.x)), 
+      y(static_cast<float>(other.y))
+  {}
+  Vector2f()
+    : x(0), y(0)
+  { }
+
+  bool operator ==(const Vector2f& other) const
+  {
+    return x == other.x && y == other.y;
+  }
+
+  bool operator !=(const Vector2f& other) const
+  {
+    return !(x == other.x && y == other.y);
+  }
+
+  const Vector2f& operator=(const Vector2f& other)
+  {
+    x = other.x;
+    y = other.y;
+    return *this;
+  }
+
+  Vector2f operator+(const Vector2f& other) const
+  {
+    return Vector2f(x + other.x, y + other.y);
+  }
+
+  Vector2f operator-(const Vector2f& other) const
+  {
+    return Vector2f(x - other.x, y - other.y);
+  }
+
+  Vector2f operator*(float s) const
+  {
+    return Vector2f(x * s, y * s);
+  }
+
+  Vector2f operator/(float s) const
+  {
+    return Vector2f(x / s, y / s);
+  }
+
+  Vector2f operator-() const
+  {
+    return Vector2f(-x, -y);
+  }
+
+  const Vector2f& operator +=(const Vector2f& other)
+  {
+    x += other.x;
+    y += other.y;
+    return *this;
+  }
+
+  const Vector2f& operator -=(const Vector2f& other)
+  {
+    x -= other.x;
+    y -= other.y;
+    return *this;
+  }
+
+  const Vector2f& operator *=(float val)
+  {
+    x *= val;
+    y *= val;
+    return *this;
+  }
+
+  const Vector2f& operator /=(float val)
+  {
+    x /= val;
+    y /= val;
+    return *this;
+  }
+
+  /** Takes angle in radian and returns a copy of the vector rotated
+      by \a angle */
+  Vector2f rotate(float angle) const;
+
+  /// Scalar product of 2 vectors
+  float operator*(const Vector2f& other) const
+  {
+    return x*other.x + y*other.y;
+  }
+
+  float magnitude() const;
+  float length() const { return magnitude(); }
+
+  Vector2f unit() const;
+  void normalize();
+
+  // ... add the other operators as needed, I'm too lazy now ...
+
+  float x, y; // leave this public, get/set methods just give me headaches
+  // for such simple stuff :)
+};
+
+std::ostream& operator<<(std::ostream& s, const Vector2f& v);
+
+#endif
+


Property changes on: trunk/griv/new/math/vector2f.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector2i.cpp
===================================================================
--- trunk/griv/new/math/vector2i.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector2i.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,31 @@
+//  Pingus - A free Lemmings clone
+//  Copyright (C) 2005 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <iostream>
+#include "vector2f.hpp"
+#include "vector2i.hpp"
+
+Vector2i::Vector2i(const Vector2f& v)
+  : x(int(v.x)), y(int(v.y))
+{}
+
+std::ostream& operator<<(std::ostream& s, const Vector2i& v)
+{
+  s << "Vector2i(" << v.x << ", " << v.y << ")";
+  return s;
+}
+
+/* EOF */


Property changes on: trunk/griv/new/math/vector2i.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector2i.hpp
===================================================================
--- trunk/griv/new/math/vector2i.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector2i.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,91 @@
+ //  Pingus - A free Lemmings clone
+//  Copyright (C) 2002 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#ifndef HEADER_VECTOR2_HPP
+#define HEADER_VECTOR2_HPP
+
+#include <iosfwd>
+
+class Vector2f;
+
+/** */
+class Vector2i
+{
+public:
+  int x;
+  int y;
+
+  Vector2i()
+    : x(0), y(0) {}
+
+  explicit Vector2i(const Vector2f& v);
+
+  Vector2i(int x_, int y_) 
+    : x(x_), y(y_) {}
+
+
+  Vector2i operator+ (const Vector2i& add) const
+  {
+    return Vector2i(x + add.x, y + add.y);
+  }
+
+  Vector2i operator- () const
+  {
+    return Vector2i(-x, -y);
+  }
+
+  Vector2i operator- (const Vector2i& sub) const
+  {
+    return Vector2i(x - sub.x, y - sub.y);
+  }
+
+  Vector2i operator* (int  mul) const
+  {
+    return Vector2i(x * mul, y * mul);
+  }
+
+  Vector2i& operator+= (const Vector2i& add)
+  {
+    x += add.x;
+    y += add.y;
+    return *this;
+  }
+
+  Vector2i& operator-= (const Vector2i& sub)
+  {
+    x -= sub.x;
+    y -= sub.y;
+    return *this;
+  }
+
+  Vector2i& operator*= (int mul)
+  {
+    x *= mul;
+    y *= mul;
+    return *this;
+  }
+
+  bool operator== (const Vector2i& other) const
+  {
+    return (other.x == x && other.y == y);
+  }
+};
+
+std::ostream& operator<<(std::ostream& s, const Vector2i& v);
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/math/vector2i.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector3f.cpp
===================================================================
--- trunk/griv/new/math/vector3f.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector3f.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,172 @@
+//  Pingus - A free Lemmings clone
+//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <iostream>
+#include "math.hpp"
+#include "vector3f.hpp"
+#include "vector2f.hpp"
+
+Vector3f::Vector3f(float x_, float y_, float z_) : x(x_), y(y_), z(z_)
+{
+}
+
+Vector3f::Vector3f(const Vector3f& old) : x(old.x), y(old.y), z(old.z)
+{
+}
+
+Vector3f::Vector3f(const Vector2f& old) : x(old.x), y(old.y), z(0)
+{
+}
+
+Vector3f::Vector3f(const Vector2i& old) : x(float(old.x)), y(float(old.y)), z(0)
+{
+}
+
+Vector3f&
+Vector3f::operator= (const Vector3f& old)
+{
+  if (this != &old)
+    {
+      x = old.x;
+      y = old.y;
+      z = old.z;
+    }
+
+  return *this;
+}
+
+Vector3f
+Vector3f::operator- () const
+{
+  return Vector3f(-x, -y, -z);
+}
+
+Vector3f
+Vector3f::operator+ (const Vector3f& add) const
+{
+  return Vector3f(x + add.x, y + add.y, z + add.z);
+}
+
+Vector3f
+Vector3f::operator- (const Vector3f& sub) const
+{
+  return Vector3f(x - sub.x, y - sub.y, z - sub.z);
+}
+
+Vector3f
+Vector3f::operator* (float mul) const
+{
+  return Vector3f(mul * x, mul * y, mul * z);
+}
+
+Vector3f&
+Vector3f::operator+= (const Vector3f& add)
+{
+  x += add.x;
+  y += add.y;
+  z += add.z;
+  return *this;
+}
+
+Vector3f&
+Vector3f::operator-= (const Vector3f& sub)
+{
+  x -= sub.x;
+  y -= sub.y;
+  z -= sub.z;
+  return *this;
+}
+
+Vector3f&
+Vector3f::operator*= (float mul)
+{
+  x *= mul;
+  y *= mul;
+  z *= mul;
+  return *this;
+}
+
+void
+Vector3f::normalize ()
+{
+  float f = Math::sqrt(x * x + y * y + z * z);
+
+  if (f)
+    {
+      x /= f;
+      y /= f;
+      z /= f;
+    }
+}
+
+float
+Vector3f::length() const
+{
+  return Math::sqrt(x * x + y * y + z * z);
+}
+
+Vector3f
+Vector3f::rotate (float angle, const Vector3f& pos) const
+{
+  const float s = Math::sin(angle);
+  const float c = Math::cos(angle);
+
+  return Vector3f(  x * (pos.x * pos.x * (1-c) + c)
+                + y * (pos.x * pos.y * (1-c) - pos.z *s)
+		+ z * (pos.x * pos.z * (1-c) + pos.y *s),
+
+		  x * (pos.y * pos.x * (1-c) + pos.z *s)
+		+ y * (pos.y * pos.y * (1-c) + c)
+		+ z * (pos.y * pos.z * (1-c) - pos.x *s),
+
+		  x * (pos.x * pos.z * (1-c) - pos.y *s)
+		+ y * (pos.y * pos.z * (1-c) + pos.x *s)
+		+ z * (pos.z * pos.z * (1-c) + c)
+	       );
+}
+
+float
+Vector3f::distance(const Vector3f& a, const Vector3f& b)
+{
+  float x = b.x - a.x;
+  float y = b.y - a.y;
+  float z = b.z - a.z;
+
+  return Math::abs(Math::sqrt((x * x) + (y * y) + (z * z)));
+}
+
+float
+Vector3f::distance2d(const Vector3f& a, const Vector3f& b)
+{
+  float x = b.x - a.x;
+  float y = b.y - a.y;
+
+  return Math::abs(Math::sqrt((x * x) + (y * y)));
+}
+
+Vector3f
+Vector3f::interpolate(const Vector3f& a, const Vector3f& b, float perc)
+{
+  Vector3f c = b - a;
+  return a + (c * perc);
+}
+
+std::ostream& operator<<(std::ostream& os, const Vector3f& v)
+{
+  return os << "Vector3f(" << v.x << ", " << v.y << ", " << v.z << ")";
+}
+
+/* EOF */


Property changes on: trunk/griv/new/math/vector3f.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math/vector3f.hpp
===================================================================
--- trunk/griv/new/math/vector3f.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math/vector3f.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,68 @@
+//  Pingus - A free Lemmings clone
+//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#ifndef HEADER_PINGUS_MATH_VECTOR3F_HPP
+#define HEADER_PINGUS_MATH_VECTOR3F_HPP
+
+#include <iosfwd>
+
+class Vector2f;
+class Vector2i;
+
+class Vector3f
+{
+public:
+  float x;
+  float y;
+  float z;
+
+public:
+  explicit Vector3f (float x_=0, float y_=0, float z_=0);
+
+  Vector3f (const Vector3f& old);
+  Vector3f (const Vector2f& old);
+  Vector3f (const Vector2i& old);
+  Vector3f& operator= (const Vector3f& old);
+
+  Vector3f operator- () const;
+
+  Vector3f operator+ (const Vector3f& add) const;
+  Vector3f operator- (const Vector3f& sub) const;
+  Vector3f operator* (       float  mul) const;
+
+  Vector3f& operator+= (const Vector3f& add);
+  Vector3f& operator-= (const Vector3f& sub);
+  Vector3f& operator*= (      float   mul);
+
+  void normalize ();
+
+  float length() const;
+
+  Vector3f rotate (float angle, const Vector3f& pos) const;
+
+  static float distance(const Vector3f& a, const Vector3f& b);
+  static float distance2d(const Vector3f& a, const Vector3f& b);
+
+  /** Calculate a position between a and b, relative to the value of
+      \a perc (perc == 0 -> a, perc == 1.0 -> b) */
+  static Vector3f interpolate(const Vector3f& a, const Vector3f& b, float perc);
+};
+
+std::ostream& operator<< (std::ostream& os, const Vector3f& v);
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/math/vector3f.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math.cpp
===================================================================
--- trunk/griv/new/math.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,98 @@
+//  Pingus - A free Lemmings clone
+//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#include <math.h>
+#include "math.hpp"
+
+namespace Math {
+
+float abs(float v)
+{
+  return ::fabs(v);
+}
+
+float sin(float a)
+{
+  return ::sinf(a);
+}
+
+float cos(float a)
+{
+  return ::cosf(a);
+}
+
+float sqrt(float a)
+{
+  return ::sqrt(a);
+}
+
+float mod(float x, float y)
+{
+  return ::fmodf(x, y);
+}
+
+float floor(float x)
+{
+  return ::floorf(x);
+}
+
+float atan2(float x, float y)
+{
+  return ::atan2(x, y);
+}
+
+static char num2hex[] = "0123456789abcdef";
+
+std::string float2string(float value)
+{
+  std::string str(2*sizeof(float), '0');
+
+  for(size_t i = 0; i < sizeof(float); ++i)
+    {
+      char v = reinterpret_cast<char*>(&value)[i];
+      str[2*i + 0] = num2hex[(v & 0xf0) >> 4];
+      str[2*i + 1] = num2hex[v & 0x0f];
+    }
+  return str;
+}
+
+static char hex2int(char c)
+{
+  if (c >= '0' && c <= '9')
+    return c - '0';
+  else if (c >= 'a' && c <= 'f')
+    return c - 'a' + 0xa;
+  else
+    return 0;    
+}
+
+float string2float(const std::string& str)
+{
+  assert(str.size() == 2*sizeof(float));
+
+  float value;
+  for(size_t i = 0; i < sizeof(float); ++i)
+    {
+      char& v = reinterpret_cast<char*>(&value)[i];
+      v = (hex2int(str[2*i+0]) << 4) | hex2int(str[2*i+1]);
+    }
+
+  return value;
+}
+
+} // namespace Math
+
+/* EOF */


Property changes on: trunk/griv/new/math.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/math.hpp
===================================================================
--- trunk/griv/new/math.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/math.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,105 @@
+//  Pingus - A free Lemmings clone
+//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//  
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//  
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+#ifndef HEADER_PINGUS_MATH_HPP
+#define HEADER_PINGUS_MATH_HPP
+
+#include <assert.h>
+#include <stdlib.h>
+#include <string>
+
+/** A collection of small math helper functions, some of them might be
+    equal in functionality to standard STL functions, but provided
+    here for portability and broken STL implementations
+
+    @brief A collection of mathematical helper functions */
+namespace Math {
+
+const float pi   = 3.14159265358979323846f;	/* pi */
+const float pi_2 = 1.57079632679489661923f;	/* pi/2 */
+
+// Win32 defines these are defines already, so we have to undef them
+#ifdef min
+#undef min
+#endif
+#ifdef max
+#undef max
+#endif
+
+template<class T>
+T min (const T& a, const T& b)
+{
+  if (a < b)
+    return a;
+  else
+    return b;
+}
+
+template<class T>
+T max (const T& a, const T& b)
+{
+  if (a > b)
+    return a;
+  else
+    return b;
+}
+
+template<class T>
+T clamp (const T& low, const T& v, const T& high)
+{
+  assert(low <= high);
+  return max((low), min((v), (high)));
+}
+
+inline
+float frand()
+{
+  return rand() / (RAND_MAX + 1.0f);
+}
+
+inline
+bool rand_bool()
+{
+  return rand()%2 == 0;
+}
+
+inline int round (float f)
+{
+  if (f >= 0.0f)
+    return int(f + 0.5f);
+  else
+    return int(f - 0.5f);
+}
+
+float abs(float v);
+float sin(float a);
+float cos(float a);
+float sqrt(float a);
+float mod(float x, float y);
+float floor(float x);
+float atan2(float x, float y);
+
+/** Write out the raw bits of a float as hex */
+std::string float2string(float value);
+
+/** Restore the raw bits of a float from a string */
+float string2float(const std::string& str);
+
+} // namespace Math
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/math.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/software_surface.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,170 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <assert.h>
+#include <iostream>
+#include <stdexcept>
+#include "FreeImage.h"
+
+#include "math.hpp"
+#include "math/rect.hpp"
+#include "math/size.hpp"
+
+#include "url.hpp"
+#include "software_surface.hpp"
+
+class SoftwareSurfaceImpl
+{
+public:
+  FIBITMAP* bitmap;
+  
+  SoftwareSurfaceImpl(const std::string& filename)
+  {
+    FREE_IMAGE_FORMAT format = FreeImage_GetFileType(filename.c_str(), 0);
+    FIBITMAP* tmpimg = FreeImage_Load(format, filename.c_str());
+
+    if (!tmpimg)
+      {
+        throw std::runtime_error("SoftwareSurface: Couldn't load " + filename);
+      }
+    else
+      {
+        { // Convert to 24bit
+          bitmap = FreeImage_ConvertTo24Bits(tmpimg);
+          FreeImage_Unload(tmpimg);
+        }
+
+        assert(FreeImage_GetImageType(bitmap) == FIT_BITMAP);
+        assert(FreeImage_GetBPP(bitmap) == 24);
+ 
+        // FIXME: Insert some assert() for colormask here
+
+#if 0
+        SDL_Surface* surface = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32,
+                                                    FI_RGBA_RED_MASK,
+                                                    FI_RGBA_GREEN_MASK,
+                                                    FI_RGBA_BLUE_MASK,
+                                                    FI_RGBA_ALPHA_MASK);
+      
+        SDL_LockSurface(surface);
+        uint8_t* src = FreeImage_GetBits(img);
+        uint8_t* dst = static_cast<uint8_t*>(surface->pixels);
+        for(int y = 0; y < height; ++y)
+          {
+            memcpy(dst + surface->pitch*y, src + pitch*y, width*4);
+          }
+        SDL_UnlockSurface(surface);
+#endif 
+      }
+  }
+
+  SoftwareSurfaceImpl(FIBITMAP* bitmap_)
+    : bitmap(bitmap_)
+  {    
+  }
+
+  ~SoftwareSurfaceImpl() 
+  {
+    FreeImage_Unload(bitmap);
+  }
+};
+
+SoftwareSurface::SoftwareSurface()
+{
+}
+
+SoftwareSurface::SoftwareSurface(FIBITMAP* bitmap)
+  : impl(new SoftwareSurfaceImpl(bitmap))
+{  
+}
+
+SoftwareSurface::SoftwareSurface(const std::string& filename)
+ : impl(new SoftwareSurfaceImpl(filename))
+{
+}
+
+SoftwareSurface::~SoftwareSurface()
+{
+}
+
+SoftwareSurface
+SoftwareSurface::scale(const Size& size) const
+{
+  FIBITMAP* img = FreeImage_Rescale(impl->bitmap, size.width, size.height, FILTER_BOX);
+  if (!img)
+    throw std::runtime_error("SoftwareSurface: Couldn't scale image");
+  else
+    return SoftwareSurface(img);
+}
+
+SoftwareSurface
+SoftwareSurface::crop(const Rect& rect) const
+{
+  FIBITMAP* img = FreeImage_Copy(impl->bitmap, 
+                                 rect.left,  rect.top, 
+                                 Math::min(rect.right,  get_width()),
+                                 Math::min(rect.bottom, get_height()));
+  if (!img)
+    throw std::runtime_error("SoftwareSurface: Couldn't crop image");
+  else
+    return SoftwareSurface(img);
+}
+
+int
+SoftwareSurface::get_width()  const
+{
+  return FreeImage_GetWidth(impl->bitmap); 
+}
+
+int
+SoftwareSurface::get_height() const
+{
+  return FreeImage_GetHeight(impl->bitmap);    
+}
+
+int
+SoftwareSurface::get_pitch()  const
+{
+  return FreeImage_GetPitch(impl->bitmap);  
+}
+
+void
+SoftwareSurface::save(const std::string& filename) const
+{
+  std::cout << "Saving " << impl->bitmap << " " << get_width() << "x" << get_height() << " to " << filename << std::endl;
+  if (!FreeImage_Save(FIF_JPEG, impl->bitmap, filename.c_str(), 0))
+    {
+      throw std::runtime_error("SoftwareSurface: Couldn't save image to " + filename);
+    }
+}
+
+// FreeImage_OpenMemory(BYTE *data FI_DEFAULT(0), DWORD size_in_bytes FI_DEFAULT(0));
+// hmem = FreeImage_OpenMemory();
+// FreeImage_SaveToMemory(fif, dib, hmem, 0);
+// FreeImage_CloseMemory(hmem);
+// FreeImage_AcquireMemory(FIMEMORY *stream, BYTE **data, DWORD* size_in_bytes);
+
+  
+/* EOF */


Property changes on: trunk/griv/new/software_surface.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/software_surface.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,60 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SOFTWARE_SURFACE_HPP
+#define HEADER_SOFTWARE_SURFACE_HPP
+
+#include <boost/shared_ptr.hpp>
+#include "FreeImage.h"
+
+class URL;
+class Rect;
+class Size;
+class SoftwareSurfaceImpl;
+
+class SoftwareSurface
+{
+public:
+  SoftwareSurface();
+  SoftwareSurface(const std::string& filename);
+  SoftwareSurface(FIBITMAP* bitmap);
+  ~SoftwareSurface();
+
+  int get_width()  const;
+  int get_height() const;
+  int get_pitch()  const;
+
+  SoftwareSurface scale(const Size& size) const;
+  SoftwareSurface crop(const Rect& rect) const;
+
+  void save(const std::string& filename) const;
+
+private:
+  boost::shared_ptr<SoftwareSurfaceImpl> impl;
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/software_surface.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/tile_database.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,45 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "tile_database.hpp"
+
+TileDatabase::TileDatabase()
+{
+  
+}
+
+SoftwareSurface
+TileDatabase::get_tile(uint32_t file_id, int tile_size, int scale, int x, int y)
+{
+  return SoftwareSurface();
+}
+
+void
+TileDatabase::store_tile(uint32_t file_id, int tile_size, int scale, int x, int y, const SoftwareSurface& surface)
+{
+  
+}
+
+/* EOF */


Property changes on: trunk/griv/new/tile_database.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/tile_database.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,51 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TILE_DATABASE_HPP
+#define HEADER_TILE_DATABASE_HPP
+
+#include <sqlite3.h>
+#include "software_surface.hpp"
+
+/** */
+class TileDatabase
+{
+private:
+  
+
+public:
+  TileDatabase();
+  
+  SoftwareSurface get_tile(uint32_t file_id, int tile_size, int scale, int x, int y);
+  void store_tile(uint32_t file_id, int tile_size, int scale, int x, int y, const SoftwareSurface& surface);
+  
+private:
+  TileDatabase (const TileDatabase&);
+  TileDatabase& operator= (const TileDatabase&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/tile_database.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/url.cpp
===================================================================
--- trunk/griv/new/url.cpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/url.cpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,39 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "url.hpp"
+
+URL::URL(const std::string& url_)
+  : url(url_)
+{
+}
+
+std::string
+URL::get_filename() const
+{
+  return url;
+}
+
+/* EOF */


Property changes on: trunk/griv/new/url.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/url.hpp
===================================================================
--- trunk/griv/new/url.hpp	2008-07-01 01:25:04 UTC (rev 2273)
+++ trunk/griv/new/url.hpp	2008-08-05 20:26:11 UTC (rev 2274)
@@ -0,0 +1,45 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_URL_HPP
+#define HEADER_URL_HPP
+
+#include <string>
+
+/** */
+class URL
+{
+private:
+  std::string url;
+
+public:
+  URL(const std::string& url);
+
+  std::string get_filename() const;
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/url.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Wed Aug  6 18:31:22 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 6 Aug 2008 18:31:22 +0200
Subject: [Windstille-commit] r2275 - trunk/griv/new
Message-ID: <200808061631.m76GVMsW027719@sheep.berlios.de>

Author: grumbel
Date: 2008-08-06 18:31:20 +0200 (Wed, 06 Aug 2008)
New Revision: 2275

Added:
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
Log:
Started simple sqlite wrapper

Added: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-05 20:26:11 UTC (rev 2274)
+++ trunk/griv/new/sqlite.cpp	2008-08-06 16:31:20 UTC (rev 2275)
@@ -0,0 +1,147 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <sstream>
+#include "sqlite.hpp"
+
+SQLiteError::SQLiteError(const std::string& err_)
+  : err(err_)
+{  
+}
+
+SQLiteConnection::SQLiteConnection(const std::string& filename)
+{
+  if (sqlite3_open(filename.c_str(), &db) != SQLITE_OK)
+    {
+      std::ostringstream str; 
+      str << "SQLiteConnection: can't open database: " << sqlite3_errmsg(db);
+      throw SQLiteError(str.str());
+    }
+}
+
+SQLiteConnection::~SQLiteConnection()
+{
+  sqlite3_close(db);
+}
+
+void
+SQLiteConnection::exec(const std::string& sqlstmt)
+{
+  char* errmsg;
+
+  if (sqlite3_exec(db, sqlstmt.c_str(), 0, 0, &errmsg) != SQLITE_OK)
+    {
+      std::ostringstream out;
+
+      out << "FileDatabase: " << errmsg << std::endl;
+
+      sqlite3_free(errmsg);
+      errmsg = 0;
+
+      throw SQLiteError(out.str());
+    }
+}
+
+SQLiteStatement::SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt)
+{
+  if (sqlite3_prepare_v2(db->get_db(),
+                         "INSERT OR REPLACE INTO files (filename, md5, filesize, width, height, mtime)"
+                         "           VALUES (      ?1,  ?2,       ?3,    ?4,     ?5,    ?6);", -1, &stmt,  0)
+      != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+}
+
+SQLiteStatement::~SQLiteStatement()
+{
+  if (sqlite3_finalize(stmt) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+}
+
+void
+SQLiteStatement::bind_int(int n, int i)
+{
+  if (sqlite3_bind_int(stmt, n, i) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+}
+
+void
+SQLiteStatement::bind_text(int n, const std::string& text)
+{
+  if (sqlite3_bind_text(stmt, n, text.c_str(), text.size(), SQLITE_STATIC) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());      
+    }
+}
+
+void
+SQLiteStatement::bind_blob(int n, const std::string& blob)
+{
+  if (sqlite3_bind_blob(stmt, n, blob.c_str(), blob.size(), SQLITE_STATIC) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+}
+
+void
+SQLiteStatement::reset()
+{
+  if (sqlite3_reset(stmt) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+  
+  sqlite3_clear_bindings(stmt);  
+}
+
+void
+SQLiteStatement::step()
+{
+  if (sqlite3_step(stmt) != SQLITE_DONE)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());     
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/new/sqlite.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-05 20:26:11 UTC (rev 2274)
+++ trunk/griv/new/sqlite.hpp	2008-08-06 16:31:20 UTC (rev 2275)
@@ -0,0 +1,78 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SQLITE_HPP
+#define HEADER_SQLITE_HPP
+
+#include <stdexcept>
+#include <sqlite3.h>
+
+class SQLiteError : public std::exception
+{
+private:
+  std::string err;
+
+public:
+  SQLiteError(const std::string& err);
+  virtual ~SQLiteError() throw () {}
+
+  const char* what() const throw () { return err.c_str(); }
+};
+
+class SQLiteConnection
+{
+private:
+  sqlite3* db;
+
+public:
+  SQLiteConnection(const std::string& filename);
+  ~SQLiteConnection();
+
+  void exec(const std::string& sqlstmt);
+
+  sqlite3* get_db() const { return db; }
+};
+
+class SQLiteStatement
+{
+private:
+  SQLiteConnection* db;
+  sqlite3_stmt*   stmt;
+  
+public:
+  SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt);
+  ~SQLiteStatement();
+
+  void bind_int(int n, int i);
+  void bind_text(int n, const std::string&);
+  void bind_blob(int n, const std::string&);
+
+  void reset();
+  void step();
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/sqlite.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Wed Aug  6 20:27:13 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 6 Aug 2008 20:27:13 +0200
Subject: [Windstille-commit] r2276 - trunk/griv/new
Message-ID: <200808061827.m76IRDGZ026928@sheep.berlios.de>

Author: grumbel
Date: 2008-08-06 20:27:12 +0200 (Wed, 06 Aug 2008)
New Revision: 2276

Modified:
   trunk/griv/new/
   trunk/griv/new/SConstruct
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
Log:
Added some SQlite related code


Property changes on: trunk/griv/new
___________________________________________________________________
Name: svn:ignore
   - griv

   + griv
.sconsign.dblite


Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/SConstruct	2008-08-06 18:27:12 UTC (rev 2276)
@@ -11,6 +11,7 @@
         'math/vector2f.cpp',
         'software_surface.cpp',
         'url.cpp',
+        'sqlite.cpp',
         'file_database.cpp',
         'tile_database.cpp',
         'griv.cpp'])

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/file_database.cpp	2008-08-06 18:27:12 UTC (rev 2276)
@@ -24,83 +24,76 @@
 */
 
 #include <iostream>
+#include <sstream>
+#include <stdexcept>
 #include "file_database.hpp"
 
-FileDatabase::FileDatabase(sqlite3* db)
-  : db(db)
+std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
 {
-  if (sqlite3_prepare_v2(db,
-                         "INSERT OR REPLACE INTO files (filename, md5, filesize, width, height, mtime)"
-                         "           VALUES (      ?1,  ?2,       ?3,    ?4,     ?5,    ?6);", -1, &store_stmt,  0)
-      != SQLITE_OK)
-    {
-      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));
-    }
-  
-  if (sqlite3_prepare_v2(db, "SELECT * FROM files WHERE filename = ?1", -1, &get_by_file_id_stmt,  0))
-    {
-      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));      
-    }
+  return os << "filename: " << entry.filename << " size: "<< entry.width << "x" << entry.height;
+}
+
+FileDatabase::FileDatabase(SQLiteConnection* db)
+  : db(db),
+    store_stmt(db),
+    get_by_filename_stmt(db),
+    get_by_file_id_stmt(db)
+{
+  db->exec("CREATE TABLE IF NOT EXISTS files ("
+           "filename  TEXT UNIQUE, "
+           "md5       TEXT, "
+           "filesize  INTEGER, "
+           "width     INTEGER, "
+           "height    INTEGER, "
+           "mtime     INTEGER);");
 
-  if (sqlite3_prepare_v2(db, "SELECT * FROM files WHERE rowid = ?1",  -1, &get_by_file_id_stmt,  0))
-    {
-      fprintf(stderr, "Something went wrong2: %s\n", sqlite3_errmsg(db));      
-    }
+  //db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename, md5 );");
 
+  store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
+  get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
+  get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
 }
-  
+ 
+FileDatabase::~FileDatabase()
+{
+
+}
+ 
 int
 FileDatabase::store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime)
 {
-  sqlite3_bind_blob(store_stmt, 1, filename.c_str(), filename.size(), SQLITE_STATIC);
-  sqlite3_bind_text(store_stmt, 2, md5.c_str(), -1, SQLITE_STATIC); 
-  sqlite3_bind_int (store_stmt, 3, filesize); // filesize
-  sqlite3_bind_int (store_stmt, 4, width);    // width
-  sqlite3_bind_int (store_stmt, 5, height);   // height
-  sqlite3_bind_int (store_stmt, 6, 0);        // mtime
+  store_stmt.bind_text(1, filename);
+  store_stmt.bind_text(2, md5);
+  store_stmt.bind_int (3, filesize); // filesize
+  store_stmt.bind_int (4, width);    // width
+  store_stmt.bind_int (5, height);   // height
+  store_stmt.bind_int (6, 0);        // mtime
 
-  // execute
-  int rc = sqlite3_step(store_stmt);
-  if (rc != SQLITE_DONE)
-    {
-      std::cout << "Something went wrong: " << sqlite3_errmsg(db) << std::endl;
-    }
-  else
-    {
-      std::cout << "added " << filename << std::endl;
-    }
+  store_stmt.execute();
 
-  sqlite3_reset(store_stmt);
-  sqlite3_clear_bindings(store_stmt);  
-
-  return 0; // row_id
+  return sqlite3_last_insert_rowid(db->get_db());
 }
 
 FileEntry
 FileDatabase::get_file_entry(const std::string& filename)
 {
-  sqlite3_bind_text(get_by_filename_stmt, 1, filename.c_str(), -1, SQLITE_STATIC);
+  std::cout << "Trying to retrieve: " << filename << std::endl;
+  get_by_filename_stmt.bind_text(1, filename);
+  get_by_filename_stmt.execute_query();
+  
+  // If nothing is found, query the file system and store the results
 
-  // execute
-  int rc = sqlite3_step(get_by_filename_stmt);
-  if (rc != SQLITE_DONE)
-    {
-      std::cout << "Something went wrong: " << sqlite3_errmsg(db) << std::endl;
-    }
-  else
-    {
-      std::cout << "added " << filename << std::endl;
-    }
-
-  sqlite3_reset(get_by_filename_stmt);
-  sqlite3_clear_bindings(get_by_filename_stmt);  
   return FileEntry();
 }
 
 FileEntry
 FileDatabase::get_file_entry(uint32_t file_id)
 {
-  sqlite3_bind_int(get_by_file_id_stmt, 1, file_id);
+  get_by_file_id_stmt.bind_int(1, file_id);
+  get_by_file_id_stmt.execute_query();
+
+  // If nothing is found, query the file system and store the results
+
   return FileEntry();
 }
 

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/file_database.hpp	2008-08-06 18:27:12 UTC (rev 2276)
@@ -28,6 +28,7 @@
 
 #include <sqlite3.h>
 #include <string>
+#include "sqlite.hpp"
 
 struct FileEntry 
 {
@@ -37,20 +38,23 @@
   int         height;   // image height
 };
 
+std::ostream& operator<<(std::ostream& os, const FileEntry& entry);
+
 /** */
 class FileDatabase
 {
 private:
-  sqlite3* db;
-  sqlite3_stmt* store_stmt;
-  sqlite3_stmt* get_by_filename_stmt;
-  sqlite3_stmt* get_by_file_id_stmt;
-  
+  SQLiteConnection* db;
+  SQLiteStatement store_stmt;
+  SQLiteStatement get_by_filename_stmt;
+  SQLiteStatement get_by_file_id_stmt;
+
+  int store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime);
+ 
 public:
-  FileDatabase(sqlite3* db);
+  FileDatabase(SQLiteConnection* db);
+  ~FileDatabase();
   
-  int store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime);
-
   FileEntry get_file_entry(const std::string& filename);
   FileEntry get_file_entry(uint32_t file_id);
 

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/griv.cpp	2008-08-06 18:27:12 UTC (rev 2276)
@@ -34,8 +34,10 @@
 #include "math/rect.hpp"
 #include "math/vector2i.hpp"
 #include "url.hpp"
+#include "sqlite.hpp"
 #include "software_surface.hpp"
 #include "griv.hpp"
+#include "file_database.hpp"
 
 Griv::Griv()
 {
@@ -64,35 +66,47 @@
         }
     }
 
+  SQLiteConnection db("test.sqlite");
+
+  FileDatabase file_db(&db);
+
   for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
     {
-      // Generate Image Tiles
-      SoftwareSurface surface(rest[i]);
+      if (0) // Tile Generation
+        {
+          // Generate Image Tiles
+          SoftwareSurface surface(rest[i]);
       
-      int scale = 0;
+          int scale = 0;
 
-      do
-        {
-          if (scale != 0)
+          do
             {
-              surface = surface.scale(Size(surface.get_width()/2, 
-                                           surface.get_height()/2));
-            }
+              if (scale != 0)
+                {
+                  surface = surface.scale(Size(surface.get_width()/2, 
+                                               surface.get_height()/2));
+                }
 
-          for(int y = 0; y <= surface.get_height()/256; ++y)
-            for(int x = 0; x <= surface.get_width()/256; ++x)
-              {
-                std::ostringstream out;
-                out << "/tmp/out/tile-" << scale << "-" << y << "+" << x << ".jpg";
+              for(int y = 0; y <= surface.get_height()/256; ++y)
+                for(int x = 0; x <= surface.get_width()/256; ++x)
+                  {
+                    std::ostringstream out;
+                    out << "/tmp/out/tile-" << scale << "-" << y << "+" << x << ".jpg";
 
-                SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
-                                                                   Size(256, 256)));
-                croped_surface.save(out.str());
-              }
+                    SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
+                                                                       Size(256, 256)));
+                    croped_surface.save(out.str());
+                  }
 
-          scale += 1;
-        } while (surface.get_width() > 32 ||
-                 surface.get_height() > 32);
+              scale += 1;
+            } while (surface.get_width() > 32 ||
+                     surface.get_height() > 32);
+        }
+      else  // Data base test
+        {
+          FileEntry entry = file_db.get_file_entry(rest[i]);
+          std::cout << entry << std::endl;
+        }
     }
 
   return 0;
@@ -103,7 +117,8 @@
   try 
     {
       Griv app;
-      return app.main(argc, argv);
+      int ret = app.main(argc, argv);
+      return ret;
     }
   catch(std::exception& err) 
     {

Modified: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/sqlite.cpp	2008-08-06 18:27:12 UTC (rev 2276)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include <sstream>
 #include "sqlite.hpp"
 
@@ -51,6 +52,8 @@
 {
   char* errmsg;
 
+  std::cout << "SQLiteConnection::exec: " << sqlstmt << std::endl;
+
   if (sqlite3_exec(db, sqlstmt.c_str(), 0, 0, &errmsg) != SQLITE_OK)
     {
       std::ostringstream out;
@@ -64,12 +67,21 @@
     }
 }
 
+SQLiteStatement::SQLiteStatement(SQLiteConnection* db)
+  : db(db), 
+    stmt(0)
+{
+}
+
 SQLiteStatement::SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt)
+  : db(db)
 {
-  if (sqlite3_prepare_v2(db->get_db(),
-                         "INSERT OR REPLACE INTO files (filename, md5, filesize, width, height, mtime)"
-                         "           VALUES (      ?1,  ?2,       ?3,    ?4,     ?5,    ?6);", -1, &stmt,  0)
-      != SQLITE_OK)
+  prepare(sqlstmt);
+}
+
+SQLiteStatement::~SQLiteStatement()
+{
+  if (sqlite3_finalize(stmt) != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
@@ -77,9 +89,11 @@
     }
 }
 
-SQLiteStatement::~SQLiteStatement()
+void
+SQLiteStatement::prepare(const std::string& sqlstmt)
 {
-  if (sqlite3_finalize(stmt) != SQLITE_OK)
+  if (sqlite3_prepare_v2(db->get_db(), sqlstmt.c_str(), -1, &stmt,  0)
+      != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
@@ -101,7 +115,7 @@
 void
 SQLiteStatement::bind_text(int n, const std::string& text)
 {
-  if (sqlite3_bind_text(stmt, n, text.c_str(), text.size(), SQLITE_STATIC) != SQLITE_OK)
+  if (sqlite3_bind_text(stmt, n, text.c_str(), text.size(), SQLITE_TRANSIENT) != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
@@ -112,7 +126,7 @@
 void
 SQLiteStatement::bind_blob(int n, const std::string& blob)
 {
-  if (sqlite3_bind_blob(stmt, n, blob.c_str(), blob.size(), SQLITE_STATIC) != SQLITE_OK)
+  if (sqlite3_bind_blob(stmt, n, blob.c_str(), blob.size(), SQLITE_TRANSIENT) != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
@@ -123,25 +137,60 @@
 void
 SQLiteStatement::reset()
 {
+  sqlite3_clear_bindings(stmt);  
+
   if (sqlite3_reset(stmt) != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
       throw SQLiteError(str.str());
     }
-  
-  sqlite3_clear_bindings(stmt);  
 }
 
-void
-SQLiteStatement::step()
+void 
+SQLiteStatement::execute()
 {
   if (sqlite3_step(stmt) != SQLITE_DONE)
     {
       std::ostringstream str;
-      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());     
+      str << "SQLiteStatement::execute: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());      
     }
+
+  reset();
 }
+
+void
+SQLiteStatement::execute_query()
+{
+  switch(sqlite3_step(stmt))
+    {
+      case SQLITE_DONE:
+        // No results
+        break;
+
+      case SQLITE_ROW:
+        // Some results
+        do
+          {
+            std::cout << "Result: " << sqlite3_column_text(stmt, 0) << std::endl;
+          }
+        while (sqlite3_step(stmt) == SQLITE_ROW);
+        break;
+
+      case SQLITE_BUSY:
+        throw SQLiteError("BUSY");
+        break;
+
+      default:
+        {
+          std::ostringstream str;
+          str << "SQLiteStatement::execute_query: " << sqlite3_errmsg(db->get_db());
+          throw SQLiteError(str.str());     
+        }
+    }
+
+  reset();
+}
 
 /* EOF */

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-06 16:31:20 UTC (rev 2275)
+++ trunk/griv/new/sqlite.hpp	2008-08-06 18:27:12 UTC (rev 2276)
@@ -60,17 +60,22 @@
 private:
   SQLiteConnection* db;
   sqlite3_stmt*   stmt;
+
+  void reset();
   
 public:
+  SQLiteStatement(SQLiteConnection* db);
   SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt);
   ~SQLiteStatement();
 
+  void prepare(const std::string& sqlstmt);
+
   void bind_int(int n, int i);
   void bind_text(int n, const std::string&);
   void bind_blob(int n, const std::string&);
 
-  void reset();
-  void step();
+  void execute();
+  void execute_query();
 };
 
 #endif



From grumbel at mail.berlios.de  Wed Aug  6 23:35:23 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 6 Aug 2008 23:35:23 +0200
Subject: [Windstille-commit] r2277 - trunk/griv/new
Message-ID: <200808062135.m76LZNi7016686@sheep.berlios.de>

Author: grumbel
Date: 2008-08-06 23:35:22 +0200 (Wed, 06 Aug 2008)
New Revision: 2277

Modified:
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
Log:
Some more SQLite code for TileDatabase and FileDatabase

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/file_database.cpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -74,27 +74,44 @@
   return sqlite3_last_insert_rowid(db->get_db());
 }
 
-FileEntry
-FileDatabase::get_file_entry(const std::string& filename)
+bool
+FileDatabase::get_file_entry(const std::string& filename, FileEntry& entry)
 {
-  std::cout << "Trying to retrieve: " << filename << std::endl;
+  //std::cout << "Trying to retrieve: " << filename << std::endl;
   get_by_filename_stmt.bind_text(1, filename);
-  get_by_filename_stmt.execute_query();
-  
-  // If nothing is found, query the file system and store the results
+  SQLiteReader reader = get_by_filename_stmt.execute_query();
 
-  return FileEntry();
+  if (reader.next())
+    {
+      if (0)
+        std::cout << "Row: " 
+                  << reader.get_column_name(0) << " "
+                  << reader.get_text(0)
+                  << std::endl;
+
+      entry.filename = reader.get_text(0);
+      entry.md5      = reader.get_text(1);
+      entry.filesize = reader.get_int(2);
+      entry.width    = reader.get_int(3);
+      entry.height   = reader.get_int(4);
+
+      return true;
+    }
+  else
+    {
+      return false;
+    }
 }
 
-FileEntry
-FileDatabase::get_file_entry(uint32_t file_id)
+bool
+FileDatabase::get_file_entry(uint32_t file_id, FileEntry& entry)
 {
   get_by_file_id_stmt.bind_int(1, file_id);
   get_by_file_id_stmt.execute_query();
 
   // If nothing is found, query the file system and store the results
 
-  return FileEntry();
+  return false;
 }
 
 /* EOF */

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/file_database.hpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -33,6 +33,8 @@
 struct FileEntry 
 {
   std::string filename; // 
+  std::string md5;      //
+  int         filesize; //
   uint32_t    mtime;    // mtime of the file
   int         width;    // image width
   int         height;   // image height
@@ -55,8 +57,8 @@
   FileDatabase(SQLiteConnection* db);
   ~FileDatabase();
   
-  FileEntry get_file_entry(const std::string& filename);
-  FileEntry get_file_entry(uint32_t file_id);
+  bool get_file_entry(const std::string& filename, FileEntry& entry);
+  bool get_file_entry(uint32_t file_id, FileEntry& entry);
 
 private:
   FileDatabase (const FileDatabase&);

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/griv.cpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -36,8 +36,9 @@
 #include "url.hpp"
 #include "sqlite.hpp"
 #include "software_surface.hpp"
+#include "file_database.hpp"
+#include "tile_database.hpp"
 #include "griv.hpp"
-#include "file_database.hpp"
 
 Griv::Griv()
 {
@@ -69,6 +70,7 @@
   SQLiteConnection db("test.sqlite");
 
   FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
 
   for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
     {
@@ -104,8 +106,11 @@
         }
       else  // Data base test
         {
-          FileEntry entry = file_db.get_file_entry(rest[i]);
-          std::cout << entry << std::endl;
+          FileEntry entry;
+          if (file_db.get_file_entry(rest[i], entry))
+            std::cout << entry << std::endl;
+          else
+            std::cout << "Couldn't find entry for " << rest[i] << std::endl;
         }
     }
 

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/software_surface.cpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -160,6 +160,24 @@
     }
 }
 
+std::string
+SoftwareSurface::get_data() const
+{
+  FIMEMORY* mem = FreeImage_OpenMemory();
+  FreeImage_SaveToMemory(FIF_JPEG, impl->bitmap, mem, 0);
+
+  BYTE* data;
+  DWORD len;
+
+  FreeImage_AcquireMemory(mem, &data, &len);
+
+  std::string data_str(reinterpret_cast<char*>(data), len);
+
+  FreeImage_CloseMemory(mem);
+
+  return data_str;
+}
+
 // FreeImage_OpenMemory(BYTE *data FI_DEFAULT(0), DWORD size_in_bytes FI_DEFAULT(0));
 // hmem = FreeImage_OpenMemory();
 // FreeImage_SaveToMemory(fif, dib, hmem, 0);

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/software_surface.hpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -51,6 +51,8 @@
 
   void save(const std::string& filename) const;
 
+  std::string get_data() const;
+
 private:
   boost::shared_ptr<SoftwareSurfaceImpl> impl;
 };

Modified: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/sqlite.cpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -52,7 +52,7 @@
 {
   char* errmsg;
 
-  std::cout << "SQLiteConnection::exec: " << sqlstmt << std::endl;
+  //std::cout << "SQLiteConnection::exec: " << sqlstmt << std::endl;
 
   if (sqlite3_exec(db, sqlstmt.c_str(), 0, 0, &errmsg) != SQLITE_OK)
     {
@@ -96,7 +96,7 @@
       != SQLITE_OK)
     {
       std::ostringstream str;
-      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      str << "SQLiteStatement::prepare: " << sqlite3_errmsg(db->get_db()) << ":\n" << sqlstmt;
       throw SQLiteError(str.str());
     }
 }
@@ -160,37 +160,84 @@
   reset();
 }
 
-void
+SQLiteReader
 SQLiteStatement::execute_query()
 {
+  return SQLiteReader(db, stmt);
+}
+
+SQLiteReader::SQLiteReader(SQLiteConnection* db, sqlite3_stmt* stmt)
+  : db(db),
+    stmt(stmt)
+{
+}
+
+SQLiteReader::~SQLiteReader()
+{  
+  // FIXME: Not good, we likely clean up twice
+  
+  sqlite3_clear_bindings(stmt);  
+
+  if (sqlite3_reset(stmt) != SQLITE_OK)
+    {
+      std::ostringstream str;
+      str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
+      throw SQLiteError(str.str());
+    }
+}
+
+bool
+SQLiteReader::next()
+{
   switch(sqlite3_step(stmt))
     {
       case SQLITE_DONE:
-        // No results
-        break;
+        // cleanup here or in the destructor?!
+        return false;
 
       case SQLITE_ROW:
-        // Some results
-        do
-          {
-            std::cout << "Result: " << sqlite3_column_text(stmt, 0) << std::endl;
-          }
-        while (sqlite3_step(stmt) == SQLITE_ROW);
-        break;
+        return true;
 
       case SQLITE_BUSY:
         throw SQLiteError("BUSY");
-        break;
+        return false;
 
       default:
         {
           std::ostringstream str;
           str << "SQLiteStatement::execute_query: " << sqlite3_errmsg(db->get_db());
           throw SQLiteError(str.str());     
+          return false;
         }
     }
+}
 
-  reset();
+int
+SQLiteReader::get_int(int column)
+{
+  return sqlite3_column_int(stmt, column);
 }
+
+std::string
+SQLiteReader::get_text(int column)
+{
+  const void* data = sqlite3_column_text(stmt, column);
+  int len = sqlite3_column_bytes(stmt, column);
+  return std::string(static_cast<const char*>(data), len);
+}
+
+std::string
+SQLiteReader::get_blob(int column)
+{
+  const void* data = sqlite3_column_blob(stmt, column);
+  int len = sqlite3_column_bytes(stmt, column);
+  return std::string(static_cast<const char*>(data), len);
+}
+
+std::string
+SQLiteReader::get_column_name(int column)
+{
+  return sqlite3_column_name(stmt, column);
+}
 
 /* EOF */

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/sqlite.hpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -55,6 +55,25 @@
   sqlite3* get_db() const { return db; }
 };
 
+class SQLiteReader
+{
+private:
+  SQLiteConnection* db;
+  sqlite3_stmt*   stmt;
+  
+public:
+  SQLiteReader(SQLiteConnection* db, sqlite3_stmt* stmt);
+  ~SQLiteReader();
+
+  bool next();
+
+  int         get_int(int column);
+  std::string get_text(int column);
+  std::string get_blob(int column);
+
+  std::string get_column_name(int column);
+};
+
 class SQLiteStatement
 {
 private:
@@ -75,7 +94,7 @@
   void bind_blob(int n, const std::string&);
 
   void execute();
-  void execute_query();
+  SQLiteReader execute_query();
 };
 
 #endif

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/tile_database.cpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -25,21 +25,57 @@
 
 #include "tile_database.hpp"
 
-TileDatabase::TileDatabase()
+TileDatabase::TileDatabase(SQLiteConnection* db)
+  : db(db),
+    store_stmt(db),
+    get_stmt(db)
 {
-  
+  db->exec("CREATE TABLE IF NOT EXISTS tiles ("
+           "fileid  INTEGER, " // link to to files.rowid
+           "scale   INTEGER, " // zoom level
+           "x       INTEGER, " // X position in tiles
+           "y       INTEGER, " // Y position in tiles
+           "data    BLOB     " // the image data, JPEG
+           ");");
+
+  store_stmt.prepare("INSERT into tiles (fileid, zoom, x, y, width, height, data) VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7);");
+  get_stmt.prepare("SELECT (data) FROM tiles WHERE fileid = ?1 AND zoom = ?2 AND x = ?3 AND y = ?4;");
 }
 
 SoftwareSurface
-TileDatabase::get_tile(uint32_t file_id, int tile_size, int scale, int x, int y)
+TileDatabase::get_tile(uint32_t file_id, int scale, int x, int y)
 {
-  return SoftwareSurface();
+  get_stmt.bind_int(1, file_id);
+  get_stmt.bind_int(2, scale);
+  get_stmt.bind_int(3, x);
+  get_stmt.bind_int(4, y);
+
+  SQLiteReader reader = get_stmt.execute_query();
+
+  if (reader.next())
+    {
+      reader.get_blob(0);
+      // create surface from blob and return it
+      return SoftwareSurface();
+    }
+  else
+    {
+      return SoftwareSurface();
+    }
 }
 
 void
-TileDatabase::store_tile(uint32_t file_id, int tile_size, int scale, int x, int y, const SoftwareSurface& surface)
+TileDatabase::store_tile(uint32_t file_id, int scale, int x, int y, const SoftwareSurface& surface)
 {
+  store_stmt.bind_int(1, file_id);
+  store_stmt.bind_int(2, scale);
+  store_stmt.bind_int(3, x);
+  store_stmt.bind_int(4, y);
+  //store_stmt.bind_int(5, surface.get_width());
+  //store_stmt.bind_int(6, surface.get_height());
+  store_stmt.bind_blob(5, surface.get_data());
+
+  store_stmt.execute();
+}
   
-}
-
 /* EOF */

Modified: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-08-06 18:27:12 UTC (rev 2276)
+++ trunk/griv/new/tile_database.hpp	2008-08-06 21:35:22 UTC (rev 2277)
@@ -26,20 +26,22 @@
 #ifndef HEADER_TILE_DATABASE_HPP
 #define HEADER_TILE_DATABASE_HPP
 
-#include <sqlite3.h>
+#include "sqlite.hpp"
 #include "software_surface.hpp"
 
 /** */
 class TileDatabase
 {
 private:
-  
+  SQLiteConnection* db;
+  SQLiteStatement store_stmt;
+  SQLiteStatement get_stmt;
 
 public:
-  TileDatabase();
+  TileDatabase(SQLiteConnection* db);
   
-  SoftwareSurface get_tile(uint32_t file_id, int tile_size, int scale, int x, int y);
-  void store_tile(uint32_t file_id, int tile_size, int scale, int x, int y, const SoftwareSurface& surface);
+  SoftwareSurface get_tile(uint32_t file_id, int scale, int x, int y);
+  void store_tile(uint32_t file_id, int scale, int x, int y, const SoftwareSurface& surface);
   
 private:
   TileDatabase (const TileDatabase&);



From grumbel at mail.berlios.de  Wed Aug  6 23:46:34 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 6 Aug 2008 23:46:34 +0200
Subject: [Windstille-commit] r2278 - trunk/griv/new
Message-ID: <200808062146.m76LkYm4018521@sheep.berlios.de>

Author: grumbel
Date: 2008-08-06 23:46:34 +0200 (Wed, 06 Aug 2008)
New Revision: 2278

Added:
   trunk/griv/new/filesystem.cpp
   trunk/griv/new/filesystem.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/griv.cpp
Log:
Added filesystem class

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-06 21:35:22 UTC (rev 2277)
+++ trunk/griv/new/SConstruct	2008-08-06 21:46:34 UTC (rev 2278)
@@ -12,6 +12,7 @@
         'software_surface.cpp',
         'url.cpp',
         'sqlite.cpp',
+        'filesystem.cpp',
         'file_database.cpp',
         'tile_database.cpp',
         'griv.cpp'])

Copied: trunk/griv/new/filesystem.cpp (from rev 2272, trunk/griv/filesystem.cpp)
===================================================================
--- trunk/griv/filesystem.cpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/filesystem.cpp	2008-08-06 21:46:34 UTC (rev 2278)
@@ -0,0 +1,347 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <fstream>
+#include <dirent.h>
+#include <errno.h>
+#include <iostream>
+#include <stdexcept>
+#include <sys/stat.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <sys/time.h>
+#include <utime.h>
+#include <boost/format.hpp>
+//#include <attr/xattr.h>
+
+#include "filesystem.hpp"
+
+std::string Filesystem::home_directory;
+
+bool
+Filesystem::exist(const std::string& pathname)
+{
+  return access(pathname.c_str(), F_OK) == 0;
+}
+
+bool
+Filesystem::is_directory(const std::string& pathname)
+{
+  struct stat buf;
+  stat(pathname.c_str(), &buf);
+  return S_ISDIR(buf.st_mode);
+}
+
+void
+Filesystem::open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst)
+{
+  DIR* dp = ::opendir(pathname.c_str());
+
+  if (dp == 0)
+    {
+      std::cout << "System: Couldn't open: " << pathname << std::endl;
+    }
+  else
+    {
+      dirent* de = 0;
+      while ((de = ::readdir(dp)) != 0)
+        {
+          if (strcmp(de->d_name, ".")  != 0 &&
+              strcmp(de->d_name, "..") != 0)
+            {
+              if (de->d_type == DT_DIR)
+                { // Avoid stat'ing on file systems that don't need it
+                  open_directory_recursivly(pathname + "/" + de->d_name, lst);
+                } // FIXME: Check for DT_UNKNOWN, DT_FILE, etc.
+              else
+                {
+                  std::string new_path = pathname + "/" + de->d_name;
+                  if (is_directory(new_path))
+                    {
+                      open_directory_recursivly(pathname + "/" + de->d_name, lst);
+                    }
+                  else
+                    {
+                      lst.push_back(new_path);
+                    }
+                }
+            }
+        }
+
+      closedir(dp);
+    }
+}
+
+std::vector<std::string>
+Filesystem::open_directory(const std::string& pathname)
+{
+  std::vector<std::string> dir_list;
+
+  DIR* dp    = 0;
+  dirent* de = 0;
+
+  dp = ::opendir(pathname.c_str());
+
+  if (dp == 0)
+    {
+      std::cout << "System: Couldn't open: " << pathname << std::endl;
+    }
+  else
+    {
+      while ((de = ::readdir(dp)) != 0)
+        {
+          if (strcmp(de->d_name, ".")  != 0 &&
+              strcmp(de->d_name, "..") != 0)
+            dir_list.push_back(pathname + "/" + de->d_name);
+        }
+
+      closedir(dp);
+    }
+
+  return dir_list;
+}
+#if 0
+std::string
+Filesystem::getxattr(const std::string& pathname)
+{
+  char buf[2048];
+  int len;
+  if ((len = ::getxattr(pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
+    {
+      if (errno == ENOATTR)
+        return "";
+      else
+        throw std::runtime_error("Couldn't get xattr for " + pathname);
+    }
+
+  return std::string(buf, len);
+}
+#endif
+void
+Filesystem::init()
+{
+  char* home;
+  if ((home = getenv("HOME")))
+    {
+      home_directory = home;
+    }
+  else
+    {
+      throw std::runtime_error("Couldn't get HOME environment variable");
+    }
+
+  mkdir(home_directory + "/.griv");
+}
+
+void
+Filesystem::mkdir(const std::string& pathname)
+{
+  if (!Filesystem::exist(pathname))
+    {
+      if (::mkdir(pathname.c_str(), S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP) != 0)
+	{
+	  throw std::runtime_error("Filesystem::mkdir: " + pathname + ": " + strerror(errno));
+	}
+      else
+	{
+	  std::cout << "Filesystem::mkdir: " << pathname << std::endl;
+	}
+    }
+}
+
+void
+Filesystem::deinit()
+{
+}
+
+bool
+Filesystem::has_extension(const std::string& str, const std::string& suffix)
+{
+  if (str.length() >= suffix.length())
+    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
+  else
+    return false;
+}
+
+void
+Filesystem::copy_mtime(const std::string& from_filename, const std::string& to_filename)
+{
+  struct stat stat_buf;
+  if (stat(from_filename.c_str(), &stat_buf) != 0)
+    {
+      throw std::runtime_error(from_filename + ": " + strerror(errno));
+    }
+
+  struct utimbuf time_buf; 
+  time_buf.actime  = stat_buf.st_atime;
+  time_buf.modtime = stat_buf.st_mtime;
+
+  if (utime(to_filename.c_str(), &time_buf) != 0)
+    {
+      std::cout << "Filesystem:copy_mtime: " << to_filename << ": " << strerror(errno) << std::endl;
+    }
+}
+
+unsigned int
+Filesystem::get_mtime(const std::string& filename)
+{
+  struct stat stat_buf;
+  if (stat(filename.c_str(), &stat_buf) != 0)
+    {
+      throw std::runtime_error(filename + ": " + strerror(errno));
+    } 
+  return stat_buf.st_mtime;
+}
+
+void
+Filesystem::generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list)
+{
+  std::vector<std::string> lst;
+  if (is_directory(pathname))
+    open_directory_recursivly(pathname, lst);
+  else
+    lst.push_back(pathname);
+  
+  for(std::vector<std::string>::iterator i = lst.begin(); i != lst.end(); ++i)
+    {
+      if (Filesystem::has_extension(*i, ".jpg")  ||
+          Filesystem::has_extension(*i, ".JPG")  ||
+          Filesystem::has_extension(*i, ".jpe")  ||
+          Filesystem::has_extension(*i, ".JPE")  ||
+          Filesystem::has_extension(*i, ".JPEG") ||
+          Filesystem::has_extension(*i, ".jpeg"))
+        {
+          file_list.push_back("file://" + Filesystem::realpath(*i)); // realpath slow?
+        }
+    }
+}
+
+std::string
+Filesystem::realpath_system(const std::string& pathname)
+{
+  char* result = ::realpath(pathname.c_str(), NULL);
+  std::string res = result;
+  free(result);
+  
+  return res;
+}
+
+std::string
+Filesystem::realpath_fast(const std::string& pathname)
+{
+  std::string fullpath;
+  std::string drive;
+  
+  if (pathname.size() > 0 && pathname[0] == '/')
+    {
+      fullpath = pathname;
+    }
+#ifdef WIN32
+  else if (pathname.size() > 2 && pathname[1] == ':' && pathname[2] == '/')
+    {
+      drive = pathname.substr(0, 2);
+      fullpath = pathname;
+    }
+#endif
+  else
+    {
+      char buf[PATH_MAX];
+      if (getcwd(buf, PATH_MAX) == 0)
+        {
+          std::cout << "System::realpath: Error: couldn't getcwd()" << std::endl;
+          return pathname;
+        }
+#ifdef WIN32
+      for (char *p = buf; *p; ++p)
+        {
+          if (*p == '\\')
+            *p = '/';
+        }
+      drive.assign(buf, 2);
+#endif
+      
+      fullpath = fullpath + buf + "/" + pathname;
+    }
+  
+  std::string result;
+  std::string::reverse_iterator last_slash = fullpath.rbegin();
+  int skip = 0;
+  // /foo/bar/../../bar/baz/
+  //std::cout << "fullpath: '" << fullpath << "'" << std::endl;
+  for(std::string::reverse_iterator i = fullpath.rbegin(); i != fullpath.rend(); ++i)
+    { // FIXME: Little crude and hackish
+      if (*i == '/')
+        {
+          std::string dir(last_slash, i); 
+          //std::cout << "'" << dir << "'" << std::endl;
+          if (dir == ".." || dir == "/..")
+            {
+              skip += 1;
+            }
+          else if (dir == "." || dir == "/." || dir.empty() || dir == "/")
+            {
+              // pass
+            }
+          else
+            {
+              if (skip == 0)
+                {
+                  result += dir;
+                }
+              else
+                skip -= 1;
+            }
+
+          last_slash = i;
+        }
+    }
+  
+  return drive + "/" + std::string(result.rbegin(), result.rend());
+}
+
+std::string
+Filesystem::realpath(const std::string& pathname)
+{
+  return realpath_fast(pathname);
+}
+
+void
+Filesystem::readlines_from_file(const std::string& pathname, std::vector<std::string>& lst)
+{
+  std::ifstream in(pathname.c_str());
+
+  if (!in)
+    throw std::runtime_error("Couldn't open file: " + pathname);
+  
+  std::string line;
+  while(std::getline(in, line))
+   {
+     lst.push_back(line);
+   }
+  in.close();
+}
+
+/* EOF */

Copied: trunk/griv/new/filesystem.hpp (from rev 2272, trunk/griv/filesystem.hpp)
===================================================================
--- trunk/griv/filesystem.hpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/filesystem.hpp	2008-08-06 21:46:34 UTC (rev 2278)
@@ -0,0 +1,68 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FILESYSTEM_HPP
+#define HEADER_FILESYSTEM_HPP
+
+#include <string>
+#include <vector>
+
+class Filesystem
+{
+private:
+  static std::string home_directory;
+
+public:
+  static bool is_directory(const std::string& pathname);
+  static bool exist(const std::string& pathname);
+  static void mkdir(const std::string& pathname);
+  static std::vector<std::string> open_directory(const std::string& pathname);
+
+  static void open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst);
+
+  static void readlines_from_file(const std::string& pathname, std::vector<std::string>& lst);
+
+  static std::string getxattr(const std::string& pathname);
+  static std::string get_home() { return home_directory; }
+
+  static std::string realpath_system(const std::string& pathname);
+  static std::string realpath_fast(const std::string& pathname);
+  static std::string realpath(const std::string& pathname);
+
+
+  static bool has_extension(const std::string& pathname, const std::string& ext);
+  static void copy_mtime(const std::string& from_filename, const std::string& to_filename);
+  static unsigned int get_mtime(const std::string& filename);
+  
+  /** Generate a recursive list of all JPEGs in pathname */
+  static void generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list);
+
+  static void init();
+  static void deinit();
+};
+
+#endif
+
+/* EOF */

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-06 21:35:22 UTC (rev 2277)
+++ trunk/griv/new/griv.cpp	2008-08-06 21:46:34 UTC (rev 2278)
@@ -38,15 +38,18 @@
 #include "software_surface.hpp"
 #include "file_database.hpp"
 #include "tile_database.hpp"
+#include "filesystem.hpp"
 #include "griv.hpp"
 
 Griv::Griv()
 {
   FreeImage_Initialise();
+  Filesystem::init();
 }
 
 Griv::~Griv()
 {
+  Filesystem::deinit();
   FreeImage_DeInitialise();
 }
 



From grumbel at mail.berlios.de  Thu Aug  7 02:10:17 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 02:10:17 +0200
Subject: [Windstille-commit] r2279 - trunk/griv/new
Message-ID: <200808070010.m770AHDG023376@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 02:10:16 +0200 (Thu, 07 Aug 2008)
New Revision: 2279

Added:
   trunk/griv/new/md5.cpp
   trunk/griv/new/md5.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/filesystem.cpp
   trunk/griv/new/filesystem.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/tile_database.cpp
Log:
Added md5 stuff, more work on file_database

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/SConstruct	2008-08-07 00:10:16 UTC (rev 2279)
@@ -11,6 +11,7 @@
         'math/vector2f.cpp',
         'software_surface.cpp',
         'url.cpp',
+        'md5.cpp',
         'sqlite.cpp',
         'filesystem.cpp',
         'file_database.cpp',

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/file_database.cpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -26,6 +26,9 @@
 #include <iostream>
 #include <sstream>
 #include <stdexcept>
+
+#include "md5.hpp"
+#include "filesystem.hpp"
 #include "file_database.hpp"
 
 std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
@@ -60,14 +63,14 @@
 }
  
 int
-FileDatabase::store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime)
+FileDatabase::store_file_entry(const FileEntry& entry)
 {
-  store_stmt.bind_text(1, filename);
-  store_stmt.bind_text(2, md5);
-  store_stmt.bind_int (3, filesize); // filesize
-  store_stmt.bind_int (4, width);    // width
-  store_stmt.bind_int (5, height);   // height
-  store_stmt.bind_int (6, 0);        // mtime
+  store_stmt.bind_text(1, entry.filename);
+  store_stmt.bind_text(2, entry.md5);
+  store_stmt.bind_int (3, entry.filesize); // filesize
+  store_stmt.bind_int (4, entry.width);    // width
+  store_stmt.bind_int (5, entry.height);   // height
+  store_stmt.bind_int (6, entry.mtime);        // mtime
 
   store_stmt.execute();
 
@@ -99,7 +102,16 @@
     }
   else
     {
-      return false;
+      entry.filename = filename;
+      entry.md5      = MD5::md5_file(filename);
+      entry.filesize = Filesystem::get_size(filename);
+      entry.mtime    = Filesystem::get_mtime(filename);
+      entry.width    = 0;
+      entry.height   = 0;
+
+      store_file_entry(entry);
+      
+      return true;
     }
 }
 

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/file_database.hpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -51,7 +51,7 @@
   SQLiteStatement get_by_filename_stmt;
   SQLiteStatement get_by_file_id_stmt;
 
-  int store_file_entry(const std::string& filename, const std::string& md5, size_t filesize, int width, int height, int mtime);
+  int store_file_entry(const FileEntry& entry);
  
 public:
   FileDatabase(SQLiteConnection* db);

Modified: trunk/griv/new/filesystem.cpp
===================================================================
--- trunk/griv/new/filesystem.cpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/filesystem.cpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -206,6 +206,12 @@
 }
 
 unsigned int
+Filesystem::get_size(const std::string& filename)
+{
+  return 0;
+}
+
+unsigned int
 Filesystem::get_mtime(const std::string& filename)
 {
   struct stat stat_buf;

Modified: trunk/griv/new/filesystem.hpp
===================================================================
--- trunk/griv/new/filesystem.hpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/filesystem.hpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -55,6 +55,7 @@
   static bool has_extension(const std::string& pathname, const std::string& ext);
   static void copy_mtime(const std::string& from_filename, const std::string& to_filename);
   static unsigned int get_mtime(const std::string& filename);
+  static unsigned int get_size(const std::string& filename);
   
   /** Generate a recursive list of all JPEGs in pathname */
   static void generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list);

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/griv.cpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <algorithm>
 #include <sstream>
 #include <stdexcept>
 #include <iostream>
@@ -75,6 +76,8 @@
   FileDatabase file_db(&db);
   TileDatabase tile_db(&db);
 
+  std::transform(rest.begin(), rest.end(), rest.begin(), &Filesystem::realpath);
+
   for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
     {
       if (0) // Tile Generation

Copied: trunk/griv/new/md5.cpp (from rev 2272, trunk/griv/md5.cpp)

Copied: trunk/griv/new/md5.hpp (from rev 2272, trunk/griv/md5.hpp)

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-06 21:46:34 UTC (rev 2278)
+++ trunk/griv/new/tile_database.cpp	2008-08-07 00:10:16 UTC (rev 2279)
@@ -38,8 +38,8 @@
            "data    BLOB     " // the image data, JPEG
            ");");
 
-  store_stmt.prepare("INSERT into tiles (fileid, zoom, x, y, width, height, data) VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7);");
-  get_stmt.prepare("SELECT (data) FROM tiles WHERE fileid = ?1 AND zoom = ?2 AND x = ?3 AND y = ?4;");
+  store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
+  get_stmt.prepare("SELECT (data) FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
 }
 
 SoftwareSurface



From grumbel at mail.berlios.de  Thu Aug  7 15:45:11 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 15:45:11 +0200
Subject: [Windstille-commit] r2280 - trunk/griv/new
Message-ID: <200808071345.m77DjB2I007619@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 15:45:10 +0200 (Thu, 07 Aug 2008)
New Revision: 2280

Added:
   trunk/griv/new/jpeg.cpp
   trunk/griv/new/jpeg.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/file_database.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
Log:
Moved JPEG code over

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-07 00:10:16 UTC (rev 2279)
+++ trunk/griv/new/SConstruct	2008-08-07 13:45:10 UTC (rev 2280)
@@ -1,6 +1,10 @@
 # Zoomable Image Viewer
 griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], 
-                       LIBS=['freeimage', 'jpeg', 'mhash', 'GL', 'GLU'])
+                       LIBS=['jpeg', # must link jpeg before freeimage, else we get a crash
+                             'freeimage', 
+                             'mhash', 
+                             'GL', 
+                             'GLU'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
 griv_env.ParseConfig("pkg-config sqlite3 --libs --cflags")
 griv_env.Program('griv', [
@@ -12,6 +16,7 @@
         'software_surface.cpp',
         'url.cpp',
         'md5.cpp',
+        'jpeg.cpp',
         'sqlite.cpp',
         'filesystem.cpp',
         'file_database.cpp',

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-07 00:10:16 UTC (rev 2279)
+++ trunk/griv/new/file_database.cpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -27,6 +27,7 @@
 #include <sstream>
 #include <stdexcept>
 
+#include "jpeg.hpp"
 #include "md5.hpp"
 #include "filesystem.hpp"
 #include "file_database.hpp"
@@ -106,9 +107,12 @@
       entry.md5      = MD5::md5_file(filename);
       entry.filesize = Filesystem::get_size(filename);
       entry.mtime    = Filesystem::get_mtime(filename);
-      entry.width    = 0;
-      entry.height   = 0;
+      
+      entry.width    = -1;
+      entry.height   = -1;
 
+      JPEG::get_size(entry.filename, entry.width, entry.height);
+
       store_file_entry(entry);
       
       return true;

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-07 00:10:16 UTC (rev 2279)
+++ trunk/griv/new/griv.cpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -113,10 +113,14 @@
       else  // Data base test
         {
           FileEntry entry;
-          if (file_db.get_file_entry(rest[i], entry))
-            std::cout << entry << std::endl;
+          if (!file_db.get_file_entry(rest[i], entry))
+            {
+              std::cout << "Couldn't find entry for " << rest[i] << std::endl;
+            }
           else
-            std::cout << "Couldn't find entry for " << rest[i] << std::endl;
+            {
+              std::cout << entry << std::endl;
+            }
         }
     }
 

Copied: trunk/griv/new/jpeg.cpp (from rev 2272, trunk/griv/jpeg.cpp)
===================================================================
--- trunk/griv/jpeg.cpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/jpeg.cpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -0,0 +1,74 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include <stdexcept>
+#include <jpeglib.h>
+#include <setjmp.h>
+#include "jpeg.hpp"
+
+jmp_buf setjmp_buffer;
+
+void fatal_error_handler(j_common_ptr cinfo)
+{
+  std::cout << "Some jpeg error" << std::endl;
+  longjmp(setjmp_buffer, 1);
+}
+
+bool
+JPEG::get_size(const std::string& filename, int& w, int& h)
+{
+  std::cout << "JPEG: " << filename << std::endl;
+
+  FILE* in = fopen(filename.c_str(), "rb");
+  if (!in)
+    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
+
+  struct jpeg_decompress_struct  jinfo;
+  struct jpeg_error_mgr jerr;
+
+  jinfo.err = jpeg_std_error(&jerr);
+  jinfo.err->error_exit = &fatal_error_handler;
+  jpeg_create_decompress(&jinfo);
+  jpeg_stdio_src(&jinfo, in);
+
+  if (setjmp(setjmp_buffer))
+    {
+      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't setjmp for " + filename);
+    }
+
+  jpeg_read_header(&jinfo, FALSE);
+
+  w = jinfo.image_width;
+  h = jinfo.image_height;
+
+  jpeg_destroy_decompress(&jinfo);
+
+  fclose(in);
+
+  return true;
+}
+
+/* EOF */

Copied: trunk/griv/new/jpeg.hpp (from rev 2272, trunk/griv/jpeg.hpp)
===================================================================
--- trunk/griv/jpeg.hpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/jpeg.hpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -0,0 +1,41 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_JPEG_HPP
+#define HEADER_JPEG_HPP
+
+#include <string>
+
+/** */
+class JPEG
+{
+private:
+public:
+  static bool get_size(const std::string& filename, int& w, int& h);
+};
+
+#endif
+
+/* EOF */

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-07 00:10:16 UTC (rev 2279)
+++ trunk/griv/new/tile_database.cpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -39,10 +39,10 @@
            ");");
 
   store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
-  get_stmt.prepare("SELECT (data) FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
+  get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
 }
 
-SoftwareSurface
+Tile
 TileDatabase::get_tile(uint32_t file_id, int scale, int x, int y)
 {
   get_stmt.bind_int(1, file_id);
@@ -54,26 +54,29 @@
 
   if (reader.next())
     {
-      reader.get_blob(0);
-      // create surface from blob and return it
-      return SoftwareSurface();
+      Tile tile;
+      tile.file_id = reader.get_int (0);
+      tile.scale   = reader.get_int (1);
+      tile.x       = reader.get_int (2);
+      tile.y       = reader.get_int (3);
+      tile.surface = reader.get_blob(4);
+
+      return tile;
     }
   else
     {
-      return SoftwareSurface();
+      return Tile();
     }
 }
 
 void
-TileDatabase::store_tile(uint32_t file_id, int scale, int x, int y, const SoftwareSurface& surface)
+TileDatabase::store_tile(const Tile& tile)
 {
-  store_stmt.bind_int(1, file_id);
-  store_stmt.bind_int(2, scale);
-  store_stmt.bind_int(3, x);
-  store_stmt.bind_int(4, y);
-  //store_stmt.bind_int(5, surface.get_width());
-  //store_stmt.bind_int(6, surface.get_height());
-  store_stmt.bind_blob(5, surface.get_data());
+  store_stmt.bind_int (1, tile.file_id);
+  store_stmt.bind_int (2, tile.scale);
+  store_stmt.bind_int (3, tile.x);
+  store_stmt.bind_int (4, tile.y);
+  store_stmt.bind_blob(5, tile.surface.get_data());
 
   store_stmt.execute();
 }

Modified: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-08-07 00:10:16 UTC (rev 2279)
+++ trunk/griv/new/tile_database.hpp	2008-08-07 13:45:10 UTC (rev 2280)
@@ -29,6 +29,15 @@
 #include "sqlite.hpp"
 #include "software_surface.hpp"
 
+struct Tile
+{
+  int file_id;
+  int scale;
+  int x;
+  int y;
+  SoftwareSurface surface;
+};
+
 /** */
 class TileDatabase
 {
@@ -40,8 +49,8 @@
 public:
   TileDatabase(SQLiteConnection* db);
   
-  SoftwareSurface get_tile(uint32_t file_id, int scale, int x, int y);
-  void store_tile(uint32_t file_id, int scale, int x, int y, const SoftwareSurface& surface);
+  Tile get_tile(uint32_t file_id, int scale, int x, int y);
+  void store_tile(const Tile& tile);
   
 private:
   TileDatabase (const TileDatabase&);



From grumbel at mail.berlios.de  Thu Aug  7 17:37:59 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 17:37:59 +0200
Subject: [Windstille-commit] r2281 - trunk/griv/new
Message-ID: <200808071537.m77FbxU9015347@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 17:37:58 +0200 (Thu, 07 Aug 2008)
New Revision: 2281

Added:
   trunk/griv/new/blob.hpp
Log:
Class to hold a binary blob

Added: trunk/griv/new/blob.hpp
===================================================================
--- trunk/griv/new/blob.hpp	2008-08-07 13:45:10 UTC (rev 2280)
+++ trunk/griv/new/blob.hpp	2008-08-07 15:37:58 UTC (rev 2281)
@@ -0,0 +1,85 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_BLOB_HPP
+#define HEADER_BLOB_HPP
+
+#include <boost/smart_ptr.hpp>
+#include <vector>
+
+class BlobImpl
+{
+public:
+  uint8_t* data;
+  int len;
+
+  BlobImpl(uint8_t* data_, int len_)
+  {
+    data = new uint8_t[len_];
+    len  = len_;
+
+    memcpy(data, data_, sizeof(uint8_t) * len);
+  }
+
+  ~BlobImpl()
+  {
+    delete[] data;
+  }
+};
+
+class Blob
+{
+public:
+  Blob(uint8_t* data, int len)
+    : impl(new BlobImpl(data, len))
+  {}
+
+  Blob()
+    : impl(0)
+  {}
+
+  int size() const 
+  {
+    if (impl.get())
+      return impl->len; 
+    else
+      return 0;
+  }
+
+  uint8_t* get_data() const 
+  {
+    if (impl.get())
+      return impl->data; 
+    eles
+      return 0;
+  }
+
+private: 
+  boost::shared_ptr<BlobImpl> impl;
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/blob.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Thu Aug  7 17:39:00 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 17:39:00 +0200
Subject: [Windstille-commit] r2282 - trunk/griv/new
Message-ID: <200808071539.m77Fd02Q015445@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 17:39:00 +0200 (Thu, 07 Aug 2008)
New Revision: 2282

Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/TODO
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/sqlite.hpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
Log:
Misc stuff

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/SConstruct	2008-08-07 15:39:00 UTC (rev 2282)
@@ -1,7 +1,6 @@
 # Zoomable Image Viewer
 griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], 
-                       LIBS=['jpeg', # must link jpeg before freeimage, else we get a crash
-                             'freeimage', 
+                       LIBS=['freeimage', 
                              'mhash', 
                              'GL', 
                              'GLU'])

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/TODO	2008-08-07 15:39:00 UTC (rev 2282)
@@ -4,5 +4,16 @@
 * SoftwareSurface: load from memory, save to memory
 * all GL stuff
 
+Image Library Requirements:
+===========================
+
+* fast JPEG thumbnailing would be a plus (FreeImage, EPEG)
+
+* fast width/height reading from file header (libjpeg, libpng)
+
+* support for PNG, JPEG, etc.
+
+* generation of subregion images without a copy
+
 
 # EOF #
\ No newline at end of file

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/file_database.cpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -27,6 +27,7 @@
 #include <sstream>
 #include <stdexcept>
 
+#include <assert.h>
 #include "jpeg.hpp"
 #include "md5.hpp"
 #include "filesystem.hpp"
@@ -44,6 +45,7 @@
     get_by_file_id_stmt(db)
 {
   db->exec("CREATE TABLE IF NOT EXISTS files ("
+           "fileid    INTEGER PRIMARY KEY AUTOINCREMENT,"
            "filename  TEXT UNIQUE, "
            "md5       TEXT, "
            "filesize  INTEGER, "
@@ -64,8 +66,10 @@
 }
  
 int
-FileDatabase::store_file_entry(const FileEntry& entry)
+FileDatabase::store_file_entry(FileEntry& entry)
 {
+  assert(entry.fileid == -1);
+
   store_stmt.bind_text(1, entry.filename);
   store_stmt.bind_text(2, entry.md5);
   store_stmt.bind_int (3, entry.filesize); // filesize
@@ -74,8 +78,10 @@
   store_stmt.bind_int (6, entry.mtime);        // mtime
 
   store_stmt.execute();
+  
+  entry.fileid = sqlite3_last_insert_rowid(db->get_db());
 
-  return sqlite3_last_insert_rowid(db->get_db());
+  return entry.fileid;
 }
 
 bool
@@ -93,16 +99,18 @@
                   << reader.get_text(0)
                   << std::endl;
 
-      entry.filename = reader.get_text(0);
-      entry.md5      = reader.get_text(1);
-      entry.filesize = reader.get_int(2);
-      entry.width    = reader.get_int(3);
-      entry.height   = reader.get_int(4);
+      entry.fileid   = reader.get_int (0);
+      entry.filename = reader.get_text(1);
+      entry.md5      = reader.get_text(2);
+      entry.filesize = reader.get_int (3);
+      entry.width    = reader.get_int (4);
+      entry.height   = reader.get_int (5);
 
       return true;
     }
   else
     {
+      entry.fileid   = -1;
       entry.filename = filename;
       entry.md5      = MD5::md5_file(filename);
       entry.filesize = Filesystem::get_size(filename);
@@ -110,9 +118,10 @@
       
       entry.width    = -1;
       entry.height   = -1;
+      
+      // Doesn't work due to linking issues
+      // JPEG::get_size(entry.filename, entry.width, entry.height);
 
-      JPEG::get_size(entry.filename, entry.width, entry.height);
-
       store_file_entry(entry);
       
       return true;

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/file_database.hpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -32,6 +32,7 @@
 
 struct FileEntry 
 {
+  int         fileid;
   std::string filename; // 
   std::string md5;      //
   int         filesize; //
@@ -51,7 +52,7 @@
   SQLiteStatement get_by_filename_stmt;
   SQLiteStatement get_by_file_id_stmt;
 
-  int store_file_entry(const FileEntry& entry);
+  int store_file_entry(FileEntry& entry);
  
 public:
   FileDatabase(SQLiteConnection* db);

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/griv.cpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -80,11 +80,20 @@
 
   for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
     {
-      if (0) // Tile Generation
+      FileEntry entry;
+      if (!file_db.get_file_entry(rest[i], entry))
         {
+          std::cout << "Couldn't find entry for " << rest[i] << std::endl;
+        }
+      else
+        {
+          std::cout << entry << std::endl;
+
           // Generate Image Tiles
+          std::cout << "Generating tiles... " << rest[i]  << std::endl;
           SoftwareSurface surface(rest[i]);
-      
+          std::cout << "Image loading" << std::endl;      
+
           int scale = 0;
 
           do
@@ -98,30 +107,23 @@
               for(int y = 0; y <= surface.get_height()/256; ++y)
                 for(int x = 0; x <= surface.get_width()/256; ++x)
                   {
-                    std::ostringstream out;
-                    out << "/tmp/out/tile-" << scale << "-" << y << "+" << x << ".jpg";
-
                     SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
                                                                        Size(256, 256)));
-                    croped_surface.save(out.str());
+
+                    Tile tile;
+                    tile.fileid = entry.fileid;
+                    tile.scale  = scale;
+                    tile.x = x;
+                    tile.y = y;
+                    tile.surface = croped_surface;
+          
+                    tile_db.store_tile(tile);
                   }
 
               scale += 1;
             } while (surface.get_width() > 32 ||
                      surface.get_height() > 32);
         }
-      else  // Data base test
-        {
-          FileEntry entry;
-          if (!file_db.get_file_entry(rest[i], entry))
-            {
-              std::cout << "Couldn't find entry for " << rest[i] << std::endl;
-            }
-          else
-            {
-              std::cout << entry << std::endl;
-            }
-        }
     }
 
   return 0;

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/software_surface.cpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -161,7 +161,7 @@
 }
 
 std::string
-SoftwareSurface::get_data() const
+SoftwareSurface::get_jpeg_data() const
 {
   FIMEMORY* mem = FreeImage_OpenMemory();
   FreeImage_SaveToMemory(FIF_JPEG, impl->bitmap, mem, 0);
@@ -178,6 +178,16 @@
   return data_str;
 }
 
+SoftwareSurface
+SoftwareSurface::from_data(const std::string& data)
+{
+  FIMEMORY* mem    = FreeImage_OpenMemory(reinterpret_cast<BYTE*>(const_cast<char*>(data.c_str())),
+                                          data.size());
+  FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, 0);
+  FreeImage_CloseMemory(mem);
+  return SoftwareSurface(bitmap);
+}
+
 // FreeImage_OpenMemory(BYTE *data FI_DEFAULT(0), DWORD size_in_bytes FI_DEFAULT(0));
 // hmem = FreeImage_OpenMemory();
 // FreeImage_SaveToMemory(fif, dib, hmem, 0);

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/software_surface.hpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -38,7 +38,7 @@
 {
 public:
   SoftwareSurface();
-  SoftwareSurface(const std::string& filename);
+  explicit SoftwareSurface(const std::string& filename);
   SoftwareSurface(FIBITMAP* bitmap);
   ~SoftwareSurface();
 
@@ -51,8 +51,9 @@
 
   void save(const std::string& filename) const;
 
-  std::string get_data() const;
-
+  std::string get_jpeg_data() const;
+  
+  static SoftwareSurface from_data(const std::string& data);
 private:
   boost::shared_ptr<SoftwareSurfaceImpl> impl;
 };

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/sqlite.hpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -28,6 +28,8 @@
 
 #include <stdexcept>
 #include <sqlite3.h>
+
+#include "blob.hpp"
 
 class SQLiteError : public std::exception
 {

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/tile_database.cpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -42,10 +42,10 @@
   get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
 }
 
-Tile
-TileDatabase::get_tile(uint32_t file_id, int scale, int x, int y)
+bool
+TileDatabase::get_tile(uint32_t fileid, int scale, int x, int y, Tile& tile)
 {
-  get_stmt.bind_int(1, file_id);
+  get_stmt.bind_int(1, fileid);
   get_stmt.bind_int(2, scale);
   get_stmt.bind_int(3, x);
   get_stmt.bind_int(4, y);
@@ -54,29 +54,30 @@
 
   if (reader.next())
     {
-      Tile tile;
-      tile.file_id = reader.get_int (0);
+      tile.fileid  = reader.get_int (0);
       tile.scale   = reader.get_int (1);
       tile.x       = reader.get_int (2);
       tile.y       = reader.get_int (3);
-      tile.surface = reader.get_blob(4);
+      tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
 
-      return tile;
+      return true;
     }
   else
     {
-      return Tile();
+      return false;
     }
 }
 
 void
 TileDatabase::store_tile(const Tile& tile)
 {
-  store_stmt.bind_int (1, tile.file_id);
+  // Insert some checking for uniqueness, or can the database handle that?
+
+  store_stmt.bind_int (1, tile.fileid);
   store_stmt.bind_int (2, tile.scale);
   store_stmt.bind_int (3, tile.x);
   store_stmt.bind_int (4, tile.y);
-  store_stmt.bind_blob(5, tile.surface.get_data());
+  store_stmt.bind_blob(5, tile.surface.get_jpeg_data());
 
   store_stmt.execute();
 }

Modified: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-08-07 15:37:58 UTC (rev 2281)
+++ trunk/griv/new/tile_database.hpp	2008-08-07 15:39:00 UTC (rev 2282)
@@ -31,7 +31,7 @@
 
 struct Tile
 {
-  int file_id;
+  int fileid;
   int scale;
   int x;
   int y;
@@ -49,7 +49,7 @@
 public:
   TileDatabase(SQLiteConnection* db);
   
-  Tile get_tile(uint32_t file_id, int scale, int x, int y);
+  bool get_tile(uint32_t file_id, int scale, int x, int y, Tile& tile);
   void store_tile(const Tile& tile);
   
 private:



From grumbel at mail.berlios.de  Thu Aug  7 23:05:05 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 23:05:05 +0200
Subject: [Windstille-commit] r2283 - trunk/griv/new
Message-ID: <200808072105.m77L55Eg016738@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 23:05:04 +0200 (Thu, 07 Aug 2008)
New Revision: 2283

Removed:
   trunk/griv/new/jpeg.cpp
   trunk/griv/new/jpeg.hpp
Log:
Deleted JPEG stuff

Deleted: trunk/griv/new/jpeg.cpp
===================================================================
--- trunk/griv/new/jpeg.cpp	2008-08-07 15:39:00 UTC (rev 2282)
+++ trunk/griv/new/jpeg.cpp	2008-08-07 21:05:04 UTC (rev 2283)
@@ -1,74 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <stdexcept>
-#include <jpeglib.h>
-#include <setjmp.h>
-#include "jpeg.hpp"
-
-jmp_buf setjmp_buffer;
-
-void fatal_error_handler(j_common_ptr cinfo)
-{
-  std::cout << "Some jpeg error" << std::endl;
-  longjmp(setjmp_buffer, 1);
-}
-
-bool
-JPEG::get_size(const std::string& filename, int& w, int& h)
-{
-  std::cout << "JPEG: " << filename << std::endl;
-
-  FILE* in = fopen(filename.c_str(), "rb");
-  if (!in)
-    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
-
-  struct jpeg_decompress_struct  jinfo;
-  struct jpeg_error_mgr jerr;
-
-  jinfo.err = jpeg_std_error(&jerr);
-  jinfo.err->error_exit = &fatal_error_handler;
-  jpeg_create_decompress(&jinfo);
-  jpeg_stdio_src(&jinfo, in);
-
-  if (setjmp(setjmp_buffer))
-    {
-      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't setjmp for " + filename);
-    }
-
-  jpeg_read_header(&jinfo, FALSE);
-
-  w = jinfo.image_width;
-  h = jinfo.image_height;
-
-  jpeg_destroy_decompress(&jinfo);
-
-  fclose(in);
-
-  return true;
-}
-
-/* EOF */

Deleted: trunk/griv/new/jpeg.hpp
===================================================================
--- trunk/griv/new/jpeg.hpp	2008-08-07 15:39:00 UTC (rev 2282)
+++ trunk/griv/new/jpeg.hpp	2008-08-07 21:05:04 UTC (rev 2283)
@@ -1,41 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_HPP
-#define HEADER_JPEG_HPP
-
-#include <string>
-
-/** */
-class JPEG
-{
-private:
-public:
-  static bool get_size(const std::string& filename, int& w, int& h);
-};
-
-#endif
-
-/* EOF */



From grumbel at mail.berlios.de  Thu Aug  7 23:05:23 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 23:05:23 +0200
Subject: [Windstille-commit] r2284 - trunk/griv/new
Message-ID: <200808072105.m77L5NV8016789@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 23:05:23 +0200 (Thu, 07 Aug 2008)
New Revision: 2284

Added:
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/framebuffer.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/surface.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/texture.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/blob.hpp
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/filesystem.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
   trunk/griv/new/tile_database.cpp
Log:
Added Texture, Surface and Framebuffer classes

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/SConstruct	2008-08-07 21:05:23 UTC (rev 2284)
@@ -15,8 +15,8 @@
         'software_surface.cpp',
         'url.cpp',
         'md5.cpp',
-        'jpeg.cpp',
         'sqlite.cpp',
+        'framebuffer.cpp',
         'filesystem.cpp',
         'file_database.cpp',
         'tile_database.cpp',

Modified: trunk/griv/new/blob.hpp
===================================================================
--- trunk/griv/new/blob.hpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/blob.hpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -32,15 +32,15 @@
 class BlobImpl
 {
 public:
-  uint8_t* data;
+  char* data;
   int len;
 
-  BlobImpl(uint8_t* data_, int len_)
+  BlobImpl(const void* data_, int len_)
   {
-    data = new uint8_t[len_];
+    data = new char[len_];
     len  = len_;
 
-    memcpy(data, data_, sizeof(uint8_t) * len);
+    memcpy(data, data_, sizeof(char) * len);
   }
 
   ~BlobImpl()
@@ -52,12 +52,11 @@
 class Blob
 {
 public:
-  Blob(uint8_t* data, int len)
+  Blob(const void* data, int len)
     : impl(new BlobImpl(data, len))
   {}
 
   Blob()
-    : impl(0)
   {}
 
   int size() const 
@@ -68,11 +67,11 @@
       return 0;
   }
 
-  uint8_t* get_data() const 
+  void* get_data() const 
   {
     if (impl.get())
       return impl->data; 
-    eles
+    else
       return 0;
   }
 

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/file_database.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -28,14 +28,14 @@
 #include <stdexcept>
 
 #include <assert.h>
-#include "jpeg.hpp"
 #include "md5.hpp"
 #include "filesystem.hpp"
+#include "software_surface.hpp"
 #include "file_database.hpp"
 
 std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
 {
-  return os << "filename: " << entry.filename << " size: "<< entry.width << "x" << entry.height;
+  return os << "filename: " << entry.filename << " size: "<< entry.size;
 }
 
 FileDatabase::FileDatabase(SQLiteConnection* db)
@@ -72,10 +72,10 @@
 
   store_stmt.bind_text(1, entry.filename);
   store_stmt.bind_text(2, entry.md5);
-  store_stmt.bind_int (3, entry.filesize); // filesize
-  store_stmt.bind_int (4, entry.width);    // width
-  store_stmt.bind_int (5, entry.height);   // height
-  store_stmt.bind_int (6, entry.mtime);        // mtime
+  store_stmt.bind_int (3, entry.filesize); 
+  store_stmt.bind_int (4, entry.size.width); 
+  store_stmt.bind_int (5, entry.size.height);
+  store_stmt.bind_int (6, entry.mtime); 
 
   store_stmt.execute();
   
@@ -99,12 +99,12 @@
                   << reader.get_text(0)
                   << std::endl;
 
-      entry.fileid   = reader.get_int (0);
-      entry.filename = reader.get_text(1);
-      entry.md5      = reader.get_text(2);
-      entry.filesize = reader.get_int (3);
-      entry.width    = reader.get_int (4);
-      entry.height   = reader.get_int (5);
+      entry.fileid      = reader.get_int (0);
+      entry.filename    = reader.get_text(1);
+      entry.md5         = reader.get_text(2);
+      entry.filesize    = reader.get_int (3);
+      entry.size.width  = reader.get_int (4);
+      entry.size.height = reader.get_int (5);
 
       return true;
     }
@@ -116,11 +116,9 @@
       entry.filesize = Filesystem::get_size(filename);
       entry.mtime    = Filesystem::get_mtime(filename);
       
-      entry.width    = -1;
-      entry.height   = -1;
+      entry.size = Size(-1, -1);
       
-      // Doesn't work due to linking issues
-      // JPEG::get_size(entry.filename, entry.width, entry.height);
+      SoftwareSurface::get_size(entry.filename, entry.size);
 
       store_file_entry(entry);
       

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/file_database.hpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -28,7 +28,9 @@
 
 #include <sqlite3.h>
 #include <string>
+
 #include "sqlite.hpp"
+#include "math/size.hpp"
 
 struct FileEntry 
 {
@@ -37,8 +39,7 @@
   std::string md5;      //
   int         filesize; //
   uint32_t    mtime;    // mtime of the file
-  int         width;    // image width
-  int         height;   // image height
+  Size        size;
 };
 
 std::ostream& operator<<(std::ostream& os, const FileEntry& entry);

Modified: trunk/griv/new/filesystem.cpp
===================================================================
--- trunk/griv/new/filesystem.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/filesystem.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -208,7 +208,12 @@
 unsigned int
 Filesystem::get_size(const std::string& filename)
 {
-  return 0;
+  struct stat stat_buf;
+  if (stat(filename.c_str(), &stat_buf) != 0)
+    {
+      throw std::runtime_error(filename + ": " + strerror(errno));
+    } 
+  return stat_buf.st_size; // Is this reliable? or should be use fopen() and ftell()?
 }
 
 unsigned int

Copied: trunk/griv/new/framebuffer.cpp (from rev 2272, trunk/griv/display.cpp)
===================================================================
--- trunk/griv/display.cpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/framebuffer.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -0,0 +1,140 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include <X11/Xlib.h>
+#include <GL/gl.h>
+#include "SDL_syswm.h"
+#include "framebuffer.hpp"
+
+SDL_SysWMinfo syswm;
+SDL_Surface* Framebuffer::screen = 0;
+Uint32 Framebuffer::flags = 0;
+
+void
+Framebuffer::init()
+{
+  //XInitThreads();
+ 
+  std::cout << "Framebuffer::init()" << std::endl;
+  if (SDL_Init(SDL_INIT_VIDEO) != 0)
+    {
+      std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
+  atexit(SDL_Quit); 
+ 
+  //SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); 
+  //SDL_GL_SetAttribute(SDL_GL_RED_SIZE,   5);
+  //SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
+  //SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,  5);
+  
+  flags = SDL_RESIZABLE | SDL_OPENGL;
+  screen = SDL_SetVideoMode(800, 600, 0, flags);
+
+  if (screen == NULL) 
+    {
+      std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
+
+  SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
+  SDL_EnableUNICODE(1);
+
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
+  glMatrixMode(GL_MODELVIEW);
+  glLoadIdentity();
+  //static const float cl_pixelcenter_constant = 0.375;
+  //glTranslated(cl_pixelcenter_constant, cl_pixelcenter_constant, 0.0);
+  
+  SDL_VERSION(&syswm.version); // this is important!
+  if (SDL_GetWMInfo(&syswm) == -1)
+    {
+      std::cout << "Couldn't get WM info " << std::endl;
+    }
+}
+
+void
+Framebuffer::toggle_fullscreen()
+{
+  flags |= SDL_OPENGL;
+  if (flags & SDL_FULLSCREEN)
+    flags &= ~SDL_FULLSCREEN;
+  else
+    flags |= SDL_FULLSCREEN;
+ 
+  // Should use desktop resolution for this instead, but how?
+  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
+}
+
+void
+Framebuffer::resize(int w, int h)
+{
+  screen = SDL_SetVideoMode(w, h, 0, SDL_OPENGL | SDL_RESIZABLE);
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
+}
+
+void
+Framebuffer::flip()
+{
+  //SDL_Flip(screen);
+  SDL_GL_SwapBuffers();
+}
+
+void
+Framebuffer::clear()
+{
+  glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+  //SDL_FillRect(Framebuffer::get_screen(), NULL, SDL_MapRGB(Framebuffer::get_screen()->format, 0, 0, 0));
+}
+
+void
+Framebuffer::lock()
+{
+  syswm.info.x11.lock_func();
+  XLockDisplay(syswm.info.x11.display);
+  syswm.info.x11.unlock_func();
+}
+
+void
+Framebuffer::unlock()
+{
+  syswm.info.x11.lock_func();
+  XUnlockDisplay(syswm.info.x11.display);
+  syswm.info.x11.unlock_func();
+}
+
+/* EOF */

Copied: trunk/griv/new/framebuffer.hpp (from rev 2272, trunk/griv/display.hpp)

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/griv.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -54,44 +54,27 @@
   FreeImage_DeInitialise();
 }
 
-int
-Griv::main(int argc, char** argv)
+void
+Griv::generate_tiles(const std::vector<std::string>& filenames)
 {
-  std::vector<std::string> rest;
-
-  for(int i = 1; i < argc; ++i)
-    {
-      if (argv[i][0] == '-')
-        { // option
-          
-        }
-      else
-        { // rest
-          rest.push_back(argv[i]);
-        }
-    }
-
   SQLiteConnection db("test.sqlite");
 
   FileDatabase file_db(&db);
   TileDatabase tile_db(&db);
 
-  std::transform(rest.begin(), rest.end(), rest.begin(), &Filesystem::realpath);
-
-  for(std::vector<std::string>::size_type i = 0; i < rest.size(); ++i)
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
     {
       FileEntry entry;
-      if (!file_db.get_file_entry(rest[i], entry))
+      std::cout << "Getting file entry..." << std::endl;
+      if (!file_db.get_file_entry(filenames[i], entry))
         {
-          std::cout << "Couldn't find entry for " << rest[i] << std::endl;
+          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
         }
       else
         {
-          std::cout << entry << std::endl;
-
           // Generate Image Tiles
-          std::cout << "Generating tiles... " << rest[i]  << std::endl;
-          SoftwareSurface surface(rest[i]);
+          std::cout << "Generating tiles... " << filenames[i]  << std::endl;
+          SoftwareSurface surface(filenames[i]);
           std::cout << "Image loading" << std::endl;      
 
           int scale = 0;
@@ -104,8 +87,8 @@
                                                surface.get_height()/2));
                 }
 
-              for(int y = 0; y <= surface.get_height()/256; ++y)
-                for(int x = 0; x <= surface.get_width()/256; ++x)
+              for(int y = 0; 256*y < surface.get_height(); ++y)
+                for(int x = 0; 256*x < surface.get_width(); ++x)
                   {
                     SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
                                                                        Size(256, 256)));
@@ -125,7 +108,74 @@
                      surface.get_height() > 32);
         }
     }
+}
 
+void
+Griv::view(const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db("test.sqlite");
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      std::cout << "Getting file entry..." << std::endl;
+      if (!file_db.get_file_entry(filenames[i], entry))
+        {
+          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          std::cout << entry << std::endl;
+
+          for(int y = 0; y*256 < entry.size.height/2; ++y)
+            for(int x = 0; x*256 < entry.size.width/2; ++x)
+              {
+                Tile tile;
+                if (tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile))
+                  {
+                    std::cout << "Have tile: " << x << ", " << y << std::endl;
+                  }                
+                else
+                  {                     
+                    
+                  }
+              }
+        }
+    }
+}
+
+int
+Griv::main(int argc, char** argv)
+{
+  if (argc < 2)
+    {
+      std::cout << "Usage: " << argv[0] << " view [FILES]...\n"
+                << "       " << argv[0] << " prepare [FILES]...\n";
+    }
+  else
+    {
+      std::vector<std::string> filenames;
+      for(int i = 2; i < argc; ++i)
+        filenames.push_back(Filesystem::realpath(argv[i]));
+
+      if (strcmp(argv[1], "view") == 0)
+        {
+          view(filenames);
+        }
+      else if (strcmp(argv[1], "prepare") == 0)
+        {
+          generate_tiles(filenames);
+        }
+      else
+        {
+          std::cout << "Usage: " << argv[0] << " view [FILES]...\n"
+                    << "       " << argv[0] << " prepare [FILES]...\n";
+        }
+    }
+
   return 0;
 }
 

Modified: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/griv.hpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -34,6 +34,9 @@
   ~Griv();
 
   int main(int argc, char** argv);
+
+  void generate_tiles(const std::vector<std::string>& filenames);
+  void view(const std::vector<std::string>& filenames);
 };
 
 #endif

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/software_surface.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -28,6 +28,7 @@
 #include <stdexcept>
 #include "FreeImage.h"
 
+#include "blob.hpp"
 #include "math.hpp"
 #include "math/rect.hpp"
 #include "math/size.hpp"
@@ -160,7 +161,7 @@
     }
 }
 
-std::string
+Blob
 SoftwareSurface::get_jpeg_data() const
 {
   FIMEMORY* mem = FreeImage_OpenMemory();
@@ -171,23 +172,34 @@
 
   FreeImage_AcquireMemory(mem, &data, &len);
 
-  std::string data_str(reinterpret_cast<char*>(data), len);
+  Blob blob(data, len);
 
   FreeImage_CloseMemory(mem);
 
-  return data_str;
+  return blob;
 }
 
 SoftwareSurface
-SoftwareSurface::from_data(const std::string& data)
+SoftwareSurface::from_data(const Blob& blob)
 {
-  FIMEMORY* mem    = FreeImage_OpenMemory(reinterpret_cast<BYTE*>(const_cast<char*>(data.c_str())),
-                                          data.size());
+  FIMEMORY* mem    = FreeImage_OpenMemory(static_cast<BYTE*>(blob.get_data()), blob.size());
   FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, 0);
   FreeImage_CloseMemory(mem);
   return SoftwareSurface(bitmap);
 }
 
+void
+SoftwareSurface::get_size(const std::string& filename, Size& size)
+{
+  FREE_IMAGE_FORMAT format = FreeImage_GetFileType(filename.c_str(), 0);
+  FIBITMAP* bitmap = FreeImage_Load(format, filename.c_str());
+
+  size.width  = FreeImage_GetWidth(bitmap); 
+  size.height = FreeImage_GetHeight(bitmap); 
+  
+  FreeImage_Unload(bitmap);  
+}
+
 // FreeImage_OpenMemory(BYTE *data FI_DEFAULT(0), DWORD size_in_bytes FI_DEFAULT(0));
 // hmem = FreeImage_OpenMemory();
 // FreeImage_SaveToMemory(fif, dib, hmem, 0);

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/software_surface.hpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -28,6 +28,7 @@
 
 #include <boost/shared_ptr.hpp>
 #include "FreeImage.h"
+#include "blob.hpp"
 
 class URL;
 class Rect;
@@ -50,10 +51,12 @@
   SoftwareSurface crop(const Rect& rect) const;
 
   void save(const std::string& filename) const;
+  
+  Blob get_jpeg_data() const;
+  
+  static SoftwareSurface from_data(const Blob& blob);
+  static void get_size(const std::string& filename, Size& size);
 
-  std::string get_jpeg_data() const;
-  
-  static SoftwareSurface from_data(const std::string& data);
 private:
   boost::shared_ptr<SoftwareSurfaceImpl> impl;
 };

Modified: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/sqlite.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -124,9 +124,9 @@
 }
 
 void
-SQLiteStatement::bind_blob(int n, const std::string& blob)
+SQLiteStatement::bind_blob(int n, const Blob& blob)
 {
-  if (sqlite3_bind_blob(stmt, n, blob.c_str(), blob.size(), SQLITE_TRANSIENT) != SQLITE_OK)
+  if (sqlite3_bind_blob(stmt, n, blob.get_data(), blob.size(), SQLITE_TRANSIENT) != SQLITE_OK)
     {
       std::ostringstream str;
       str << "SQLiteStatement: " << sqlite3_errmsg(db->get_db());
@@ -226,12 +226,11 @@
   return std::string(static_cast<const char*>(data), len);
 }
 
-std::string
+Blob
 SQLiteReader::get_blob(int column)
 {
-  const void* data = sqlite3_column_blob(stmt, column);
-  int len = sqlite3_column_bytes(stmt, column);
-  return std::string(static_cast<const char*>(data), len);
+  return Blob(sqlite3_column_blob(stmt, column),
+              sqlite3_column_bytes(stmt, column));
 }
 
 std::string

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/sqlite.hpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -71,7 +71,7 @@
 
   int         get_int(int column);
   std::string get_text(int column);
-  std::string get_blob(int column);
+  Blob        get_blob(int column);
 
   std::string get_column_name(int column);
 };
@@ -93,7 +93,7 @@
 
   void bind_int(int n, int i);
   void bind_text(int n, const std::string&);
-  void bind_blob(int n, const std::string&);
+  void bind_blob(int n, const Blob&);
 
   void execute();
   SQLiteReader execute_query();

Copied: trunk/griv/new/surface.cpp (from rev 2272, trunk/griv/surface.cpp)

Copied: trunk/griv/new/surface.hpp (from rev 2272, trunk/griv/surface.hpp)

Copied: trunk/griv/new/texture.cpp (from rev 2272, trunk/griv/texture.cpp)

Copied: trunk/griv/new/texture.hpp (from rev 2272, trunk/griv/texture.hpp)

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-07 21:05:04 UTC (rev 2283)
+++ trunk/griv/new/tile_database.cpp	2008-08-07 21:05:23 UTC (rev 2284)
@@ -58,6 +58,7 @@
       tile.scale   = reader.get_int (1);
       tile.x       = reader.get_int (2);
       tile.y       = reader.get_int (3);
+      // FIXME: Blob generation causes unneeded copy
       tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
 
       return true;



From grumbel at mail.berlios.de  Thu Aug  7 23:11:34 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 7 Aug 2008 23:11:34 +0200
Subject: [Windstille-commit] r2285 - trunk/griv/new
Message-ID: <200808072111.m77LBYUj017410@sheep.berlios.de>

Author: grumbel
Date: 2008-08-07 23:11:34 +0200 (Thu, 07 Aug 2008)
New Revision: 2285

Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/math.hpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/surface.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/texture.hpp
Log:
Make new classes compilable

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/SConstruct	2008-08-07 21:11:34 UTC (rev 2285)
@@ -16,6 +16,8 @@
         'url.cpp',
         'md5.cpp',
         'sqlite.cpp',
+        'surface.cpp',
+        'texture.cpp',
         'framebuffer.cpp',
         'filesystem.cpp',
         'file_database.cpp',

Modified: trunk/griv/new/math.hpp
===================================================================
--- trunk/griv/new/math.hpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/math.hpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -98,6 +98,26 @@
 /** Restore the raw bits of a float from a string */
 float string2float(const std::string& str);
 
+inline int round_to_power_of_two(int n)
+{
+  n = n - 1;
+
+  n = n | (n >> 1);
+  n = n | (n >> 2);
+  n = n | (n >> 4);
+  n = n | (n >> 8);
+  n = n | (n >> 16);
+  
+  n = n + 1;
+  
+  return n;
+}
+
+inline bool is_power_of_two(int n)
+{
+  return (n > 0) && ((n & (n - 1)) == 0);
+}
+
 } // namespace Math
 
 #endif

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/software_surface.hpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -57,6 +57,7 @@
   static SoftwareSurface from_data(const Blob& blob);
   static void get_size(const std::string& filename, Size& size);
 
+  operator bool() const { return impl.get(); }
 private:
   boost::shared_ptr<SoftwareSurfaceImpl> impl;
 };

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/surface.cpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -25,14 +25,13 @@
 
 #include <iostream>
 #include <assert.h>
-#include "display.hpp"
+#include "framebuffer.hpp"
 #include "math.hpp"
 #include "software_surface.hpp"
 #include "surface.hpp"
 
-Surface::Surface(SWSurfaceHandle surface, int x, int y, int w, int h)
-  : surface(surface),
-    texture(0)
+Surface::Surface(const SoftwareSurface& surface, int x, int y, int w, int h)
+  : texture(0)
 {
   assert(surface);
 
@@ -42,7 +41,7 @@
   if (tex_w <= 1024 && tex_h <= 1024)
     {
       texture = new Texture(tex_w, tex_h, 
-                            surface->get_surface(), 
+                            surface,
                             x, y, w, h);
     
       u = float(w) / tex_w;
@@ -56,7 +55,7 @@
   else
     {
       std::cout << "Image violates maximum texture size: "
-                << surface->get_width() << "x" << surface->get_height() << std::endl;
+                << surface.get_width() << "x" << surface.get_height() << std::endl;
     }
 }
 

Modified: trunk/griv/new/surface.hpp
===================================================================
--- trunk/griv/new/surface.hpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/surface.hpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -34,10 +34,7 @@
 /** */
 class Surface
 {
-private:
-  /** Software backstore for the image */
-  SWSurfaceHandle surface;
-  
+private: 
   Texture* texture;
   int tex_w;
   int tex_h;
@@ -51,7 +48,7 @@
   int height;
   
 public:
-  Surface(SWSurfaceHandle surface, int x, int y, int w, int h);
+  Surface(const SoftwareSurface& surface, int x, int y, int w, int h);
   ~Surface();
 
   void draw(float x, float y, float w, float h);

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/texture.cpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -28,48 +28,18 @@
 #include <stdexcept>
 #include <boost/format.hpp>
 #include <string.h>
-#include "display.hpp"
+#include "framebuffer.hpp"
 #include "texture.hpp"
 
 Texture::Texture(int width, int height, 
-                 SDL_Surface* surface, int s_x, int s_y, int s_w, int s_h)
+                 const SoftwareSurface& surface, int s_x, int s_y, int s_w, int s_h)
   : handle(0),
     width(width),
     height(height)
 {
+#if 0
   assert(surface);
 
-  if (0)
-    std::cout << boost::format(",----------------------------\n"
-                               "| Pointer: 0x%p\n"
-                               "| Size:    %dx%d\n"
-                               "| Pitch:   %d vs %d\n"
-                               "| Rmask:   0x%08x\n"
-                               "| Gmask:   0x%08x\n"
-                               "| Bmask:   0x%08x\n"
-                               "| Amask:   0x%08x\n"
-                               "| Flags:   0x%08x -> %s%s%s%s\n"
-                               "| Palette: 0x%08x\n"
-                               "| BitsPerPixel: %d\n"
-                               "`----------------------------\n"
-                               )
-      % surface
-      % surface->w
-      % surface->h
-      % surface->pitch
-      % (surface->w*3)
-      % surface->format->Rmask
-      % surface->format->Gmask
-      % surface->format->Bmask
-      % surface->format->Amask
-      % surface->flags
-      % ((surface->flags & SDL_HWSURFACE) ? "HWSURFACE " : "")
-      % ((surface->flags & SDL_SWSURFACE) ? "SWSURFACE " : "")
-      % ((surface->flags & SDL_SRCCOLORKEY) ? "SRCCOLORKEY " : "")
-      % ((surface->flags & SDL_SRCALPHA) ? "SRCALPHA " : "")
-      % surface->format->palette
-      % static_cast<int>(surface->format->BitsPerPixel);
-
   glGenTextures(1, &handle);
 
   const SDL_PixelFormat* format = surface->format;
@@ -118,10 +88,6 @@
 
   assert_gl("packing image texture");
 
-  // if (surface->pitch != (surface->w * surface->format->BytesPerPixel))
-  //   std::cout  << surface->pitch << " " << (surface->w * surface->format->BytesPerPixel) << std::endl;
-
-  //std::cout << surface->pitch << " " << s_w << " " << s_h << std::endl;
   glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->w);
   glPixelStorei(GL_UNPACK_ALIGNMENT,  4); // FIXME: This alignment is
                                           // guessed, we better should
@@ -144,6 +110,7 @@
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
 
   assert_gl("setting texture parameters");
+#endif
 }
 
 Texture::~Texture()

Modified: trunk/griv/new/texture.hpp
===================================================================
--- trunk/griv/new/texture.hpp	2008-08-07 21:05:23 UTC (rev 2284)
+++ trunk/griv/new/texture.hpp	2008-08-07 21:11:34 UTC (rev 2285)
@@ -30,7 +30,8 @@
 #include <GL/glu.h>
 #include "SDL.h"
 
-/** */
+class SoftwareSurface;
+
 class Texture
 {
 private:
@@ -40,7 +41,7 @@
   int height;
 
 public:
-  Texture(int w, int h, SDL_Surface* surface, int s_x, int s_y, int s_w, int s_h);
+  Texture(int w, int h, const SoftwareSurface& surface, int s_x, int s_y, int s_w, int s_h);
   ~Texture();
 
   int get_width() const;
@@ -51,7 +52,7 @@
   Texture (const Texture&);
   Texture& operator= (const Texture&);
 };
-
+
 #endif
 
 /* EOF */



From grumbel at mail.berlios.de  Fri Aug  8 01:00:32 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 8 Aug 2008 01:00:32 +0200
Subject: [Windstille-commit] r2286 - trunk/griv/new
Message-ID: <200808072300.m77N0WpT028800@sheep.berlios.de>

Author: grumbel
Date: 2008-08-08 01:00:28 +0200 (Fri, 08 Aug 2008)
New Revision: 2286

Added:
   trunk/griv/new/grid.hpp
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/workspace.cpp
   trunk/griv/new/workspace.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/framebuffer.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/texture.cpp
Log:
Moved some more classes over from the old griv

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/SConstruct	2008-08-07 23:00:28 UTC (rev 2286)
@@ -18,6 +18,8 @@
         'sqlite.cpp',
         'surface.cpp',
         'texture.cpp',
+        'image.cpp',
+        'workspace.cpp',
         'framebuffer.cpp',
         'filesystem.cpp',
         'file_database.cpp',

Modified: trunk/griv/new/framebuffer.cpp
===================================================================
--- trunk/griv/new/framebuffer.cpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/framebuffer.cpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -45,11 +45,6 @@
       exit(1);
     }
   atexit(SDL_Quit); 
- 
-  //SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); 
-  //SDL_GL_SetAttribute(SDL_GL_RED_SIZE,   5);
-  //SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
-  //SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,  5);
   
   flags = SDL_RESIZABLE | SDL_OPENGL;
   screen = SDL_SetVideoMode(800, 600, 0, flags);
@@ -60,7 +55,7 @@
       exit(1);
     }
 
-  SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
+  SDL_WM_SetCaption("Griv 0.0.2", 0 /* icon */);
   SDL_EnableUNICODE(1);
 
   glViewport(0, 0, screen->w, screen->h);
@@ -80,6 +75,12 @@
 }
 
 void
+Framebuffer::deinit()
+{
+  
+}
+
+void
 Framebuffer::toggle_fullscreen()
 {
   flags |= SDL_OPENGL;

Modified: trunk/griv/new/framebuffer.hpp
===================================================================
--- trunk/griv/new/framebuffer.hpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/framebuffer.hpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -59,7 +59,7 @@
 
   static int get_width()  { return screen->w; }
   static int get_height() { return screen->h; }
-  static float get_diagonal() { return sqrt(screen->w*screen->w + screen->h*screen->h); }
+
   static SDL_Surface* get_screen() { return screen; }
   static void resize(int w, int h);
   static void flip();

Copied: trunk/griv/new/grid.hpp (from rev 2272, trunk/griv/grid.hpp)
===================================================================
--- trunk/griv/grid.hpp	2008-06-27 12:16:03 UTC (rev 2272)
+++ trunk/griv/new/grid.hpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -0,0 +1,92 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_GRID_HPP
+#define HEADER_GRID_HPP
+
+#include <iostream>
+#include <assert.h>
+#include <vector>
+
+/** */
+template<typename T>
+class Grid
+{
+private:
+  typedef std::vector<T> Columns;
+  typedef std::vector<Columns> Rows;
+
+  int width;
+  int height;
+  Rows rows;
+
+public:
+  Grid(int w, int h) 
+    : width(w),
+      height(h)
+  {
+    for(int y = 0; y < height; ++y)
+      rows.push_back(Columns(width));
+  }
+  
+  int get_width()  const { return width; }
+  int get_height() const { return height; }
+
+  const T& operator()(int x, int y) const {
+    assert(y >= 0 && y < rows.size());
+    assert(x >= 0 && x < rows[y].size());
+    return rows[y][x];
+  }
+
+  T& operator()(int x, int y) {
+    assert(y >= 0 && y < int(rows.size()));
+    assert(x >= 0 && x < int(rows[y].size()));
+    return rows[y][x];
+  }
+
+  void resize(int w, int h, const T& t = T())
+  {
+    for(typename Rows::iterator i = rows.begin(); i != rows.end(); ++i)
+      i->resize(w);
+    rows.resize(h, Columns(w, t));
+
+    if (0)
+      {
+        std::cout << "Resize: " << w << "x" << h << std::endl;
+        std::cout << "Rows: " << rows.size() << std::endl;
+        for(int y = 0; y < int(rows.size()); ++y)
+          {
+            std::cout << "Column: " << y << " -> " << rows[y].size() << std::endl;
+          }
+      }
+
+    width  = w;
+    height = h;
+  }
+};
+
+#endif
+
+/* EOF */

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/griv.cpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -31,6 +31,7 @@
 #include <vector>
 #include "FreeImage.h"
 
+#include "framebuffer.hpp"
 #include "math/size.hpp"
 #include "math/rect.hpp"
 #include "math/vector2i.hpp"
@@ -40,6 +41,7 @@
 #include "file_database.hpp"
 #include "tile_database.hpp"
 #include "filesystem.hpp"
+#include "workspace.hpp"
 #include "griv.hpp"
 
 Griv::Griv()
@@ -113,6 +115,10 @@
 void
 Griv::view(const std::vector<std::string>& filenames)
 {
+  Framebuffer::init();
+
+  Workspace workspace;
+
   SQLiteConnection db("test.sqlite");
 
   FileDatabase file_db(&db);
@@ -128,23 +134,39 @@
         }
       else
         {
-          std::cout << entry << std::endl;
+          workspace.add_image(entry.filename, entry.size);
+        }
+    }
 
-          for(int y = 0; y*256 < entry.size.height/2; ++y)
-            for(int x = 0; x*256 < entry.size.width/2; ++x)
-              {
-                Tile tile;
-                if (tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile))
-                  {
-                    std::cout << "Have tile: " << x << ", " << y << std::endl;
-                  }                
-                else
-                  {                     
-                    
-                  }
-              }
+  bool force_redraw = false;
+  bool quit = false;
+  while(!quit)
+    {
+      SDL_Event event;
+      while (SDL_PollEvent(&event))
+        {
+          switch(event.type)
+            {
+              case SDL_QUIT: // FIXME: make this into a GameEvent
+                quit = true;
+                break;
+
+              case SDL_VIDEOEXPOSE: // FIXME: make this into a GameEvent
+                force_redraw = true;
+                break;
+
+              case SDL_VIDEORESIZE:
+                Framebuffer::resize(event.resize.w, event.resize.h);
+                force_redraw = true;
+                break;
+
+              default:
+                break;
+            }
         }
     }
+
+  Framebuffer::deinit();
 }
 
 int

Added: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/image.cpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -0,0 +1,53 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "image.hpp"
+
+Image::Image(const std::string& filename, const Size& size)
+  : tiles(size.width/256 + 1, size.height/256 + 1)
+{
+}
+
+void
+Image::draw()
+{
+#if 0
+  for(int y = 0; y*256 < entry.size.height/2; ++y)
+    for(int x = 0; x*256 < entry.size.width/2; ++x)
+      {
+        Tile tile;
+        if (tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile))
+          {
+            std::cout << "Have tile: " << x << ", " << y << std::endl;
+          }                
+        else
+          {                     
+                    
+          }
+      }
+#endif
+}
+
+/* EOF */


Property changes on: trunk/griv/new/image.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/image.hpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -0,0 +1,54 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_IMAGE_HPP
+#define HEADER_IMAGE_HPP
+
+#include <string>
+#include "math/vector2f.hpp"
+#include "math/size.hpp"
+#include "grid.hpp"
+
+class Surface;
+
+class Image
+{
+private:
+  std::string filename;
+  Size size;
+
+  Vector2f pos;
+
+  Grid<Surface*> tiles;
+
+public:
+  Image(const std::string& filename, const Size& size);
+  
+  void draw();
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/image.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/texture.cpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -37,6 +37,7 @@
     width(width),
     height(height)
 {
+  assert(!"Not implemented");
 #if 0
   assert(surface);
 

Added: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/workspace.cpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -0,0 +1,38 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "workspace.hpp"
+
+Workspace::Workspace()
+{
+}
+
+void
+Workspace::add_image(const std::string& filename, const Size& size)
+{
+  images.push_back(Image(filename, size));
+}
+
+/* EOF */


Property changes on: trunk/griv/new/workspace.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/workspace.hpp
===================================================================
--- trunk/griv/new/workspace.hpp	2008-08-07 21:11:34 UTC (rev 2285)
+++ trunk/griv/new/workspace.hpp	2008-08-07 23:00:28 UTC (rev 2286)
@@ -0,0 +1,48 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_WORKSPACE_HPP
+#define HEADER_WORKSPACE_HPP
+
+#include "image.hpp"
+
+class Workspace
+{
+private:
+  std::vector<Image> images;
+
+public:
+  Workspace();
+
+  void add_image(const std::string& filename, const Size& size);
+
+private:
+  Workspace (const Workspace&);
+  Workspace& operator= (const Workspace&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/workspace.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Fri Aug  8 03:27:55 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 8 Aug 2008 03:27:55 +0200
Subject: [Windstille-commit] r2287 - trunk/griv/new
Message-ID: <200808080127.m781RtaW030629@sheep.berlios.de>

Author: grumbel
Date: 2008-08-08 03:27:54 +0200 (Fri, 08 Aug 2008)
New Revision: 2287

Modified:
   trunk/griv/new/filesystem.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/surface.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/workspace.cpp
   trunk/griv/new/workspace.hpp
Log:
More stuff

Modified: trunk/griv/new/filesystem.cpp
===================================================================
--- trunk/griv/new/filesystem.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/filesystem.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -123,23 +123,7 @@
 
   return dir_list;
 }
-#if 0
-std::string
-Filesystem::getxattr(const std::string& pathname)
-{
-  char buf[2048];
-  int len;
-  if ((len = ::getxattr(pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
-    {
-      if (errno == ENOATTR)
-        return "";
-      else
-        throw std::runtime_error("Couldn't get xattr for " + pathname);
-    }
 
-  return std::string(buf, len);
-}
-#endif
 void
 Filesystem::init()
 {

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/griv.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -147,11 +147,11 @@
         {
           switch(event.type)
             {
-              case SDL_QUIT: // FIXME: make this into a GameEvent
+              case SDL_QUIT:
                 quit = true;
                 break;
 
-              case SDL_VIDEOEXPOSE: // FIXME: make this into a GameEvent
+              case SDL_VIDEOEXPOSE:
                 force_redraw = true;
                 break;
 
@@ -164,6 +164,8 @@
                 break;
             }
         }
+
+      workspace.draw();
     }
 
   Framebuffer::deinit();

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/image.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -23,16 +23,28 @@
 **  02111-1307, USA.
 */
 
+#include "surface.hpp"
 #include "image.hpp"
 
 Image::Image(const std::string& filename, const Size& size)
-  : tiles(size.width/256 + 1, size.height/256 + 1)
+  : tiles((size.width  + 255) / 256, 
+          (size.height + 255) / 256)
 {
 }
 
 void
 Image::draw()
 {
+  for(int y = 0; y < tiles.get_height(); ++y)
+    for(int x = 0; x < tiles.get_width(); ++x)
+      {
+        Surface* tile = tiles(x,y);
+        if (tile)
+          {
+            tile->draw(x*256, y*256);
+          }
+      }
+
 #if 0
   for(int y = 0; y*256 < entry.size.height/2; ++y)
     for(int x = 0; x*256 < entry.size.width/2; ++x)

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/software_surface.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -61,23 +61,6 @@
         assert(FreeImage_GetBPP(bitmap) == 24);
  
         // FIXME: Insert some assert() for colormask here
-
-#if 0
-        SDL_Surface* surface = SDL_CreateRGBSurface(SDL_SWSURFACE, width, height, 32,
-                                                    FI_RGBA_RED_MASK,
-                                                    FI_RGBA_GREEN_MASK,
-                                                    FI_RGBA_BLUE_MASK,
-                                                    FI_RGBA_ALPHA_MASK);
-      
-        SDL_LockSurface(surface);
-        uint8_t* src = FreeImage_GetBits(img);
-        uint8_t* dst = static_cast<uint8_t*>(surface->pixels);
-        for(int y = 0; y < height; ++y)
-          {
-            memcpy(dst + surface->pitch*y, src + pitch*y, width*4);
-          }
-        SDL_UnlockSurface(surface);
-#endif 
       }
   }
 
@@ -200,6 +183,13 @@
   FreeImage_Unload(bitmap);  
 }
 
+void*
+SoftwareSurface::get_data() const
+{
+  // 16 byte alignment !
+  return FreeImage_GetBits(impl->bitmap);
+}
+
 // FreeImage_OpenMemory(BYTE *data FI_DEFAULT(0), DWORD size_in_bytes FI_DEFAULT(0));
 // hmem = FreeImage_OpenMemory();
 // FreeImage_SaveToMemory(fif, dib, hmem, 0);

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/software_surface.hpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -58,6 +58,8 @@
   static void get_size(const std::string& filename, Size& size);
 
   operator bool() const { return impl.get(); }
+
+  void* get_data() const;
 private:
   boost::shared_ptr<SoftwareSurfaceImpl> impl;
 };

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/surface.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -65,6 +65,12 @@
 }
 
 void
+Surface::draw(float x, float y)
+{
+  draw(x, y, width, height);
+}
+
+void
 Surface::draw(float x, float y, float orig_w, float orig_h)
 {
   if (texture)

Modified: trunk/griv/new/surface.hpp
===================================================================
--- trunk/griv/new/surface.hpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/surface.hpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -51,6 +51,7 @@
   Surface(const SoftwareSurface& surface, int x, int y, int w, int h);
   ~Surface();
 
+  void draw(float x, float y);
   void draw(float x, float y, float w, float h);
 
   int get_width()  const { return width; }

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/texture.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -29,6 +29,7 @@
 #include <boost/format.hpp>
 #include <string.h>
 #include "framebuffer.hpp"
+#include "software_surface.hpp"
 #include "texture.hpp"
 
 Texture::Texture(int width, int height, 
@@ -37,16 +38,9 @@
     width(width),
     height(height)
 {
-  assert(!"Not implemented");
-#if 0
   assert(surface);
 
   glGenTextures(1, &handle);
-
-  const SDL_PixelFormat* format = surface->format;
-
-  if(format->BitsPerPixel != 24 && format->BitsPerPixel != 32)
-    throw std::runtime_error("image has not 24 or 32 bit color depth");
   
   GLint maxt;
   glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxt);
@@ -55,26 +49,17 @@
       throw std::runtime_error("Texture size not supported");
     }
 
-  GLint sdl_format;
-  if (format->BytesPerPixel == 3)
-    {
-      sdl_format = GL_RGB;
-    }
-  else if (format->BytesPerPixel == 4)
-    {
-      sdl_format = GL_RGBA;
-    }
-  else
-    {
-      throw std::runtime_error("Texture: Image format not supported");
-    }
-
+  GLint sdl_format = GL_RGB;
+    
   glBindTexture(GL_TEXTURE_2D, handle);
   glEnable(GL_TEXTURE_2D);
 
   glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
   glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
 
+  // FIXME: By setting the right glPixelStorei parameter we should be
+  // able to get this done without dummy
+
   { // Create the texture
     unsigned char dummy[width*height*3];
     memset(dummy, 150, width*height*3);
@@ -89,18 +74,16 @@
 
   assert_gl("packing image texture");
 
-  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->w);
-  glPixelStorei(GL_UNPACK_ALIGNMENT,  4); // FIXME: This alignment is
-                                          // guessed, we better should
-                                          // check it
-
+  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface.get_width());
+  glPixelStorei(GL_UNPACK_ALIGNMENT,  16);
+    
   // Upload the subimage
   glTexSubImage2D(GL_TEXTURE_2D, 0, 
                   0, 0, s_w, s_h, sdl_format,
                   GL_UNSIGNED_BYTE, 
-                  static_cast<Uint8*>(surface->pixels) 
-                  + (surface->pitch * s_y)
-                  + (s_x * surface->format->BytesPerPixel));
+                  (Uint8*)surface.get_data()
+                  + (surface.get_pitch() * s_y)
+                  + (s_x * 3));
 
   assert_gl("creating texture");
 
@@ -111,7 +94,6 @@
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
 
   assert_gl("setting texture parameters");
-#endif
 }
 
 Texture::~Texture()

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/workspace.cpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -34,5 +34,14 @@
 {
   images.push_back(Image(filename, size));
 }
+
+void
+Workspace::draw()
+{
+  for(Images::iterator i = images.begin(); i != images.end(); ++i)
+    {
+      i->draw();
+    }  
+}
 
 /* EOF */

Modified: trunk/griv/new/workspace.hpp
===================================================================
--- trunk/griv/new/workspace.hpp	2008-08-07 23:00:28 UTC (rev 2286)
+++ trunk/griv/new/workspace.hpp	2008-08-08 01:27:54 UTC (rev 2287)
@@ -31,12 +31,14 @@
 class Workspace
 {
 private:
-  std::vector<Image> images;
+  typedef std::vector<Image> Images;
+  Images images;
 
 public:
   Workspace();
 
   void add_image(const std::string& filename, const Size& size);
+  void draw();
 
 private:
   Workspace (const Workspace&);



From grumbel at mail.berlios.de  Fri Aug  8 17:24:53 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 8 Aug 2008 17:24:53 +0200
Subject: [Windstille-commit] r2288 - in trunk/griv/new: . math
Message-ID: <200808081524.m78FOrr9022207@sheep.berlios.de>

Author: grumbel
Date: 2008-08-08 17:24:53 +0200 (Fri, 08 Aug 2008)
New Revision: 2288

Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
   trunk/griv/new/math/vector3f.cpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/software_surface.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/surface.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/texture.hpp
Log:
Plenty of fixing and rewriting of the Texture and Surface classes, code now far enough to draw things to the screen

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/SConstruct	2008-08-08 15:24:53 UTC (rev 2288)
@@ -12,6 +12,7 @@
         'math/rect.cpp',
         'math/vector2i.cpp',
         'math/vector2f.cpp',
+        'math/vector3f.cpp',
         'software_surface.cpp',
         'url.cpp',
         'md5.cpp',

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/griv.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -31,6 +31,7 @@
 #include <vector>
 #include "FreeImage.h"
 
+#include "surface.hpp"
 #include "framebuffer.hpp"
 #include "math/size.hpp"
 #include "math/rect.hpp"
@@ -138,6 +139,8 @@
         }
     }
 
+  Surface surface(SoftwareSurface("test.jpg"));
+
   bool force_redraw = false;
   bool quit = false;
   while(!quit)
@@ -160,12 +163,22 @@
                 force_redraw = true;
                 break;
 
+              case SDL_KEYDOWN:
+                if (event.key.keysym.sym == SDLK_ESCAPE)
+                  {
+                    quit = true;
+                  }
+                break;
+
               default:
                 break;
             }
         }
 
+      Framebuffer::clear();
+      surface.draw(Vector2f(0, 0));
       workspace.draw();
+      Framebuffer::flip();
     }
 
   Framebuffer::deinit();

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/image.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -41,7 +41,7 @@
         Surface* tile = tiles(x,y);
         if (tile)
           {
-            tile->draw(x*256, y*256);
+            tile->draw(Vector2f(x*256, y*256));
           }
       }
 

Modified: trunk/griv/new/math/vector3f.cpp
===================================================================
--- trunk/griv/new/math/vector3f.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/math/vector3f.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -15,7 +15,7 @@
 //  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include <iostream>
-#include "math.hpp"
+#include "../math.hpp"
 #include "vector3f.hpp"
 #include "vector2f.hpp"
 

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/software_surface.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -116,6 +116,13 @@
     return SoftwareSurface(img);
 }
 
+Size
+SoftwareSurface::get_size()  const
+{
+  return Size(FreeImage_GetWidth(impl->bitmap),
+              FreeImage_GetHeight(impl->bitmap));
+}
+
 int
 SoftwareSurface::get_width()  const
 {

Modified: trunk/griv/new/software_surface.hpp
===================================================================
--- trunk/griv/new/software_surface.hpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/software_surface.hpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -43,6 +43,7 @@
   SoftwareSurface(FIBITMAP* bitmap);
   ~SoftwareSurface();
 
+  Size get_size()  const;
   int get_width()  const;
   int get_height() const;
   int get_pitch()  const;

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/surface.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -27,92 +27,107 @@
 #include <assert.h>
 #include "framebuffer.hpp"
 #include "math.hpp"
+#include "math/vector2i.hpp"
+#include "math/vector2f.hpp"
+#include "math/size.hpp"
+#include "math/rect.hpp"
 #include "software_surface.hpp"
 #include "surface.hpp"
-
-Surface::Surface(const SoftwareSurface& surface, int x, int y, int w, int h)
-  : texture(0)
+
+class SurfaceImpl
 {
-  assert(surface);
+public:
+  Texture texture;
+  Size    texture_size;
+  Sizef   uv;
 
-  tex_w = Math::round_to_power_of_two(w);
-  tex_h = Math::round_to_power_of_two(h);
+  Size size;
+  
+  SurfaceImpl(const SoftwareSurface& src, const Rect& srcrect)
+  {
+    assert(src);
 
-  if (tex_w <= 1024 && tex_h <= 1024)
-    {
-      texture = new Texture(tex_w, tex_h, 
-                            surface,
-                            x, y, w, h);
+    texture_size = Size(Math::round_to_power_of_two(srcrect.get_width()),
+                        Math::round_to_power_of_two(srcrect.get_height()));
+
+    texture = Texture(texture_size, src, srcrect);
     
-      u = float(w) / tex_w;
-      v = float(h) / tex_h;
+    uv = Sizef(float(srcrect.get_width())  / texture_size.width,
+               float(srcrect.get_height()) / texture_size.height);
 
-      aspect = float(w) / h;
+    size = Size(srcrect.get_size());
+  }
+  
+  ~SurfaceImpl()
+  {
+  }
 
-      width  = w;
-      height = h;
-    }
-  else
-    {
-      std::cout << "Image violates maximum texture size: "
-                << surface.get_width() << "x" << surface.get_height() << std::endl;
-    }
+  void draw(const Rectf& rect)
+  {
+    if (texture)
+      {
+        texture.bind();
+      
+        glColor3f(1.0f, 1.0f, 1.0f);
+        
+        glBegin(GL_QUADS);
+        glTexCoord2f(      0,        0);
+        glVertex2f(rect.left, rect.top);
+
+        glTexCoord2f(uv.width,        0);
+        glVertex2f(rect.right, rect.top);
+
+        glTexCoord2f(uv.width, uv.height);
+        glVertex2f(rect.right, rect.bottom);
+
+        glTexCoord2f(      0, uv.height);
+        glVertex2f(rect.left, rect.bottom);
+        glEnd();
+      }   
+  }
+
+  void draw(const Vector2f& pos)
+  {
+    draw(Rectf(pos, size));
+  }
+};
+
+Surface::Surface(const SoftwareSurface& src)
+  : impl(new SurfaceImpl(src, Rect(Vector2i(0, 0), src.get_size())))
+{
 }
 
+Surface::Surface(const SoftwareSurface& src, const Rect& srcrect)
+  : impl(new SurfaceImpl(src, srcrect))
+{
+}
+
 Surface::~Surface()
 {
-  delete texture;
 }
 
 void
-Surface::draw(float x, float y)
+Surface::draw(const Vector2f& pos)
 {
-  draw(x, y, width, height);
+  impl->draw(pos);
 }
 
 void
-Surface::draw(float x, float y, float orig_w, float orig_h)
+Surface::draw(const Rectf& rect)
 {
-  if (texture)
-    {
-      texture->bind();
-      
-      glColor3f(1.0f, 1.0f, 1.0f);
+  impl->draw(rect);
+}
 
-      if (0)
-        {
-          float w, h;
-          if (aspect > 1.0f)
-            { // FIXME: This only works as long as w == h
-              w = orig_w;
-              h = orig_h / aspect;
-            }
-          else
-            {
-              w = orig_w * aspect;
-              h = orig_h;
-            }
+int
+Surface::get_width() const 
+{
+  return impl->size.width; 
+}
 
-          x += (orig_w - w)/2;
-          y += (orig_h - h)/2;
-        }
-      float w = orig_w;
-      float h = orig_h;
-
-      glBegin(GL_QUADS);
-      glTexCoord2f(0,0);
-      glVertex2f(x, y);
-
-      glTexCoord2f(u,0);
-      glVertex2f(x + w, y);
-
-      glTexCoord2f(u,v);
-      glVertex2f(x + w, y + h);
-
-      glTexCoord2f(0,v);
-      glVertex2f(x, y + h);
-      glEnd();
-    }
+int
+Surface::get_height() const
+{
+  return impl->size.height; 
 }
-
+
 /* EOF */

Modified: trunk/griv/new/surface.hpp
===================================================================
--- trunk/griv/new/surface.hpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/surface.hpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -30,38 +30,29 @@
 #include <boost/smart_ptr.hpp>
 #include "texture.hpp"
 #include "software_surface.hpp"
-
-/** */
+
+class SurfaceImpl;
+class Rect;
+class Rectf;
+class Vector2f;
+
 class Surface
 {
-private: 
-  Texture* texture;
-  int tex_w;
-  int tex_h;
-
-  float u;
-  float v;
-
-  float aspect;
-
-  int width;
-  int height;
-  
 public:
-  Surface(const SoftwareSurface& surface, int x, int y, int w, int h);
+  Surface(const SoftwareSurface& src, const Rect& srcrect);
+  Surface(const SoftwareSurface& src);
   ~Surface();
 
-  void draw(float x, float y);
-  void draw(float x, float y, float w, float h);
+  void draw(const Vector2f& pos);
+  void draw(const Rectf& rect);
 
-  int get_width()  const { return width; }
-  int get_height() const { return height; }
+  int get_width()  const;
+  int get_height() const;
 
 private:
-  Surface (const Surface&);
-  Surface& operator= (const Surface&);
+  boost::shared_ptr<SurfaceImpl> impl;
 };
-
+
 #endif
 
 /* EOF */

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/texture.cpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -28,95 +28,97 @@
 #include <stdexcept>
 #include <boost/format.hpp>
 #include <string.h>
+
+#include "math/size.hpp"
+#include "math/rect.hpp"
 #include "framebuffer.hpp"
 #include "software_surface.hpp"
 #include "texture.hpp"
-
-Texture::Texture(int width, int height, 
-                 const SoftwareSurface& surface, int s_x, int s_y, int s_w, int s_h)
-  : handle(0),
-    width(width),
-    height(height)
+
+class TextureImpl
 {
-  assert(surface);
+public:
+  GLuint handle;
+  Size   size;
 
-  glGenTextures(1, &handle);
+  TextureImpl(const Size& size_,
+              const SoftwareSurface& src, const Rect& srcrect)
+    : size(size_)
+  {
+    glGenTextures(1, &handle);
   
-  GLint maxt;
-  glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxt);
-  if(width > maxt || height > maxt)
-    {
-      throw std::runtime_error("Texture size not supported");
-    }
-
-  GLint sdl_format = GL_RGB;
+    assert(src);
     
-  glBindTexture(GL_TEXTURE_2D, handle);
-  glEnable(GL_TEXTURE_2D);
+    glBindTexture(GL_TEXTURE_2D, handle);
+    glEnable(GL_TEXTURE_2D);
 
-  glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
-  glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
-
-  // FIXME: By setting the right glPixelStorei parameter we should be
-  // able to get this done without dummy
-
-  { // Create the texture
-    unsigned char dummy[width*height*3];
-    memset(dummy, 150, width*height*3);
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
-                 width,
-                 height,
-                 0,
+                 size.width, size.height,
+                 0, /* border */
                  GL_RGB,
                  GL_UNSIGNED_BYTE,
-                 dummy);
-  }
+                 0 /* pixels */);
 
-  assert_gl("packing image texture");
+    assert_gl("packing image texture");
 
-  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface.get_width());
-  glPixelStorei(GL_UNPACK_ALIGNMENT,  16);
+    assert(src.get_pitch() % src.get_width() == 0);
+
+    glPixelStorei(GL_UNPACK_ALIGNMENT,  1);
+    glPixelStorei(GL_UNPACK_ROW_LENGTH, src.get_pitch()/3);
     
-  // Upload the subimage
-  glTexSubImage2D(GL_TEXTURE_2D, 0, 
-                  0, 0, s_w, s_h, sdl_format,
-                  GL_UNSIGNED_BYTE, 
-                  (Uint8*)surface.get_data()
-                  + (surface.get_pitch() * s_y)
-                  + (s_x * 3));
+    // Upload the subimage
+    glTexSubImage2D(GL_TEXTURE_2D, 0, 
+                    0, 0, srcrect.get_width(), srcrect.get_height(), GL_RGB,
+                    GL_UNSIGNED_BYTE, 
+                    (Uint8*)src.get_data() + (src.get_pitch() * srcrect.top) + (srcrect.left * 3));
 
-  assert_gl("creating texture");
+    assert_gl("creating texture");
 
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
-  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);
 
-  assert_gl("setting texture parameters");
+    assert_gl("setting texture parameters");
+  }
+
+  ~TextureImpl()
+  {
+    glDeleteTextures(1, &handle);    
+  }
+};
+
+Texture::Texture()
+{
 }
 
+Texture::Texture(const Size& size,
+                 const SoftwareSurface& src, const Rect& srcrect)
+  : impl(new TextureImpl(size, src, srcrect))
+{
+}
+
 Texture::~Texture()
 {
-  glDeleteTextures(1, &handle);
 }
 
 void
 Texture::bind()
 {
-  glBindTexture(GL_TEXTURE_2D, handle);
+  glBindTexture(GL_TEXTURE_2D, impl->handle);
 }
 
 int
 Texture::get_width() const
 {
-  return width;
+  return impl->size.width;
 }
 
 int
 Texture::get_height() const
 {
-  return height;
+  return impl->size.height;
 }
-
+
 /* EOF */

Modified: trunk/griv/new/texture.hpp
===================================================================
--- trunk/griv/new/texture.hpp	2008-08-08 01:27:54 UTC (rev 2287)
+++ trunk/griv/new/texture.hpp	2008-08-08 15:24:53 UTC (rev 2288)
@@ -26,31 +26,32 @@
 #ifndef HEADER_TEXTURE_HPP
 #define HEADER_TEXTURE_HPP
 
+#include <boost/shared_ptr.hpp>
 #include <GL/gl.h>
 #include <GL/glu.h>
 #include "SDL.h"
 
+class Rect;
+class Size;
 class SoftwareSurface;
+class TextureImpl;
 
 class Texture
 {
-private:
-  GLuint handle;
-
-  int width;
-  int height;
-
 public:
-  Texture(int w, int h, const SoftwareSurface& surface, int s_x, int s_y, int s_w, int s_h);
+  Texture();
+  Texture(const Size& size, const SoftwareSurface& src, const Rect& srcrect);
   ~Texture();
 
   int get_width() const;
   int get_height() const;
   
   void bind();
+
+  operator bool() const { return impl.get(); }
+
 private:
-  Texture (const Texture&);
-  Texture& operator= (const Texture&);
+  boost::shared_ptr<TextureImpl> impl;
 };
 
 #endif



From grumbel at mail.berlios.de  Fri Aug  8 17:28:18 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 8 Aug 2008 17:28:18 +0200
Subject: [Windstille-commit] r2289 - trunk/griv/new
Message-ID: <200808081528.m78FSIEB022410@sheep.berlios.de>

Author: grumbel
Date: 2008-08-08 17:28:18 +0200 (Fri, 08 Aug 2008)
New Revision: 2289

Modified:
   trunk/griv/new/surface.cpp
   trunk/griv/new/texture.cpp
Log:
- fixed issue with color format and image being upsidedown

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-08 15:24:53 UTC (rev 2288)
+++ trunk/griv/new/surface.cpp	2008-08-08 15:28:18 UTC (rev 2289)
@@ -71,16 +71,16 @@
         glColor3f(1.0f, 1.0f, 1.0f);
         
         glBegin(GL_QUADS);
-        glTexCoord2f(      0,        0);
+        glTexCoord2f(      0, uv.height);
         glVertex2f(rect.left, rect.top);
 
-        glTexCoord2f(uv.width,        0);
+        glTexCoord2f(uv.width, uv.height);
         glVertex2f(rect.right, rect.top);
 
-        glTexCoord2f(uv.width, uv.height);
+        glTexCoord2f(uv.width, 0);
         glVertex2f(rect.right, rect.bottom);
 
-        glTexCoord2f(      0, uv.height);
+        glTexCoord2f(      0,  0);
         glVertex2f(rect.left, rect.bottom);
         glEnd();
       }   

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-08 15:24:53 UTC (rev 2288)
+++ trunk/griv/new/texture.cpp	2008-08-08 15:28:18 UTC (rev 2289)
@@ -68,7 +68,7 @@
     
     // Upload the subimage
     glTexSubImage2D(GL_TEXTURE_2D, 0, 
-                    0, 0, srcrect.get_width(), srcrect.get_height(), GL_RGB,
+                    0, 0, srcrect.get_width(), srcrect.get_height(), GL_BGR,
                     GL_UNSIGNED_BYTE, 
                     (Uint8*)src.get_data() + (src.get_pitch() * srcrect.top) + (srcrect.left * 3));
 



From grumbel at mail.berlios.de  Fri Aug  8 19:43:13 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 8 Aug 2008 19:43:13 +0200
Subject: [Windstille-commit] r2290 - trunk/griv/new
Message-ID: <200808081743.m78HhD9o026978@sheep.berlios.de>

Author: grumbel
Date: 2008-08-08 19:43:12 +0200 (Fri, 08 Aug 2008)
New Revision: 2290

Added:
   trunk/griv/new/test.jpg
   trunk/griv/new/viewer.cpp
   trunk/griv/new/viewer.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/griv.cpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/workspace.cpp
   trunk/griv/new/workspace.hpp
Log:
Added viewer class, its now possible to view an image and zoom and move around

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/SConstruct	2008-08-08 17:43:12 UTC (rev 2290)
@@ -18,6 +18,7 @@
         'md5.cpp',
         'sqlite.cpp',
         'surface.cpp',
+        'viewer.cpp',
         'texture.cpp',
         'image.cpp',
         'workspace.cpp',

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/griv.cpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -43,6 +43,7 @@
 #include "tile_database.hpp"
 #include "filesystem.hpp"
 #include "workspace.hpp"
+#include "viewer.hpp"
 #include "griv.hpp"
 
 Griv::Griv()
@@ -139,46 +140,26 @@
         }
     }
 
-  Surface surface(SoftwareSurface("test.jpg"));
+  Viewer viewer;
 
-  bool force_redraw = false;
-  bool quit = false;
-  while(!quit)
+  Uint32 ticks = SDL_GetTicks();
+  while(!viewer.done())
     {
       SDL_Event event;
       while (SDL_PollEvent(&event))
-        {
-          switch(event.type)
-            {
-              case SDL_QUIT:
-                quit = true;
-                break;
+        viewer.process_event(event);
 
-              case SDL_VIDEOEXPOSE:
-                force_redraw = true;
-                break;
+      Uint32 cticks = SDL_GetTicks();
+      float delta = (cticks - ticks) / 1000.0f;
+      ticks = cticks;
 
-              case SDL_VIDEORESIZE:
-                Framebuffer::resize(event.resize.w, event.resize.h);
-                force_redraw = true;
-                break;
+      viewer.update(delta);
 
-              case SDL_KEYDOWN:
-                if (event.key.keysym.sym == SDLK_ESCAPE)
-                  {
-                    quit = true;
-                  }
-                break;
-
-              default:
-                break;
-            }
-        }
-
       Framebuffer::clear();
-      surface.draw(Vector2f(0, 0));
-      workspace.draw();
+      viewer.draw();
       Framebuffer::flip();
+
+      SDL_Delay(10);
     }
 
   Framebuffer::deinit();
@@ -215,7 +196,7 @@
 
   return 0;
 }
-
+  
 int main(int argc, char** argv)
 {
   try 
@@ -229,5 +210,5 @@
       std::cout << "Exception: " << err.what() << std::endl;
     }
 }
-
+  
 /* EOF */

Added: trunk/griv/new/test.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/new/test.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/texture.cpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -61,7 +61,8 @@
 
     assert_gl("packing image texture");
 
-    assert(src.get_pitch() % src.get_width() == 0);
+    //std::cout << "pitch: " << src.get_pitch() << " width: " << src.get_width() << std::endl;
+    assert(src.get_pitch() % 3 == 0);
 
     glPixelStorei(GL_UNPACK_ALIGNMENT,  1);
     glPixelStorei(GL_UNPACK_ROW_LENGTH, src.get_pitch()/3);

Added: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/viewer.cpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -0,0 +1,187 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "framebuffer.hpp"
+#include "software_surface.hpp"
+#include "math/vector2f.hpp"
+#include "math/rect.hpp"
+#include "viewer.hpp"
+
+ViewerState::ViewerState()
+  : scale(1.0f),
+    offset(0.0f, 0.0f)
+{
+}
+
+void
+ViewerState::zoom(float factor, const Vector2i& pos)
+{
+  scale *= factor;
+
+  offset = Vector2f(pos) - ((Vector2f(pos) - offset) * factor);
+}
+
+void
+ViewerState::move(const Vector2i& pos)
+{
+  offset.x += pos.x;
+    offset.y += pos.y;
+}
+
+Vector2f
+ViewerState::screen2world(const Vector2i& pos) const
+{
+  return (Vector2f(pos) - offset) / scale;
+}
+
+Rectf
+ViewerState::screen2world(const Rect&) const
+{
+  return Rectf();
+}
+
+Viewer::Viewer()
+  : quit(false),
+    force_redraw(false),
+    drag_n_drop(false),
+    surface(SoftwareSurface("test.jpg"))
+{
+}
+
+void
+Viewer::process_event(const SDL_Event& event)
+{
+  switch(event.type)
+    {
+      case SDL_QUIT:
+        quit = true;
+        break;
+
+      case SDL_VIDEOEXPOSE:
+        force_redraw = true;
+        break;
+
+      case SDL_VIDEORESIZE:
+        Framebuffer::resize(event.resize.w, event.resize.h);
+        force_redraw = true;
+        break;
+
+      case SDL_KEYDOWN:
+        switch(event.key.keysym.sym)
+          {
+            case SDLK_ESCAPE:
+              quit = true;
+              break;
+
+            default:
+              // ignore all other keypresses
+              break;
+          }
+        break;
+
+      case SDL_MOUSEMOTION:
+        mouse_pos = Vector2i(event.motion.x,
+                             event.motion.y);
+        
+        if (drag_n_drop)
+          {
+            state.move(Vector2i(event.motion.xrel, event.motion.yrel));
+          }
+        break;
+
+
+      case SDL_MOUSEBUTTONDOWN:
+      case SDL_MOUSEBUTTONUP:
+        switch(event.button.button)
+          {
+            case SDL_BUTTON_WHEELUP:
+              if (event.button.state == SDL_PRESSED)
+                {
+                  state.zoom(1.1f, mouse_pos);
+                }
+              break;
+
+            case SDL_BUTTON_WHEELDOWN:
+              if (event.button.state == SDL_PRESSED)
+                {
+                  state.zoom(1.0f/1.1f, mouse_pos);
+                }
+              break;
+                  
+            case SDL_BUTTON_LEFT:
+              if (event.button.state == SDL_PRESSED)
+                  zoom_button = 1;
+              else
+                  zoom_button = 0;
+              break;
+
+            case SDL_BUTTON_RIGHT:
+              if (event.button.state == SDL_PRESSED)
+                  zoom_button = -1;
+              else
+                  zoom_button = 0;
+              break;
+
+            case SDL_BUTTON_MIDDLE:
+              std::cout << state.screen2world(mouse_pos) << std::endl;
+
+              drag_n_drop = event.button.state;
+              break;
+          }
+        break;
+
+      default:
+        break;
+    }
+}
+
+void
+Viewer::draw()
+{
+  glPushMatrix();
+  
+  glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
+  glScalef(state.get_scale(), state.get_scale(), 1.0f);
+
+  surface.draw(Vector2f(0, 0));
+
+  glPopMatrix();
+}
+
+void
+Viewer::update(float delta)
+{
+  if (zoom_button == -1)
+    {
+      state.zoom(1.0f / (1.0f + 2.0f * delta), mouse_pos);
+    }
+  else if (zoom_button == 1)
+    {
+      state.zoom(1.0f + 2.0f * delta, mouse_pos);
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/new/viewer.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/viewer.hpp
===================================================================
--- trunk/griv/new/viewer.hpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/viewer.hpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -0,0 +1,81 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_VIEWER_HPP
+#define HEADER_VIEWER_HPP
+
+#include "SDL.h"
+#include "surface.hpp"
+#include "math/vector2i.hpp"
+
+class ViewerState
+{
+private:
+  float    scale;
+  Vector2f offset;
+  
+public:
+  ViewerState();
+
+  void zoom(float factor, const Vector2i& pos);
+  void move(const Vector2i& pos);
+
+  Vector2f screen2world(const Vector2i&) const;
+  Rectf    screen2world(const Rect&) const;
+
+  Vector2f get_offset() const { return offset; }
+  float    get_scale()  const { return scale; }
+};
+
+class Viewer
+{
+private:
+  bool quit;
+  bool force_redraw;
+  bool drag_n_drop;
+  int  zoom_button;
+
+  Vector2i mouse_pos;
+
+  ViewerState state;
+
+  Surface surface;
+  
+public:
+  Viewer();
+
+  void draw();
+  void update(float delta);
+  void process_event(const SDL_Event& event);
+  bool done() const { return quit; }
+
+private:
+  Viewer (const Viewer&);
+  Viewer& operator= (const Viewer&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/viewer.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/workspace.cpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -36,7 +36,7 @@
 }
 
 void
-Workspace::draw()
+Workspace::draw(const Rectf& cliprect, float scale)
 {
   for(Images::iterator i = images.begin(); i != images.end(); ++i)
     {

Modified: trunk/griv/new/workspace.hpp
===================================================================
--- trunk/griv/new/workspace.hpp	2008-08-08 15:28:18 UTC (rev 2289)
+++ trunk/griv/new/workspace.hpp	2008-08-08 17:43:12 UTC (rev 2290)
@@ -28,6 +28,8 @@
 
 #include "image.hpp"
 
+class Rectf;
+
 class Workspace
 {
 private:
@@ -38,7 +40,7 @@
   Workspace();
 
   void add_image(const std::string& filename, const Size& size);
-  void draw();
+  void draw(const Rectf& cliprect, float scale);
 
 private:
   Workspace (const Workspace&);



From grumbel at mail.berlios.de  Sat Aug  9 00:39:42 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 00:39:42 +0200
Subject: [Windstille-commit] r2291 - in trunk/griv/new: . math
Message-ID: <200808082239.m78Mdghi031134@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 00:39:40 +0200 (Sat, 09 Aug 2008)
New Revision: 2291

Modified:
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/framebuffer.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/math/rect.cpp
   trunk/griv/new/math/rect.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/viewer.cpp
   trunk/griv/new/viewer.hpp
   trunk/griv/new/workspace.cpp
   trunk/griv/new/workspace.hpp
Log:
Detecting which tiles need to get drawn looks alright now

Modified: trunk/griv/new/framebuffer.cpp
===================================================================
--- trunk/griv/new/framebuffer.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/framebuffer.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -27,6 +27,7 @@
 #include <X11/Xlib.h>
 #include <GL/gl.h>
 #include "SDL_syswm.h"
+#include "math/rect.hpp"
 #include "framebuffer.hpp"
 
 SDL_SysWMinfo syswm;
@@ -123,19 +124,30 @@
 }
 
 void
-Framebuffer::lock()
+Framebuffer::draw_rect(const Rectf& rect)
 {
-  syswm.info.x11.lock_func();
-  XLockDisplay(syswm.info.x11.display);
-  syswm.info.x11.unlock_func();
-}
+  glEnable(GL_BLEND);
+  glDisable(GL_TEXTURE_2D);
+  glColor4f(1.0f, 0.0f, 1.0f, 0.25f);
+  glBlendFunc(GL_SRC_ALPHA, GL_ONE);
+        
+  glBegin(GL_QUADS);
+  glVertex2f(rect.left,  rect.top);
+  glVertex2f(rect.right, rect.top);
+  glVertex2f(rect.right, rect.bottom);
+  glVertex2f(rect.left,  rect.bottom);
+  glEnd();
 
-void
-Framebuffer::unlock()
-{
-  syswm.info.x11.lock_func();
-  XUnlockDisplay(syswm.info.x11.display);
-  syswm.info.x11.unlock_func();
+  glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
+
+  glBegin(GL_LINE_LOOP);
+  glVertex2f(rect.left,  rect.top);
+  glVertex2f(rect.right, rect.top);
+  glVertex2f(rect.right, rect.bottom);
+  glVertex2f(rect.left,  rect.bottom);
+  glEnd();
+
+  glDisable(GL_BLEND);
 }
 
 /* EOF */

Modified: trunk/griv/new/framebuffer.hpp
===================================================================
--- trunk/griv/new/framebuffer.hpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/framebuffer.hpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -33,6 +33,8 @@
 #include <math.h>
 #include "SDL.h"
 
+class Rectf;
+
 static inline void assert_gl(const char* message)
 {
   GLenum error = glGetError();
@@ -65,8 +67,7 @@
   static void flip();
   static void clear();
 
-  static void lock();
-  static void unlock();
+  static void draw_rect(const Rectf& rect);
 };
 
 #endif

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/griv.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -81,11 +81,11 @@
           SoftwareSurface surface(filenames[i]);
           std::cout << "Image loading" << std::endl;      
 
-          int scale = 0;
+          int scale = 1;
 
           do
             {
-              if (scale != 0)
+              if (scale != 1)
                 {
                   surface = surface.scale(Size(surface.get_width()/2, 
                                                surface.get_height()/2));
@@ -140,6 +140,8 @@
         }
     }
 
+  workspace.layout();
+
   Viewer viewer;
 
   Uint32 ticks = SDL_GetTicks();
@@ -156,7 +158,7 @@
       viewer.update(delta);
 
       Framebuffer::clear();
-      viewer.draw();
+      viewer.draw(workspace);
       Framebuffer::flip();
 
       SDL_Delay(10);

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/image.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -23,43 +23,86 @@
 **  02111-1307, USA.
 */
 
+#include "math/rect.hpp"
+#include "framebuffer.hpp"
 #include "surface.hpp"
+#include "math.hpp"
 #include "image.hpp"
 
 Image::Image(const std::string& filename, const Size& size)
-  : tiles((size.width  + 255) / 256, 
+  : filename(filename),
+    size(size),
+    tiles((size.width  + 255) / 256, 
           (size.height + 255) / 256)
 {
 }
 
 void
-Image::draw()
+Image::set_pos(const Vector2f& pos_)
 {
-  for(int y = 0; y < tiles.get_height(); ++y)
-    for(int x = 0; x < tiles.get_width(); ++x)
-      {
-        Surface* tile = tiles(x,y);
-        if (tile)
-          {
-            tile->draw(Vector2f(x*256, y*256));
-          }
-      }
+  pos = pos_;
+}
 
-#if 0
-  for(int y = 0; y*256 < entry.size.height/2; ++y)
-    for(int x = 0; x*256 < entry.size.width/2; ++x)
-      {
-        Tile tile;
-        if (tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile))
-          {
-            std::cout << "Have tile: " << x << ", " << y << std::endl;
-          }                
-        else
-          {                     
-                    
-          }
-      }
-#endif
+Vector2f
+Image::get_pos() const
+{
+  return pos;
 }
+
+float
+Image::get_width() const
+{
+  return size.width;
+}
+
+float
+Image::get_height() const
+{
+  return size.height;
+}
+
+void
+Image::draw(const Rectf& cliprect, float fscale)
+{
+  Rectf image_rect(pos, Sizef(size));
+  Rectf image_region = image_rect.clip_to(cliprect);
+
+  Framebuffer::draw_rect(image_rect);
+  //Framebuffer::draw_rect(image_region);
+
+  if (cliprect.is_overlapped(image_rect))
+    {
+      // scale factor for requesting the tile from the TileDatabase
+      int tile_scale = Math::clamp(1, static_cast<int>(1 / fscale), 32);
+      int scale_factor = (1 << (tile_scale-1));
+
+      int scaled_width  = size.width  / scale_factor;
+      int scaled_height = size.height / scale_factor;
+
+      if (scaled_width  < 256 && scaled_height < 256)
+        { // So small that only one tile is to be drawn
+          Framebuffer::draw_rect(Rectf(pos, size));
+        }
+      else
+        {
+          int tilesize = 256 * scale_factor;
+
+          int start_x = (image_region.left  - pos.x)/tilesize;
+          int end_x   = (image_region.right - pos.x)/tilesize + 1;
+
+          int start_y = (image_region.top    - pos.y)/tilesize;
+          int end_y   = (image_region.bottom - pos.y)/tilesize + 1;
+
+          for(int y = start_y; y < end_y; y += 1)
+            for(int x = start_x; x < end_x; x += 1)
+              {
+                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                                             Sizef(tilesize, tilesize))); //).clip_to(image_rect));
+              }
+
+          // tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile)
+        }
+    }
+}
 
 /* EOF */

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/image.hpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -30,8 +30,11 @@
 #include "math/vector2f.hpp"
 #include "math/size.hpp"
 #include "grid.hpp"
-
+
 class Surface;
+class Size;
+class Rectf;
+class Vector2f;
 
 class Image
 {
@@ -45,8 +48,13 @@
 
 public:
   Image(const std::string& filename, const Size& size);
+
+  void set_pos(const Vector2f& pos);
+  void draw(const Rectf& cliprect, float scale);
   
-  void draw();
+  Vector2f get_pos() const;
+  float get_width() const;
+  float get_height() const;
 };
 
 #endif

Modified: trunk/griv/new/math/rect.cpp
===================================================================
--- trunk/griv/new/math/rect.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/math/rect.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -39,4 +39,10 @@
            << rect.right << ", " << rect.bottom << ")";
 }
 
+std::ostream& operator<<(std::ostream& s, const Rectf& rect)
+{
+  return s << "Rect(" << rect.left << ", " << rect.top << ", "
+           << rect.right << ", " << rect.bottom << ")";
+}
+
 /* EOF */

Modified: trunk/griv/new/math/rect.hpp
===================================================================
--- trunk/griv/new/math/rect.hpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/math/rect.hpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -31,6 +31,7 @@
 #define __MATH_RECT_HPP__
 
 #include <iosfwd>
+#include "../math.hpp"
 #include "origin.hpp"
 #include "vector3f.hpp"
 #include "size.hpp"
@@ -344,6 +345,14 @@
                  right  + f,
                  bottom + f);
   }
+
+  Rectf clip_to(const Rectf& cliprect) const 
+  {
+    return Rectf(Math::max(left,   cliprect.left),
+                 Math::max(top,    cliprect.top),
+                 Math::min(right,  cliprect.right),
+                 Math::min(bottom, cliprect.bottom));
+  }
 };
 
 inline Rect::Rect(const Rectf& rect)
@@ -354,6 +363,7 @@
 {}
 
 std::ostream& operator<<(std::ostream& s, const Rect& r);
+std::ostream& operator<<(std::ostream& s, const Rectf& r);
 
 #endif
 

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/surface.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -67,7 +67,7 @@
     if (texture)
       {
         texture.bind();
-      
+        glEnable(GL_TEXTURE_2D);
         glColor3f(1.0f, 1.0f, 1.0f);
         
         glBegin(GL_QUADS);

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/texture.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -75,8 +75,8 @@
 
     assert_gl("creating texture");
 
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); //GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); //GL_LINEAR);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);

Modified: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/viewer.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -28,6 +28,7 @@
 #include "software_surface.hpp"
 #include "math/vector2f.hpp"
 #include "math/rect.hpp"
+#include "workspace.hpp"
 #include "viewer.hpp"
 
 ViewerState::ViewerState()
@@ -58,9 +59,12 @@
 }
 
 Rectf
-ViewerState::screen2world(const Rect&) const
+ViewerState::screen2world(const Rect& rect) const
 {
-  return Rectf();
+  return Rectf((rect.left   - offset.x) / scale,
+               (rect.top    - offset.y) / scale,
+               (rect.right  - offset.x) / scale,
+               (rect.bottom - offset.y) / scale);
 }
 
 Viewer::Viewer()
@@ -146,7 +150,7 @@
               break;
 
             case SDL_BUTTON_MIDDLE:
-              std::cout << state.screen2world(mouse_pos) << std::endl;
+              //std::cout << state.screen2world(mouse_pos) << std::endl;
 
               drag_n_drop = event.button.state;
               break;
@@ -159,13 +163,30 @@
 }
 
 void
-Viewer::draw()
+Viewer::draw(Workspace& workspace)
 {
+  bool clip_debug = true;
+
   glPushMatrix();
-  
+
+  if (clip_debug)
+    {
+      glTranslatef(Framebuffer::get_width()/2, Framebuffer::get_height()/2, 0.0f);
+      glScalef(0.5f, 0.5f, 1.0f);
+      glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
+    }
+
   glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
   glScalef(state.get_scale(), state.get_scale(), 1.0f);
 
+  Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
+
+  if (clip_debug)
+    Framebuffer::draw_rect(cliprect);
+  
+  workspace.draw(cliprect,
+                 state.get_scale());
+
   surface.draw(Vector2f(0, 0));
 
   glPopMatrix();
@@ -176,11 +197,11 @@
 {
   if (zoom_button == -1)
     {
-      state.zoom(1.0f / (1.0f + 2.0f * delta), mouse_pos);
+      state.zoom(1.0f / (1.0f + 4.0f * delta), mouse_pos);
     }
   else if (zoom_button == 1)
     {
-      state.zoom(1.0f + 2.0f * delta, mouse_pos);
+      state.zoom(1.0f + 4.0f * delta, mouse_pos);
     }
 }
 

Modified: trunk/griv/new/viewer.hpp
===================================================================
--- trunk/griv/new/viewer.hpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/viewer.hpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -30,6 +30,8 @@
 #include "surface.hpp"
 #include "math/vector2i.hpp"
 
+class Workspace;
+
 class ViewerState
 {
 private:
@@ -66,7 +68,7 @@
 public:
   Viewer();
 
-  void draw();
+  void draw(Workspace& workspace);
   void update(float delta);
   void process_event(const SDL_Event& event);
   bool done() const { return quit; }

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/workspace.cpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -36,11 +36,25 @@
 }
 
 void
+Workspace::layout()
+{
+  if (!images.empty())
+    {
+      float x_pos = 0;
+      for(Images::iterator i = images.begin(); i != images.end(); ++i)
+        {
+          i->set_pos(Vector2f(x_pos, 0.0f));
+          x_pos += i->get_width() + 20/*spacing*/;
+        }
+    }
+}
+
+void
 Workspace::draw(const Rectf& cliprect, float scale)
 {
   for(Images::iterator i = images.begin(); i != images.end(); ++i)
     {
-      i->draw();
+      i->draw(cliprect, scale);
     }  
 }
 

Modified: trunk/griv/new/workspace.hpp
===================================================================
--- trunk/griv/new/workspace.hpp	2008-08-08 17:43:12 UTC (rev 2290)
+++ trunk/griv/new/workspace.hpp	2008-08-08 22:39:40 UTC (rev 2291)
@@ -42,6 +42,8 @@
   void add_image(const std::string& filename, const Size& size);
   void draw(const Rectf& cliprect, float scale);
 
+  void layout();
+
 private:
   Workspace (const Workspace&);
   Workspace& operator= (const Workspace&);



From grumbel at mail.berlios.de  Sat Aug  9 02:03:07 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 02:03:07 +0200
Subject: [Windstille-commit] r2292 - in trunk/griv/new: . math
Message-ID: <200808090003.m79037QG016830@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 02:03:06 +0200 (Sat, 09 Aug 2008)
New Revision: 2292

Modified:
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/math/size.hpp
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/surface.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
   trunk/griv/new/viewer.cpp
   trunk/griv/new/workspace.cpp
   trunk/griv/new/workspace.hpp
Log:
Displaying pictures at higher zoom levels now somewhat working, lower zoom levels not so much

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/griv.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -136,11 +136,11 @@
         }
       else
         {
-          workspace.add_image(entry.filename, entry.size);
+          workspace.add_image(entry.fileid, entry.filename, entry.size);
         }
     }
 
-  workspace.layout();
+  workspace.layout(4,3);
 
   Viewer viewer;
 

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/image.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -27,14 +27,28 @@
 #include "framebuffer.hpp"
 #include "surface.hpp"
 #include "math.hpp"
+#include "tile_database.hpp"
 #include "image.hpp"
+
+uint32_t make_cache_id(int x, int y, int tile_scale)
+{
+  return x | (y << 8) | (tile_scale << 16);
+}
 
-Image::Image(const std::string& filename, const Size& size)
-  : filename(filename),
-    size(size),
-    tiles((size.width  + 255) / 256, 
-          (size.height + 255) / 256)
+Image::Image(int fileid, const std::string& filename, const Size& size)
+  : fileid(fileid),
+    filename(filename),
+    size(size)    
 {
+  int scale = 1;
+  Size tmpsize = size;
+  do {
+    tmpsize.width /= 2;
+    tmpsize.height /= 2;
+    scale += 1;
+  } while (tmpsize.width > 32 ||
+           tmpsize.height > 32);
+  max_scale = scale;
 }
 
 void
@@ -67,13 +81,13 @@
   Rectf image_rect(pos, Sizef(size));
   Rectf image_region = image_rect.clip_to(cliprect);
 
-  Framebuffer::draw_rect(image_rect);
+  //Framebuffer::draw_rect(image_rect);
   //Framebuffer::draw_rect(image_region);
 
   if (cliprect.is_overlapped(image_rect))
     {
       // scale factor for requesting the tile from the TileDatabase
-      int tile_scale = Math::clamp(1, static_cast<int>(1 / fscale), 32);
+      int tile_scale = Math::clamp(1, static_cast<int>(1 / fscale), max_scale);
       int scale_factor = (1 << (tile_scale-1));
 
       int scaled_width  = size.width  / scale_factor;
@@ -82,6 +96,28 @@
       if (scaled_width  < 256 && scaled_height < 256)
         { // So small that only one tile is to be drawn
           Framebuffer::draw_rect(Rectf(pos, size));
+
+          uint32_t cache_id = make_cache_id(0, 0, tile_scale);
+          Cache::iterator i = cache.find(cache_id);
+
+          if (i == cache.end())
+            {
+              Tile tile;
+              if (TileDatabase::current()->get_tile(fileid, tile_scale, 0, 0, tile))
+                {                   
+                  Surface surface(tile.surface);
+                  cache[cache_id] = surface;
+                  surface.draw(Rectf(pos, size));
+                }
+              else
+                {
+                  cache[cache_id] = Surface();
+                }
+            }
+          else
+            {
+              i->second.draw(Rectf(pos, size));
+            }
         }
       else
         {
@@ -96,13 +132,41 @@
           for(int y = start_y; y < end_y; y += 1)
             for(int x = start_x; x < end_x; x += 1)
               {
-                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                                             Sizef(tilesize, tilesize))); //).clip_to(image_rect));
+                uint32_t cache_id = make_cache_id(x, y, tile_scale);
+                Cache::iterator i = cache.find(cache_id);
+
+                if (i == cache.end())
+                  {
+                    Tile tile;
+                    if (TileDatabase::current()->get_tile(fileid, tile_scale, x, y, tile))
+                      {                   
+                        Surface surface(tile.surface);
+                        cache[cache_id] = surface;
+                        surface.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
+                                           surface.get_size() * tile_scale));
+                      }
+                    else
+                      {
+                        // Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                        // Sizef(tilesize, tilesize)));
+                      }
+                  }
+                else
+                  {
+                    i->second.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
+                                         i->second.get_size() * scale_factor));
+                    // Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                    //                             Sizef(tilesize, tilesize)));
+                  }
               }
 
-          // tile_db.get_tile(entry.fileid, 1/*scale*/, x, y, tile)
+          
         }
     }
+  else
+    {
+      cache.clear();
+    }
 }
 
 /* EOF */

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/image.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -26,10 +26,12 @@
 #ifndef HEADER_IMAGE_HPP
 #define HEADER_IMAGE_HPP
 
+#include <map>
 #include <string>
 #include "math/vector2f.hpp"
 #include "math/size.hpp"
 #include "grid.hpp"
+#include "surface.hpp"
 
 class Surface;
 class Size;
@@ -39,15 +41,18 @@
 class Image
 {
 private:
+  int fileid;
   std::string filename;
   Size size;
+  int max_scale;
 
   Vector2f pos;
 
-  Grid<Surface*> tiles;
+  typedef std::map<uint32_t, Surface> Cache; 
+  Cache cache;
 
 public:
-  Image(const std::string& filename, const Size& size);
+  Image(int fileid, const std::string& filename, const Size& size);
 
   void set_pos(const Vector2f& pos);
   void draw(const Rectf& cliprect, float scale);

Modified: trunk/griv/new/math/size.hpp
===================================================================
--- trunk/griv/new/math/size.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/math/size.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -161,6 +161,11 @@
 	  height(static_cast<int>(s.height))
 {}
 
+inline Sizef operator*(const Sizef& s, float f)
+{
+  return Sizef(s.width * f, s.height * f);
+}
+
 std::ostream& operator<<(std::ostream& os, const Size& size);
 
 #endif

Modified: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/sqlite.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -74,7 +74,8 @@
 }
 
 SQLiteStatement::SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt)
-  : db(db)
+  : db(db),
+    stmt(0)
 {
   prepare(sqlstmt);
 }

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/sqlite.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -97,6 +97,10 @@
 
   void execute();
   SQLiteReader execute_query();
+
+private:
+  SQLiteStatement(const SQLiteStatement&);
+  SQLiteStatement();
 };
 
 #endif

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/surface.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -92,6 +92,10 @@
   }
 };
 
+Surface::Surface()
+{
+}
+
 Surface::Surface(const SoftwareSurface& src)
   : impl(new SurfaceImpl(src, Rect(Vector2i(0, 0), src.get_size())))
 {
@@ -109,25 +113,42 @@
 void
 Surface::draw(const Vector2f& pos)
 {
-  impl->draw(pos);
+  if (impl.get())
+    impl->draw(pos);
 }
 
 void
 Surface::draw(const Rectf& rect)
 {
-  impl->draw(rect);
+  if (impl.get())
+    impl->draw(rect);
 }
 
 int
 Surface::get_width() const 
 {
-  return impl->size.width; 
+  if (impl.get())
+    return impl->size.width; 
+  else
+    return 0;
 }
 
 int
 Surface::get_height() const
 {
-  return impl->size.height; 
+  if (impl.get())
+    return impl->size.height; 
+  else
+    return 0;
 }
+
+Size
+Surface::get_size() const
+{
+  if (impl.get())
+    return impl->size;
+  else
+    return Size();
+}
 
 /* EOF */

Modified: trunk/griv/new/surface.hpp
===================================================================
--- trunk/griv/new/surface.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/surface.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -29,6 +29,7 @@
 #include "SDL.h"
 #include <boost/smart_ptr.hpp>
 #include "texture.hpp"
+#include "math/size.hpp"
 #include "software_surface.hpp"
 
 class SurfaceImpl;
@@ -39,6 +40,7 @@
 class Surface
 {
 public:
+  Surface();
   Surface(const SoftwareSurface& src, const Rect& srcrect);
   Surface(const SoftwareSurface& src);
   ~Surface();
@@ -48,7 +50,10 @@
 
   int get_width()  const;
   int get_height() const;
+  Size get_size() const;
 
+  operator bool() const { return impl.get(); }
+
 private:
   boost::shared_ptr<SurfaceImpl> impl;
 };

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/texture.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -61,10 +61,14 @@
 
     assert_gl("packing image texture");
 
-    //std::cout << "pitch: " << src.get_pitch() << " width: " << src.get_width() << std::endl;
-    assert(src.get_pitch() % 3 == 0);
+    
+    if (0 && src.get_pitch() % 3 != 0)
+      {
+        std::cout << "pitch: " << src.get_pitch() << " width: " << src.get_width() << std::endl;
+        assert(!"Align issue");
+      }
 
-    glPixelStorei(GL_UNPACK_ALIGNMENT,  1);
+    glPixelStorei(GL_UNPACK_ALIGNMENT,  8);
     glPixelStorei(GL_UNPACK_ROW_LENGTH, src.get_pitch()/3);
     
     // Upload the subimage

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/tile_database.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -25,11 +25,15 @@
 
 #include "tile_database.hpp"
 
+TileDatabase* TileDatabase::current_ = 0;
+
 TileDatabase::TileDatabase(SQLiteConnection* db)
   : db(db),
     store_stmt(db),
     get_stmt(db)
 {
+  current_ = this;
+  
   db->exec("CREATE TABLE IF NOT EXISTS tiles ("
            "fileid  INTEGER, " // link to to files.rowid
            "scale   INTEGER, " // zoom level

Modified: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/tile_database.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -42,6 +42,12 @@
 class TileDatabase
 {
 private:
+  static TileDatabase* current_;
+
+public:
+  static TileDatabase* current() { return current_; };
+
+private:
   SQLiteConnection* db;
   SQLiteStatement store_stmt;
   SQLiteStatement get_stmt;

Modified: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/viewer.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -165,7 +165,7 @@
 void
 Viewer::draw(Workspace& workspace)
 {
-  bool clip_debug = true;
+  bool clip_debug = false;
 
   glPushMatrix();
 
@@ -187,7 +187,7 @@
   workspace.draw(cliprect,
                  state.get_scale());
 
-  surface.draw(Vector2f(0, 0));
+  //surface.draw(Vector2f(0, 0));
 
   glPopMatrix();
 }

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/workspace.cpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include "math.hpp"
 #include "workspace.hpp"
 
 Workspace::Workspace()
@@ -30,21 +31,37 @@
 }
 
 void
-Workspace::add_image(const std::string& filename, const Size& size)
+Workspace::add_image(int fileid, const std::string& filename, const Size& size)
 {
-  images.push_back(Image(filename, size));
+  images.push_back(Image(fileid, filename, size));
 }
 
 void
-Workspace::layout()
+Workspace::layout(float aspect_w, float aspect_h)
 {
   if (!images.empty())
     {
-      float x_pos = 0;
-      for(Images::iterator i = images.begin(); i != images.end(); ++i)
+      //       float x_pos = 0;
+      //       for(Images::iterator i = images.begin(); i != images.end(); ++i)
+      //         {
+      //           i->set_pos(Vector2f(x_pos, 0.0f));
+      //           x_pos += i->get_width() + 128/*spacing*/;
+      //         }    
+      
+      int w = int(Math::sqrt(aspect_w * images.size() / aspect_h));
+
+      for(int i = 0; i < int(images.size()); ++i)
         {
-          i->set_pos(Vector2f(x_pos, 0.0f));
-          x_pos += i->get_width() + 20/*spacing*/;
+          if ((i/w) % 2 == 0)
+            {
+              images[i].set_pos(Vector2f((i % w) * 3500.0f,
+                                         (i / w) * 3500.0f));
+            }
+          else
+            {
+              images[i].set_pos(Vector2f((w - (i % w)-1) * 3500.0f,
+                                         (i / w) * 3500.0f));
+            }
         }
     }
 }

Modified: trunk/griv/new/workspace.hpp
===================================================================
--- trunk/griv/new/workspace.hpp	2008-08-08 22:39:40 UTC (rev 2291)
+++ trunk/griv/new/workspace.hpp	2008-08-09 00:03:06 UTC (rev 2292)
@@ -39,10 +39,10 @@
 public:
   Workspace();
 
-  void add_image(const std::string& filename, const Size& size);
+  void add_image(int fileid, const std::string& filename, const Size& size);
   void draw(const Rectf& cliprect, float scale);
 
-  void layout();
+  void layout(float aspect_w, float aspect_h);
 
 private:
   Workspace (const Workspace&);



From grumbel at mail.berlios.de  Sat Aug  9 02:54:15 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 02:54:15 +0200
Subject: [Windstille-commit] r2293 - trunk/griv/new
Message-ID: <200808090054.m790sFql024196@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 02:54:14 +0200 (Sat, 09 Aug 2008)
New Revision: 2293

Modified:
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/viewer.cpp
   trunk/griv/new/workspace.cpp
Log:
Some small bugfixes

Modified: trunk/griv/new/framebuffer.cpp
===================================================================
--- trunk/griv/new/framebuffer.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/framebuffer.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -128,16 +128,20 @@
 {
   glEnable(GL_BLEND);
   glDisable(GL_TEXTURE_2D);
-  glColor4f(1.0f, 0.0f, 1.0f, 0.25f);
   glBlendFunc(GL_SRC_ALPHA, GL_ONE);
         
-  glBegin(GL_QUADS);
-  glVertex2f(rect.left,  rect.top);
-  glVertex2f(rect.right, rect.top);
-  glVertex2f(rect.right, rect.bottom);
-  glVertex2f(rect.left,  rect.bottom);
-  glEnd();
 
+  if (0)
+    {
+      glColor4f(1.0f, 0.0f, 1.0f, 0.25f);
+      glBegin(GL_QUADS);
+      glVertex2f(rect.left,  rect.top);
+      glVertex2f(rect.right, rect.top);
+      glVertex2f(rect.right, rect.bottom);
+      glVertex2f(rect.left,  rect.bottom);
+      glEnd();
+    }
+
   glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
 
   glBegin(GL_LINE_LOOP);

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/griv.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -81,11 +81,11 @@
           SoftwareSurface surface(filenames[i]);
           std::cout << "Image loading" << std::endl;      
 
-          int scale = 1;
+          int scale = 0;
 
           do
             {
-              if (scale != 1)
+              if (scale != 0)
                 {
                   surface = surface.scale(Size(surface.get_width()/2, 
                                                surface.get_height()/2));
@@ -129,7 +129,7 @@
   for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
     {
       FileEntry entry;
-      std::cout << "Getting file entry..." << std::endl;
+      //std::cout << "Getting file entry..." << std::endl;
       if (!file_db.get_file_entry(filenames[i], entry))
         {
           std::cout << "Couldn't find entry for " << filenames[i] << std::endl;

Modified: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/griv.hpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -1,11 +1,6 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Griv - Grumbel's Image Viewer
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or
 **  modify it under the terms of the GNU General Public License

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/image.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -40,7 +40,7 @@
     filename(filename),
     size(size)    
 {
-  int scale = 1;
+  int scale = 0;
   Size tmpsize = size;
   do {
     tmpsize.width /= 2;
@@ -75,6 +75,32 @@
   return size.height;
 }
 
+Surface
+Image::get_tile(int x, int y, int tile_scale)
+{
+  uint32_t cache_id = make_cache_id(x, y, tile_scale);
+  Cache::iterator i = cache.find(cache_id);
+
+  if (i == cache.end())
+    {
+      Tile tile;
+      if (TileDatabase::current()->get_tile(fileid, tile_scale, x, y, tile))
+        {                   
+          Surface surface(tile.surface);
+          cache[cache_id] = surface;
+          return surface;
+        }
+      else
+        {
+          return Surface();
+        }
+    }
+  else
+    {
+      return i->second;
+    }
+}
+
 void
 Image::draw(const Rectf& cliprect, float fscale)
 {
@@ -87,37 +113,16 @@
   if (cliprect.is_overlapped(image_rect))
     {
       // scale factor for requesting the tile from the TileDatabase
-      int tile_scale = Math::clamp(1, static_cast<int>(1 / fscale), max_scale);
-      int scale_factor = (1 << (tile_scale-1));
+      int tile_scale = Math::clamp(0, static_cast<int>(1.0f / Math::sqrt(fscale)), max_scale);
+      int scale_factor = (1 << (tile_scale));
 
       int scaled_width  = size.width  / scale_factor;
       int scaled_height = size.height / scale_factor;
 
       if (scaled_width  < 256 && scaled_height < 256)
         { // So small that only one tile is to be drawn
-          Framebuffer::draw_rect(Rectf(pos, size));
-
-          uint32_t cache_id = make_cache_id(0, 0, tile_scale);
-          Cache::iterator i = cache.find(cache_id);
-
-          if (i == cache.end())
-            {
-              Tile tile;
-              if (TileDatabase::current()->get_tile(fileid, tile_scale, 0, 0, tile))
-                {                   
-                  Surface surface(tile.surface);
-                  cache[cache_id] = surface;
-                  surface.draw(Rectf(pos, size));
-                }
-              else
-                {
-                  cache[cache_id] = Surface();
-                }
-            }
-          else
-            {
-              i->second.draw(Rectf(pos, size));
-            }
+          //Framebuffer::draw_rect(Rectf(pos, size));
+          get_tile(0, 0, tile_scale).draw(Rectf(pos, size));
         }
       else
         {
@@ -132,35 +137,14 @@
           for(int y = start_y; y < end_y; y += 1)
             for(int x = start_x; x < end_x; x += 1)
               {
-                uint32_t cache_id = make_cache_id(x, y, tile_scale);
-                Cache::iterator i = cache.find(cache_id);
+                Surface surface = get_tile(x, y, tile_scale);
 
-                if (i == cache.end())
-                  {
-                    Tile tile;
-                    if (TileDatabase::current()->get_tile(fileid, tile_scale, x, y, tile))
-                      {                   
-                        Surface surface(tile.surface);
-                        cache[cache_id] = surface;
-                        surface.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
-                                           surface.get_size() * tile_scale));
-                      }
-                    else
-                      {
-                        // Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                        // Sizef(tilesize, tilesize)));
-                      }
-                  }
-                else
-                  {
-                    i->second.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
-                                         i->second.get_size() * scale_factor));
-                    // Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                    //                             Sizef(tilesize, tilesize)));
-                  }
+                // FIXME: Causes visible rounding errors
+                surface.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
+                                   surface.get_size() * scale_factor));
+                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                                             Sizef(tilesize, tilesize)));
               }
-
-          
         }
     }
   else

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/image.hpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -51,6 +51,7 @@
   typedef std::map<uint32_t, Surface> Cache; 
   Cache cache;
 
+  Surface get_tile(int x, int y, int tile_scale);
 public:
   Image(int fileid, const std::string& filename, const Size& size);
 

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/texture.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -62,13 +62,13 @@
     assert_gl("packing image texture");
 
     
-    if (0 && src.get_pitch() % 3 != 0)
-      {
-        std::cout << "pitch: " << src.get_pitch() << " width: " << src.get_width() << std::endl;
-        assert(!"Align issue");
-      }
+    //if (src.get_pitch() % 3 != 0)
+    //{
+    //std::cout << "pitch: " << src.get_pitch() << " width: " << src.get_width() << std::endl;
+    ////assert(!"Align issue");
+    //}
 
-    glPixelStorei(GL_UNPACK_ALIGNMENT,  8);
+    glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
     glPixelStorei(GL_UNPACK_ROW_LENGTH, src.get_pitch()/3);
     
     // Upload the subimage
@@ -79,8 +79,8 @@
 
     assert_gl("creating texture");
 
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST); //GL_LINEAR);
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST); //GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); // GL_NEAREST);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); // GL_NEAREST);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);

Modified: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/viewer.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -49,7 +49,7 @@
 ViewerState::move(const Vector2i& pos)
 {
   offset.x += pos.x;
-    offset.y += pos.y;
+  offset.y += pos.y;
 }
 
 Vector2f
@@ -112,7 +112,8 @@
         
         if (drag_n_drop)
           {
-            state.move(Vector2i(event.motion.xrel, event.motion.yrel));
+            state.move(Vector2i(event.motion.xrel * 4,
+                                event.motion.yrel * 4));
           }
         break;
 

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-09 00:03:06 UTC (rev 2292)
+++ trunk/griv/new/workspace.cpp	2008-08-09 00:54:14 UTC (rev 2293)
@@ -69,6 +69,8 @@
 void
 Workspace::draw(const Rectf& cliprect, float scale)
 {
+  //std::cout << Math::clamp(1, static_cast<int>(1.0f / scale), 32) << " -> " << scale << std::endl;
+
   for(Images::iterator i = images.begin(); i != images.end(); ++i)
     {
       i->draw(cliprect, scale);



From grumbel at mail.berlios.de  Sat Aug  9 03:03:05 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 03:03:05 +0200
Subject: [Windstille-commit] r2294 - trunk/griv/new
Message-ID: <200808090103.m79135n2026591@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 03:03:05 +0200 (Sat, 09 Aug 2008)
New Revision: 2294

Modified:
   trunk/griv/new/file_database.cpp
   trunk/griv/new/tile_database.cpp
Log:
Create an index in the database, big speed up

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-09 00:54:14 UTC (rev 2293)
+++ trunk/griv/new/file_database.cpp	2008-08-09 01:03:05 UTC (rev 2294)
@@ -53,7 +53,7 @@
            "height    INTEGER, "
            "mtime     INTEGER);");
 
-  //db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename, md5 );");
+  db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename );");
 
   store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
   get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-09 00:54:14 UTC (rev 2293)
+++ trunk/griv/new/tile_database.cpp	2008-08-09 01:03:05 UTC (rev 2294)
@@ -42,6 +42,8 @@
            "data    BLOB     " // the image data, JPEG
            ");");
 
+  db->exec("CREATE UNIQUE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
+
   store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
   get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
 }



From grumbel at mail.berlios.de  Sat Aug  9 03:12:01 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 03:12:01 +0200
Subject: [Windstille-commit] r2295 - trunk/griv/new
Message-ID: <200808090112.m791C1el027478@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 03:12:00 +0200 (Sat, 09 Aug 2008)
New Revision: 2295

Modified:
   trunk/griv/new/image.cpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/tile_database.cpp
Log:
Index shouldn't be unique

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-09 01:03:05 UTC (rev 2294)
+++ trunk/griv/new/image.cpp	2008-08-09 01:12:00 UTC (rev 2295)
@@ -142,8 +142,8 @@
                 // FIXME: Causes visible rounding errors
                 surface.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
                                    surface.get_size() * scale_factor));
-                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                                             Sizef(tilesize, tilesize)));
+                //Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                //                             Sizef(tilesize, tilesize)));
               }
         }
     }

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-09 01:03:05 UTC (rev 2294)
+++ trunk/griv/new/software_surface.cpp	2008-08-09 01:12:00 UTC (rev 2295)
@@ -173,7 +173,7 @@
 SoftwareSurface::from_data(const Blob& blob)
 {
   FIMEMORY* mem    = FreeImage_OpenMemory(static_cast<BYTE*>(blob.get_data()), blob.size());
-  FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, 0);
+  FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, JPEG_QUALITYSUPERB);
   FreeImage_CloseMemory(mem);
   return SoftwareSurface(bitmap);
 }

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-09 01:03:05 UTC (rev 2294)
+++ trunk/griv/new/tile_database.cpp	2008-08-09 01:12:00 UTC (rev 2295)
@@ -42,7 +42,7 @@
            "data    BLOB     " // the image data, JPEG
            ");");
 
-  db->exec("CREATE UNIQUE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
+  db->exec("CREATE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
 
   store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
   get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");



From grumbel at mail.berlios.de  Sat Aug  9 03:16:37 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 03:16:37 +0200
Subject: [Windstille-commit] r2296 - trunk/griv/new
Message-ID: <200808090116.m791GbBH027670@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 03:16:36 +0200 (Sat, 09 Aug 2008)
New Revision: 2296

Modified:
   trunk/griv/new/texture.cpp
Log:
Use GL_NEAREST to avoid seams on zoom

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-09 01:12:00 UTC (rev 2295)
+++ trunk/griv/new/texture.cpp	2008-08-09 01:16:36 UTC (rev 2296)
@@ -79,8 +79,8 @@
 
     assert_gl("creating texture");
 
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR); // GL_NEAREST);
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR); // GL_NEAREST);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);



From grumbel at mail.berlios.de  Sat Aug  9 03:40:36 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 03:40:36 +0200
Subject: [Windstille-commit] r2297 - trunk/griv/new
Message-ID: <200808090140.m791ea2W028721@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 03:40:35 +0200 (Sat, 09 Aug 2008)
New Revision: 2297

Modified:
   trunk/griv/new/TODO
Log:
Some TODO stuff

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-09 01:16:36 UTC (rev 2296)
+++ trunk/griv/new/TODO	2008-08-09 01:40:35 UTC (rev 2297)
@@ -1,9 +1,11 @@
 [[ Griv ToDo ]]
 
-* SQLite Backend
-* SoftwareSurface: load from memory, save to memory
-* all GL stuff
-
+* multi threading
+* faster image handling, FreeImage is not good enough
+* do something about the seams on tile borders
+* proper handling of locked DB
+* faster incremental tile generation
+
 Image Library Requirements:
 ===========================
 



From grumbel at mail.berlios.de  Sat Aug  9 03:40:51 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 03:40:51 +0200
Subject: [Windstille-commit] r2298 - trunk/griv/new
Message-ID: <200808090140.m791eplX028785@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 03:40:51 +0200 (Sat, 09 Aug 2008)
New Revision: 2298

Modified:
   trunk/griv/new/texture.cpp
Log:
back to GL_LINEAR, have to fix the issue another way

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-09 01:40:35 UTC (rev 2297)
+++ trunk/griv/new/texture.cpp	2008-08-09 01:40:51 UTC (rev 2298)
@@ -79,8 +79,8 @@
 
     assert_gl("creating texture");
 
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST);
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);



From grumbel at mail.berlios.de  Sat Aug  9 12:54:13 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 12:54:13 +0200
Subject: [Windstille-commit] r2299 - trunk/griv/new
Message-ID: <200808091054.m79AsDGa001383@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 12:54:11 +0200 (Sat, 09 Aug 2008)
New Revision: 2299

Modified:
   trunk/griv/new/TODO
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/math.hpp
   trunk/griv/new/software_surface.cpp
   trunk/griv/new/surface.cpp
   trunk/griv/new/texture.cpp
   trunk/griv/new/workspace.cpp
Log:
Some bugfixing and cleanup

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/TODO	2008-08-09 10:54:11 UTC (rev 2299)
@@ -1,10 +1,12 @@
 [[ Griv ToDo ]]
 
-* multi threading
+* multi-threading for the interface
+* multi-threading in the tile generator for multicore
 * faster image handling, FreeImage is not good enough
 * do something about the seams on tile borders
 * proper handling of locked DB
 * faster incremental tile generation
+* variable size images on the workspace
 
 Image Library Requirements:
 ===========================

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/image.cpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -38,17 +38,18 @@
 Image::Image(int fileid, const std::string& filename, const Size& size)
   : fileid(fileid),
     filename(filename),
-    size(size)    
+    size(size),
+    scale(1.0f)
 {
-  int scale = 0;
+  int tiledb_scale = 0;
   Size tmpsize = size;
   do {
-    tmpsize.width /= 2;
+    tmpsize.width  /= 2;
     tmpsize.height /= 2;
-    scale += 1;
-  } while (tmpsize.width > 32 ||
+    tiledb_scale += 1;
+  } while (tmpsize.width  > 32 ||
            tmpsize.height > 32);
-  max_scale = scale;
+  max_tiledb_scale = tiledb_scale;
 }
 
 void
@@ -63,7 +64,19 @@
   return pos;
 }
 
+void
+Image::set_scale(float f)
+{
+  scale = f;
+}
+
 float
+Image::get_scale() const
+{
+  return scale;
+}
+
+float
 Image::get_width() const
 {
   return size.width;
@@ -104,25 +117,26 @@
 void
 Image::draw(const Rectf& cliprect, float fscale)
 {
-  Rectf image_rect(pos, Sizef(size));
-  Rectf image_region = image_rect.clip_to(cliprect);
+  Rectf image_rect(pos, Sizef(size * scale)); // in world coordinates
 
   //Framebuffer::draw_rect(image_rect);
   //Framebuffer::draw_rect(image_region);
 
   if (cliprect.is_overlapped(image_rect))
     {
+      Rectf image_region = image_rect.clip_to(cliprect); // visible part of the image
+
       // scale factor for requesting the tile from the TileDatabase
-      int tile_scale = Math::clamp(0, static_cast<int>(1.0f / Math::sqrt(fscale)), max_scale);
-      int scale_factor = (1 << (tile_scale));
+      int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale)) / log(2)));
+      int scale_factor = Math::pow2(tiledb_scale);
 
-      int scaled_width  = size.width  / scale_factor;
-      int scaled_height = size.height / scale_factor;
+      int scaled_width  = image_rect.get_width()  / scale_factor;
+      int scaled_height = image_rect.get_height() / scale_factor;
 
       if (scaled_width  < 256 && scaled_height < 256)
         { // So small that only one tile is to be drawn
           //Framebuffer::draw_rect(Rectf(pos, size));
-          get_tile(0, 0, tile_scale).draw(Rectf(pos, size));
+          get_tile(0, 0, Math::min(max_tiledb_scale, tiledb_scale)).draw(image_rect);
         }
       else
         {
@@ -137,18 +151,21 @@
           for(int y = start_y; y < end_y; y += 1)
             for(int x = start_x; x < end_x; x += 1)
               {
-                Surface surface = get_tile(x, y, tile_scale);
+                Surface surface = get_tile(x, y, tiledb_scale);
+                surface.draw(Rectf(pos.x + (x * tilesize), 
+                                   pos.y + (y * tilesize), 
+                                   pos.x + ((x * tilesize) + (surface.get_width()  * scale_factor)),
+                                   pos.y + ((y * tilesize) + (surface.get_height() * scale_factor))));
 
-                // FIXME: Causes visible rounding errors
-                surface.draw(Rectf(pos + Vector2f(x*tilesize, y*tilesize), 
-                                   surface.get_size() * scale_factor));
-                //Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                //                             Sizef(tilesize, tilesize)));
+                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
+                                             Sizef(tilesize, tilesize)));
               }
         }
     }
   else
     {
+      // Image is not visible so clear the cache
+      // FIXME: We should keep at least some tiles or wait with the cache purge a bit longer
       cache.clear();
     }
 }

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/image.hpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -44,21 +44,27 @@
   int fileid;
   std::string filename;
   Size size;
-  int max_scale;
+  float scale;
 
+  int max_tiledb_scale;
   Vector2f pos;
 
   typedef std::map<uint32_t, Surface> Cache; 
   Cache cache;
 
   Surface get_tile(int x, int y, int tile_scale);
+
 public:
   Image(int fileid, const std::string& filename, const Size& size);
 
+  void draw(const Rectf& cliprect, float scale);
+
   void set_pos(const Vector2f& pos);
-  void draw(const Rectf& cliprect, float scale);
-  
   Vector2f get_pos() const;
+
+  void  set_scale(float f);
+  float get_scale() const;
+
   float get_width() const;
   float get_height() const;
 };

Modified: trunk/griv/new/math.hpp
===================================================================
--- trunk/griv/new/math.hpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/math.hpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -113,6 +113,12 @@
   return n;
 }
 
+/** Calculates 2^n */
+inline int pow2(int n)
+{
+  return (1 << n);
+}
+
 inline bool is_power_of_two(int n)
 {
   return (n > 0) && ((n & (n - 1)) == 0);

Modified: trunk/griv/new/software_surface.cpp
===================================================================
--- trunk/griv/new/software_surface.cpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/software_surface.cpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -173,7 +173,7 @@
 SoftwareSurface::from_data(const Blob& blob)
 {
   FIMEMORY* mem    = FreeImage_OpenMemory(static_cast<BYTE*>(blob.get_data()), blob.size());
-  FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, JPEG_QUALITYSUPERB);
+  FIBITMAP* bitmap = FreeImage_LoadFromMemory(FIF_JPEG, mem, 0);
   FreeImage_CloseMemory(mem);
   return SoftwareSurface(bitmap);
 }

Modified: trunk/griv/new/surface.cpp
===================================================================
--- trunk/griv/new/surface.cpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/surface.cpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -70,17 +70,20 @@
         glEnable(GL_TEXTURE_2D);
         glColor3f(1.0f, 1.0f, 1.0f);
         
+        // Since FreeImage is giving us the images upside down, we
+        // place them at the bottom of the texture instead of the top
+        // to avoid blending artifacts
         glBegin(GL_QUADS);
-        glTexCoord2f(      0, uv.height);
+        glTexCoord2f(      0, 1.0f);
         glVertex2f(rect.left, rect.top);
 
-        glTexCoord2f(uv.width, uv.height);
+        glTexCoord2f(uv.width, 1.0f);
         glVertex2f(rect.right, rect.top);
 
-        glTexCoord2f(uv.width, 0);
+        glTexCoord2f(uv.width, 1.0f - uv.height);
         glVertex2f(rect.right, rect.bottom);
 
-        glTexCoord2f(      0,  0);
+        glTexCoord2f(      0,  1.0f - uv.height);
         glVertex2f(rect.left, rect.bottom);
         glEnd();
       }   

Modified: trunk/griv/new/texture.cpp
===================================================================
--- trunk/griv/new/texture.cpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/texture.cpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -52,15 +52,23 @@
     glBindTexture(GL_TEXTURE_2D, handle);
     glEnable(GL_TEXTURE_2D);
 
+    char* pixels = 0;
+    if (size.width  != srcrect.get_height() || 
+        size.height != srcrect.get_height())
+      {
+        pixels = new char[size.get_area() * 3];
+        memset(pixels, 0, size.get_area() * 3);
+      }
+
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
                  size.width, size.height,
                  0, /* border */
                  GL_RGB,
                  GL_UNSIGNED_BYTE,
-                 0 /* pixels */);
+                 pixels);
+    delete[] pixels;
 
     assert_gl("packing image texture");
-
     
     //if (src.get_pitch() % 3 != 0)
     //{
@@ -73,7 +81,8 @@
     
     // Upload the subimage
     glTexSubImage2D(GL_TEXTURE_2D, 0, 
-                    0, 0, srcrect.get_width(), srcrect.get_height(), GL_BGR,
+                    0, size.height-srcrect.get_height(),
+                    srcrect.get_width(), srcrect.get_height(), GL_BGR,
                     GL_UNSIGNED_BYTE, 
                     (Uint8*)src.get_data() + (src.get_pitch() * srcrect.top) + (srcrect.left * 3));
 
@@ -83,7 +92,6 @@
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S,     GL_CLAMP);
     glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T,     GL_CLAMP);
-    glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R,     GL_CLAMP);
 
     assert_gl("setting texture parameters");
   }

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-09 01:40:51 UTC (rev 2298)
+++ trunk/griv/new/workspace.cpp	2008-08-09 10:54:11 UTC (rev 2299)
@@ -34,6 +34,8 @@
 Workspace::add_image(int fileid, const std::string& filename, const Size& size)
 {
   images.push_back(Image(fileid, filename, size));
+  //images.back().set_scale(Math::min(1024.0f / size.width,
+  //                                  1024.0f / size.height));
 }
 
 void
@@ -54,13 +56,13 @@
         {
           if ((i/w) % 2 == 0)
             {
-              images[i].set_pos(Vector2f((i % w) * 3500.0f,
-                                         (i / w) * 3500.0f));
+              images[i].set_pos(Vector2f((i % w) * 1024.0f,
+                                         (i / w) * 1024.0f));
             }
           else
             {
-              images[i].set_pos(Vector2f((w - (i % w)-1) * 3500.0f,
-                                         (i / w) * 3500.0f));
+              images[i].set_pos(Vector2f((w - (i % w)-1) * 1024.0f,
+                                         (i / w)         * 1024.0f));
             }
         }
     }



From grumbel at mail.berlios.de  Sat Aug  9 13:50:47 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 9 Aug 2008 13:50:47 +0200
Subject: [Windstille-commit] r2300 - trunk/griv/new
Message-ID: <200808091150.m79Bolvd030767@sheep.berlios.de>

Author: grumbel
Date: 2008-08-09 13:50:47 +0200 (Sat, 09 Aug 2008)
New Revision: 2300

Modified:
   trunk/griv/new/image.cpp
   trunk/griv/new/workspace.cpp
Log:
Fixed support for scaled images

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-09 10:54:11 UTC (rev 2299)
+++ trunk/griv/new/image.cpp	2008-08-09 11:50:47 UTC (rev 2300)
@@ -120,45 +120,56 @@
   Rectf image_rect(pos, Sizef(size * scale)); // in world coordinates
 
   //Framebuffer::draw_rect(image_rect);
-  //Framebuffer::draw_rect(image_region);
 
   if (cliprect.is_overlapped(image_rect))
     {
-      Rectf image_region = image_rect.clip_to(cliprect); // visible part of the image
-
       // scale factor for requesting the tile from the TileDatabase
-      int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale)) / log(2)));
+      int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale*scale)) /
+                                                       log(2)));
       int scale_factor = Math::pow2(tiledb_scale);
 
-      int scaled_width  = image_rect.get_width()  / scale_factor;
-      int scaled_height = image_rect.get_height() / scale_factor;
+      int scaled_width  = size.width  / scale_factor;
+      int scaled_height = size.height / scale_factor;
 
       if (scaled_width  < 256 && scaled_height < 256)
         { // So small that only one tile is to be drawn
           //Framebuffer::draw_rect(Rectf(pos, size));
-          get_tile(0, 0, Math::min(max_tiledb_scale, tiledb_scale)).draw(image_rect);
+          Surface surface = get_tile(0, 0, Math::min(max_tiledb_scale, tiledb_scale));
+
+          surface.draw(image_rect);
+
+          //std::cout << surface.get_size() << " " << scaled_width << "x" << scaled_height << std::endl;
+
+          assert(surface.get_width() < 256 &&
+                 surface.get_height() < 256);
         }
       else
         {
-          int tilesize = 256 * scale_factor;
+          Rectf image_region = image_rect.clip_to(cliprect); // visible part of the image
 
-          int start_x = (image_region.left  - pos.x)/tilesize;
-          int end_x   = (image_region.right - pos.x)/tilesize + 1;
+          image_region.left   = (image_region.left   - pos.x) / scale;
+          image_region.right  = (image_region.right  - pos.x) / scale;
+          image_region.top    = (image_region.top    - pos.y) / scale;
+          image_region.bottom = (image_region.bottom - pos.y) / scale;
 
-          int start_y = (image_region.top    - pos.y)/tilesize;
-          int end_y   = (image_region.bottom - pos.y)/tilesize + 1;
+          int   itilesize = 256 * scale_factor;
+          float tilesize  = 256.0f * scale_factor * scale;
 
+          int start_x = (image_region.left)  / itilesize;
+          int end_x   = (image_region.right) / itilesize + 1;
+
+          int start_y = (image_region.top   ) / itilesize;
+          int end_y   = (image_region.bottom) / itilesize + 1;
+
           for(int y = start_y; y < end_y; y += 1)
             for(int x = start_x; x < end_x; x += 1)
               {
                 Surface surface = get_tile(x, y, tiledb_scale);
-                surface.draw(Rectf(pos.x + (x * tilesize), 
-                                   pos.y + (y * tilesize), 
-                                   pos.x + ((x * tilesize) + (surface.get_width()  * scale_factor)),
-                                   pos.y + ((y * tilesize) + (surface.get_height() * scale_factor))));
+                surface.draw(Rectf(pos + Vector2f(x,y) * tilesize,
+                                   Sizef((surface.get_size() * scale_factor * scale))));
 
-                Framebuffer::draw_rect(Rectf(pos + Vector2f(x*tilesize, y*tilesize),
-                                             Sizef(tilesize, tilesize)));
+                  // Framebuffer::draw_rect(Rectf(pos + Vector2f(x, y) * tilesize,
+                  // Sizef(tilesize, tilesize)));
               }
         }
     }

Modified: trunk/griv/new/workspace.cpp
===================================================================
--- trunk/griv/new/workspace.cpp	2008-08-09 10:54:11 UTC (rev 2299)
+++ trunk/griv/new/workspace.cpp	2008-08-09 11:50:47 UTC (rev 2300)
@@ -34,8 +34,8 @@
 Workspace::add_image(int fileid, const std::string& filename, const Size& size)
 {
   images.push_back(Image(fileid, filename, size));
-  //images.back().set_scale(Math::min(1024.0f / size.width,
-  //                                  1024.0f / size.height));
+  images.back().set_scale(Math::min(1024.0f / size.width,
+                                    1024.0f / size.height));
 }
 
 void
@@ -56,13 +56,13 @@
         {
           if ((i/w) % 2 == 0)
             {
-              images[i].set_pos(Vector2f((i % w) * 1024.0f,
-                                         (i / w) * 1024.0f));
+              images[i].set_pos(Vector2f((i % w) * 1224.0f,
+                                         (i / w) * 1224.0f));
             }
           else
             {
-              images[i].set_pos(Vector2f((w - (i % w)-1) * 1024.0f,
-                                         (i / w)         * 1024.0f));
+              images[i].set_pos(Vector2f((w - (i % w)-1) * 1224.0f,
+                                         (i / w)         * 1224.0f));
             }
         }
     }



From grumbel at mail.berlios.de  Thu Aug 14 16:01:23 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 14 Aug 2008 16:01:23 +0200
Subject: [Windstille-commit] r2324 - trunk/griv/new
Message-ID: <200808141401.m7EE1Njn009319@sheep.berlios.de>

Author: grumbel
Date: 2008-08-14 16:01:22 +0200 (Thu, 14 Aug 2008)
New Revision: 2324

Modified:
   trunk/griv/new/database_thread.cpp
   trunk/griv/new/database_thread.hpp
   trunk/griv/new/file_database.cpp
   trunk/griv/new/file_database.hpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_database.hpp
Log:
Display all files in the database when none are given on the command line

Modified: trunk/griv/new/database_thread.cpp
===================================================================
--- trunk/griv/new/database_thread.cpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/database_thread.cpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -33,6 +33,7 @@
 
 enum DatabaseMessageType 
 {
+  DATABASE_ALL_FILES_MESSAGE,
   DATABASE_FILE_MESSAGE,
   DATABASE_TILE_MESSAGE,
   DATABASE_STORE_TILE_MESSAGE
@@ -84,7 +85,18 @@
       callback(callback)
   {}
 };
+
+class AllFilesDatabaseMessage : public DatabaseMessage
+{
+public:
+  boost::function<void (FileEntry)> callback;
 
+  AllFilesDatabaseMessage(const boost::function<void (FileEntry)>& callback)
+    : DatabaseMessage(DATABASE_ALL_FILES_MESSAGE),
+      callback(callback)
+  {
+  }
+};
 
 class StoreTileDatabaseMessage : public DatabaseMessage
 {
@@ -124,6 +136,12 @@
 }
 
 void
+DatabaseThread::request_all_files(const boost::function<void (FileEntry)>& callback)
+{
+  queue.push(new AllFilesDatabaseMessage(callback));
+}
+
+void
 DatabaseThread::store_tile(const Tile& tile)
 {
   queue.push(new StoreTileDatabaseMessage(tile));
@@ -190,6 +208,18 @@
                 }
                 break;
 
+              case DATABASE_ALL_FILES_MESSAGE:
+                {
+                  AllFilesDatabaseMessage* all_files_msg = static_cast<AllFilesDatabaseMessage*>(msg);
+                  std::vector<FileEntry> entries;
+                  file_db.get_file_entries(entries);
+                  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
+                    {
+                      all_files_msg->callback(*i);
+                    }
+                }
+                break;
+
               case DATABASE_TILE_MESSAGE:
                 {
                   TileDatabaseMessage* tile_msg = static_cast<TileDatabaseMessage*>(msg);

Modified: trunk/griv/new/database_thread.hpp
===================================================================
--- trunk/griv/new/database_thread.hpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/database_thread.hpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -60,6 +60,7 @@
   
   void request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback);
   void request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
+  void request_all_files(const boost::function<void (FileEntry)>& callback);
 
   void store_tile(const Tile& tile);
 

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/file_database.cpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -42,6 +42,7 @@
   : db(db),
     store_stmt(db),
     get_by_filename_stmt(db),
+    get_all_stmt(db),
     get_by_file_id_stmt(db)
 {
   db->exec("CREATE TABLE IF NOT EXISTS files ("
@@ -58,6 +59,7 @@
   store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
   get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
   get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
+  get_all_stmt.prepare("SELECT * FROM files");
 }
  
 FileDatabase::~FileDatabase()
@@ -128,6 +130,26 @@
 }
 
 void
+FileDatabase::get_file_entries(std::vector<FileEntry>& entries)
+{
+  SQLiteReader reader = get_all_stmt.execute_query();
+
+  while (reader.next())  
+    {
+      FileEntry entry;
+      entry.fileid      = reader.get_int (0);
+      entry.filename    = reader.get_text(1);
+      entry.md5         = reader.get_text(2);
+      entry.filesize    = reader.get_int (3);
+      entry.size.width  = reader.get_int (4);
+      entry.size.height = reader.get_int (5);
+      entry.mtime       = reader.get_int (6);
+
+      entries.push_back(entry);
+    }
+}
+
+void
 FileDatabase::delete_file_entry(uint32_t fileid)
 {
   // DELETE FROM files WHERE fileid = ?fileid
@@ -138,5 +160,12 @@
 {
   // UPDATE files SET mtime = ?entry.get_mtime() WHERE fileid = ?entry.fileid
 }
+
+void
+FileDatabase::check()
+{
+  //SQLiteStatement file_exist_stmt;
+  //file_exist.prepare("SELECT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
+}
 
 /* EOF */

Modified: trunk/griv/new/file_database.hpp
===================================================================
--- trunk/griv/new/file_database.hpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/file_database.hpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -59,6 +59,7 @@
   SQLiteConnection* db;
   SQLiteStatement store_stmt;
   SQLiteStatement get_by_filename_stmt;
+  SQLiteStatement get_all_stmt;
   SQLiteStatement get_by_file_id_stmt;
 
   int  store_file_entry(FileEntry& entry);
@@ -80,7 +81,10 @@
       @return true if lookup was successful, false otherwise, in which case entry stays untouched
   */
   bool get_file_entry(const std::string& filename, FileEntry* entry);
+  void get_file_entries(std::vector<FileEntry>& entries);
 
+  void check();
+
 private:
   FileDatabase (const FileDatabase&);
   FileDatabase& operator= (const FileDatabase&);

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/griv.cpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -109,10 +109,18 @@
   database_thread.start();
   tile_generator_thread.start();
 
-  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+  if (filenames.empty())
     {
-      database_thread.request_file(filenames[i], boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
+      // When no files are given, display everything in the database
+      database_thread.request_all_files(boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
     }
+  else
+    {
+      for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+        {
+          database_thread.request_file(filenames[i], boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
+        }
+    }
 
   viewer_thread.run();
 

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/tile_database.cpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -93,5 +93,11 @@
 
   store_stmt.execute();
 }
+
+void
+TileDatabase::check()
+{
   
+}
+  
 /* EOF */

Modified: trunk/griv/new/tile_database.hpp
===================================================================
--- trunk/griv/new/tile_database.hpp	2008-08-14 01:27:09 UTC (rev 2323)
+++ trunk/griv/new/tile_database.hpp	2008-08-14 14:01:22 UTC (rev 2324)
@@ -51,7 +51,7 @@
   
   bool get_tile(uint32_t file_id, int scale, int x, int y, Tile& tile);
   void store_tile(const Tile& tile);
-  
+  void check();
 private:
   TileDatabase (const TileDatabase&);
   TileDatabase& operator= (const TileDatabase&);



From grumbel at mail.berlios.de  Sun Aug 17 13:10:09 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 17 Aug 2008 13:10:09 +0200
Subject: [Windstille-commit] r2341 - trunk/griv/new
Message-ID: <200808171110.m7HBA9Kh029050@sheep.berlios.de>

Author: grumbel
Date: 2008-08-17 13:10:04 +0200 (Sun, 17 Aug 2008)
New Revision: 2341

Modified:
   trunk/griv/new/TODO
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/jpeg.cpp
Log:
Stuff

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-17 01:08:22 UTC (rev 2340)
+++ trunk/griv/new/TODO	2008-08-17 11:10:04 UTC (rev 2341)
@@ -6,13 +6,14 @@
 * move image sorting code on workspace over
 * request lower res tiles, before requesting highres tiles
 * move JPEG decoding in a seperate thread so that the database thread can run free with database stuff 
+* jpegtran *can't* do crop of large scale JPEGs in small amount of
+  space, so cropping with libjpeg likely won't work
 
 JPEG Functions:
 ===============
 
 * get_size(JpegImage) -> (w, h)
 * crop(JpegImage)  -> JpegImage -> Blob
-* scale(JpegImage) -> JpegImage -> Blob
 * Filename -> JpegImage
 
 

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-17 01:08:22 UTC (rev 2340)
+++ trunk/griv/new/griv.cpp	2008-08-17 11:10:04 UTC (rev 2341)
@@ -64,6 +64,35 @@
 }
 
 void
+Griv::info(const std::vector<std::string>& filenames)
+{
+  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i)
+    {
+      Size size;
+      JPEG::get_size(*i, size);
+      std::cout << *i << " " << size.width << "x" << size.height << std::endl;
+    }
+}
+
+void
+Griv::downscale(const std::vector<std::string>& filenames)
+{
+  int num = 0;
+  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i, ++num)
+    {
+      std::cout << *i << std::endl;
+      SoftwareSurface surface = JPEG::load(*i, 8);
+
+      std::ostringstream out;
+      out << "/tmp/out-" << num << ".jpg";
+      Blob blob = JPEG::save(surface, 75);
+      blob.write_to_file(out.str());
+
+      std::cout << "Wrote: " << out.str() << std::endl;
+    }  
+}
+
+void
 Griv::cleanup(const std::string& database)
 {
   SQLiteConnection db(database);
@@ -260,6 +289,14 @@
         {
           cleanup(database);
         }
+      else if (strcmp(argv[1], "info") == 0)
+        {
+          info(filenames);
+        }
+      else if (strcmp(argv[1], "downscale") == 0)
+        {
+          downscale(filenames);
+        }
       else if (strcmp(argv[1], "prepare") == 0)
         {
           generate_tiles(database, filenames);

Modified: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-08-17 01:08:22 UTC (rev 2340)
+++ trunk/griv/new/griv.hpp	2008-08-17 11:10:04 UTC (rev 2341)
@@ -31,6 +31,8 @@
   void print_usage();
   int main(int argc, char** argv);
 
+  void info(const std::vector<std::string>& filenames);
+  void downscale(const std::vector<std::string>& filenames);
   void cleanup(const std::string& database);
   void check(const std::string& database);
   void list(const std::string& database);

Modified: trunk/griv/new/jpeg.cpp
===================================================================
--- trunk/griv/new/jpeg.cpp	2008-08-17 01:08:22 UTC (rev 2340)
+++ trunk/griv/new/jpeg.cpp	2008-08-17 11:10:04 UTC (rev 2341)
@@ -290,5 +290,111 @@
   // FIXME: This causes an unnecessary copy, should have a BlobImpl that is based on std::vector<>
   return Blob(data);
 }
+
+#if 0 
+void 
+JPEG::crop()
+{
+  struct jpeg_decompress_struct srcinfo;
+  struct jpeg_compress_struct dstinfo;
+  struct jpeg_error_mgr jsrcerr, jdsterr;
+
+  jvirt_barray_ptr * src_coef_arrays;
+  jvirt_barray_ptr * dst_coef_arrays;
+
+  /* Initialize the JPEG decompression object with default error handling. */
+  srcinfo.err = jpeg_std_error(&jsrcerr);
+  jpeg_create_decompress(&srcinfo);
+
+  /* Initialize the JPEG compression object with default error handling. */
+  dstinfo.err = jpeg_std_error(&jdsterr);
+  jpeg_create_compress(&dstinfo);
+
+  jsrcerr.trace_level = jdsterr.trace_level;
+  srcinfo.mem->max_memory_to_use = dstinfo.mem->max_memory_to_use;
+
+  /* Specify data source for decompression */
+  jpeg_stdio_src(&srcinfo, fp);
+
+  /* Enable saving of extra markers that we want to copy */
+  // jcopy_markers_setup(&srcinfo, copyoption);
+
+  /* Read file header */
+  jpeg_read_header(&srcinfo, TRUE);
+
+  /* Any space needed by a transform option must be requested before
+   * jpeg_read_coefficients so that memory allocation will be done right.
+   */
+  jtransform_request_workspace(&srcinfo, &transformoption);
+
+  /* Read source file as DCT coefficients */
+  src_coef_arrays = jpeg_read_coefficients(&srcinfo);
+
+  /* Initialize destination compression parameters from source values */
+  jpeg_copy_critical_parameters(&srcinfo, &dstinfo);
+
+  /* Adjust destination parameters if required by transform options;
+   * also find out which set of coefficient arrays will hold the output.
+   */
+  dstinfo->image_width = info->output_width;
+  dstinfo->image_height = info->output_height;
+
+  dst_coef_arrays = src_coef_arrays;
+
+  jpeg_stdio_dest(&dstinfo, fp);
+
+  /* Start compressor (note no image data is actually written here) */
+  jpeg_write_coefficients(&dstinfo, dst_coef_arrays);
+
+  /* Copy to the output file any extra markers that we want to preserve */
+  jcopy_markers_execute(&srcinfo, &dstinfo, copyoption);
+
+  // JDIMENSION x_crop_offset, JDIMENSION y_crop_offset,
+   
+  { // Crop
+    JBLOCKARRAY src_buffer, dst_buffer;
+    jpeg_component_info *compptr;
+
+    /* We simply have to copy the right amount of data (the destination's
+     * image size) starting at the given X and Y offsets in the source.
+     */
+    for (int ci = 0; ci < dstinfo->num_components; ci++)
+      {
+        compptr = dstinfo->comp_info + ci;
+        JDIMENSION x_crop_blocks = x_crop_offset * compptr->h_samp_factor;
+        JDIMENSION y_crop_blocks = y_crop_offset * compptr->v_samp_factor;
+
+        for (JDIMENSION dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks; dst_blk_y += compptr->v_samp_factor) 
+          {
+            dst_buffer = (*srcinfo->mem->access_virt_barray)
+              ((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
+               (JDIMENSION) compptr->v_samp_factor, TRUE);
+
+            src_buffer = (*srcinfo->mem->access_virt_barray)
+              ((j_common_ptr) srcinfo, src_coef_arrays[ci],
+               dst_blk_y + y_crop_blocks,
+               (JDIMENSION) compptr->v_samp_factor, FALSE);
+
+            for (int offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) 
+              {
+                jcopy_block_row(src_buffer[offset_y] + x_crop_blocks,
+                                dst_buffer[offset_y],
+                                compptr->width_in_blocks);
+              }
+          }
+      }
+  }
+
+  { // Cleanup
+    /* Finish compression and release memory */
+    jpeg_finish_compress(&dstinfo);
+    jpeg_destroy_compress(&dstinfo);
+    jpeg_finish_decompress(&srcinfo);
+    jpeg_destroy_decompress(&srcinfo);
+
+  }
+}
+#endif
+
 
 /* EOF */



From grumbel at mail.berlios.de  Fri Aug 15 15:12:45 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 15:12:45 +0200
Subject: [Windstille-commit] r2331 - trunk/griv/new
Message-ID: <200808151312.m7FDCj7d017339@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 15:12:44 +0200 (Fri, 15 Aug 2008)
New Revision: 2331

Modified:
   trunk/griv/new/TODO
Log:
Random updates

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-15 13:12:12 UTC (rev 2330)
+++ trunk/griv/new/TODO	2008-08-15 13:12:44 UTC (rev 2331)
@@ -1,8 +1,11 @@
 [[ Griv ToDo ]]
 
-* implement SoftwareSurface::get_jpeg_data()
-* implement crop
-* implement scale
+* implement fast crop
+* implement linear blending scale
+* move recursive directory code over
+* move image sorting code on workspace over
+* request lower res tiles, before requesting highres tiles
+* move JPEG decoding in a seperate thread so that the database thread can run free with database stuff 
 
 * multi-threading in the tile generator for multicore
 * faster image handling, FreeImage is not good enough



From grumbel at mail.berlios.de  Fri Aug 15 15:12:13 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 15:12:13 +0200
Subject: [Windstille-commit] r2330 - in trunk/griv/new: . math
Message-ID: <200808151312.m7FDCDZM017273@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 15:12:12 +0200 (Fri, 15 Aug 2008)
New Revision: 2330

Modified:
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/framebuffer.hpp
   trunk/griv/new/math/rgb.hpp
Log:
Made rect drawing calls take color argument

Modified: trunk/griv/new/framebuffer.cpp
===================================================================
--- trunk/griv/new/framebuffer.cpp	2008-08-14 22:32:58 UTC (rev 2329)
+++ trunk/griv/new/framebuffer.cpp	2008-08-15 13:12:12 UTC (rev 2330)
@@ -124,36 +124,18 @@
 }
 
 void
-Framebuffer::draw_rect(const Rectf& rect)
+Framebuffer::draw_rect(const Rectf& rect, const RGB& rgb)
 {
-  //glEnable(GL_BLEND);
   glDisable(GL_TEXTURE_RECTANGLE_ARB);
-  //glBlendFunc(GL_SRC_ALPHA, GL_ONE);
     
-  if (1)
-    {
-      glColor4f(1.0f, 0.0f, 1.0f, 0.25f);
-      glBegin(GL_QUADS);
-      glVertex2f(rect.left,  rect.top);
-      glVertex2f(rect.right, rect.top);
-      glVertex2f(rect.right, rect.bottom);
-      glVertex2f(rect.left,  rect.bottom);
-      glEnd();
-    }
+  glColor3ub(rgb.r, rgb.g, rgb.b);
 
-  if (0)
-    {
-      glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
-
-      glBegin(GL_LINE_LOOP);
-      glVertex2f(rect.left,  rect.top);
-      glVertex2f(rect.right, rect.top);
-      glVertex2f(rect.right, rect.bottom);
-      glVertex2f(rect.left,  rect.bottom);
-      glEnd();
-    }
-
-  //glDisable(GL_BLEND);
+  glBegin(GL_LINE_LOOP);
+  glVertex2f(rect.left,  rect.top);
+  glVertex2f(rect.right, rect.top);
+  glVertex2f(rect.right, rect.bottom);
+  glVertex2f(rect.left,  rect.bottom);
+  glEnd();
 }
 
 void

Modified: trunk/griv/new/framebuffer.hpp
===================================================================
--- trunk/griv/new/framebuffer.hpp	2008-08-14 22:32:58 UTC (rev 2329)
+++ trunk/griv/new/framebuffer.hpp	2008-08-15 13:12:12 UTC (rev 2330)
@@ -67,7 +67,7 @@
   static void flip();
   static void clear();
 
-  static void draw_rect(const Rectf& rect);
+  static void draw_rect(const Rectf& rect, const RGB& rgb);
   static void fill_rect(const Rectf& rect, const RGB& rgb);
 };
 

Modified: trunk/griv/new/math/rgb.hpp
===================================================================
--- trunk/griv/new/math/rgb.hpp	2008-08-14 22:32:58 UTC (rev 2329)
+++ trunk/griv/new/math/rgb.hpp	2008-08-15 13:12:12 UTC (rev 2330)
@@ -25,6 +25,8 @@
 
 #ifndef HEADER_MATH_RGB_HPP
 #define HEADER_MATH_RGB_HPP
+
+#include <stdint.h>
 
 class RGB
 {



From grumbel at mail.berlios.de  Sun Aug 17 03:08:23 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 17 Aug 2008 03:08:23 +0200
Subject: [Windstille-commit] r2340 - trunk/griv/new
Message-ID: <200808170108.m7H18N8A016115@sheep.berlios.de>

Author: grumbel
Date: 2008-08-17 03:08:22 +0200 (Sun, 17 Aug 2008)
New Revision: 2340

Modified:
   trunk/griv/new/jpeg.cpp
   trunk/griv/new/jpeg.hpp
Log:
Added support for fast loading of downscaled images

Modified: trunk/griv/new/jpeg.cpp
===================================================================
--- trunk/griv/new/jpeg.cpp	2008-08-16 23:38:37 UTC (rev 2339)
+++ trunk/griv/new/jpeg.cpp	2008-08-17 01:08:22 UTC (rev 2340)
@@ -73,7 +73,7 @@
 }
 
 SoftwareSurface
-JPEG::load(const std::string& filename)
+JPEG::load(const std::string& filename, int scale)
 {
   //std::cout << "-- JPEG::load(" << filename << ")" << std::endl;
 
@@ -97,10 +97,21 @@
 
   jpeg_read_header(&cinfo, FALSE);
 
+  if (scale != 1)
+    { // scale the image down by scale
+
+      // by default all those values below are on 1
+      cinfo.scale_num           = 1;
+      cinfo.scale_denom         = scale;
+   
+      cinfo.do_fancy_upsampling = FALSE; /* TRUE=apply fancy upsampling */
+      cinfo.do_block_smoothing  = FALSE; /* TRUE=apply interblock smoothing */
+    }
+
   jpeg_start_decompress(&cinfo);
 
-  SoftwareSurface surface(Size(cinfo.image_width, 
-                               cinfo.image_height));
+  SoftwareSurface surface(Size(cinfo.image_width  / scale, 
+                               cinfo.image_height / scale));
   
   if (cinfo.output_components == 3)
     { // RGB Image

Modified: trunk/griv/new/jpeg.hpp
===================================================================
--- trunk/griv/new/jpeg.hpp	2008-08-16 23:38:37 UTC (rev 2339)
+++ trunk/griv/new/jpeg.hpp	2008-08-17 01:08:22 UTC (rev 2340)
@@ -37,7 +37,7 @@
 public:
   static void get_size(const std::string& filename, Size& size);
 
-  static SoftwareSurface load(const std::string& filename);
+  static SoftwareSurface load(const std::string& filename, int scale = 1);
   static SoftwareSurface load(uint8_t* mem, int len);
 
   static void save(const SoftwareSurface& surface, int quality, const std::string& filename);



From grumbel at mail.berlios.de  Fri Aug 15 21:56:48 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 21:56:48 +0200
Subject: [Windstille-commit] r2333 - trunk/griv/new
Message-ID: <200808151956.m7FJumC4009103@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 21:56:48 +0200 (Fri, 15 Aug 2008)
New Revision: 2333

Added:
   trunk/griv/new/job_handle.cpp
   trunk/griv/new/job_handle.hpp
Log:
Adedd JobHandle class

Added: trunk/griv/new/job_handle.cpp
===================================================================
--- trunk/griv/new/job_handle.cpp	2008-08-15 13:14:24 UTC (rev 2332)
+++ trunk/griv/new/job_handle.cpp	2008-08-15 19:56:48 UTC (rev 2333)
@@ -0,0 +1,73 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "job_handle.hpp"
+
+class JobHandleImpl
+{
+public:
+  JobHandleImpl()
+    : aborted(false),
+      finished(false)
+  {}
+
+  bool aborted;
+  bool finished;
+};
+
+JobHandle::JobHandle()
+  : impl(new JobHandleImpl())
+{
+}
+
+JobHandle::~JobHandle()
+{
+}
+
+void
+JobHandle::abort()
+{
+  impl->aborted = true;
+}
+
+bool
+JobHandle::is_aborted() const
+{
+  return impl->aborted;
+}
+
+void
+JobHandle::finish()
+{
+  impl->finished = true;
+}
+
+bool
+JobHandle::is_finished() const
+{
+  return impl->finished;
+}
+
+/* EOF */


Property changes on: trunk/griv/new/job_handle.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/job_handle.hpp
===================================================================
--- trunk/griv/new/job_handle.hpp	2008-08-15 13:14:24 UTC (rev 2332)
+++ trunk/griv/new/job_handle.hpp	2008-08-15 19:56:48 UTC (rev 2333)
@@ -0,0 +1,55 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_JOB_HANDLE_HPP
+#define HEADER_JOB_HANDLE_HPP
+
+#include <boost/shared_ptr.hpp>
+
+class JobHandleImpl;
+
+/** A JobHandle should be returend whenever one thread makes a request
+    to another thread, the JobHandle allows the calling thread to
+    cancel the job and the called thread to inform the calling one
+    that the Job is finished. (FIXME: Do we need that last thing for something?) */
+class JobHandle
+{
+public:
+  JobHandle();
+  ~JobHandle();
+
+  void abort();
+  bool is_aborted() const;
+  
+  void finish();
+  bool is_finished() const;
+
+private:
+  boost::shared_ptr<JobHandleImpl> impl;
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/job_handle.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Thu Aug 14 23:59:29 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 14 Aug 2008 23:59:29 +0200
Subject: [Windstille-commit] r2327 - trunk/griv/new
Message-ID: <200808142159.m7ELxTBh004973@sheep.berlios.de>

Author: grumbel
Date: 2008-08-14 23:59:29 +0200 (Thu, 14 Aug 2008)
New Revision: 2327

Modified:
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
Log:
Added some better status keeping for tiles

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-14 21:59:15 UTC (rev 2326)
+++ trunk/griv/new/image.cpp	2008-08-14 21:59:29 UTC (rev 2327)
@@ -140,11 +140,18 @@
     {
       ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this);
 
-      return impl->cache[cache_id] = Surface(); // We add an empty surface, so we don't do duplicate requests
+      SurfaceStruct s;
+      
+      s.surface = Surface();
+      s.status  = SurfaceStruct::SURFACE_REQUESTED;
+
+      impl->cache[cache_id] = s;
+
+      return Surface();
     }
   else
     {
-      return i->second;
+      return i->second.surface;
     }
 }
 
@@ -160,22 +167,22 @@
     {
       // Look for the next smaller tile
       // FIXME: Rewrite this to work all smaller tiles, not just the next
-      uint32_t cache_id = make_cache_id(x/2, y/2, tiledb_scale+1);
+      int downscale = Math::pow2(1);
+
+      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+1);
       Cache::iterator i = impl->cache.find(cache_id);
   
-      if (i != impl->cache.end() && i->second)
+      if (i != impl->cache.end() && i->second.surface)
         { // Must only draw relevant section!
-          Size s((x%2) ? (i->second.get_width()  - 128) : 128,
-                 (y%2) ? (i->second.get_height() - 128) : 128);
+          Size s((x%downscale) ? (i->second.surface.get_width()  - 256/downscale) : 256/downscale,
+                 (y%downscale) ? (i->second.surface.get_height() - 256/downscale) : 256/downscale);
 
-          s.width  = Math::min(i->second.get_width(),  s.width);
-          s.height = Math::min(i->second.get_height(), s.height);
+          s.width  = Math::min(i->second.surface.get_width(),  s.width);
+          s.height = Math::min(i->second.surface.get_height(), s.height);
           
-          //std::cout << x%2 << ":" << y%2 << " " << i->second.get_size() << " -> " << s << std::endl;
-
-          i->second.draw(Rectf(Vector2f(x%2, y%2) * 128, 
-                               s),
-                         Rectf(pos, s * scale * 2));
+          i->second.surface.draw(Rectf(Vector2f(x%downscale, y%downscale) * 256/downscale, 
+                                       s),
+                                 Rectf(pos, s * scale * downscale));
         }
     }
 }
@@ -249,7 +256,13 @@
 Image::receive_tile(int x, int y, int tiledb_scale, const SoftwareSurface& surface)
 {
   int tile_id = make_cache_id(x, y, tiledb_scale);
-  impl->cache[tile_id] = Surface(surface);
+
+  SurfaceStruct s;
+  
+  s.surface = Surface(surface);
+  s.status  = SurfaceStruct::SURFACE_OK;
+
+  impl->cache[tile_id] = s;
 }
 
 /* EOF */

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-14 21:59:15 UTC (rev 2326)
+++ trunk/griv/new/image.hpp	2008-08-14 21:59:29 UTC (rev 2327)
@@ -43,8 +43,17 @@
 class Image
 {
 public:
-  typedef std::map<uint32_t, Surface> Cache; 
+  struct SurfaceStruct {
+    enum Status { SURFACE_OK,
+                  SURFACE_REQUESTED,
+                  SURFACE_FAILED };
 
+    Status  status;
+    Surface surface;
+  };
+
+  typedef std::map<uint32_t, SurfaceStruct> Cache; 
+
 private:
   Surface get_tile(int x, int y, int tile_scale);
 



From grumbel at mail.berlios.de  Fri Aug 15 22:23:03 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 22:23:03 +0200
Subject: [Windstille-commit] r2336 - trunk/griv/new
Message-ID: <200808152023.m7FKN3A1011396@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 22:23:02 +0200 (Fri, 15 Aug 2008)
New Revision: 2336

Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/database_thread.cpp
   trunk/griv/new/database_thread.hpp
   trunk/griv/new/image.cpp
   trunk/griv/new/image.hpp
   trunk/griv/new/viewer_thread.cpp
   trunk/griv/new/viewer_thread.hpp
Log:
Added some JobHandle stuff

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/SConstruct	2008-08-15 20:23:02 UTC (rev 2336)
@@ -24,6 +24,7 @@
         'jpeg_memory_src.cpp',
         'jpeg_memory_dest.cpp',
         'jpeg_decoder_thread.cpp',
+        'job_handle.cpp',
         'griv.cpp',
         'image.cpp',
         'md5.cpp',

Modified: trunk/griv/new/database_thread.cpp
===================================================================
--- trunk/griv/new/database_thread.cpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/database_thread.cpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -55,15 +55,19 @@
 class TileDatabaseMessage : public DatabaseMessage
 {
 public:
+  JobHandle job_handle;
+
   int fileid;
   int tilescale;
   int x;
   int y;
   boost::function<void (Tile)> callback;
 
-  TileDatabaseMessage(int fileid, int tilescale, int x, int y,
+  TileDatabaseMessage(const JobHandle& job_handle,
+                      int fileid, int tilescale, int x, int y,
                       const boost::function<void (Tile)>& callback)
     : DatabaseMessage(DATABASE_TILE_MESSAGE),
+      job_handle(job_handle),
       fileid(fileid),
       tilescale(tilescale),
       x(x),
@@ -123,10 +127,12 @@
 {
 }
 
-void
+JobHandle
 DatabaseThread::request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback)
 {
-  queue.push(new TileDatabaseMessage(fileid, tilescale, x, y, callback));
+  JobHandle job_handle;
+  queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, x, y, callback));
+  return job_handle;
 }
 
 void
@@ -223,22 +229,29 @@
               case DATABASE_TILE_MESSAGE:
                 {
                   TileDatabaseMessage* tile_msg = static_cast<TileDatabaseMessage*>(msg);
-                  Tile tile;
-                  if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->x, tile_msg->y, tile))
+
+                  if (!tile_msg->job_handle.is_aborted())
                     {
-                      tile_msg->callback(tile);
-                    }
-                  else
-                    {
-                      if (0)
-                        std::cout << "Error: Couldn't get tile: " 
-                                  << tile_msg->fileid << " "
-                                  << tile_msg->x << " "
-                                  << tile_msg->y << " "
-                                  << tile_msg->tilescale
-                                  << std::endl;
+                      Tile tile;
+                      if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->x, tile_msg->y, tile))
+                        {
+                          tile_msg->callback(tile);
+                          tile_msg->job_handle.finish();
+                        }
+                      else
+                        {
+                          if (0)
+                            std::cout << "Error: Couldn't get tile: " 
+                                      << tile_msg->fileid << " "
+                                      << tile_msg->x << " "
+                                      << tile_msg->y << " "
+                                      << tile_msg->tilescale
+                                      << std::endl;
 
-                      // TileGeneratorThread::request_tile(fileid, x, y, tilescale);
+                          tile_msg->job_handle.finish();
+                          // Need to send error back
+                          // TileGeneratorThread::request_tile(fileid, x, y, tilescale);
+                        }
                     }
                 }
                 break;

Modified: trunk/griv/new/database_thread.hpp
===================================================================
--- trunk/griv/new/database_thread.hpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/database_thread.hpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -31,6 +31,7 @@
 #include "thread_message_queue.hpp"
 #include "file_database.hpp"
 #include "tile_database.hpp"
+#include "job_handle.hpp"
 #include "thread.hpp"
 
 class DatabaseMessage;
@@ -58,7 +59,7 @@
   
   void stop();
   
-  void request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback);
+  JobHandle request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback);
   void request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
   void request_all_files(const boost::function<void (FileEntry)>& callback);
 

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/image.cpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -49,6 +49,7 @@
   Vector2f pos;
 
   Image::Cache cache;
+  Image::Jobs jobs;  
   
   ImageImpl() 
   {
@@ -139,7 +140,7 @@
 
   if (i == impl->cache.end())
     {
-      ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this);
+      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this));
 
       // Request the next smaller tile too, so we get a lower quality
       // image fast and a higher quality one soon after FIXME: Its
@@ -147,7 +148,7 @@
       // request gets mungled in the DatabaseThread, we should request
       // the whole group of lower res tiles at once, instead of one by
       // one, since that eats up the possible speed up
-      ViewerThread::current()->request_tile(impl->fileid, tile_scale+1, x, y, *this);
+      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale+1, x, y, *this));
 
       SurfaceStruct s;
       
@@ -217,6 +218,14 @@
 void
 Image::draw(const Rectf& cliprect, float fscale)
 {
+  // Cancel all old jobs (FIXME: Stupid brute force hack)
+  if (0)
+    {
+      for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
+        i->abort();
+      impl->jobs.clear();
+    }
+
   Rectf image_rect(impl->pos, Sizef(impl->size * impl->scale)); // in world coordinates
 
   //Framebuffer::draw_rect(image_rect);

Modified: trunk/griv/new/image.hpp
===================================================================
--- trunk/griv/new/image.hpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/image.hpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -29,6 +29,7 @@
 #include <boost/shared_ptr.hpp>
 #include <map>
 #include <string>
+#include "job_handle.hpp"
 #include "math/vector2f.hpp"
 #include "math/size.hpp"
 #include "grid.hpp"
@@ -53,6 +54,7 @@
   };
 
   typedef std::map<uint32_t, SurfaceStruct> Cache; 
+  typedef std::vector<JobHandle> Jobs;
 
 private:
   Surface get_tile(int x, int y, int tile_scale);

Modified: trunk/griv/new/viewer_thread.cpp
===================================================================
--- trunk/griv/new/viewer_thread.cpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/viewer_thread.cpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -61,11 +61,11 @@
   tile_queue.push(msg);
 }
 
-void 
+JobHandle 
 ViewerThread::request_tile(int fileid, int tilescale, int x, int y, const Image& image)
 {
-  DatabaseThread::current()->request_tile(fileid, tilescale, x, y,
-                                          boost::bind(&ViewerThread::receive_tile, this, image, _1));
+  return DatabaseThread::current()->request_tile(fileid, tilescale, x, y,
+                                                 boost::bind(&ViewerThread::receive_tile, this, image, _1));
 }
 
 int

Modified: trunk/griv/new/viewer_thread.hpp
===================================================================
--- trunk/griv/new/viewer_thread.hpp	2008-08-15 20:21:36 UTC (rev 2335)
+++ trunk/griv/new/viewer_thread.hpp	2008-08-15 20:23:02 UTC (rev 2336)
@@ -30,6 +30,7 @@
 #include "thread_message_queue.hpp"
 
 #include "image.hpp"
+#include "job_handle.hpp"
 #include "tile_database.hpp"
 
 class FileEntry;
@@ -62,7 +63,7 @@
   void receive_file(const FileEntry& entry);
   void receive_tile(const Image& image, const Tile& tile);
 
-  void request_tile(int fileid, int tilescale, int x, int y, const Image& image);
+  JobHandle request_tile(int fileid, int tilescale, int x, int y, const Image& image);
 private:
   ViewerThread (const ViewerThread&);
   ViewerThread& operator= (const ViewerThread&);



From grumbel at mail.berlios.de  Sun Aug 17 01:30:16 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 17 Aug 2008 01:30:16 +0200
Subject: [Windstille-commit] r2338 - trunk/griv/new
Message-ID: <200808162330.m7GNUGum001117@sheep.berlios.de>

Author: grumbel
Date: 2008-08-17 01:30:16 +0200 (Sun, 17 Aug 2008)
New Revision: 2338

Added:
   trunk/griv/new/README
Log:
A README

Added: trunk/griv/new/README
===================================================================
--- trunk/griv/new/README	2008-08-16 00:42:33 UTC (rev 2337)
+++ trunk/griv/new/README	2008-08-16 23:30:16 UTC (rev 2338)
@@ -0,0 +1,31 @@
+griv - A Zoomable Image Viewer zoomview 
+=======================================
+
+griv is a image viewer that allows you to directly zoom into large
+collection of thumbnails down to the images original size. Its goal is
+to allow its viewer to view 100'000 images at once, fluently without
+any noticable load times. griv requires currently a tile cache to make
+this work, which require around 1.5 times as much diskspace as the
+original image data.
+
+
+Required Libraries:
+===================
+
+libmhash-dev
+libglew1.5-dev
+libjpeg62-dev
+scons
+OpenGL
+
+
+Bugs:
+=====
+
+When zooming into an images one will see noticable seams at the areas
+where the tiles meet. A possible fix for this would be to add a 1px
+width border to the tiles, but that would screw up the tile generation
+process from JPEG data.
+
+
+# EOF #



From grumbel at mail.berlios.de  Fri Aug 15 00:32:59 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 00:32:59 +0200
Subject: [Windstille-commit] r2329 - trunk/griv/new
Message-ID: <200808142232.m7EMWxBQ011905@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 00:32:58 +0200 (Fri, 15 Aug 2008)
New Revision: 2329

Modified:
   trunk/griv/new/image.cpp
Log:
Added fugly hack to keep a small image in cache

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-14 22:13:48 UTC (rev 2328)
+++ trunk/griv/new/image.cpp	2008-08-14 22:32:58 UTC (rev 2329)
@@ -263,8 +263,26 @@
       // FIXME: We also need to purge the cache more often, since with
       // big images we would end up never clearing it
       
-      // Do not clear everything, keep a minimal tile there
+      // Clear the cache, but keep the smallest tile (Wonky hack)
+      int max_tiledb_scale = 0;
+      SurfaceStruct s;
+      int tileid;
+      for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
+        {
+          int tiledb_scale = (i->first >> 16);
+          if (tiledb_scale > max_tiledb_scale)
+            {
+              max_tiledb_scale = tiledb_scale;
+              tileid = i->first;
+              s      = i->second;
+            }
+        }
       impl->cache.clear();
+
+      if (max_tiledb_scale != 0)
+        {
+          impl->cache[tileid] = s;
+        }
     }
 }
 



From grumbel at mail.berlios.de  Thu Aug 14 23:59:15 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 14 Aug 2008 23:59:15 +0200
Subject: [Windstille-commit] r2326 - trunk/griv/new
Message-ID: <200808142159.m7ELxFha004943@sheep.berlios.de>

Author: grumbel
Date: 2008-08-14 23:59:15 +0200 (Thu, 14 Aug 2008)
New Revision: 2326

Modified:
   trunk/griv/new/file_database.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/sqlite.cpp
   trunk/griv/new/sqlite.hpp
Log:
Added garbage collect call

Modified: trunk/griv/new/file_database.cpp
===================================================================
--- trunk/griv/new/file_database.cpp	2008-08-14 21:57:59 UTC (rev 2325)
+++ trunk/griv/new/file_database.cpp	2008-08-14 21:59:15 UTC (rev 2326)
@@ -164,8 +164,34 @@
 void
 FileDatabase::check()
 {
-  //SQLiteStatement file_exist_stmt;
-  //file_exist.prepare("SELECT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
+  std::vector<FileEntry> entries;
+  get_file_entries(entries);
+
+  std::cout << "Checking File Existance:" << std::endl;
+  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
+    {
+      if (!Filesystem::exist(i->filename))
+        {
+          std::cout << i->filename << ": does not exist" << std::endl;
+        }
+      else
+        {
+          std::cout << i->filename << ": ok" << std::endl;
+        }
+    } 
+
+  /* FIXME: Do magic to detect duplicate file entries and other potential damage to the database (are missing tiles an error?) 
+
+    SQLiteStatement duplicates_stmt(db);
+    duplicates_stmt.prepare("SELECT * IN files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
+    SELECT filename,
+    COUNT(filename) AS NumOccurrences
+    FROM files
+    GROUP BY filename
+    HAVING ( COUNT(filename) > 1 )
+    
+    SQLiteReader reader = duplicates_stmt.execute_query();
+  */
 }
 
 /* EOF */

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-14 21:57:59 UTC (rev 2325)
+++ trunk/griv/new/griv.cpp	2008-08-14 21:59:15 UTC (rev 2326)
@@ -63,6 +63,25 @@
 }
 
 void
+Griv::cleanup(const std::string& database)
+{
+  SQLiteConnection db(database);
+  db.vacuum();
+}
+
+void
+Griv::check(const std::string& database)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  file_db.check();
+  tile_db.check();
+}
+
+void
 Griv::generate_tiles(const std::string& database, const std::vector<std::string>& filenames)
 {
   SQLiteConnection db(database);
@@ -135,6 +154,8 @@
 Griv::print_usage()
 {
       std::cout << "Usage: griv view    [OPTIONS]... [FILES]...\n"
+                << "       griv check   [OPTIONS]... [FILES]...\n"
+                << "       griv cleanup [OPTIONS]... [FILES]...\n"
                 << "       griv prepare [OPTIONS]... [FILES]...\n"
                 << "\n"
                 << "Options:\n"
@@ -196,6 +217,14 @@
         {
           view(database, filenames);
         }
+      else if (strcmp(argv[1], "check") == 0)
+        {
+          check(database);
+        }
+      else if (strcmp(argv[1], "cleanup") == 0)
+        {
+          cleanup(database);
+        }
       else if (strcmp(argv[1], "prepare") == 0)
         {
           generate_tiles(database, filenames);

Modified: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-08-14 21:57:59 UTC (rev 2325)
+++ trunk/griv/new/griv.hpp	2008-08-14 21:59:15 UTC (rev 2326)
@@ -31,6 +31,8 @@
   void print_usage();
   int main(int argc, char** argv);
 
+  void cleanup(const std::string& database);
+  void check(const std::string& database);
   void generate_tiles(const std::string& database, 
                       const std::vector<std::string>& filenames);
   void view(const std::string& database, 

Modified: trunk/griv/new/sqlite.cpp
===================================================================
--- trunk/griv/new/sqlite.cpp	2008-08-14 21:57:59 UTC (rev 2325)
+++ trunk/griv/new/sqlite.cpp	2008-08-14 21:59:15 UTC (rev 2326)
@@ -76,6 +76,14 @@
       throw SQLiteError(out.str());
     }
 }
+
+void
+SQLiteConnection::vacuum()
+{
+  SQLiteStatement stmt(this);
+  stmt.prepare("VACUUM;");
+  stmt.execute();
+}
 
 SQLiteStatement::SQLiteStatement(SQLiteConnection* db)
   : db(db), 

Modified: trunk/griv/new/sqlite.hpp
===================================================================
--- trunk/griv/new/sqlite.hpp	2008-08-14 21:57:59 UTC (rev 2325)
+++ trunk/griv/new/sqlite.hpp	2008-08-14 21:59:15 UTC (rev 2326)
@@ -54,6 +54,11 @@
 
   void exec(const std::string& sqlstmt);
 
+  /** Do a VACCUM on the database to clean up collected garbage, this
+      call can take quite a while (~1min) for larger databases, since
+      the whole database gets copied in the process */
+  void vacuum();
+
   sqlite3* get_db() const { return db; }
 };
 



From grumbel at mail.berlios.de  Fri Aug 15 22:15:47 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 22:15:47 +0200
Subject: [Windstille-commit] r2334 - trunk/griv/new
Message-ID: <200808152015.m7FKFlb5010745@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 22:15:46 +0200 (Fri, 15 Aug 2008)
New Revision: 2334

Modified:
   trunk/griv/new/viewer.cpp
   trunk/griv/new/viewer.hpp
Log:
Added gamma change via button press

Modified: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-15 19:56:48 UTC (rev 2333)
+++ trunk/griv/new/viewer.cpp	2008-08-15 20:15:46 UTC (rev 2334)
@@ -72,7 +72,8 @@
   : quit(false),
     force_redraw(false),
     drag_n_drop(false),
-    zoom_button(0)
+    zoom_button(0),
+    gamma(1.0f)
 {
 }
 
@@ -102,6 +103,21 @@
               quit = true;
               break;
 
+            case SDLK_PAGEUP:
+                gamma *= 1.1f;
+                SDL_SetGamma(gamma, gamma, gamma);
+              break;
+
+            case SDLK_PAGEDOWN:
+                gamma /= 1.1f;
+                SDL_SetGamma(gamma, gamma, gamma);
+                break;
+                
+            case SDLK_END:
+                gamma = 1.0f;
+                SDL_SetGamma(gamma, gamma, gamma);
+                break;
+
             default:
               // ignore all other keypresses
               break;

Modified: trunk/griv/new/viewer.hpp
===================================================================
--- trunk/griv/new/viewer.hpp	2008-08-15 19:56:48 UTC (rev 2333)
+++ trunk/griv/new/viewer.hpp	2008-08-15 20:15:46 UTC (rev 2334)
@@ -58,6 +58,7 @@
   bool force_redraw;
   bool drag_n_drop;
   int  zoom_button;
+  float gamma;
 
   Vector2i mouse_pos;
 



From grumbel at mail.berlios.de  Sun Aug 17 01:38:37 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 17 Aug 2008 01:38:37 +0200
Subject: [Windstille-commit] r2339 - trunk/griv/new
Message-ID: <200808162338.m7GNcbpS001745@sheep.berlios.de>

Author: grumbel
Date: 2008-08-17 01:38:37 +0200 (Sun, 17 Aug 2008)
New Revision: 2339

Modified:
   trunk/griv/new/README
   trunk/griv/new/TODO
   trunk/griv/new/database_thread.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/griv.hpp
   trunk/griv/new/tile_generator_thread.cpp
Log:
Added griv list option

Modified: trunk/griv/new/README
===================================================================
--- trunk/griv/new/README	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/README	2008-08-16 23:38:37 UTC (rev 2339)
@@ -12,13 +12,18 @@
 Required Libraries:
 ===================
 
-libmhash-dev
-libglew1.5-dev
-libjpeg62-dev
+On Ubuntu you have to do a:
+
+apt-get install \
+libsqlite3-dev \
+libmhash-dev \
+libglew1.5-dev \
+libjpeg62-dev \
 scons
-OpenGL
 
+And make sure you have OpenGL installed. For other distributions library names might be a little different.
 
+
 Bugs:
 =====
 

Modified: trunk/griv/new/TODO
===================================================================
--- trunk/griv/new/TODO	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/TODO	2008-08-16 23:38:37 UTC (rev 2339)
@@ -6,11 +6,19 @@
 * move image sorting code on workspace over
 * request lower res tiles, before requesting highres tiles
 * move JPEG decoding in a seperate thread so that the database thread can run free with database stuff 
+
+JPEG Functions:
+===============
+
+* get_size(JpegImage) -> (w, h)
+* crop(JpegImage)  -> JpegImage -> Blob
+* scale(JpegImage) -> JpegImage -> Blob
+* Filename -> JpegImage
+
 
 * multi-threading in the tile generator for multicore
 * faster image handling, FreeImage is not good enough
 * do something about the seams on tile borders (hard, need to save a 1px border, but that screws up the JPEG compression)
-* proper handling of locked DB
 * faster incremental tile generation
 * griv name is already taken
 
@@ -34,4 +42,4 @@
 * generation of subregion images without a copy
 
 
-# EOF #
\ No newline at end of file
+# EOF #

Modified: trunk/griv/new/database_thread.cpp
===================================================================
--- trunk/griv/new/database_thread.cpp	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/database_thread.cpp	2008-08-16 23:38:37 UTC (rev 2339)
@@ -25,7 +25,6 @@
 
 #include <iostream>
 #include <assert.h>
-#include "sqlite.h"
 #include "file_database.hpp"
 #include "tile_database.hpp"
 #include "tile_generator_thread.hpp"
@@ -249,8 +248,8 @@
                                       << std::endl;
 
                           tile_msg->job_handle.finish();
-                          // Need to send error back
-                          // TileGeneratorThread::request_tile(fileid, x, y, tilescale);
+                          // Need to send loading command back
+                          //TileGeneratorThread::request_tile(fileid, x, y, tilescale);
                         }
                     }
                 }

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/griv.cpp	2008-08-16 23:38:37 UTC (rev 2339)
@@ -73,15 +73,32 @@
 }
 
 void
-Griv::check(const std::string& database)
+Griv::list(const std::string& database)
 {
   SQLiteConnection db(database);
 
   FileDatabase file_db(&db);
   TileDatabase tile_db(&db);
+  
+  
+}
 
+void
+Griv::check(const std::string& database)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+
   file_db.check();
-  tile_db.check();
+
+  std::vector<FileEntry> entries;
+  file_db.get_file_entries(entries);
+
+  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
+    {
+      std::cout << i->filename << std::endl;
+    }
 }
 
 void
@@ -163,6 +180,7 @@
       std::cout << "Usage: griv view    [OPTIONS]... [FILES]...\n"
                 << "       griv prepare [OPTIONS]... [FILES]...\n"
                 << "       griv check   [OPTIONS]...\n"
+                << "       griv list    [OPTIONS]...\n"
                 << "       griv cleanup [OPTIONS]...\n"
                 << "\n"
                 << "Options:\n"
@@ -234,6 +252,10 @@
         {
           check(database);
         }
+      else if (strcmp(argv[1], "list") == 0)
+        {
+          list(database);
+        }
       else if (strcmp(argv[1], "cleanup") == 0)
         {
           cleanup(database);

Modified: trunk/griv/new/griv.hpp
===================================================================
--- trunk/griv/new/griv.hpp	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/griv.hpp	2008-08-16 23:38:37 UTC (rev 2339)
@@ -33,6 +33,7 @@
 
   void cleanup(const std::string& database);
   void check(const std::string& database);
+  void list(const std::string& database);
   void generate_tiles(const std::string& database, 
                       const std::vector<std::string>& filenames);
   void view(const std::string& database, 

Modified: trunk/griv/new/tile_generator_thread.cpp
===================================================================
--- trunk/griv/new/tile_generator_thread.cpp	2008-08-16 23:30:16 UTC (rev 2338)
+++ trunk/griv/new/tile_generator_thread.cpp	2008-08-16 23:38:37 UTC (rev 2339)
@@ -55,7 +55,7 @@
 void
 TileGeneratorThread::request_tile(int fileid, const std::string& filename, int x, int y)
 {
-  
+  // Do some magic to group tile request for the same fileid
 }
 
 void



From grumbel at mail.berlios.de  Fri Aug 15 15:14:24 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 15:14:24 +0200
Subject: [Windstille-commit] r2332 - trunk/griv/new
Message-ID: <200808151314.m7FDEOAd017496@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 15:14:24 +0200 (Fri, 15 Aug 2008)
New Revision: 2332

Added:
   trunk/griv/new/jpeg_decoder_thread.cpp
   trunk/griv/new/jpeg_decoder_thread.hpp
Modified:
   trunk/griv/new/SConstruct
   trunk/griv/new/database_thread.cpp
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
   trunk/griv/new/tile_database.cpp
   trunk/griv/new/tile_generator_thread.cpp
   trunk/griv/new/tile_generator_thread.hpp
   trunk/griv/new/viewer.cpp
Log:
Added JPEG decoder thread

Modified: trunk/griv/new/SConstruct
===================================================================
--- trunk/griv/new/SConstruct	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/SConstruct	2008-08-15 13:14:24 UTC (rev 2332)
@@ -23,6 +23,7 @@
         'jpeg_image.cpp',
         'jpeg_memory_src.cpp',
         'jpeg_memory_dest.cpp',
+        'jpeg_decoder_thread.cpp',
         'griv.cpp',
         'image.cpp',
         'md5.cpp',

Modified: trunk/griv/new/database_thread.cpp
===================================================================
--- trunk/griv/new/database_thread.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/database_thread.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -230,13 +230,15 @@
                     }
                   else
                     {
-                      std::cout << "Error: Couldn't get tile: " 
-                                << tile_msg->fileid << " "
-                                << tile_msg->x << " "
-                                << tile_msg->y << " "
-                                << tile_msg->tilescale
-                                << std::endl;
-                      
+                      if (0)
+                        std::cout << "Error: Couldn't get tile: " 
+                                  << tile_msg->fileid << " "
+                                  << tile_msg->x << " "
+                                  << tile_msg->y << " "
+                                  << tile_msg->tilescale
+                                  << std::endl;
+
+                      // TileGeneratorThread::request_tile(fileid, x, y, tilescale);
                     }
                 }
                 break;

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/griv.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -41,6 +41,7 @@
 #include "url.hpp"
 #include "sqlite.hpp"
 #include "software_surface.hpp"
+#include "jpeg_decoder_thread.hpp"
 #include "file_database.hpp"
 #include "tile_database.hpp"
 #include "database_thread.hpp"
@@ -123,10 +124,12 @@
     }
   atexit(SDL_Quit); 
 
-  DatabaseThread database_thread(database);
+  JPEGDecoderThread   jpeg_thread;
+  DatabaseThread      database_thread(database);
   TileGeneratorThread tile_generator_thread;
-  ViewerThread viewer_thread;
+  ViewerThread        viewer_thread;
 
+  jpeg_thread.start();
   database_thread.start();
   tile_generator_thread.start();
 

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/image.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include "math/rgb.hpp"
 #include "math/rect.hpp"
 #include "framebuffer.hpp"
 #include "surface.hpp"
@@ -140,6 +141,14 @@
     {
       ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this);
 
+      // Request the next smaller tile too, so we get a lower quality
+      // image fast and a higher quality one soon after FIXME: Its
+      // unclear if this actually improves things, also the order of
+      // request gets mungled in the DatabaseThread, we should request
+      // the whole group of lower res tiles at once, instead of one by
+      // one, since that eats up the possible speed up
+      ViewerThread::current()->request_tile(impl->fileid, tile_scale+1, x, y, *this);
+
       SurfaceStruct s;
       
       s.surface = Surface();
@@ -162,6 +171,7 @@
   if (surface)
     {
       surface.draw(Rectf(pos, surface.get_size() * scale));
+      //Framebuffer::draw_rect(Rectf(pos, surface.get_size() * scale), RGB(100, 100, 100));
     }
   else
     {
@@ -187,6 +197,7 @@
           i->second.surface.draw(Rectf(Vector2f(x%downscale, y%downscale) * 256/downscale, 
                                        s),
                                  Rectf(pos, s * scale * downscale));
+          //Framebuffer::draw_rect(Rectf(pos, s * scale * downscale), RGB(255, 255, 255));
         }
       else
         {
@@ -264,24 +275,31 @@
       // big images we would end up never clearing it
       
       // Clear the cache, but keep the smallest tile (Wonky hack)
-      int max_tiledb_scale = 0;
-      SurfaceStruct s;
-      int tileid;
-      for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
+      if (0)
         {
-          int tiledb_scale = (i->first >> 16);
-          if (tiledb_scale > max_tiledb_scale)
+          impl->cache.clear();
+        }
+      else
+        {
+          int max_tiledb_scale = 0;
+          SurfaceStruct s;
+          int tileid;
+          for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
             {
-              max_tiledb_scale = tiledb_scale;
-              tileid = i->first;
-              s      = i->second;
+              int tiledb_scale = (i->first >> 16);
+              if (tiledb_scale > max_tiledb_scale)
+                {
+                  max_tiledb_scale = tiledb_scale;
+                  tileid = i->first;
+                  s      = i->second;
+                }
             }
-        }
-      impl->cache.clear();
+          impl->cache.clear();
 
-      if (max_tiledb_scale != 0)
-        {
-          impl->cache[tileid] = s;
+          if (max_tiledb_scale != 0)
+            {
+              impl->cache[tileid] = s;
+            }
         }
     }
 }

Added: trunk/griv/new/jpeg_decoder_thread.cpp
===================================================================
--- trunk/griv/new/jpeg_decoder_thread.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/jpeg_decoder_thread.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -0,0 +1,71 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "software_surface.hpp"
+#include "jpeg_decoder_thread.hpp"
+
+JPEGDecoderThread* JPEGDecoderThread::current_ = 0;
+
+JPEGDecoderThread::JPEGDecoderThread()
+  : quit(false)
+{
+  current_ = 0;
+}
+
+void
+JPEGDecoderThread::request_decode(const Blob& blob,
+                                  const boost::function<void (const SoftwareSurface&)>& callback)
+{
+  JPEGDecoderThreadMessage msg;
+  msg.blob     = blob;
+  msg.callback = callback;
+  queue.push(msg);
+}
+
+void 
+JPEGDecoderThread::stop()
+{
+  quit = true;
+}
+
+int
+JPEGDecoderThread::run()
+{
+  quit = false;
+  while (!quit)
+    {
+      while(!queue.empty())
+        {
+          JPEGDecoderThreadMessage msg = queue.front();
+          queue.pop();
+          msg.callback(SoftwareSurface::from_data(msg.blob));
+        }
+      queue.wait();
+    }
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/griv/new/jpeg_decoder_thread.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/new/jpeg_decoder_thread.hpp
===================================================================
--- trunk/griv/new/jpeg_decoder_thread.hpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/jpeg_decoder_thread.hpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -0,0 +1,71 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_JPEG_DECODER_THREAD_HPP
+#define HEADER_JPEG_DECODER_THREAD_HPP
+
+#include <boost/function.hpp>
+#include "thread_message_queue.hpp"
+#include "blob.hpp"
+#include "thread.hpp"
+
+class SoftwareSurface;
+
+/** Simple thread that takes a binary blob and decodes it to a
+    SoftwareSurface */
+class JPEGDecoderThread : public Thread
+{
+private:
+  static JPEGDecoderThread* current_;
+
+public:
+  static JPEGDecoderThread* current() { return current_; } 
+
+private:
+  struct JPEGDecoderThreadMessage 
+  {
+    Blob blob;
+    boost::function<void (const SoftwareSurface&)> callback;
+  };
+
+  ThreadMessageQueue<JPEGDecoderThreadMessage> queue;
+  bool quit;
+
+protected:
+  int run();
+public:
+  JPEGDecoderThread();
+
+  void request_decode(const Blob& blob, const boost::function<void (const SoftwareSurface&)>& callback);
+  void stop();
+
+private:
+  JPEGDecoderThread (const JPEGDecoderThread&);
+  JPEGDecoderThread& operator= (const JPEGDecoderThread&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/jpeg_decoder_thread.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/tile_database.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -64,6 +64,8 @@
       tile.scale   = reader.get_int (1);
       tile.x       = reader.get_int (2);
       tile.y       = reader.get_int (3);
+
+      // FIXME: Do this in the JPEGDecoderThread
       tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
 
       return true;

Modified: trunk/griv/new/tile_generator_thread.cpp
===================================================================
--- trunk/griv/new/tile_generator_thread.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/tile_generator_thread.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -53,6 +53,12 @@
 }
 
 void
+TileGeneratorThread::request_tile(int fileid, const std::string& filename, int x, int y)
+{
+  
+}
+
+void
 TileGeneratorThread::stop()
 {
   quit = true;

Modified: trunk/griv/new/tile_generator_thread.hpp
===================================================================
--- trunk/griv/new/tile_generator_thread.hpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/tile_generator_thread.hpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -54,7 +54,10 @@
   ~TileGeneratorThread();
 
   void stop();
+
   void request_tiles(int fileid, const std::string& filename);
+  void request_tile(int fileid, const std::string& filename, int x, int y);
+
   void receive_tile(const Tile& tile);
   
 private:

Modified: trunk/griv/new/viewer.cpp
===================================================================
--- trunk/griv/new/viewer.cpp	2008-08-15 13:12:44 UTC (rev 2331)
+++ trunk/griv/new/viewer.cpp	2008-08-15 13:14:24 UTC (rev 2332)
@@ -24,6 +24,7 @@
 */
 
 #include <iostream>
+#include "math/rgb.hpp"
 #include "framebuffer.hpp"
 #include "software_surface.hpp"
 #include "math/vector2f.hpp"
@@ -184,7 +185,7 @@
   Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
 
   if (clip_debug)
-    Framebuffer::draw_rect(cliprect);
+    Framebuffer::draw_rect(cliprect, RGB(255, 0, 255));
   
   workspace.draw(cliprect,
                  state.get_scale());



From grumbel at mail.berlios.de  Fri Aug 15 00:13:48 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 00:13:48 +0200
Subject: [Windstille-commit] r2328 - trunk/griv/new
Message-ID: <200808142213.m7EMDm5e006495@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 00:13:48 +0200 (Fri, 15 Aug 2008)
New Revision: 2328

Modified:
   trunk/griv/new/griv.cpp
   trunk/griv/new/image.cpp
Log:
Go over all smaller tiles, instead of just the one one scale away, this makes zoom in smooth, zoom out still broken

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-14 21:59:29 UTC (rev 2327)
+++ trunk/griv/new/griv.cpp	2008-08-14 22:13:48 UTC (rev 2328)
@@ -66,7 +66,9 @@
 Griv::cleanup(const std::string& database)
 {
   SQLiteConnection db(database);
+  std::cout << "Running database cleanup routines, this process can multiple minutes" << std::endl;
   db.vacuum();
+  std::cout << "Running database cleanup routines done" << std::endl;
 }
 
 void

Modified: trunk/griv/new/image.cpp
===================================================================
--- trunk/griv/new/image.cpp	2008-08-14 21:59:29 UTC (rev 2327)
+++ trunk/griv/new/image.cpp	2008-08-14 22:13:48 UTC (rev 2328)
@@ -167,15 +167,19 @@
     {
       // Look for the next smaller tile
       // FIXME: Rewrite this to work all smaller tiles, not just the next
-      int downscale = Math::pow2(1);
+      
+      int downscale_factor = 1;
 
-      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+1);
+    retry:
+      int downscale = Math::pow2(downscale_factor);
+
+      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+downscale_factor);
       Cache::iterator i = impl->cache.find(cache_id);
   
       if (i != impl->cache.end() && i->second.surface)
         { // Must only draw relevant section!
-          Size s((x%downscale) ? (i->second.surface.get_width()  - 256/downscale) : 256/downscale,
-                 (y%downscale) ? (i->second.surface.get_height() - 256/downscale) : 256/downscale);
+          Size s((x%downscale) ? (i->second.surface.get_width()  - 256/downscale * (x%downscale)) : 256/downscale,
+                 (y%downscale) ? (i->second.surface.get_height() - 256/downscale * (y%downscale)) : 256/downscale);
 
           s.width  = Math::min(i->second.surface.get_width(),  s.width);
           s.height = Math::min(i->second.surface.get_height(), s.height);
@@ -184,6 +188,18 @@
                                        s),
                                  Rectf(pos, s * scale * downscale));
         }
+      else
+        {
+          if (downscale_factor < 6) // Make this 'max_scale' instead of random number
+            {
+              downscale_factor += 1;
+              goto retry;
+            }
+          else
+            {
+              // give up, no lower resolution found
+            }
+        }
     }
 }
 



From grumbel at mail.berlios.de  Thu Aug 14 23:57:59 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 14 Aug 2008 23:57:59 +0200
Subject: [Windstille-commit] r2325 - in trunk/griv/new: . math
Message-ID: <200808142157.m7ELvxRg004811@sheep.berlios.de>

Author: grumbel
Date: 2008-08-14 23:57:59 +0200 (Thu, 14 Aug 2008)
New Revision: 2325

Added:
   trunk/griv/new/math/rgb.hpp
Modified:
   trunk/griv/new/framebuffer.cpp
   trunk/griv/new/framebuffer.hpp
Log:
Added RGB class and way to draw colored rects

Modified: trunk/griv/new/framebuffer.cpp
===================================================================
--- trunk/griv/new/framebuffer.cpp	2008-08-14 14:01:22 UTC (rev 2324)
+++ trunk/griv/new/framebuffer.cpp	2008-08-14 21:57:59 UTC (rev 2325)
@@ -26,6 +26,7 @@
 #include <iostream>
 #include <GL/glew.h>
 #include <GL/gl.h>
+#include "math/rgb.hpp"
 #include "SDL_syswm.h"
 #include "math/rect.hpp"
 #include "framebuffer.hpp"
@@ -155,4 +156,18 @@
   //glDisable(GL_BLEND);
 }
 
+void
+Framebuffer::fill_rect(const Rectf& rect, const RGB& rgb)
+{
+  glDisable(GL_TEXTURE_RECTANGLE_ARB);
+
+  glColor3ub(rgb.r, rgb.g, rgb.b);
+  glBegin(GL_QUADS);
+  glVertex2f(rect.left,  rect.top);
+  glVertex2f(rect.right, rect.top);
+  glVertex2f(rect.right, rect.bottom);
+  glVertex2f(rect.left,  rect.bottom);
+  glEnd();
+}
+
 /* EOF */

Modified: trunk/griv/new/framebuffer.hpp
===================================================================
--- trunk/griv/new/framebuffer.hpp	2008-08-14 14:01:22 UTC (rev 2324)
+++ trunk/griv/new/framebuffer.hpp	2008-08-14 21:57:59 UTC (rev 2325)
@@ -33,6 +33,7 @@
 #include <math.h>
 #include "SDL.h"
 
+class RGB;
 class Size;
 class Rectf;
 
@@ -67,6 +68,7 @@
   static void clear();
 
   static void draw_rect(const Rectf& rect);
+  static void fill_rect(const Rectf& rect, const RGB& rgb);
 };
 
 #endif

Added: trunk/griv/new/math/rgb.hpp
===================================================================
--- trunk/griv/new/math/rgb.hpp	2008-08-14 14:01:22 UTC (rev 2324)
+++ trunk/griv/new/math/rgb.hpp	2008-08-14 21:57:59 UTC (rev 2325)
@@ -0,0 +1,47 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_MATH_RGB_HPP
+#define HEADER_MATH_RGB_HPP
+
+class RGB
+{
+public:
+  uint8_t r;
+  uint8_t g; 
+  uint8_t b;
+
+  RGB()
+    : r(0), g(0), b(0)
+  {}
+
+  RGB(uint8_t r, uint8_t g, uint8_t b)
+    : r(r), g(g), b(b)
+  {}
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/new/math/rgb.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Fri Aug 15 22:21:36 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 15 Aug 2008 22:21:36 +0200
Subject: [Windstille-commit] r2335 - trunk/griv/new
Message-ID: <200808152021.m7FKLand011332@sheep.berlios.de>

Author: grumbel
Date: 2008-08-15 22:21:36 +0200 (Fri, 15 Aug 2008)
New Revision: 2335

Modified:
   trunk/griv/new/filesystem.cpp
   trunk/griv/new/griv.cpp
Log:
Accept directory arguments and shut down the jpeg thread properly

Modified: trunk/griv/new/filesystem.cpp
===================================================================
--- trunk/griv/new/filesystem.cpp	2008-08-15 20:15:46 UTC (rev 2334)
+++ trunk/griv/new/filesystem.cpp	2008-08-15 20:21:36 UTC (rev 2335)
@@ -229,7 +229,7 @@
           Filesystem::has_extension(*i, ".JPEG") ||
           Filesystem::has_extension(*i, ".jpeg"))
         {
-          file_list.push_back("file://" + Filesystem::realpath(*i)); // realpath slow?
+          file_list.push_back(Filesystem::realpath(*i)); // realpath slow?
         }
     }
 }

Modified: trunk/griv/new/griv.cpp
===================================================================
--- trunk/griv/new/griv.cpp	2008-08-15 20:15:46 UTC (rev 2334)
+++ trunk/griv/new/griv.cpp	2008-08-15 20:21:36 UTC (rev 2335)
@@ -149,19 +149,21 @@
   viewer_thread.run();
 
   tile_generator_thread.stop();
-  tile_generator_thread.join();
+  database_thread.stop();
+  jpeg_thread.stop();
 
-  database_thread.stop();
+  tile_generator_thread.join(); 
   database_thread.join();
+  jpeg_thread.join();
 }
 
 void
 Griv::print_usage()
 {
       std::cout << "Usage: griv view    [OPTIONS]... [FILES]...\n"
-                << "       griv check   [OPTIONS]... [FILES]...\n"
-                << "       griv cleanup [OPTIONS]... [FILES]...\n"
                 << "       griv prepare [OPTIONS]... [FILES]...\n"
+                << "       griv check   [OPTIONS]...\n"
+                << "       griv cleanup [OPTIONS]...\n"
                 << "\n"
                 << "Options:\n"
                 << "  -d, --database FILE    Use FILE has database (default: test.sqlite)\n"
@@ -183,7 +185,7 @@
     }
   else
     {
-      std::vector<std::string> filenames;
+      std::vector<std::string> argument_filenames;
       for(int i = 2; i < argc; ++i)
         {
           if (argv[i][0] == '-')
@@ -214,10 +216,16 @@
             }
           else
             {
-              filenames.push_back(Filesystem::realpath(argv[i]));
+              argument_filenames.push_back(Filesystem::realpath(argv[i]));
             }
         }
 
+      std::vector<std::string> filenames;
+      for(std::vector<std::string>::iterator i = argument_filenames.begin(); i != argument_filenames.end(); ++i)
+        Filesystem::generate_jpeg_file_list(*i, filenames);
+
+      std::sort(filenames.begin(), filenames.end());
+
       if (strcmp(argv[1], "view") == 0)
         {
           view(database, filenames);



From grumbel at mail.berlios.de  Sat Aug 16 02:42:35 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 16 Aug 2008 02:42:35 +0200
Subject: [Windstille-commit] r2337 - trunk/griv/new
Message-ID: <200808160042.m7G0gZNA027209@sheep.berlios.de>

Author: grumbel
Date: 2008-08-16 02:42:33 +0200 (Sat, 16 Aug 2008)
New Revision: 2337

Modified:
   trunk/griv/new/tile_database.cpp
Log:
Removed debugging stuff

Modified: trunk/griv/new/tile_database.cpp
===================================================================
--- trunk/griv/new/tile_database.cpp	2008-08-15 20:23:02 UTC (rev 2336)
+++ trunk/griv/new/tile_database.cpp	2008-08-16 00:42:33 UTC (rev 2337)
@@ -89,10 +89,6 @@
   store_stmt.bind_int (4, tile.y);
   store_stmt.bind_blob(5, blob);
 
-  std::ostringstream str;
-  str << "/tmp/out-" << tile.fileid << "-" << tile.scale << "-" << tile.x << "-" << tile.y << ".jpg";
-  blob.write_to_file(str.str());
-
   store_stmt.execute();
 }
 



From grumbel at mail.berlios.de  Wed Aug 20 19:21:16 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 20 Aug 2008 19:21:16 +0200
Subject: [Windstille-commit] r2342 - trunk
Message-ID: <200808201721.m7KHLGQx001103@sheep.berlios.de>

Author: grumbel
Date: 2008-08-20 19:21:14 +0200 (Wed, 20 Aug 2008)
New Revision: 2342

Added:
   trunk/griv-old/
Removed:
   trunk/griv/
Log:
Moved old griv code to its own directory


Copied: trunk/griv-old (from rev 2341, trunk/griv)



From grumbel at mail.berlios.de  Wed Aug 20 19:21:45 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 20 Aug 2008 19:21:45 +0200
Subject: [Windstille-commit] r2343 - in trunk: . griv-old
Message-ID: <200808201721.m7KHLj2c001575@sheep.berlios.de>

Author: grumbel
Date: 2008-08-20 19:21:44 +0200 (Wed, 20 Aug 2008)
New Revision: 2343

Added:
   trunk/griv/
Removed:
   trunk/griv-old/new/
Log:
Moved new griv into the place of the old one


Copied: trunk/griv (from rev 2342, trunk/griv-old/new)



From grumbel at mail.berlios.de  Wed Aug 20 19:32:29 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 20 Aug 2008 19:32:29 +0200
Subject: [Windstille-commit] r2344 - trunk/griv
Message-ID: <200808201732.m7KHWT6i026805@sheep.berlios.de>

Author: grumbel
Date: 2008-08-20 19:32:28 +0200 (Wed, 20 Aug 2008)
New Revision: 2344

Modified:
   trunk/griv/griv.cpp
Log:
Some mor documentation and let the code behave as documented

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2008-08-20 17:21:44 UTC (rev 2343)
+++ trunk/griv/griv.cpp	2008-08-20 17:32:28 UTC (rev 2344)
@@ -95,8 +95,9 @@
 void
 Griv::cleanup(const std::string& database)
 {
-  SQLiteConnection db(database);
-  std::cout << "Running database cleanup routines, this process can multiple minutes" << std::endl;
+  SQLiteConnection db(database); 
+  std::cout << "Running database cleanup routines, this process can take multiple minutes." << std::endl;
+   std::cout << "You can interrupt it via Ctrl-c, which won't do harm, but will throw away all the cleanup work done till that point" << std::endl;
   db.vacuum();
   std::cout << "Running database cleanup routines done" << std::endl;
 }
@@ -107,9 +108,14 @@
   SQLiteConnection db(database);
 
   FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-  
-  
+
+  std::vector<FileEntry> entries;
+  file_db.get_file_entries(entries);
+
+  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
+    {
+      std::cout << i->filename << std::endl;
+    }  
 }
 
 void
@@ -120,14 +126,6 @@
   FileDatabase file_db(&db);
 
   file_db.check();
-
-  std::vector<FileEntry> entries;
-  file_db.get_file_entries(entries);
-
-  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
-    {
-      std::cout << i->filename << std::endl;
-    }
 }
 
 void
@@ -212,8 +210,17 @@
                 << "       griv list    [OPTIONS]...\n"
                 << "       griv cleanup [OPTIONS]...\n"
                 << "\n"
+                << "Commands:\n"
+                << "  view      Display the given files\n"
+                << "  prepare   Generate thumbnails for all given images, makes view command faster\n"
+                << "  list      Lists all files in the database\n"
+                << "  check     Checks the database for consistency\n"
+                << "  cleanup   Runs garbage collection on the database\n"
+                << "\n"
                 << "Options:\n"
                 << "  -d, --database FILE    Use FILE has database (default: test.sqlite)\n"
+                << "\n"
+                << "If you do not supply any files, the whole content of the given database will be displayed."
                 << std::endl;
 }
 



From grumbel at mail.berlios.de  Wed Aug 20 23:59:00 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 20 Aug 2008 23:59:00 +0200
Subject: [Windstille-commit] r2345 - in trunk/griv: . src
Message-ID: <200808202159.m7KLx06I030724@sheep.berlios.de>

Author: grumbel
Date: 2008-08-20 23:58:58 +0200 (Wed, 20 Aug 2008)
New Revision: 2345

Added:
   trunk/griv/src/
   trunk/griv/src/blob.cpp
   trunk/griv/src/blob.hpp
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_database.hpp
   trunk/griv/src/filesystem.cpp
   trunk/griv/src/filesystem.hpp
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
   trunk/griv/src/grid.hpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/griv.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/job_handle.cpp
   trunk/griv/src/job_handle.hpp
   trunk/griv/src/jpeg.cpp
   trunk/griv/src/jpeg.hpp
   trunk/griv/src/jpeg_decoder_thread.cpp
   trunk/griv/src/jpeg_decoder_thread.hpp
   trunk/griv/src/jpeg_image.cpp
   trunk/griv/src/jpeg_image.hpp
   trunk/griv/src/jpeg_memory_dest.cpp
   trunk/griv/src/jpeg_memory_dest.hpp
   trunk/griv/src/jpeg_memory_src.cpp
   trunk/griv/src/jpeg_memory_src.hpp
   trunk/griv/src/math.cpp
   trunk/griv/src/math.hpp
   trunk/griv/src/math/
   trunk/griv/src/md5.cpp
   trunk/griv/src/md5.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/sqlite.cpp
   trunk/griv/src/sqlite.hpp
   trunk/griv/src/surface.cpp
   trunk/griv/src/surface.hpp
   trunk/griv/src/texture.cpp
   trunk/griv/src/texture.hpp
   trunk/griv/src/thread.cpp
   trunk/griv/src/thread.hpp
   trunk/griv/src/thread_message_queue.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/tile_generator.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/url.cpp
   trunk/griv/src/url.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Removed:
   trunk/griv/blob.cpp
   trunk/griv/blob.hpp
   trunk/griv/database_thread.cpp
   trunk/griv/database_thread.hpp
   trunk/griv/file_database.cpp
   trunk/griv/file_database.hpp
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/framebuffer.cpp
   trunk/griv/framebuffer.hpp
   trunk/griv/grid.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/job_handle.cpp
   trunk/griv/job_handle.hpp
   trunk/griv/jpeg.cpp
   trunk/griv/jpeg.hpp
   trunk/griv/jpeg_decoder_thread.cpp
   trunk/griv/jpeg_decoder_thread.hpp
   trunk/griv/jpeg_image.cpp
   trunk/griv/jpeg_image.hpp
   trunk/griv/jpeg_memory_dest.cpp
   trunk/griv/jpeg_memory_dest.hpp
   trunk/griv/jpeg_memory_src.cpp
   trunk/griv/jpeg_memory_src.hpp
   trunk/griv/math.cpp
   trunk/griv/math.hpp
   trunk/griv/math/
   trunk/griv/md5.cpp
   trunk/griv/md5.hpp
   trunk/griv/software_surface.cpp
   trunk/griv/software_surface.hpp
   trunk/griv/sqlite.cpp
   trunk/griv/sqlite.hpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
   trunk/griv/thread.cpp
   trunk/griv/thread.hpp
   trunk/griv/thread_message_queue.hpp
   trunk/griv/tile_database.cpp
   trunk/griv/tile_database.hpp
   trunk/griv/tile_generator.cpp
   trunk/griv/tile_generator.hpp
   trunk/griv/tile_generator_thread.cpp
   trunk/griv/tile_generator_thread.hpp
   trunk/griv/url.cpp
   trunk/griv/url.hpp
   trunk/griv/viewer.cpp
   trunk/griv/viewer.hpp
   trunk/griv/viewer_thread.cpp
   trunk/griv/viewer_thread.hpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Modified:
   trunk/griv/README
   trunk/griv/SConstruct
Log:
Moved code into src/ subdirectory

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/README	2008-08-20 21:58:58 UTC (rev 2345)
@@ -4,9 +4,9 @@
 griv is a image viewer that allows you to directly zoom into large
 collection of thumbnails down to the images original size. Its goal is
 to allow its viewer to view 100'000 images at once, fluently without
-any noticable load times. griv requires currently a tile cache to make
-this work, which require around 1.5 times as much diskspace as the
-original image data.
+any noticable load times. griv requires a tile cache to make this
+work, which require around 1.5x times as much diskspace as the original
+image data. 
 
 
 Required Libraries:
@@ -15,13 +15,14 @@
 On Ubuntu you have to do a:
 
 apt-get install \
-libsqlite3-dev \
-libmhash-dev \
-libglew1.5-dev \
-libjpeg62-dev \
-scons
+  libsqlite3-dev \
+  libmhash-dev \
+  libglew1.5-dev \
+  libjpeg62-dev \
+  scons
 
-And make sure you have OpenGL installed. For other distributions library names might be a little different.
+And make sure you have OpenGL installed. For other distributions
+library names might be a little different.
 
 
 Bugs:
@@ -29,8 +30,8 @@
 
 When zooming into an images one will see noticable seams at the areas
 where the tiles meet. A possible fix for this would be to add a 1px
-width border to the tiles, but that would screw up the tile generation
-process from JPEG data.
+width border to the tiles, but that would slow down the tile
+generation process from JPEG data, so it might never get implemented.
 
 
 # EOF #

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/SConstruct	2008-08-20 21:58:58 UTC (rev 2345)
@@ -9,38 +9,38 @@
 griv_env.ParseConfig("sdl-config --libs --cflags")
 griv_env.ParseConfig("pkg-config sqlite3 --libs --cflags")
 griv_env.Program('griv', [
-        'blob.cpp',
-        'math.cpp',
-        'math/size.cpp',
-        'math/rect.cpp',
-        'math/vector2i.cpp',
-        'math/vector2f.cpp',
-        'math/vector3f.cpp',
-        'file_database.cpp',
-        'filesystem.cpp',
-        'framebuffer.cpp',
-        'jpeg.cpp',
-        'jpeg_image.cpp',
-        'jpeg_memory_src.cpp',
-        'jpeg_memory_dest.cpp',
-        'jpeg_decoder_thread.cpp',
-        'job_handle.cpp',
-        'griv.cpp',
-        'image.cpp',
-        'md5.cpp',
-        'software_surface.cpp',
-        'sqlite.cpp',
-        'surface.cpp',
-        'texture.cpp',
-        'thread.cpp',
-        'tile_database.cpp',
-        'tile_generator.cpp',
-        'tile_generator_thread.cpp',
-        'database_thread.cpp',
-        'viewer_thread.cpp',
-        'url.cpp',
-        'viewer.cpp',
-        'workspace.cpp',
+        'src/blob.cpp',
+        'src/math.cpp',
+        'src/math/size.cpp',
+        'src/math/rect.cpp',
+        'src/math/vector2i.cpp',
+        'src/math/vector2f.cpp',
+        'src/math/vector3f.cpp',
+        'src/file_database.cpp',
+        'src/filesystem.cpp',
+        'src/framebuffer.cpp',
+        'src/jpeg.cpp',
+        'src/jpeg_image.cpp',
+        'src/jpeg_memory_src.cpp',
+        'src/jpeg_memory_dest.cpp',
+        'src/jpeg_decoder_thread.cpp',
+        'src/job_handle.cpp',
+        'src/griv.cpp',
+        'src/image.cpp',
+        'src/md5.cpp',
+        'src/software_surface.cpp',
+        'src/sqlite.cpp',
+        'src/surface.cpp',
+        'src/texture.cpp',
+        'src/thread.cpp',
+        'src/tile_database.cpp',
+        'src/tile_generator.cpp',
+        'src/tile_generator_thread.cpp',
+        'src/database_thread.cpp',
+        'src/viewer_thread.cpp',
+        'src/url.cpp',
+        'src/viewer.cpp',
+        'src/workspace.cpp',
         ])
 
 # EOF #

Deleted: trunk/griv/blob.cpp
===================================================================
--- trunk/griv/blob.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/blob.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,93 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <fstream>
-#include "blob.hpp"
-
-class BlobImpl
-{
-public:
-  uint8_t* data;
-  int      len;
-
-  BlobImpl(const void* data_, int len_)
-  {
-    data = new uint8_t[len_];
-    len  = len_;
-
-    memcpy(data, data_, len);
-  }
-
-  BlobImpl(const std::vector<uint8_t>& data_in)
-  {
-    data = new uint8_t[data_in.size()];
-    len  = data_in.size();
-
-    memcpy(data, &*data_in.begin(), len);
-  }
-
-  ~BlobImpl()
-  {
-    delete[] data;
-  }
-};
-
-Blob::Blob(const std::vector<uint8_t>& data)
-  : impl(new BlobImpl(data))
-{}
-
-Blob::Blob(const void* data, int len)
-  : impl(new BlobImpl(data, len))
-{}
-
-Blob::Blob()
-{}
-
-int
-Blob::size() const 
-{
-  if (impl.get())
-    return impl->len; 
-  else
-    return 0;
-}
-
-uint8_t* 
-Blob::get_data() const 
-{
-  if (impl.get())
-    return impl->data; 
-  else
-    return 0;
-}
-
-void
-Blob::write_to_file(const std::string& filename)
-{
-  std::ofstream out(filename.c_str(), std::ios::binary);
-  out.write(reinterpret_cast<char*>(impl->data), impl->len);
-}
-
-/* EOF */

Deleted: trunk/griv/blob.hpp
===================================================================
--- trunk/griv/blob.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/blob.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,52 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_BLOB_HPP
-#define HEADER_BLOB_HPP
-
-#include <boost/smart_ptr.hpp>
-#include <vector>
-
-class BlobImpl;
-
-class Blob
-{
-public:
-  Blob();
-  Blob(const std::vector<uint8_t>& data);
-  Blob(const void* data, int len);
-
-  int size() const;
-  uint8_t* get_data() const;
-
-  void write_to_file(const std::string& filename);
-
-private: 
-  boost::shared_ptr<BlobImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/database_thread.cpp
===================================================================
--- trunk/griv/database_thread.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/database_thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,273 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <assert.h>
-#include "file_database.hpp"
-#include "tile_database.hpp"
-#include "tile_generator_thread.hpp"
-#include "database_thread.hpp"
-
-enum DatabaseMessageType 
-{
-  DATABASE_ALL_FILES_MESSAGE,
-  DATABASE_FILE_MESSAGE,
-  DATABASE_TILE_MESSAGE,
-  DATABASE_STORE_TILE_MESSAGE
-};
-
-class DatabaseMessage
-{
-public:
-  DatabaseMessageType type;
-
-  DatabaseMessage(DatabaseMessageType type_)
-    : type(type_)
-  {}
-
-  virtual ~DatabaseMessage()
-  {}
-};
-
-class TileDatabaseMessage : public DatabaseMessage
-{
-public:
-  JobHandle job_handle;
-
-  int fileid;
-  int tilescale;
-  int x;
-  int y;
-  boost::function<void (Tile)> callback;
-
-  TileDatabaseMessage(const JobHandle& job_handle,
-                      int fileid, int tilescale, int x, int y,
-                      const boost::function<void (Tile)>& callback)
-    : DatabaseMessage(DATABASE_TILE_MESSAGE),
-      job_handle(job_handle),
-      fileid(fileid),
-      tilescale(tilescale),
-      x(x),
-      y(y),
-      callback(callback)
-  {}
-};
-
-class FileDatabaseMessage : public DatabaseMessage
-{
-public:
-  std::string filename;
-  boost::function<void (FileEntry)> callback;
-
-  FileDatabaseMessage(const std::string& filename,
-                      const boost::function<void (FileEntry)>& callback)
-    : DatabaseMessage(DATABASE_FILE_MESSAGE),
-      filename(filename),
-      callback(callback)
-  {}
-};
-
-class AllFilesDatabaseMessage : public DatabaseMessage
-{
-public:
-  boost::function<void (FileEntry)> callback;
-
-  AllFilesDatabaseMessage(const boost::function<void (FileEntry)>& callback)
-    : DatabaseMessage(DATABASE_ALL_FILES_MESSAGE),
-      callback(callback)
-  {
-  }
-};
-
-class StoreTileDatabaseMessage : public DatabaseMessage
-{
-public:
-  Tile tile;
-
-  StoreTileDatabaseMessage(const Tile& tile)
-    : DatabaseMessage(DATABASE_STORE_TILE_MESSAGE),
-      tile(tile)
-  {}
-};
-
-DatabaseThread* DatabaseThread::current_ = 0;
-
-DatabaseThread::DatabaseThread(const std::string& filename_)
-  : database_filename(filename_),
-    quit(false)
-{
-  assert(current_ == 0);
-  current_ = this;
-}
-
-DatabaseThread::~DatabaseThread()
-{
-}
-
-JobHandle
-DatabaseThread::request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback)
-{
-  JobHandle job_handle;
-  queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, x, y, callback));
-  return job_handle;
-}
-
-void
-DatabaseThread::request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback)
-{
-  queue.push(new FileDatabaseMessage(filename, callback));
-}
-
-void
-DatabaseThread::request_all_files(const boost::function<void (FileEntry)>& callback)
-{
-  queue.push(new AllFilesDatabaseMessage(callback));
-}
-
-void
-DatabaseThread::store_tile(const Tile& tile)
-{
-  queue.push(new StoreTileDatabaseMessage(tile));
-}
-
-void
-DatabaseThread::stop()
-{
-  quit = true;
-}
-
-int
-DatabaseThread::run()
-{
-  quit = false;
-
-  std::cout << "Connecting to the database..." << std::endl;
-  SQLiteConnection db(database_filename);
-  FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-  std::cout << "Connecting to the database... done" << std::endl;
-
-  std::vector<DatabaseMessage*> messages;
-  while(!quit)
-    {
-      //std::cout << "DatabaseThread: looping" << std::endl;
-      
-      // do things
-      while(!queue.empty() && !quit)
-        {
-          messages.push_back(queue.front());
-          queue.pop();
-        }
-
-      if (!messages.empty())
-        {
-          DatabaseMessage* msg = messages.back();
-          messages.pop_back();
-
-          switch(msg->type)
-            {
-              case DATABASE_STORE_TILE_MESSAGE:
-                {
-                  StoreTileDatabaseMessage* tile_msg = static_cast<StoreTileDatabaseMessage*>(msg);
-                  tile_db.store_tile(tile_msg->tile);
-                }
-                break;
-
-              case DATABASE_FILE_MESSAGE:
-                {
-                  FileDatabaseMessage* file_msg = static_cast<FileDatabaseMessage*>(msg);
-                  FileEntry entry;
-
-                  //std::cout << "Lookup for: " << file_msg->filename << std::endl;
-                  if (file_db.get_file_entry(file_msg->filename, &entry))
-                    {
-                      //std::cout << entry.filename << " -> " << entry.fileid << std::endl;
-                      file_msg->callback(entry);
-                    }
-                  else
-                    {
-                      std::cout << "Error: Couldn't get FileEntry for " << file_msg->filename << std::endl;
-                    }
-                }
-                break;
-
-              case DATABASE_ALL_FILES_MESSAGE:
-                {
-                  AllFilesDatabaseMessage* all_files_msg = static_cast<AllFilesDatabaseMessage*>(msg);
-                  std::vector<FileEntry> entries;
-                  file_db.get_file_entries(entries);
-                  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
-                    {
-                      all_files_msg->callback(*i);
-                    }
-                }
-                break;
-
-              case DATABASE_TILE_MESSAGE:
-                {
-                  TileDatabaseMessage* tile_msg = static_cast<TileDatabaseMessage*>(msg);
-
-                  if (!tile_msg->job_handle.is_aborted())
-                    {
-                      Tile tile;
-                      if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->x, tile_msg->y, tile))
-                        {
-                          tile_msg->callback(tile);
-                          tile_msg->job_handle.finish();
-                        }
-                      else
-                        {
-                          if (0)
-                            std::cout << "Error: Couldn't get tile: " 
-                                      << tile_msg->fileid << " "
-                                      << tile_msg->x << " "
-                                      << tile_msg->y << " "
-                                      << tile_msg->tilescale
-                                      << std::endl;
-
-                          tile_msg->job_handle.finish();
-                          // Need to send loading command back
-                          //TileGeneratorThread::request_tile(fileid, x, y, tilescale);
-                        }
-                    }
-                }
-                break;
-
-              default:
-                assert(!"Unknown message type");
-            }
-
-          delete msg;
-        }
-      else
-        {
-          queue.wait();
-        }
-    }
-
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/griv/database_thread.hpp
===================================================================
--- trunk/griv/database_thread.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/database_thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,75 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_DATABASE_THREAD_HPP
-#define HEADER_DATABASE_THREAD_HPP
-
-#include <boost/function.hpp>
-#include <string>
-#include "thread_message_queue.hpp"
-#include "file_database.hpp"
-#include "tile_database.hpp"
-#include "job_handle.hpp"
-#include "thread.hpp"
-
-class DatabaseMessage;
-
-/** */
-class DatabaseThread : public Thread
-{
-private:
-  static DatabaseThread* current_;
-public:
-  static DatabaseThread* current() { return current_; }
-  
-private:
-  std::string database_filename;
-  bool quit;
-  
-  ThreadMessageQueue<DatabaseMessage*> queue;
-
-protected: 
-  int run();
-
-public:
-  DatabaseThread(const std::string&);
-  virtual ~DatabaseThread();
-  
-  void stop();
-  
-  JobHandle request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback);
-  void request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
-  void request_all_files(const boost::function<void (FileEntry)>& callback);
-
-  void store_tile(const Tile& tile);
-
-private:
-  DatabaseThread (const DatabaseThread&);
-  DatabaseThread& operator= (const DatabaseThread&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/file_database.cpp
===================================================================
--- trunk/griv/file_database.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/file_database.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,197 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <sstream>
-#include <stdexcept>
-
-#include <assert.h>
-#include "jpeg.hpp"
-#include "filesystem.hpp"
-#include "software_surface.hpp"
-#include "file_database.hpp"
-
-std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
-{
-  return os << "filename: " << entry.filename << " size: "<< entry.size;
-}
-
-FileDatabase::FileDatabase(SQLiteConnection* db)
-  : db(db),
-    store_stmt(db),
-    get_by_filename_stmt(db),
-    get_all_stmt(db),
-    get_by_file_id_stmt(db)
-{
-  db->exec("CREATE TABLE IF NOT EXISTS files ("
-           "fileid    INTEGER PRIMARY KEY AUTOINCREMENT,"
-           "filename  TEXT UNIQUE, "
-           "md5       TEXT, "
-           "filesize  INTEGER, "
-           "width     INTEGER, "
-           "height    INTEGER, "
-           "mtime     INTEGER);");
-
-  db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename );");
-
-  store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
-  get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
-  get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
-  get_all_stmt.prepare("SELECT * FROM files");
-}
- 
-FileDatabase::~FileDatabase()
-{
-
-}
- 
-int
-FileDatabase::store_file_entry(FileEntry& entry)
-{
-  assert(entry.fileid == -1);
-
-  store_stmt.bind_text(1, entry.filename);
-  if (entry.md5.empty())
-    store_stmt.bind_null(2);
-  else
-    store_stmt.bind_text(2, entry.md5);
-  store_stmt.bind_int (3, entry.filesize); 
-  store_stmt.bind_int (4, entry.size.width); 
-  store_stmt.bind_int (5, entry.size.height);
-  store_stmt.bind_int (6, entry.mtime); 
-
-  store_stmt.execute();
-  
-  entry.fileid = sqlite3_last_insert_rowid(db->get_db());
-
-  return entry.fileid;
-}
-
-bool
-FileDatabase::get_file_entry(const std::string& filename, FileEntry* entry)
-{
-  get_by_filename_stmt.bind_text(1, filename);
-  SQLiteReader reader = get_by_filename_stmt.execute_query();
-
-  if (reader.next())
-    {
-      if (0)
-        std::cout << "Row: " 
-                  << reader.get_column_name(0) << " "
-                  << reader.get_text(0)
-                  << std::endl;
-
-      entry->fileid      = reader.get_int (0);
-      entry->filename    = reader.get_text(1);
-      entry->md5         = reader.get_text(2);
-      entry->filesize    = reader.get_int (3);
-      entry->size.width  = reader.get_int (4);
-      entry->size.height = reader.get_int (5);
-
-      return true;
-    }
-  else
-    {
-      entry->fileid   = -1;
-      entry->filename = filename;
-      entry->filesize = Filesystem::get_size(filename);
-      entry->mtime    = Filesystem::get_mtime(filename);
-      
-      entry->size = Size(-1, -1);
-      
-      JPEG::get_size(entry->filename, entry->size);
-
-      store_file_entry(*entry);
-      
-      return true;
-    }
-}
-
-void
-FileDatabase::get_file_entries(std::vector<FileEntry>& entries)
-{
-  SQLiteReader reader = get_all_stmt.execute_query();
-
-  while (reader.next())  
-    {
-      FileEntry entry;
-      entry.fileid      = reader.get_int (0);
-      entry.filename    = reader.get_text(1);
-      entry.md5         = reader.get_text(2);
-      entry.filesize    = reader.get_int (3);
-      entry.size.width  = reader.get_int (4);
-      entry.size.height = reader.get_int (5);
-      entry.mtime       = reader.get_int (6);
-
-      entries.push_back(entry);
-    }
-}
-
-void
-FileDatabase::delete_file_entry(uint32_t fileid)
-{
-  // DELETE FROM files WHERE fileid = ?fileid
-}
-
-void
-FileDatabase::update_file_entry(FileEntry& entry)
-{
-  // UPDATE files SET mtime = ?entry.get_mtime() WHERE fileid = ?entry.fileid
-}
-
-void
-FileDatabase::check()
-{
-  std::vector<FileEntry> entries;
-  get_file_entries(entries);
-
-  std::cout << "Checking File Existance:" << std::endl;
-  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
-    {
-      if (!Filesystem::exist(i->filename))
-        {
-          std::cout << i->filename << ": does not exist" << std::endl;
-        }
-      else
-        {
-          std::cout << i->filename << ": ok" << std::endl;
-        }
-    } 
-
-  /* FIXME: Do magic to detect duplicate file entries and other potential damage to the database (are missing tiles an error?) 
-
-    SQLiteStatement duplicates_stmt(db);
-    duplicates_stmt.prepare("SELECT * IN files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
-    SELECT filename,
-    COUNT(filename) AS NumOccurrences
-    FROM files
-    GROUP BY filename
-    HAVING ( COUNT(filename) > 1 )
-    
-    SQLiteReader reader = duplicates_stmt.execute_query();
-  */
-}
-
-/* EOF */

Deleted: trunk/griv/file_database.hpp
===================================================================
--- trunk/griv/file_database.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/file_database.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,95 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_FILE_DATABASE_HPP
-#define HEADER_FILE_DATABASE_HPP
-
-#include <stdint.h>
-#include <sqlite3.h>
-#include <string>
-
-#include "sqlite.hpp"
-#include "math/size.hpp"
-
-struct FileEntry 
-{
-  int         fileid;
-  std::string filename; // 
-  std::string md5;      //
-  int         filesize; //
-  uint32_t    mtime;    // mtime of the file
-  Size        size;
-};
-
-std::ostream& operator<<(std::ostream& os, const FileEntry& entry);
-
-/** The FileDatabase keeps a record of all files that have been
-    view. It keeps information on the last modification time and
-    filesize to detect a need to regenerate the tiles and also handles
-    the mapping from filename to fileid, which is used for loookup of
-    tiles in the TileDatabase. The FileDatabase also stores the size
-    of an image, so that the image file itself doesn't need to be
-    touched.
- */
-class FileDatabase
-{
-private:
-  SQLiteConnection* db;
-  SQLiteStatement store_stmt;
-  SQLiteStatement get_by_filename_stmt;
-  SQLiteStatement get_all_stmt;
-  SQLiteStatement get_by_file_id_stmt;
-
-  int  store_file_entry(FileEntry& entry);
-  void delete_file_entry(uint32_t fileid);
-  void update_file_entry(FileEntry& entry);
- 
-public:
-  FileDatabase(SQLiteConnection* db);
-  ~FileDatabase();
-  
-  /** Lookup a FileEntry by its filename. If there is no corresponding
-      filename, then the file will be looked up in the filesystem and
-      then stored in the DB and returned. If the file can't be found
-      in either the DB or the filesystem false will be returned, else
-      true
-      
-      @param[in] filename The absolute path of the file
-      @param[out] entry   Lokation where the file information will be stored 
-      @return true if lookup was successful, false otherwise, in which case entry stays untouched
-  */
-  bool get_file_entry(const std::string& filename, FileEntry* entry);
-  void get_file_entries(std::vector<FileEntry>& entries);
-
-  void check();
-
-private:
-  FileDatabase (const FileDatabase&);
-  FileDatabase& operator= (const FileDatabase&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/filesystem.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,342 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <fstream>
-#include <dirent.h>
-#include <errno.h>
-#include <iostream>
-#include <stdexcept>
-#include <sys/stat.h>
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <unistd.h>
-#include <sys/time.h>
-#include <utime.h>
-#include <boost/format.hpp>
-//#include <attr/xattr.h>
-
-#include "filesystem.hpp"
-
-std::string Filesystem::home_directory;
-
-bool
-Filesystem::exist(const std::string& pathname)
-{
-  return access(pathname.c_str(), F_OK) == 0;
-}
-
-bool
-Filesystem::is_directory(const std::string& pathname)
-{
-  struct stat buf;
-  stat(pathname.c_str(), &buf);
-  return S_ISDIR(buf.st_mode);
-}
-
-void
-Filesystem::open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst)
-{
-  DIR* dp = ::opendir(pathname.c_str());
-
-  if (dp == 0)
-    {
-      std::cout << "System: Couldn't open: " << pathname << std::endl;
-    }
-  else
-    {
-      dirent* de = 0;
-      while ((de = ::readdir(dp)) != 0)
-        {
-          if (strcmp(de->d_name, ".")  != 0 &&
-              strcmp(de->d_name, "..") != 0)
-            {
-              if (de->d_type == DT_DIR)
-                { // Avoid stat'ing on file systems that don't need it
-                  open_directory_recursivly(pathname + "/" + de->d_name, lst);
-                } // FIXME: Check for DT_UNKNOWN, DT_FILE, etc.
-              else
-                {
-                  std::string new_path = pathname + "/" + de->d_name;
-                  if (is_directory(new_path))
-                    {
-                      open_directory_recursivly(pathname + "/" + de->d_name, lst);
-                    }
-                  else
-                    {
-                      lst.push_back(new_path);
-                    }
-                }
-            }
-        }
-
-      closedir(dp);
-    }
-}
-
-std::vector<std::string>
-Filesystem::open_directory(const std::string& pathname)
-{
-  std::vector<std::string> dir_list;
-
-  DIR* dp    = 0;
-  dirent* de = 0;
-
-  dp = ::opendir(pathname.c_str());
-
-  if (dp == 0)
-    {
-      std::cout << "System: Couldn't open: " << pathname << std::endl;
-    }
-  else
-    {
-      while ((de = ::readdir(dp)) != 0)
-        {
-          if (strcmp(de->d_name, ".")  != 0 &&
-              strcmp(de->d_name, "..") != 0)
-            dir_list.push_back(pathname + "/" + de->d_name);
-        }
-
-      closedir(dp);
-    }
-
-  return dir_list;
-}
-
-void
-Filesystem::init()
-{
-  char* home;
-  if ((home = getenv("HOME")))
-    {
-      home_directory = home;
-    }
-  else
-    {
-      throw std::runtime_error("Couldn't get HOME environment variable");
-    }
-
-  mkdir(home_directory + "/.griv");
-}
-
-void
-Filesystem::mkdir(const std::string& pathname)
-{
-  if (!Filesystem::exist(pathname))
-    {
-      if (::mkdir(pathname.c_str(), S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP) != 0)
-	{
-	  throw std::runtime_error("Filesystem::mkdir: " + pathname + ": " + strerror(errno));
-	}
-      else
-	{
-	  std::cout << "Filesystem::mkdir: " << pathname << std::endl;
-	}
-    }
-}
-
-void
-Filesystem::deinit()
-{
-}
-
-bool
-Filesystem::has_extension(const std::string& str, const std::string& suffix)
-{
-  if (str.length() >= suffix.length())
-    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
-  else
-    return false;
-}
-
-void
-Filesystem::copy_mtime(const std::string& from_filename, const std::string& to_filename)
-{
-  struct stat stat_buf;
-  if (stat(from_filename.c_str(), &stat_buf) != 0)
-    {
-      throw std::runtime_error(from_filename + ": " + strerror(errno));
-    }
-
-  struct utimbuf time_buf; 
-  time_buf.actime  = stat_buf.st_atime;
-  time_buf.modtime = stat_buf.st_mtime;
-
-  if (utime(to_filename.c_str(), &time_buf) != 0)
-    {
-      std::cout << "Filesystem:copy_mtime: " << to_filename << ": " << strerror(errno) << std::endl;
-    }
-}
-
-unsigned int
-Filesystem::get_size(const std::string& filename)
-{
-  struct stat stat_buf;
-  if (stat(filename.c_str(), &stat_buf) != 0)
-    {
-      throw std::runtime_error(filename + ": " + strerror(errno));
-    } 
-  return stat_buf.st_size; // Is this reliable? or should be use fopen() and ftell()?
-}
-
-unsigned int
-Filesystem::get_mtime(const std::string& filename)
-{
-  struct stat stat_buf;
-  if (stat(filename.c_str(), &stat_buf) != 0)
-    {
-      throw std::runtime_error(filename + ": " + strerror(errno));
-    } 
-  return stat_buf.st_mtime;
-}
-
-void
-Filesystem::generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list)
-{
-  std::vector<std::string> lst;
-  if (is_directory(pathname))
-    open_directory_recursivly(pathname, lst);
-  else
-    lst.push_back(pathname);
-  
-  for(std::vector<std::string>::iterator i = lst.begin(); i != lst.end(); ++i)
-    {
-      if (Filesystem::has_extension(*i, ".jpg")  ||
-          Filesystem::has_extension(*i, ".JPG")  ||
-          Filesystem::has_extension(*i, ".jpe")  ||
-          Filesystem::has_extension(*i, ".JPE")  ||
-          Filesystem::has_extension(*i, ".JPEG") ||
-          Filesystem::has_extension(*i, ".jpeg"))
-        {
-          file_list.push_back(Filesystem::realpath(*i)); // realpath slow?
-        }
-    }
-}
-
-std::string
-Filesystem::realpath_system(const std::string& pathname)
-{
-  char* result = ::realpath(pathname.c_str(), NULL);
-  std::string res = result;
-  free(result);
-  
-  return res;
-}
-
-std::string
-Filesystem::realpath_fast(const std::string& pathname)
-{
-  std::string fullpath;
-  std::string drive;
-  
-  if (pathname.size() > 0 && pathname[0] == '/')
-    {
-      fullpath = pathname;
-    }
-#ifdef WIN32
-  else if (pathname.size() > 2 && pathname[1] == ':' && pathname[2] == '/')
-    {
-      drive = pathname.substr(0, 2);
-      fullpath = pathname;
-    }
-#endif
-  else
-    {
-      char buf[PATH_MAX];
-      if (getcwd(buf, PATH_MAX) == 0)
-        {
-          std::cout << "System::realpath: Error: couldn't getcwd()" << std::endl;
-          return pathname;
-        }
-#ifdef WIN32
-      for (char *p = buf; *p; ++p)
-        {
-          if (*p == '\\')
-            *p = '/';
-        }
-      drive.assign(buf, 2);
-#endif
-      
-      fullpath = fullpath + buf + "/" + pathname;
-    }
-  
-  std::string result;
-  std::string::reverse_iterator last_slash = fullpath.rbegin();
-  int skip = 0;
-  // /foo/bar/../../bar/baz/
-  //std::cout << "fullpath: '" << fullpath << "'" << std::endl;
-  for(std::string::reverse_iterator i = fullpath.rbegin(); i != fullpath.rend(); ++i)
-    { // FIXME: Little crude and hackish
-      if (*i == '/')
-        {
-          std::string dir(last_slash, i); 
-          //std::cout << "'" << dir << "'" << std::endl;
-          if (dir == ".." || dir == "/..")
-            {
-              skip += 1;
-            }
-          else if (dir == "." || dir == "/." || dir.empty() || dir == "/")
-            {
-              // pass
-            }
-          else
-            {
-              if (skip == 0)
-                {
-                  result += dir;
-                }
-              else
-                skip -= 1;
-            }
-
-          last_slash = i;
-        }
-    }
-  
-  return drive + "/" + std::string(result.rbegin(), result.rend());
-}
-
-std::string
-Filesystem::realpath(const std::string& pathname)
-{
-  return realpath_fast(pathname);
-}
-
-void
-Filesystem::readlines_from_file(const std::string& pathname, std::vector<std::string>& lst)
-{
-  std::ifstream in(pathname.c_str());
-
-  if (!in)
-    throw std::runtime_error("Couldn't open file: " + pathname);
-  
-  std::string line;
-  while(std::getline(in, line))
-   {
-     lst.push_back(line);
-   }
-  in.close();
-}
-
-/* EOF */

Deleted: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/filesystem.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,69 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_FILESYSTEM_HPP
-#define HEADER_FILESYSTEM_HPP
-
-#include <string>
-#include <vector>
-
-class Filesystem
-{
-private:
-  static std::string home_directory;
-
-public:
-  static bool is_directory(const std::string& pathname);
-  static bool exist(const std::string& pathname);
-  static void mkdir(const std::string& pathname);
-  static std::vector<std::string> open_directory(const std::string& pathname);
-
-  static void open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst);
-
-  static void readlines_from_file(const std::string& pathname, std::vector<std::string>& lst);
-
-  static std::string getxattr(const std::string& pathname);
-  static std::string get_home() { return home_directory; }
-
-  static std::string realpath_system(const std::string& pathname);
-  static std::string realpath_fast(const std::string& pathname);
-  static std::string realpath(const std::string& pathname);
-
-
-  static bool has_extension(const std::string& pathname, const std::string& ext);
-  static void copy_mtime(const std::string& from_filename, const std::string& to_filename);
-  static unsigned int get_mtime(const std::string& filename);
-  static unsigned int get_size(const std::string& filename);
-  
-  /** Generate a recursive list of all JPEGs in pathname */
-  static void generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list);
-
-  static void init();
-  static void deinit();
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/framebuffer.cpp
===================================================================
--- trunk/griv/framebuffer.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/framebuffer.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,155 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <GL/glew.h>
-#include <GL/gl.h>
-#include "math/rgb.hpp"
-#include "SDL_syswm.h"
-#include "math/rect.hpp"
-#include "framebuffer.hpp"
-
-SDL_SysWMinfo syswm;
-SDL_Surface* Framebuffer::screen = 0;
-Uint32 Framebuffer::flags = 0;
-
-void
-Framebuffer::set_video_mode(const Size& size)
-{
-  assert(screen == 0);
-
-  flags = SDL_RESIZABLE | SDL_OPENGL;
-  screen = SDL_SetVideoMode(800, 600, 0, flags);
-
-  if (screen == NULL) 
-    {
-      std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
-      exit(1);
-    }
-
-  GLenum err = glewInit();
-  if (GLEW_OK != err)
-    {
-      std::ostringstream str;
-      str << "Error: " << glewGetErrorString(err) << std::endl;
-      throw std::runtime_error(str.str());
-    }
-  
-  if (!GLEW_ARB_texture_rectangle)
-    {
-      throw std::runtime_error("OpenGL ARB_texture_rectangle extension not found, but required");
-    }
-
-  SDL_WM_SetCaption("Griv 0.0.2", 0 /* icon */);
-  SDL_EnableUNICODE(1);
-
-  glViewport(0, 0, screen->w, screen->h);
-  glMatrixMode(GL_PROJECTION);
-  glLoadIdentity();
-  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
-  glMatrixMode(GL_MODELVIEW);
-  glLoadIdentity();
-  //static const float cl_pixelcenter_constant = 0.375;
-  //glTranslated(cl_pixelcenter_constant, cl_pixelcenter_constant, 0.0);
-  
-  SDL_VERSION(&syswm.version); // this is important!
-  if (SDL_GetWMInfo(&syswm) == -1)
-    {
-      std::cout << "Couldn't get WM info " << std::endl;
-    }
-}
-
-void
-Framebuffer::toggle_fullscreen()
-{
-  flags |= SDL_OPENGL;
-  if (flags & SDL_FULLSCREEN)
-    flags &= ~SDL_FULLSCREEN;
-  else
-    flags |= SDL_FULLSCREEN;
- 
-  // Should use desktop resolution for this instead, but how?
-  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
-  glViewport(0, 0, screen->w, screen->h);
-  glMatrixMode(GL_PROJECTION);
-  glLoadIdentity();
-  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
-}
-
-void
-Framebuffer::resize(int w, int h)
-{
-  screen = SDL_SetVideoMode(w, h, 0, SDL_OPENGL | SDL_RESIZABLE);
-  glViewport(0, 0, screen->w, screen->h);
-  glMatrixMode(GL_PROJECTION);
-  glLoadIdentity();
-  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
-}
-
-void
-Framebuffer::flip()
-{
-  //SDL_Flip(screen);
-  SDL_GL_SwapBuffers();
-}
-
-void
-Framebuffer::clear()
-{
-  glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
-  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
-  //SDL_FillRect(Framebuffer::get_screen(), NULL, SDL_MapRGB(Framebuffer::get_screen()->format, 0, 0, 0));
-}
-
-void
-Framebuffer::draw_rect(const Rectf& rect, const RGB& rgb)
-{
-  glDisable(GL_TEXTURE_RECTANGLE_ARB);
-    
-  glColor3ub(rgb.r, rgb.g, rgb.b);
-
-  glBegin(GL_LINE_LOOP);
-  glVertex2f(rect.left,  rect.top);
-  glVertex2f(rect.right, rect.top);
-  glVertex2f(rect.right, rect.bottom);
-  glVertex2f(rect.left,  rect.bottom);
-  glEnd();
-}
-
-void
-Framebuffer::fill_rect(const Rectf& rect, const RGB& rgb)
-{
-  glDisable(GL_TEXTURE_RECTANGLE_ARB);
-
-  glColor3ub(rgb.r, rgb.g, rgb.b);
-  glBegin(GL_QUADS);
-  glVertex2f(rect.left,  rect.top);
-  glVertex2f(rect.right, rect.top);
-  glVertex2f(rect.right, rect.bottom);
-  glVertex2f(rect.left,  rect.bottom);
-  glEnd();
-}
-
-/* EOF */

Deleted: trunk/griv/framebuffer.hpp
===================================================================
--- trunk/griv/framebuffer.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/framebuffer.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,76 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_DISPLAY_HPP
-#define HEADER_DISPLAY_HPP
-
-#include <GL/gl.h>
-#include <GL/glu.h>
-#include <sstream>
-#include <stdexcept>
-#include <math.h>
-#include "SDL.h"
-
-class RGB;
-class Size;
-class Rectf;
-
-static inline void assert_gl(const char* message)
-{
-  GLenum error = glGetError();
-  if(error != GL_NO_ERROR) {
-    std::ostringstream msg;
-    msg << "OpenGLError while '" << message << "': "
-        << gluErrorString(error);
-    throw std::runtime_error(msg.str());
-  }
-}
-
-class Framebuffer
-{
-private:
-  static SDL_Surface* screen;
-  static Uint32 flags;
-
-public:
-  static void set_video_mode(const Size& size);
-
-  static void toggle_fullscreen();
-
-  static int get_width()  { return screen->w; }
-  static int get_height() { return screen->h; }
-
-  static SDL_Surface* get_screen() { return screen; }
-  static void resize(int w, int h);
-  static void flip();
-  static void clear();
-
-  static void draw_rect(const Rectf& rect, const RGB& rgb);
-  static void fill_rect(const Rectf& rect, const RGB& rgb);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/grid.hpp
===================================================================
--- trunk/griv/grid.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/grid.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,92 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_GRID_HPP
-#define HEADER_GRID_HPP
-
-#include <iostream>
-#include <assert.h>
-#include <vector>
-
-/** */
-template<typename T>
-class Grid
-{
-private:
-  typedef std::vector<T> Columns;
-  typedef std::vector<Columns> Rows;
-
-  int width;
-  int height;
-  Rows rows;
-
-public:
-  Grid(int w, int h) 
-    : width(w),
-      height(h)
-  {
-    for(int y = 0; y < height; ++y)
-      rows.push_back(Columns(width));
-  }
-  
-  int get_width()  const { return width; }
-  int get_height() const { return height; }
-
-  const T& operator()(int x, int y) const {
-    assert(y >= 0 && y < rows.size());
-    assert(x >= 0 && x < rows[y].size());
-    return rows[y][x];
-  }
-
-  T& operator()(int x, int y) {
-    assert(y >= 0 && y < int(rows.size()));
-    assert(x >= 0 && x < int(rows[y].size()));
-    return rows[y][x];
-  }
-
-  void resize(int w, int h, const T& t = T())
-  {
-    for(typename Rows::iterator i = rows.begin(); i != rows.end(); ++i)
-      i->resize(w);
-    rows.resize(h, Columns(w, t));
-
-    if (0)
-      {
-        std::cout << "Resize: " << w << "x" << h << std::endl;
-        std::cout << "Rows: " << rows.size() << std::endl;
-        for(int y = 0; y < int(rows.size()); ++y)
-          {
-            std::cout << "Column: " << y << " -> " << rows[y].size() << std::endl;
-          }
-      }
-
-    width  = w;
-    height = h;
-  }
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/griv.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,334 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <boost/bind.hpp>
-#include <algorithm>
-#include <sstream>
-#include <stdexcept>
-#include <iostream>
-#include <string>
-#include <vector>
-#include <sqlite3.h>
-
-#include "jpeg.hpp"
-#include "surface.hpp"
-#include "framebuffer.hpp"
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "math/vector2i.hpp"
-#include "url.hpp"
-#include "sqlite.hpp"
-#include "software_surface.hpp"
-#include "jpeg_decoder_thread.hpp"
-#include "file_database.hpp"
-#include "tile_database.hpp"
-#include "database_thread.hpp"
-#include "filesystem.hpp"
-#include "tile_generator.hpp"
-#include "tile_generator_thread.hpp"
-#include "workspace.hpp"
-#include "viewer_thread.hpp"
-#include "viewer.hpp"
-#include "griv.hpp"
-
-Griv::Griv()
-{
-  Filesystem::init();
-}
-
-Griv::~Griv()
-{
-  Filesystem::deinit();
-}
-
-void
-Griv::info(const std::vector<std::string>& filenames)
-{
-  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i)
-    {
-      Size size;
-      JPEG::get_size(*i, size);
-      std::cout << *i << " " << size.width << "x" << size.height << std::endl;
-    }
-}
-
-void
-Griv::downscale(const std::vector<std::string>& filenames)
-{
-  int num = 0;
-  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i, ++num)
-    {
-      std::cout << *i << std::endl;
-      SoftwareSurface surface = JPEG::load(*i, 8);
-
-      std::ostringstream out;
-      out << "/tmp/out-" << num << ".jpg";
-      Blob blob = JPEG::save(surface, 75);
-      blob.write_to_file(out.str());
-
-      std::cout << "Wrote: " << out.str() << std::endl;
-    }  
-}
-
-void
-Griv::cleanup(const std::string& database)
-{
-  SQLiteConnection db(database); 
-  std::cout << "Running database cleanup routines, this process can take multiple minutes." << std::endl;
-   std::cout << "You can interrupt it via Ctrl-c, which won't do harm, but will throw away all the cleanup work done till that point" << std::endl;
-  db.vacuum();
-  std::cout << "Running database cleanup routines done" << std::endl;
-}
-
-void
-Griv::list(const std::string& database)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-
-  std::vector<FileEntry> entries;
-  file_db.get_file_entries(entries);
-
-  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
-    {
-      std::cout << i->filename << std::endl;
-    }  
-}
-
-void
-Griv::check(const std::string& database)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-
-  file_db.check();
-}
-
-void
-Griv::generate_tiles(const std::string& database, const std::vector<std::string>& filenames)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-
-  TileGenerator tile_generator;
-
-  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-    {
-      FileEntry entry;
-      std::cout << "Getting file entry..." << std::endl;
-      if (!file_db.get_file_entry(filenames[i], &entry))
-        {
-          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
-        }
-      else
-        {
-          // Generate Image Tiles
-          std::cout << "Generating tiles... " << filenames[i]  << std::endl;
-          SoftwareSurface surface = SoftwareSurface::from_file(filenames[i]);
-          
-          tile_generator.generate_all(entry.fileid, surface, 
-                                      boost::bind(&TileDatabase::store_tile, &tile_db, _1));
-        }
-    }
-}
-
-void
-Griv::view(const std::string& database, const std::vector<std::string>& filenames)
-{
-  if (SDL_Init(SDL_INIT_VIDEO) != 0)
-    {
-      std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
-      exit(1);
-    }
-  atexit(SDL_Quit); 
-
-  JPEGDecoderThread   jpeg_thread;
-  DatabaseThread      database_thread(database);
-  TileGeneratorThread tile_generator_thread;
-  ViewerThread        viewer_thread;
-
-  jpeg_thread.start();
-  database_thread.start();
-  tile_generator_thread.start();
-
-  if (filenames.empty())
-    {
-      // When no files are given, display everything in the database
-      database_thread.request_all_files(boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
-    }
-  else
-    {
-      for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-        {
-          database_thread.request_file(filenames[i], boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
-        }
-    }
-
-  viewer_thread.run();
-
-  tile_generator_thread.stop();
-  database_thread.stop();
-  jpeg_thread.stop();
-
-  tile_generator_thread.join(); 
-  database_thread.join();
-  jpeg_thread.join();
-}
-
-void
-Griv::print_usage()
-{
-      std::cout << "Usage: griv view    [OPTIONS]... [FILES]...\n"
-                << "       griv prepare [OPTIONS]... [FILES]...\n"
-                << "       griv check   [OPTIONS]...\n"
-                << "       griv list    [OPTIONS]...\n"
-                << "       griv cleanup [OPTIONS]...\n"
-                << "\n"
-                << "Commands:\n"
-                << "  view      Display the given files\n"
-                << "  prepare   Generate thumbnails for all given images, makes view command faster\n"
-                << "  list      Lists all files in the database\n"
-                << "  check     Checks the database for consistency\n"
-                << "  cleanup   Runs garbage collection on the database\n"
-                << "\n"
-                << "Options:\n"
-                << "  -d, --database FILE    Use FILE has database (default: test.sqlite)\n"
-                << "\n"
-                << "If you do not supply any files, the whole content of the given database will be displayed."
-                << std::endl;
-}
-
-int
-Griv::main(int argc, char** argv)
-{
-  // FIXME: Function doesn't seem to be available in 3.4.2
-  // if (!sqlite3_threadsafe())
-  //  throw std::runtime_error("Error: SQLite must be compiled with SQLITE_THREADSAFE");
-
-  std::string database = "test.sqlite";
-  
-  if (argc < 2)
-    {
-      print_usage();
-    }
-  else
-    {
-      std::vector<std::string> argument_filenames;
-      for(int i = 2; i < argc; ++i)
-        {
-          if (argv[i][0] == '-')
-            {
-              if (strcmp(argv[i], "--help") == 0 ||
-                  strcmp(argv[i], "-h") == 0)
-                {
-                  print_usage();
-                  exit(0);
-                }
-              else if (strcmp(argv[i], "--database") == 0 ||
-                  strcmp(argv[i], "-d") == 0)
-                {
-                  ++i;
-                  if (i < argc)
-                    {
-                      database = argv[i];
-                    }
-                  else
-                    {
-                      throw std::runtime_error(std::string(argv[i-1]) + " requires an argument");
-                    }
-                }
-              else
-                {
-                  throw std::runtime_error("Unknown option " + std::string(argv[i]));
-                }
-            }
-          else
-            {
-              argument_filenames.push_back(Filesystem::realpath(argv[i]));
-            }
-        }
-
-      std::vector<std::string> filenames;
-      for(std::vector<std::string>::iterator i = argument_filenames.begin(); i != argument_filenames.end(); ++i)
-        Filesystem::generate_jpeg_file_list(*i, filenames);
-
-      std::sort(filenames.begin(), filenames.end());
-
-      if (strcmp(argv[1], "view") == 0)
-        {
-          view(database, filenames);
-        }
-      else if (strcmp(argv[1], "check") == 0)
-        {
-          check(database);
-        }
-      else if (strcmp(argv[1], "list") == 0)
-        {
-          list(database);
-        }
-      else if (strcmp(argv[1], "cleanup") == 0)
-        {
-          cleanup(database);
-        }
-      else if (strcmp(argv[1], "info") == 0)
-        {
-          info(filenames);
-        }
-      else if (strcmp(argv[1], "downscale") == 0)
-        {
-          downscale(filenames);
-        }
-      else if (strcmp(argv[1], "prepare") == 0)
-        {
-          generate_tiles(database, filenames);
-        }
-      else
-        {
-          print_usage();
-        }
-    }
-
-  return 0;
-}
-  
-int main(int argc, char** argv)
-{
-  try 
-    {
-      Griv app;
-      int ret = app.main(argc, argv);
-      return ret;
-    }
-  catch(const std::exception& err) 
-    {
-      std::cout << "Exception: " << err.what() << std::endl;
-    }
-}
-  
-/* EOF */

Deleted: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/griv.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,47 +0,0 @@
-/*
-**  Griv - Grumbel's Image Viewer
-**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_GRIV_HPP
-#define HEADER_GRIV_HPP
-
-class Griv
-{
-private:
-public:
-  Griv();
-  ~Griv();
-
-  void print_usage();
-  int main(int argc, char** argv);
-
-  void info(const std::vector<std::string>& filenames);
-  void downscale(const std::vector<std::string>& filenames);
-  void cleanup(const std::string& database);
-  void check(const std::string& database);
-  void list(const std::string& database);
-  void generate_tiles(const std::string& database, 
-                      const std::vector<std::string>& filenames);
-  void view(const std::string& database, 
-            const std::vector<std::string>& filenames);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/image.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,329 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "math/rgb.hpp"
-#include "math/rect.hpp"
-#include "framebuffer.hpp"
-#include "surface.hpp"
-#include "math.hpp"
-#include "database_thread.hpp"
-#include "viewer_thread.hpp"
-#include "image.hpp"
-
-uint32_t make_cache_id(int x, int y, int tile_scale)
-{
-  return x | (y << 8) | (tile_scale << 16);
-}
-
-class ImageImpl
-{
-public:
-  int fileid;
-  std::string filename;
-  Size size;
-  float scale;
-
-  int max_tiledb_scale;
-  Vector2f pos;
-
-  Image::Cache cache;
-  Image::Jobs jobs;  
-  
-  ImageImpl() 
-  {
-  }
-
-  ~ImageImpl()
-  {
-  }
-};
-
-Image::Image()
-{
-}
-
-Image::Image(int fileid, const std::string& filename, const Size& size)
-  : impl(new ImageImpl())
-{
-  impl->fileid   = fileid;
-  impl->filename = filename;
-  impl->size     = size;
-  impl->scale    = 1.0f;
-  
-  int  tiledb_scale = 0;
-  Size tmpsize = size;
-  do {
-    tmpsize.width  /= 2;
-    tmpsize.height /= 2;
-    tiledb_scale += 1;
-  } while (tmpsize.width  > 32 ||
-           tmpsize.height > 32);
-
-  impl->max_tiledb_scale = tiledb_scale;
-}
-
-void
-Image::set_pos(const Vector2f& pos_)
-{
-  impl->pos = pos_;
-}
-
-Vector2f
-Image::get_pos() const
-{
-  return impl->pos;
-}
-
-void
-Image::set_scale(float f)
-{
-  impl->scale = f;
-}
-
-float
-Image::get_scale() const
-{
-  return impl->scale;
-}
-
-float
-Image::get_scaled_width() const
-{
-  return impl->size.width * impl->scale;
-}
-
-float
-Image::get_scaled_height() const
-{
-  return impl->size.height * impl->scale;
-}
-
-int
-Image::get_original_width() const
-{
-  return impl->size.width;
-}
-
-int
-Image::get_original_height() const
-{
-  return impl->size.height;
-}
-
-Surface
-Image::get_tile(int x, int y, int tile_scale)
-{
-  uint32_t cache_id = make_cache_id(x, y, tile_scale);
-  Cache::iterator i = impl->cache.find(cache_id);
-
-  if (i == impl->cache.end())
-    {
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this));
-
-      // Request the next smaller tile too, so we get a lower quality
-      // image fast and a higher quality one soon after FIXME: Its
-      // unclear if this actually improves things, also the order of
-      // request gets mungled in the DatabaseThread, we should request
-      // the whole group of lower res tiles at once, instead of one by
-      // one, since that eats up the possible speed up
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale+1, x, y, *this));
-
-      SurfaceStruct s;
-      
-      s.surface = Surface();
-      s.status  = SurfaceStruct::SURFACE_REQUESTED;
-
-      impl->cache[cache_id] = s;
-
-      return Surface();
-    }
-  else
-    {
-      return i->second.surface;
-    }
-}
-
-void
-Image::draw_tile(int x, int y, int tiledb_scale, const Vector2f& pos, float scale)
-{
-  Surface surface = get_tile(x, y, tiledb_scale);
-  if (surface)
-    {
-      surface.draw(Rectf(pos, surface.get_size() * scale));
-      //Framebuffer::draw_rect(Rectf(pos, surface.get_size() * scale), RGB(100, 100, 100));
-    }
-  else
-    {
-      // Look for the next smaller tile
-      // FIXME: Rewrite this to work all smaller tiles, not just the next
-      
-      int downscale_factor = 1;
-
-    retry:
-      int downscale = Math::pow2(downscale_factor);
-
-      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+downscale_factor);
-      Cache::iterator i = impl->cache.find(cache_id);
-  
-      if (i != impl->cache.end() && i->second.surface)
-        { // Must only draw relevant section!
-          Size s((x%downscale) ? (i->second.surface.get_width()  - 256/downscale * (x%downscale)) : 256/downscale,
-                 (y%downscale) ? (i->second.surface.get_height() - 256/downscale * (y%downscale)) : 256/downscale);
-
-          s.width  = Math::min(i->second.surface.get_width(),  s.width);
-          s.height = Math::min(i->second.surface.get_height(), s.height);
-          
-          i->second.surface.draw(Rectf(Vector2f(x%downscale, y%downscale) * 256/downscale, 
-                                       s),
-                                 Rectf(pos, s * scale * downscale));
-          //Framebuffer::draw_rect(Rectf(pos, s * scale * downscale), RGB(255, 255, 255));
-        }
-      else
-        {
-          if (downscale_factor < 6) // Make this 'max_scale' instead of random number
-            {
-              downscale_factor += 1;
-              goto retry;
-            }
-          else
-            {
-              // give up, no lower resolution found
-            }
-        }
-    }
-}
-
-void
-Image::draw(const Rectf& cliprect, float fscale)
-{
-  // Cancel all old jobs (FIXME: Stupid brute force hack)
-  if (0)
-    {
-      for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
-        i->abort();
-      impl->jobs.clear();
-    }
-
-  Rectf image_rect(impl->pos, Sizef(impl->size * impl->scale)); // in world coordinates
-
-  //Framebuffer::draw_rect(image_rect);
-
-  if (cliprect.is_overlapped(image_rect))
-    {
-      // scale factor for requesting the tile from the TileDatabase
-      int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale*impl->scale)) /
-                                                       log(2)));
-      int scale_factor = Math::pow2(tiledb_scale);
-
-      int scaled_width  = impl->size.width  / scale_factor;
-      int scaled_height = impl->size.height / scale_factor;
-
-      if (scaled_width  < 256 && scaled_height < 256)
-        { // So small that only one tile is to be drawn
-          draw_tile(0, 0, tiledb_scale, 
-                    impl->pos,
-                    scale_factor * impl->scale);
-        }
-      else
-        {
-          Rectf image_region = image_rect.clip_to(cliprect); // visible part of the image
-
-          image_region.left   = (image_region.left   - impl->pos.x) / impl->scale;
-          image_region.right  = (image_region.right  - impl->pos.x) / impl->scale;
-          image_region.top    = (image_region.top    - impl->pos.y) / impl->scale;
-          image_region.bottom = (image_region.bottom - impl->pos.y) / impl->scale;
-
-          int   itilesize = 256 * scale_factor;
-          float tilesize  = 256.0f * scale_factor * impl->scale;
-
-          int start_x = (image_region.left)  / itilesize;
-          int end_x   = (image_region.right) / itilesize + 1;
-
-          int start_y = (image_region.top   ) / itilesize;
-          int end_y   = (image_region.bottom) / itilesize + 1;
-
-          for(int y = start_y; y < end_y; y += 1)
-            for(int x = start_x; x < end_x; x += 1)
-              {
-                draw_tile(x, y, tiledb_scale, 
-                          impl->pos + Vector2f(x,y) * tilesize,
-                          scale_factor * impl->scale);
-              }
-        }
-    }
-  else
-    {
-      // Image is not visible so clear the cache
-      
-      // FIXME: We should keep at least some tiles or wait with the
-      // cache purge a bit longer
-
-      // FIXME: We also need to purge the cache more often, since with
-      // big images we would end up never clearing it
-      
-      // Clear the cache, but keep the smallest tile (Wonky hack)
-      if (0)
-        {
-          impl->cache.clear();
-        }
-      else
-        {
-          int max_tiledb_scale = 0;
-          SurfaceStruct s;
-          int tileid;
-          for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
-            {
-              int tiledb_scale = (i->first >> 16);
-              if (tiledb_scale > max_tiledb_scale)
-                {
-                  max_tiledb_scale = tiledb_scale;
-                  tileid = i->first;
-                  s      = i->second;
-                }
-            }
-          impl->cache.clear();
-
-          if (max_tiledb_scale != 0)
-            {
-              impl->cache[tileid] = s;
-            }
-        }
-    }
-}
-
-void
-Image::receive_tile(int x, int y, int tiledb_scale, const SoftwareSurface& surface)
-{
-  int tile_id = make_cache_id(x, y, tiledb_scale);
-
-  SurfaceStruct s;
-  
-  s.surface = Surface(surface);
-  s.status  = SurfaceStruct::SURFACE_OK;
-
-  impl->cache[tile_id] = s;
-}
-
-/* EOF */

Deleted: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/image.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,90 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_IMAGE_HPP
-#define HEADER_IMAGE_HPP
-
-#include <boost/shared_ptr.hpp>
-#include <map>
-#include <string>
-#include "job_handle.hpp"
-#include "math/vector2f.hpp"
-#include "math/size.hpp"
-#include "grid.hpp"
-#include "surface.hpp"
-
-class Surface;
-class Size;
-class Rectf;
-class Vector2f;
-class ImageImpl;
-
-class Image
-{
-public:
-  struct SurfaceStruct {
-    enum Status { SURFACE_OK,
-                  SURFACE_REQUESTED,
-                  SURFACE_FAILED };
-
-    Status  status;
-    Surface surface;
-  };
-
-  typedef std::map<uint32_t, SurfaceStruct> Cache; 
-  typedef std::vector<JobHandle> Jobs;
-
-private:
-  Surface get_tile(int x, int y, int tile_scale);
-
-public:
-  Image();
-  Image(int fileid, const std::string& filename, const Size& size);
-
-  void draw_tile(int x, int y, int tiledb_scale, const Vector2f& rect, float scale);
-  void draw(const Rectf& cliprect, float scale);
-
-  void set_pos(const Vector2f& pos);
-  Vector2f get_pos() const;
-
-  void  set_scale(float f);
-  float get_scale() const;
-
-  float get_scaled_width() const;
-  float get_scaled_height() const;
-
-  int get_original_width() const;
-  int get_original_height() const;
-
-  void receive_tile(int x, int y, int tiledb_scale, const SoftwareSurface& surface);
-
-  operator bool() const { return impl.get(); }
-private:
-  boost::shared_ptr<ImageImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/job_handle.cpp
===================================================================
--- trunk/griv/job_handle.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/job_handle.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,73 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "job_handle.hpp"
-
-class JobHandleImpl
-{
-public:
-  JobHandleImpl()
-    : aborted(false),
-      finished(false)
-  {}
-
-  bool aborted;
-  bool finished;
-};
-
-JobHandle::JobHandle()
-  : impl(new JobHandleImpl())
-{
-}
-
-JobHandle::~JobHandle()
-{
-}
-
-void
-JobHandle::abort()
-{
-  impl->aborted = true;
-}
-
-bool
-JobHandle::is_aborted() const
-{
-  return impl->aborted;
-}
-
-void
-JobHandle::finish()
-{
-  impl->finished = true;
-}
-
-bool
-JobHandle::is_finished() const
-{
-  return impl->finished;
-}
-
-/* EOF */

Deleted: trunk/griv/job_handle.hpp
===================================================================
--- trunk/griv/job_handle.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/job_handle.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,55 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JOB_HANDLE_HPP
-#define HEADER_JOB_HANDLE_HPP
-
-#include <boost/shared_ptr.hpp>
-
-class JobHandleImpl;
-
-/** A JobHandle should be returend whenever one thread makes a request
-    to another thread, the JobHandle allows the calling thread to
-    cancel the job and the called thread to inform the calling one
-    that the Job is finished. (FIXME: Do we need that last thing for something?) */
-class JobHandle
-{
-public:
-  JobHandle();
-  ~JobHandle();
-
-  void abort();
-  bool is_aborted() const;
-  
-  void finish();
-  bool is_finished() const;
-
-private:
-  boost::shared_ptr<JobHandleImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/jpeg.cpp
===================================================================
--- trunk/griv/jpeg.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,400 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <fstream>
-#include <sstream>
-#include <stdexcept>
-#include <jpeglib.h>
-#include <setjmp.h>
-#include "math/size.hpp"
-#include "jpeg_memory_src.hpp"
-#include "jpeg_memory_dest.hpp"
-#include "jpeg.hpp"
-
-jmp_buf setjmp_buffer;
-
-void fatal_error_handler(j_common_ptr cinfo)
-{
-  std::cout << "Some jpeg error: " << std::endl;
-  longjmp(setjmp_buffer, 1);
-}
-
-void
-JPEG::get_size(const std::string& filename, Size& size)
-{
-  FILE* in = fopen(filename.c_str(), "rb");
-  if (!in)
-    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
-
-  struct jpeg_decompress_struct  cinfo;
-  struct jpeg_error_mgr jerr;
-
-  cinfo.err = jpeg_std_error(&jerr);
-  cinfo.err->error_exit = &fatal_error_handler;
-  jpeg_create_decompress(&cinfo);
-  jpeg_stdio_src(&cinfo, in);
-
-  if (setjmp(setjmp_buffer))
-    {
-      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't open " + filename);
-    }
-
-  jpeg_read_header(&cinfo, FALSE);
-
-  size.width  = cinfo.image_width;
-  size.height = cinfo.image_height;
-
-  jpeg_destroy_decompress(&cinfo);
-
-  fclose(in);
-}
-
-SoftwareSurface
-JPEG::load(const std::string& filename, int scale)
-{
-  //std::cout << "-- JPEG::load(" << filename << ")" << std::endl;
-
-  FILE* in = fopen(filename.c_str(), "rb");
-  if (!in)
-    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
-
-  struct jpeg_decompress_struct  cinfo;
-  struct jpeg_error_mgr jerr;
-
-  cinfo.err = jpeg_std_error(&jerr);
-  cinfo.err->error_exit = &fatal_error_handler;
-
-  jpeg_create_decompress(&cinfo);
-  jpeg_stdio_src(&cinfo, in);
-
-  if (setjmp(setjmp_buffer))
-    {
-      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't open " + filename);
-    }
-
-  jpeg_read_header(&cinfo, FALSE);
-
-  if (scale != 1)
-    { // scale the image down by scale
-
-      // by default all those values below are on 1
-      cinfo.scale_num           = 1;
-      cinfo.scale_denom         = scale;
-   
-      cinfo.do_fancy_upsampling = FALSE; /* TRUE=apply fancy upsampling */
-      cinfo.do_block_smoothing  = FALSE; /* TRUE=apply interblock smoothing */
-    }
-
-  jpeg_start_decompress(&cinfo);
-
-  SoftwareSurface surface(Size(cinfo.image_width  / scale, 
-                               cinfo.image_height / scale));
-  
-  if (cinfo.output_components == 3)
-    { // RGB Image
-      JSAMPLE* scanlines[cinfo.image_height];
-
-      for(JDIMENSION y = 0; y < cinfo.image_height; ++y)
-        scanlines[y] = surface.get_row_data(y);
-
-      while (cinfo.output_scanline < cinfo.output_height) 
-        {
-          jpeg_read_scanlines(&cinfo, &scanlines[cinfo.output_scanline], 
-                              cinfo.image_height - cinfo.output_scanline);
-        }
-    }
-  else if (cinfo.output_components == 1)
-    { // Greyscale Image
-      
-    }
-  else
-    {
-      std::ostringstream str;
-      str << "JPEG: Unsupported color depth: " << cinfo.output_components;
-      throw std::runtime_error(str.str());
-    }
-
-  jpeg_destroy_decompress(&cinfo);
-
-  fclose(in); 
-
-  //std::cout << "-- done" << std::endl;
-
-  return surface;
-}
-
-SoftwareSurface
-JPEG::load(uint8_t* mem, int len)
-{
-  //std::cout << "JPEG::load(" << static_cast<void*>(mem) << ", " << len << ")" << std::endl;
-  
-  // -- Setup the read source
-  struct jpeg_decompress_struct  cinfo;
-  struct jpeg_error_mgr jerr;
-
-  cinfo.err = jpeg_std_error(&jerr);
-  cinfo.err->error_exit = &fatal_error_handler;
-
-  jpeg_create_decompress(&cinfo);
-  jpeg_memory_src(&cinfo, mem, len);
-
-  if (setjmp(setjmp_buffer)) // FIXME: Is that error handling correct that way?
-    {
-      throw std::runtime_error("JPEG::load");
-    }
-
-  // -- Start Reading
-  jpeg_read_header(&cinfo, FALSE);
-  jpeg_start_decompress(&cinfo);
-
-  // -- Copy the scanlines to a SoftwareSurface
-  SoftwareSurface surface(Size(cinfo.image_width, 
-                               cinfo.image_height));
-  
-  //std::cout << surface.get_width() << "x" << surface.get_height() << std::endl;
-
-  if (cinfo.output_components == 3) // RGB Image
-    { 
-      JSAMPLE* scanlines[cinfo.image_height];
-
-      for(JDIMENSION y = 0; y < cinfo.image_height; ++y)
-        scanlines[y] = surface.get_row_data(y);
-
-      while (cinfo.output_scanline < cinfo.output_height) 
-        {
-          jpeg_read_scanlines(&cinfo, &scanlines[cinfo.output_scanline], 
-                              cinfo.image_height - cinfo.output_scanline);
-        }
-    }
-  else if (cinfo.output_components == 1) // Greyscale Image
-    { 
-      assert(!"JPEG::load: grayscale handling not implemented");
-    }
-  else
-    {
-      std::ostringstream str;
-      str << "JPEG: Unsupported color depth: " << cinfo.output_components;
-      throw std::runtime_error(str.str());
-    }
-
-  // -- Cleanup
-  jpeg_destroy_decompress(&cinfo);
-
-  return surface; 
-}
-
-void
-JPEG::save(const SoftwareSurface& surface, int quality, const std::string& filename)
-{
-  assert(!"Unfinished: JPEG::save(SoftwareSurface& surface, int quality, const std::string& filename)");
-
-  struct jpeg_compress_struct cinfo;
-  struct jpeg_error_mgr jerr;
-
-  cinfo.err = jpeg_std_error(&jerr);
-
-  jpeg_create_compress(&cinfo);
-
-  //jpeg_stdio_dest(&cinfo, outfile);
-
-  cinfo.image_width  = surface.get_width();
-  cinfo.image_height = surface.get_height();
-
-  cinfo.input_components = 3;		/* # of color components per pixel */
-  cinfo.in_color_space   = JCS_RGB; 	/* colorspace of input image */
-
-  jpeg_set_defaults(&cinfo);
-  jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);
- 
-  jpeg_start_compress(&cinfo, TRUE);
-
-  JSAMPROW row_pointer[surface.get_height()];
-  
-  for(int y = 0; y < surface.get_height(); ++y)
-    row_pointer[y] = static_cast<JSAMPLE*>(surface.get_row_data(y));
-
-  while(cinfo.next_scanline < cinfo.image_height)
-    {
-      jpeg_write_scanlines(&cinfo, row_pointer, surface.get_height());
-    }
-  
-  jpeg_finish_compress(&cinfo);
-  
-  jpeg_destroy_compress(&cinfo);
-}  
-
-Blob
-JPEG::save(const SoftwareSurface& surface, int quality)
-{
-  // std::cout << "JPEG::save(const SoftwareSurface& surface, int quality)" << std::endl;
-
-  struct jpeg_compress_struct cinfo;
-  struct jpeg_error_mgr jerr;
-
-  cinfo.err = jpeg_std_error(&jerr);
-
-  jpeg_create_compress(&cinfo);
-
-  std::vector<uint8_t> data;
-  jpeg_memory_dest(&cinfo, &data);
-
-  cinfo.image_width  = surface.get_width();
-  cinfo.image_height = surface.get_height();
-
-  cinfo.input_components = 3;		/* # of color components per pixel */
-  cinfo.in_color_space   = JCS_RGB; 	/* colorspace of input image */
-
-  jpeg_set_defaults(&cinfo);
-  jpeg_set_quality(&cinfo, quality, TRUE /* limit to baseline-JPEG values */);
- 
-  jpeg_start_compress(&cinfo, TRUE);
-
-  JSAMPROW row_pointer[surface.get_height()];
-  
-  for(int y = 0; y < surface.get_height(); ++y)
-    row_pointer[y] = static_cast<JSAMPLE*>(surface.get_row_data(y));
-
-  while(cinfo.next_scanline < cinfo.image_height)
-    {
-      jpeg_write_scanlines(&cinfo, &row_pointer[cinfo.next_scanline], 
-                           surface.get_height() - cinfo.next_scanline);
-    }
-  
-  jpeg_finish_compress(&cinfo);
-  
-  jpeg_destroy_compress(&cinfo);
-
-  // FIXME: This causes an unnecessary copy, should have a BlobImpl that is based on std::vector<>
-  return Blob(data);
-}
-
-#if 0 
-void 
-JPEG::crop()
-{
-  struct jpeg_decompress_struct srcinfo;
-  struct jpeg_compress_struct dstinfo;
-  struct jpeg_error_mgr jsrcerr, jdsterr;
-
-  jvirt_barray_ptr * src_coef_arrays;
-  jvirt_barray_ptr * dst_coef_arrays;
-
-  /* Initialize the JPEG decompression object with default error handling. */
-  srcinfo.err = jpeg_std_error(&jsrcerr);
-  jpeg_create_decompress(&srcinfo);
-
-  /* Initialize the JPEG compression object with default error handling. */
-  dstinfo.err = jpeg_std_error(&jdsterr);
-  jpeg_create_compress(&dstinfo);
-
-  jsrcerr.trace_level = jdsterr.trace_level;
-  srcinfo.mem->max_memory_to_use = dstinfo.mem->max_memory_to_use;
-
-  /* Specify data source for decompression */
-  jpeg_stdio_src(&srcinfo, fp);
-
-  /* Enable saving of extra markers that we want to copy */
-  // jcopy_markers_setup(&srcinfo, copyoption);
-
-  /* Read file header */
-  jpeg_read_header(&srcinfo, TRUE);
-
-  /* Any space needed by a transform option must be requested before
-   * jpeg_read_coefficients so that memory allocation will be done right.
-   */
-  jtransform_request_workspace(&srcinfo, &transformoption);
-
-  /* Read source file as DCT coefficients */
-  src_coef_arrays = jpeg_read_coefficients(&srcinfo);
-
-  /* Initialize destination compression parameters from source values */
-  jpeg_copy_critical_parameters(&srcinfo, &dstinfo);
-
-  /* Adjust destination parameters if required by transform options;
-   * also find out which set of coefficient arrays will hold the output.
-   */
-  dstinfo->image_width = info->output_width;
-  dstinfo->image_height = info->output_height;
-
-  dst_coef_arrays = src_coef_arrays;
-
-  jpeg_stdio_dest(&dstinfo, fp);
-
-  /* Start compressor (note no image data is actually written here) */
-  jpeg_write_coefficients(&dstinfo, dst_coef_arrays);
-
-  /* Copy to the output file any extra markers that we want to preserve */
-  jcopy_markers_execute(&srcinfo, &dstinfo, copyoption);
-
-  // JDIMENSION x_crop_offset, JDIMENSION y_crop_offset,
-   
-  { // Crop
-    JBLOCKARRAY src_buffer, dst_buffer;
-    jpeg_component_info *compptr;
-
-    /* We simply have to copy the right amount of data (the destination's
-     * image size) starting at the given X and Y offsets in the source.
-     */
-    for (int ci = 0; ci < dstinfo->num_components; ci++)
-      {
-        compptr = dstinfo->comp_info + ci;
-        JDIMENSION x_crop_blocks = x_crop_offset * compptr->h_samp_factor;
-        JDIMENSION y_crop_blocks = y_crop_offset * compptr->v_samp_factor;
-
-        for (JDIMENSION dst_blk_y = 0; dst_blk_y < compptr->height_in_blocks; dst_blk_y += compptr->v_samp_factor) 
-          {
-            dst_buffer = (*srcinfo->mem->access_virt_barray)
-              ((j_common_ptr) srcinfo, dst_coef_arrays[ci], dst_blk_y,
-               (JDIMENSION) compptr->v_samp_factor, TRUE);
-
-            src_buffer = (*srcinfo->mem->access_virt_barray)
-              ((j_common_ptr) srcinfo, src_coef_arrays[ci],
-               dst_blk_y + y_crop_blocks,
-               (JDIMENSION) compptr->v_samp_factor, FALSE);
-
-            for (int offset_y = 0; offset_y < compptr->v_samp_factor; offset_y++) 
-              {
-                jcopy_block_row(src_buffer[offset_y] + x_crop_blocks,
-                                dst_buffer[offset_y],
-                                compptr->width_in_blocks);
-              }
-          }
-      }
-  }
-
-  { // Cleanup
-    /* Finish compression and release memory */
-    jpeg_finish_compress(&dstinfo);
-    jpeg_destroy_compress(&dstinfo);
-    jpeg_finish_decompress(&srcinfo);
-    jpeg_destroy_decompress(&srcinfo);
-
-  }
-}
-#endif
-
-
-/* EOF */

Deleted: trunk/griv/jpeg.hpp
===================================================================
--- trunk/griv/jpeg.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,49 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_HPP
-#define HEADER_JPEG_HPP
-
-#include <string>
-#include "software_surface.hpp"
-
-class JPEG
-{
-private:
-
-
-public:
-  static void get_size(const std::string& filename, Size& size);
-
-  static SoftwareSurface load(const std::string& filename, int scale = 1);
-  static SoftwareSurface load(uint8_t* mem, int len);
-
-  static void save(const SoftwareSurface& surface, int quality, const std::string& filename);
-  static Blob save(const SoftwareSurface& surface, int quality);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/jpeg_decoder_thread.cpp
===================================================================
--- trunk/griv/jpeg_decoder_thread.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_decoder_thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,71 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "software_surface.hpp"
-#include "jpeg_decoder_thread.hpp"
-
-JPEGDecoderThread* JPEGDecoderThread::current_ = 0;
-
-JPEGDecoderThread::JPEGDecoderThread()
-  : quit(false)
-{
-  current_ = 0;
-}
-
-void
-JPEGDecoderThread::request_decode(const Blob& blob,
-                                  const boost::function<void (const SoftwareSurface&)>& callback)
-{
-  JPEGDecoderThreadMessage msg;
-  msg.blob     = blob;
-  msg.callback = callback;
-  queue.push(msg);
-}
-
-void 
-JPEGDecoderThread::stop()
-{
-  quit = true;
-}
-
-int
-JPEGDecoderThread::run()
-{
-  quit = false;
-  while (!quit)
-    {
-      while(!queue.empty())
-        {
-          JPEGDecoderThreadMessage msg = queue.front();
-          queue.pop();
-          msg.callback(SoftwareSurface::from_data(msg.blob));
-        }
-      queue.wait();
-    }
-
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/griv/jpeg_decoder_thread.hpp
===================================================================
--- trunk/griv/jpeg_decoder_thread.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_decoder_thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,71 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_DECODER_THREAD_HPP
-#define HEADER_JPEG_DECODER_THREAD_HPP
-
-#include <boost/function.hpp>
-#include "thread_message_queue.hpp"
-#include "blob.hpp"
-#include "thread.hpp"
-
-class SoftwareSurface;
-
-/** Simple thread that takes a binary blob and decodes it to a
-    SoftwareSurface */
-class JPEGDecoderThread : public Thread
-{
-private:
-  static JPEGDecoderThread* current_;
-
-public:
-  static JPEGDecoderThread* current() { return current_; } 
-
-private:
-  struct JPEGDecoderThreadMessage 
-  {
-    Blob blob;
-    boost::function<void (const SoftwareSurface&)> callback;
-  };
-
-  ThreadMessageQueue<JPEGDecoderThreadMessage> queue;
-  bool quit;
-
-protected:
-  int run();
-public:
-  JPEGDecoderThread();
-
-  void request_decode(const Blob& blob, const boost::function<void (const SoftwareSurface&)>& callback);
-  void stop();
-
-private:
-  JPEGDecoderThread (const JPEGDecoderThread&);
-  JPEGDecoderThread& operator= (const JPEGDecoderThread&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/jpeg_image.cpp
===================================================================
--- trunk/griv/jpeg_image.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_image.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,91 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "jpeg_image.hpp"
-
-class JPEGImageImpl
-{
-public:
-  Size size;
-};
-
-JPEGImage::JPEGImage()
-{
-}
-
-JPEGImage::JPEGImage(void* data, int len)
-{
-}
-
-JPEGImage::JPEGImage(const std::string& filename)
-{
-}
-
-JPEGImage
-JPEGImage::crop(const Rect& rect)
-{
-  return JPEGImage();
-}
-
-Blob
-JPEGImage::get_data() const
-{
-  return Blob();
-}
-
-SoftwareSurface
-JPEGImage::create_thumbnail(int scale)
-{
-  return SoftwareSurface();
-}
-
-int
-JPEGImage::get_width() const
-{
-  if (impl.get())
-    return impl->size.width;
-  else
-    return 0;
-}
-
-int
-JPEGImage::get_height() const
-{
-  if (impl.get())
-    return impl->size.height;
-  else
-    return 0;
-}
-
-Size
-JPEGImage::get_size() const
-{
-  if (impl.get())
-    return impl->size;
-  else
-    return Size(0, 0);
-}
-
-/* EOF */

Deleted: trunk/griv/jpeg_image.hpp
===================================================================
--- trunk/griv/jpeg_image.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_image.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,62 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_IMAGE_HPP
-#define HEADER_JPEG_IMAGE_HPP
-
-#include <string>
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "software_surface.hpp"
-#include "blob.hpp"
-
-class JPEGImageImpl;
-
-class JPEGImage
-{
-public:
-  JPEGImage();
-  JPEGImage(void* data, int len);
-  JPEGImage(const std::string& filename);
-
-  /** Crops the JPEG, rect coordinates must be aligned to 8px */
-  JPEGImage crop(const Rect& rect);
-
-  /** Return the compressed JPEG data */
-  Blob get_data() const;
-
-  int  get_width()  const;
-  int  get_height() const;
-  Size get_size()   const;
-
-  SoftwareSurface create_thumbnail(int scale);
-
-private:
-  boost::shared_ptr<JPEGImageImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/jpeg_memory_dest.cpp
===================================================================
--- trunk/griv/jpeg_memory_dest.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_memory_dest.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,96 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include "jpeg_memory_dest.hpp"
-
-#define OUTPUT_BUF_SIZE 4096
-
-struct jpeg_memory_destination_mgr 
-{
-  struct jpeg_destination_mgr pub;
-
-  JOCTET buffer[OUTPUT_BUF_SIZE];
-  std::vector<uint8_t>* data;
-};
-
-void jpeg_memory_init_destination(j_compress_ptr cinfo)
-{
-  struct jpeg_memory_destination_mgr* mgr = (struct jpeg_memory_destination_mgr*)cinfo->dest;
-
-  cinfo->dest->next_output_byte = mgr->buffer;
-  cinfo->dest->free_in_buffer   = OUTPUT_BUF_SIZE;
-}
-
-boolean jpeg_memory_empty_output_buffer(j_compress_ptr cinfo)
-{
-  //std::cout << "jpeg_memory_empty_output_buffer(j_compress_ptr cinfo)" << std::endl;
-
-  struct jpeg_memory_destination_mgr* mgr = (struct jpeg_memory_destination_mgr*)cinfo->dest;
-  
-  // This function always gets OUTPUT_BUF_SIZE bytes,
-  // cinfo->dest->free_in_buffer *must* be ignored
-  for(size_t i = 0; i < OUTPUT_BUF_SIZE; ++i) 
-    { // Little slow maybe?
-      mgr->data->push_back(mgr->buffer[i]);
-    }
-
-  cinfo->dest->next_output_byte = mgr->buffer;
-  cinfo->dest->free_in_buffer   = OUTPUT_BUF_SIZE;
-
-  return TRUE;
-}
-
-void jpeg_memory_term_destination(j_compress_ptr cinfo)
-{
-  //std::cout << "jpeg_memory_term_destination)" << std::endl;
-
-  struct jpeg_memory_destination_mgr* mgr = (struct jpeg_memory_destination_mgr*)cinfo->dest;
-  size_t datacount = OUTPUT_BUF_SIZE - cinfo->dest->free_in_buffer;
-
-  for(size_t i = 0; i < datacount; ++i)
-    { // Little slow maybe?
-      mgr->data->push_back(mgr->buffer[i]);
-    } 
-}
-
-void jpeg_memory_dest(j_compress_ptr cinfo, std::vector<uint8_t>* data)
-{
-  if (cinfo->dest == NULL) 
-    {	/* first time for this JPEG object? */
-      cinfo->dest = (struct jpeg_destination_mgr*)
-        (*cinfo->mem->alloc_small)((j_common_ptr) cinfo, JPOOL_PERMANENT,
-                                   sizeof(struct jpeg_memory_destination_mgr));
-    }
-
-  cinfo->dest->init_destination    = jpeg_memory_init_destination;
-  cinfo->dest->empty_output_buffer = jpeg_memory_empty_output_buffer;
-  cinfo->dest->term_destination    = jpeg_memory_term_destination;
-
-  struct jpeg_memory_destination_mgr* mgr = (struct jpeg_memory_destination_mgr*)cinfo->dest;
-  mgr->data = data;
-}
-
-/* EOF */

Deleted: trunk/griv/jpeg_memory_dest.hpp
===================================================================
--- trunk/griv/jpeg_memory_dest.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_memory_dest.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,38 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_MEMORY_DEST_HPP
-#define HEADER_JPEG_MEMORY_DEST_HPP
-
-#include <vector>
-#include <stdint.h>
-#include <stdio.h>
-#include <jpeglib.h>
-
-void jpeg_memory_dest(j_compress_ptr cinfo, std::vector<uint8_t>* data);
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/jpeg_memory_src.cpp
===================================================================
--- trunk/griv/jpeg_memory_src.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_memory_src.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,111 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <assert.h>
-#include <iostream>
-#include <jerror.h>
-#include "jpeg_memory_src.hpp"
-
-struct jpeg_memory_source_mgr {
-  struct jpeg_source_mgr pub;	/* public fields */
-
-  uint8_t* mem;
-  int      len;
-};
-
-void jpeg_memory_init_source(j_decompress_ptr cinfo)
-{
-  cinfo->src->next_input_byte = NULL;
-  cinfo->src->bytes_in_buffer = 0;
-}
-
-void jpeg_memory_term_source(j_decompress_ptr cinfo)
-{
-  //std::cout << "jpeg_memory_term" << std::endl;
-
-  // nothing to do destruct the source
-}
-
-boolean jpeg_memory_fill_input_buffer(j_decompress_ptr cinfo)
-{
-  //std::cout << "jpeg_memory_fill_input_buffer" << std::endl;
-
-  if (cinfo->src->next_input_byte != NULL)
-    {
-      (cinfo)->err->msg_code = JERR_INPUT_EOF;
-      (*(cinfo)->err->error_exit)((j_common_ptr) (cinfo));
-      return FALSE;
-    }
-  else
-    {
-      struct jpeg_memory_source_mgr* mgr = (struct jpeg_memory_source_mgr*)(cinfo->src);
-  
-      cinfo->src->next_input_byte = mgr->mem;
-      cinfo->src->bytes_in_buffer = mgr->len;
-
-      return TRUE;
-    }
-}
-
-void jpeg_memory_skip_input_data(j_decompress_ptr cinfo, long num_bytes)
-{
-  std::cout << "jpeg_memory_skip_input_data" << std::endl;
-
-  cinfo->src->next_input_byte = cinfo->src->next_input_byte + num_bytes;
-  cinfo->src->bytes_in_buffer = cinfo->src->bytes_in_buffer - num_bytes;
-
-  struct jpeg_memory_source_mgr* mgr = (struct jpeg_memory_source_mgr*)(cinfo->src);
-
-  if (cinfo->src->next_input_byte >= &mgr->mem[mgr->len])
-    {
-      (cinfo)->err->msg_code = JERR_INPUT_EOF;
-      (*(cinfo)->err->error_exit)((j_common_ptr) (cinfo));
-    }
-}
-
-void jpeg_memory_src(j_decompress_ptr cinfo, uint8_t* mem, int len)
-{
-  if (cinfo->src == NULL) 
-    {
-      cinfo->src = (struct jpeg_source_mgr*)((*cinfo->mem->alloc_small)((j_common_ptr)cinfo, 
-                                                                 JPOOL_PERMANENT,
-                                                                 sizeof(struct jpeg_memory_source_mgr)));
-    }
-  
-  cinfo->src->init_source       = jpeg_memory_init_source;
-  cinfo->src->fill_input_buffer = jpeg_memory_fill_input_buffer;
-  cinfo->src->skip_input_data   = jpeg_memory_skip_input_data;
-  cinfo->src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
-  cinfo->src->term_source       = jpeg_memory_term_source;
-
-  cinfo->src->bytes_in_buffer = 0; /* forces fill_input_buffer on first read */
-  cinfo->src->next_input_byte = NULL; /* until buffer loaded */
-
-  struct jpeg_memory_source_mgr* mgr = (struct jpeg_memory_source_mgr*)(cinfo->src);
-  mgr->mem = mem;
-  mgr->len = len;
-}
-
-/* EOF */

Deleted: trunk/griv/jpeg_memory_src.hpp
===================================================================
--- trunk/griv/jpeg_memory_src.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/jpeg_memory_src.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,38 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_JPEG_MEMORY_SRC_HPP
-#define HEADER_JPEG_MEMORY_SRC_HPP
-
-#include <stdint.h>
-#include <stdio.h>
-#include <jpeglib.h>
-
-/** Setup IO handling so that a JPEG can be read from memory */
-void jpeg_memory_src(j_decompress_ptr cinfo, uint8_t* mem, int len);
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/math.cpp
===================================================================
--- trunk/griv/math.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/math.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,98 +0,0 @@
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software: you can redistribute it and/or modify
-//  it under the terms of the GNU General Public License as published by
-//  the Free Software Foundation, either version 3 of the License, or
-//  (at your option) any later version.
-//  
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//  
-//  You should have received a copy of the GNU General Public License
-//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-#include <math.h>
-#include "math.hpp"
-
-namespace Math {
-
-float abs(float v)
-{
-  return ::fabs(v);
-}
-
-float sin(float a)
-{
-  return ::sinf(a);
-}
-
-float cos(float a)
-{
-  return ::cosf(a);
-}
-
-float sqrt(float a)
-{
-  return ::sqrt(a);
-}
-
-float mod(float x, float y)
-{
-  return ::fmodf(x, y);
-}
-
-float floor(float x)
-{
-  return ::floorf(x);
-}
-
-float atan2(float x, float y)
-{
-  return ::atan2(x, y);
-}
-
-static char num2hex[] = "0123456789abcdef";
-
-std::string float2string(float value)
-{
-  std::string str(2*sizeof(float), '0');
-
-  for(size_t i = 0; i < sizeof(float); ++i)
-    {
-      char v = reinterpret_cast<char*>(&value)[i];
-      str[2*i + 0] = num2hex[(v & 0xf0) >> 4];
-      str[2*i + 1] = num2hex[v & 0x0f];
-    }
-  return str;
-}
-
-static char hex2int(char c)
-{
-  if (c >= '0' && c <= '9')
-    return c - '0';
-  else if (c >= 'a' && c <= 'f')
-    return c - 'a' + 0xa;
-  else
-    return 0;    
-}
-
-float string2float(const std::string& str)
-{
-  assert(str.size() == 2*sizeof(float));
-
-  float value;
-  for(size_t i = 0; i < sizeof(float); ++i)
-    {
-      char& v = reinterpret_cast<char*>(&value)[i];
-      v = (hex2int(str[2*i+0]) << 4) | hex2int(str[2*i+1]);
-    }
-
-  return value;
-}
-
-} // namespace Math
-
-/* EOF */

Deleted: trunk/griv/math.hpp
===================================================================
--- trunk/griv/math.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/math.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,131 +0,0 @@
-//  Pingus - A free Lemmings clone
-//  Copyright (C) 2000 Ingo Ruhnke <grumbel at gmx.de>
-//
-//  This program is free software: you can redistribute it and/or modify
-//  it under the terms of the GNU General Public License as published by
-//  the Free Software Foundation, either version 3 of the License, or
-//  (at your option) any later version.
-//  
-//  This program is distributed in the hope that it will be useful,
-//  but WITHOUT ANY WARRANTY; without even the implied warranty of
-//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-//  GNU General Public License for more details.
-//  
-//  You should have received a copy of the GNU General Public License
-//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-
-#ifndef HEADER_PINGUS_MATH_HPP
-#define HEADER_PINGUS_MATH_HPP
-
-#include <assert.h>
-#include <stdlib.h>
-#include <string>
-
-/** A collection of small math helper functions, some of them might be
-    equal in functionality to standard STL functions, but provided
-    here for portability and broken STL implementations
-
-    @brief A collection of mathematical helper functions */
-namespace Math {
-
-const float pi   = 3.14159265358979323846f;	/* pi */
-const float pi_2 = 1.57079632679489661923f;	/* pi/2 */
-
-// Win32 defines these are defines already, so we have to undef them
-#ifdef min
-#undef min
-#endif
-#ifdef max
-#undef max
-#endif
-
-template<class T>
-T min (const T& a, const T& b)
-{
-  if (a < b)
-    return a;
-  else
-    return b;
-}
-
-template<class T>
-T max (const T& a, const T& b)
-{
-  if (a > b)
-    return a;
-  else
-    return b;
-}
-
-template<class T>
-T clamp (const T& low, const T& v, const T& high)
-{
-  assert(low <= high);
-  return max((low), min((v), (high)));
-}
-
-inline
-float frand()
-{
-  return rand() / (RAND_MAX + 1.0f);
-}
-
-inline
-bool rand_bool()
-{
-  return rand()%2 == 0;
-}
-
-inline int round (float f)
-{
-  if (f >= 0.0f)
-    return int(f + 0.5f);
-  else
-    return int(f - 0.5f);
-}
-
-float abs(float v);
-float sin(float a);
-float cos(float a);
-float sqrt(float a);
-float mod(float x, float y);
-float floor(float x);
-float atan2(float x, float y);
-
-/** Write out the raw bits of a float as hex */
-std::string float2string(float value);
-
-/** Restore the raw bits of a float from a string */
-float string2float(const std::string& str);
-
-inline int round_to_power_of_two(int n)
-{
-  n = n - 1;
-
-  n = n | (n >> 1);
-  n = n | (n >> 2);
-  n = n | (n >> 4);
-  n = n | (n >> 8);
-  n = n | (n >> 16);
-  
-  n = n + 1;
-  
-  return n;
-}
-
-/** Calculates 2^n */
-inline int pow2(int n)
-{
-  return (1 << n);
-}
-
-inline bool is_power_of_two(int n)
-{
-  return (n > 0) && ((n & (n - 1)) == 0);
-}
-
-} // namespace Math
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/md5.cpp
===================================================================
--- trunk/griv/md5.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/md5.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,84 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <mhash.h>
-#include <fstream>
-#include <iomanip>
-#include <sstream>
-#include <stdexcept>
-#include "md5.hpp"
-
-std::string
-MD5::md5_string(const std::string& str)
-{
-  unsigned char hash[16]; /* enough size for MD5 */
-  MHASH td = mhash_init(MHASH_MD5);
-  if (td == MHASH_FAILED)
-    throw std::runtime_error("Failed to init MHash");
-  
-  mhash(td, str.c_str(), str.length());
-  
-  mhash_deinit(td, hash);
-
-  // Convert to string representation
-  std::ostringstream out;
-  for (int i = 0; i < 16; i++) 
-    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
-
-  return out.str();
-}
-
-std::string
-MD5::md5_file(const std::string& filename)
-{
-  unsigned char hash[16]; /* enough size for MD5 */
-  MHASH td = mhash_init(MHASH_MD5);
-  if (td == MHASH_FAILED) 
-    throw std::runtime_error("Failed to init MHash");
-  
-  const unsigned int buf_size = 32768;
-  char buf[buf_size];
-  std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary); 
-  if (!in)
-    throw std::runtime_error("MD5: Couldn't open file " + filename);
-    
-  while(!in.eof())
-    {
-      in.read(buf, buf_size);
-      mhash(td, buf, in.gcount());
-    }
-
-  in.close();
-    
-  mhash_deinit(td, hash);
-
-  // Convert to string representation
-  std::ostringstream out;
-  for (int i = 0; i < 16; i++)
-    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
-  return out.str();  
-}
-
-/* EOF */

Deleted: trunk/griv/md5.hpp
===================================================================
--- trunk/griv/md5.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/md5.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,40 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_MD5_HPP
-#define HEADER_MD5_HPP
-
-#include <string>
-
-class MD5
-{
-public:
-  static std::string md5_string(const std::string& str);
-  static std::string md5_file(const std::string& filename);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/software_surface.cpp
===================================================================
--- trunk/griv/software_surface.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/software_surface.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,198 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <assert.h>
-#include <iostream>
-#include <stdexcept>
-
-#include "blob.hpp"
-#include "math.hpp"
-#include "jpeg.hpp"
-#include "math/rect.hpp"
-#include "math/size.hpp"
-
-#include "url.hpp"
-#include "software_surface.hpp"
-
-class SoftwareSurfaceImpl
-{
-public:
-  Size     size;
-  int      pitch;
-  uint8_t* pixels;
-  
-  SoftwareSurfaceImpl(const Size& size)
-    : size(size),
-      pitch(size.width * 3),
-      pixels(new uint8_t[pitch * size.height])
-  {
-  }
-
-  ~SoftwareSurfaceImpl() 
-  {
-    delete[] pixels;
-  }
-};
-
-SoftwareSurface::SoftwareSurface()
-{
-}
-
-SoftwareSurface::SoftwareSurface(const Size& size)
- : impl(new SoftwareSurfaceImpl(size))
-{
-}
-
-SoftwareSurface::~SoftwareSurface()
-{
-}
-
-void
-SoftwareSurface::put_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b)
-{
-  assert(x >= 0 && x < impl->size.width &&
-         y >= 0 && y < impl->size.height);
-
-  impl->pixels[y * impl->pitch + x*3 + 0] = r;
-  impl->pixels[y * impl->pitch + x*3 + 1] = g;
-  impl->pixels[y * impl->pitch + x*3 + 2] = b;
-}
-
-void
-SoftwareSurface::get_pixel(int x, int y, uint8_t* r, uint8_t* g, uint8_t* b) const
-{
-  assert(x >= 0 && x < impl->size.width &&
-         y >= 0 && y < impl->size.height);
-
-  *r = impl->pixels[y * impl->pitch + x*3 + 0];
-  *g = impl->pixels[y * impl->pitch + x*3 + 1];
-  *b = impl->pixels[y * impl->pitch + x*3 + 2];
-}
-
-SoftwareSurface
-SoftwareSurface::scale(const Size& size) const
-{
-  SoftwareSurface surface(size);
-  // Very much non-fast, needs replacement with proper
-
-  uint8_t r,g,b;
-  for(int y = 0; y < surface.get_height(); ++y)
-    for(int x = 0; x < surface.get_width(); ++x)
-      {
-        get_pixel(x * impl->size.width  / surface.impl->size.width,
-                  y * impl->size.height / surface.impl->size.height,
-                  &r, &g, &b);
-
-        surface.put_pixel(x, y, r, g, b);
-      }
-
-  return surface;
-}
-
-SoftwareSurface
-SoftwareSurface::crop(const Rect& rect_in) const
-{
-  assert(rect_in.is_normal());
- 
-  // Clip the rectangle to the image
-  Rect rect(Math::max(0, rect_in.left),
-            Math::max(0, rect_in.top),
-            Math::min(get_width(),  rect_in.right), 
-            Math::min(get_height(), rect_in.bottom));
-
-  SoftwareSurface surface(rect.get_size());
-
-  for(int y = rect.top; y < rect.bottom; ++y)
-    {
-      memcpy(surface.get_row_data(y - rect.top), 
-             get_row_data(y) + rect.left*3,
-             rect.get_width() * 3);
-    }
-
-  return surface;
-}
-
-Size
-SoftwareSurface::get_size()  const
-{
-  return impl->size;
-}
-
-int
-SoftwareSurface::get_width()  const
-{
-  return impl->size.width;
-}
-
-int
-SoftwareSurface::get_height() const
-{
-  return impl->size.height;
-}
-
-int
-SoftwareSurface::get_pitch()  const
-{
-  return impl->pitch;
-}
-
-void
-SoftwareSurface::save(const std::string& filename) const
-{
-  assert(!"SoftwareSurface::save(const std::string& filename) const");
-}
-
-Blob
-SoftwareSurface::get_jpeg_data() const
-{
-  return JPEG::save(*this, 75);
-}
-
-SoftwareSurface
-SoftwareSurface::from_file(const std::string& filename)
-{
-  return JPEG::load(filename);
-}
-
-SoftwareSurface
-SoftwareSurface::from_data(const Blob& blob)
-{
-  return JPEG::load(blob.get_data(), blob.size());
-}
-
-uint8_t*
-SoftwareSurface::get_data() const
-{
-  return impl->pixels;
-}
-
-uint8_t*
-SoftwareSurface::get_row_data(int y) const
-{
-  return impl->pixels + (y * impl->pitch);
-  
-}
-  
-/* EOF */

Deleted: trunk/griv/software_surface.hpp
===================================================================
--- trunk/griv/software_surface.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/software_surface.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,74 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_SOFTWARE_SURFACE_HPP
-#define HEADER_SOFTWARE_SURFACE_HPP
-
-#include <boost/shared_ptr.hpp>
-#include "blob.hpp"
-
-class URL;
-class Rect;
-class Size;
-class SoftwareSurfaceImpl;
-
-class SoftwareSurface
-{
-public:
-  SoftwareSurface();
-  SoftwareSurface(const Size& size);
-
-  ~SoftwareSurface();
-
-  Size get_size()  const;
-  int get_width()  const;
-  int get_height() const;
-  int get_pitch()  const;
-
-  SoftwareSurface scale(const Size& size) const;
-  SoftwareSurface crop(const Rect& rect) const;
-
-  void save(const std::string& filename) const;
-  
-  Blob get_jpeg_data() const;
-  
-  static SoftwareSurface from_data(const Blob& blob);
-  static SoftwareSurface from_file(const std::string& filename);
- 
-  void put_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b);
-  void get_pixel(int x, int y, uint8_t* r, uint8_t* g, uint8_t* b) const;
-
-  uint8_t* get_data() const;
-  uint8_t* get_row_data(int y) const;
-
-  operator bool() const { return impl.get(); }
-
-private:
-  boost::shared_ptr<SoftwareSurfaceImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/sqlite.cpp
===================================================================
--- trunk/griv/sqlite.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/sqlite.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,290 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "SDL.h"
-
-#include <iostream>
-#include <sstream>
-#include "sqlite.hpp"
-
-int busy_callback(void* , int n)
-{
-  SDL_Delay(10);
-  return 1;
-}
-
-SQLiteError::SQLiteError(const std::string& err_)
-  : err(err_)
-{  
-}
-
-SQLiteConnection::SQLiteConnection(const std::string& filename)
-{
-  if (sqlite3_open(filename.c_str(), &db) != SQLITE_OK)
-    {
-      std::ostringstream str; 
-      str << "SQLiteConnection: can't open database: " << sqlite3_errmsg(db);
-      throw SQLiteError(str.str());
-    }
-
-  sqlite3_busy_handler(db, busy_callback, 0);
-}
-
-SQLiteConnection::~SQLiteConnection()
-{
-  sqlite3_close(db);
-}
-
-void
-SQLiteConnection::exec(const std::string& sqlstmt)
-{
-  char* errmsg;
-
-  //std::cout << "SQLiteConnection::exec: " << sqlstmt << std::endl;
-
-  if (sqlite3_exec(db, sqlstmt.c_str(), 0, 0, &errmsg) != SQLITE_OK)
-    {
-      std::ostringstream out;
-
-      out << "FileDatabase: " << errmsg << std::endl;
-
-      sqlite3_free(errmsg);
-      errmsg = 0;
-
-      throw SQLiteError(out.str());
-    }
-}
-
-void
-SQLiteConnection::vacuum()
-{
-  SQLiteStatement stmt(this);
-  stmt.prepare("VACUUM;");
-  stmt.execute();
-}
-
-SQLiteStatement::SQLiteStatement(SQLiteConnection* db)
-  : db(db), 
-    stmt(0)
-{
-}
-
-SQLiteStatement::SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt)
-  : db(db),
-    stmt(0)
-{
-  prepare(sqlstmt);
-}
-
-SQLiteStatement::~SQLiteStatement()
-{
- retry: 
-
-  switch (sqlite3_finalize(stmt))
-    {
-      case SQLITE_OK:
-        break;
-
-      case SQLITE_LOCKED:
-        goto retry;
-
-      case SQLITE_BUSY:
-        goto retry;
-
-      default:
-        {
-          std::ostringstream str;
-          str << "SQLiteStatement::~SQLiteStatement: " << sqlite3_errmsg(db->get_db());
-          throw SQLiteError(str.str());
-        }
-
-    }
-}
-
-void
-SQLiteStatement::prepare(const std::string& sqlstmt)
-{
-  if (sqlite3_prepare_v2(db->get_db(), sqlstmt.c_str(), -1, &stmt,  0)
-      != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::prepare: " << sqlite3_errmsg(db->get_db()) << ":\n" << sqlstmt;
-      throw SQLiteError(str.str());
-    }
-}
-
-void
-SQLiteStatement::bind_int(int n, int i)
-{
-  if (sqlite3_bind_int(stmt, n, i) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::bind_int: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());
-    }
-}
-
-void
-SQLiteStatement::bind_text(int n, const std::string& text)
-{
-  if (sqlite3_bind_text(stmt, n, text.c_str(), text.size(), SQLITE_TRANSIENT) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::bind_text: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());      
-    }
-}
-
-void
-SQLiteStatement::bind_null(int n)
-{
-  if (sqlite3_bind_null(stmt, n) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::bind_text: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());      
-    }  
-}
-
-void
-SQLiteStatement::bind_blob(int n, const Blob& blob)
-{
-  if (sqlite3_bind_blob(stmt, n, blob.get_data(), blob.size(), SQLITE_TRANSIENT) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::bind_blob: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());
-    }
-}
-
-void
-SQLiteStatement::reset()
-{
-  sqlite3_clear_bindings(stmt);  
-
-  if (sqlite3_reset(stmt) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::reset: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());
-    }
-}
-
-void 
-SQLiteStatement::execute()
-{
-  if (sqlite3_step(stmt) != SQLITE_DONE)
-    {
-      std::ostringstream str;
-      str << "SQLiteStatement::execute: " << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());      
-    }
-
-  reset();
-}
-
-SQLiteReader
-SQLiteStatement::execute_query()
-{
-  return SQLiteReader(db, stmt);
-}
-
-SQLiteReader::SQLiteReader(SQLiteConnection* db, sqlite3_stmt* stmt)
-  : db(db),
-    stmt(stmt)
-{
-}
-
-SQLiteReader::~SQLiteReader()
-{  
-  // FIXME: Not good, we likely clean up twice
-  
-  sqlite3_clear_bindings(stmt);  
-
-  if (sqlite3_reset(stmt) != SQLITE_OK)
-    {
-      std::ostringstream str;
-      str << "SQLiteReader::~SQLiteReader:" << sqlite3_errmsg(db->get_db());
-      throw SQLiteError(str.str());
-    }
-}
-
-bool
-SQLiteReader::next()
-{
- retry:
-
-  switch(sqlite3_step(stmt))
-    {
-      case SQLITE_DONE:
-        // cleanup here or in the destructor?!
-        return false;
-
-      case SQLITE_ROW:
-        return true;
-
-      case SQLITE_BUSY:
-        goto retry;        
-        
-      case SQLITE_ERROR:
-      case SQLITE_MISUSE:
-      default:
-        {
-          std::ostringstream str;
-          str << "SQLiteStatement::execute_query: " << sqlite3_errmsg(db->get_db());
-          throw SQLiteError(str.str());     
-          return false;
-        }
-    }
-}
-
-int
-SQLiteReader::get_int(int column)
-{
-  return sqlite3_column_int(stmt, column);
-}
-
-std::string
-SQLiteReader::get_text(int column)
-{
-  const void* data = sqlite3_column_text(stmt, column);
-  int len = sqlite3_column_bytes(stmt, column);
-  return std::string(static_cast<const char*>(data), len);
-}
-
-Blob
-SQLiteReader::get_blob(int column)
-{
-  return Blob(sqlite3_column_blob(stmt, column),
-              sqlite3_column_bytes(stmt, column));
-}
-
-std::string
-SQLiteReader::get_column_name(int column)
-{
-  return sqlite3_column_name(stmt, column);
-}
-
-/* EOF */

Deleted: trunk/griv/sqlite.hpp
===================================================================
--- trunk/griv/sqlite.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/sqlite.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,114 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_SQLITE_HPP
-#define HEADER_SQLITE_HPP
-
-#include <stdexcept>
-#include <sqlite3.h>
-
-#include "blob.hpp"
-
-class SQLiteError : public std::exception
-{
-private:
-  std::string err;
-
-public:
-  SQLiteError(const std::string& err);
-  virtual ~SQLiteError() throw () {}
-
-  const char* what() const throw () { return err.c_str(); }
-};
-
-class SQLiteConnection
-{
-private:
-  sqlite3* db;
-
-public:
-  SQLiteConnection(const std::string& filename);
-  ~SQLiteConnection();
-
-  void exec(const std::string& sqlstmt);
-
-  /** Do a VACCUM on the database to clean up collected garbage, this
-      call can take quite a while (~1min) for larger databases, since
-      the whole database gets copied in the process */
-  void vacuum();
-
-  sqlite3* get_db() const { return db; }
-};
-
-class SQLiteReader
-{
-private:
-  SQLiteConnection* db;
-  sqlite3_stmt*   stmt;
-  
-public:
-  SQLiteReader(SQLiteConnection* db, sqlite3_stmt* stmt);
-  ~SQLiteReader();
-
-  bool next();
-
-  int         get_int(int column);
-  std::string get_text(int column);
-  Blob        get_blob(int column);
-
-  std::string get_column_name(int column);
-};
-
-class SQLiteStatement
-{
-private:
-  SQLiteConnection* db;
-  sqlite3_stmt*   stmt;
-
-  void reset();
-  
-public:
-  SQLiteStatement(SQLiteConnection* db);
-  SQLiteStatement(SQLiteConnection* db, const std::string& sqlstmt);
-  ~SQLiteStatement();
-
-  void prepare(const std::string& sqlstmt);
-
-  void bind_null(int n);
-  void bind_int(int n, int i);
-  void bind_text(int n, const std::string&);
-  void bind_blob(int n, const Blob&);
-
-  void execute();
-  SQLiteReader execute_query();
-
-private:
-  SQLiteStatement(const SQLiteStatement&);
-  SQLiteStatement();
-};
-
-#endif
-
-/* EOF */

Copied: trunk/griv/src/blob.cpp (from rev 2343, trunk/griv/blob.cpp)

Copied: trunk/griv/src/blob.hpp (from rev 2343, trunk/griv/blob.hpp)

Copied: trunk/griv/src/database_thread.cpp (from rev 2343, trunk/griv/database_thread.cpp)

Copied: trunk/griv/src/database_thread.hpp (from rev 2343, trunk/griv/database_thread.hpp)

Copied: trunk/griv/src/file_database.cpp (from rev 2343, trunk/griv/file_database.cpp)

Copied: trunk/griv/src/file_database.hpp (from rev 2343, trunk/griv/file_database.hpp)

Copied: trunk/griv/src/filesystem.cpp (from rev 2343, trunk/griv/filesystem.cpp)

Copied: trunk/griv/src/filesystem.hpp (from rev 2343, trunk/griv/filesystem.hpp)

Copied: trunk/griv/src/framebuffer.cpp (from rev 2343, trunk/griv/framebuffer.cpp)

Copied: trunk/griv/src/framebuffer.hpp (from rev 2343, trunk/griv/framebuffer.hpp)

Copied: trunk/griv/src/grid.hpp (from rev 2343, trunk/griv/grid.hpp)

Copied: trunk/griv/src/griv.cpp (from rev 2344, trunk/griv/griv.cpp)

Copied: trunk/griv/src/griv.hpp (from rev 2343, trunk/griv/griv.hpp)

Copied: trunk/griv/src/image.cpp (from rev 2343, trunk/griv/image.cpp)

Copied: trunk/griv/src/image.hpp (from rev 2343, trunk/griv/image.hpp)

Copied: trunk/griv/src/job_handle.cpp (from rev 2343, trunk/griv/job_handle.cpp)

Copied: trunk/griv/src/job_handle.hpp (from rev 2343, trunk/griv/job_handle.hpp)

Copied: trunk/griv/src/jpeg.cpp (from rev 2343, trunk/griv/jpeg.cpp)

Copied: trunk/griv/src/jpeg.hpp (from rev 2343, trunk/griv/jpeg.hpp)

Copied: trunk/griv/src/jpeg_decoder_thread.cpp (from rev 2343, trunk/griv/jpeg_decoder_thread.cpp)

Copied: trunk/griv/src/jpeg_decoder_thread.hpp (from rev 2343, trunk/griv/jpeg_decoder_thread.hpp)

Copied: trunk/griv/src/jpeg_image.cpp (from rev 2343, trunk/griv/jpeg_image.cpp)

Copied: trunk/griv/src/jpeg_image.hpp (from rev 2343, trunk/griv/jpeg_image.hpp)

Copied: trunk/griv/src/jpeg_memory_dest.cpp (from rev 2343, trunk/griv/jpeg_memory_dest.cpp)

Copied: trunk/griv/src/jpeg_memory_dest.hpp (from rev 2343, trunk/griv/jpeg_memory_dest.hpp)

Copied: trunk/griv/src/jpeg_memory_src.cpp (from rev 2343, trunk/griv/jpeg_memory_src.cpp)

Copied: trunk/griv/src/jpeg_memory_src.hpp (from rev 2343, trunk/griv/jpeg_memory_src.hpp)

Copied: trunk/griv/src/math (from rev 2343, trunk/griv/math)

Copied: trunk/griv/src/math.cpp (from rev 2343, trunk/griv/math.cpp)

Copied: trunk/griv/src/math.hpp (from rev 2343, trunk/griv/math.hpp)

Copied: trunk/griv/src/md5.cpp (from rev 2343, trunk/griv/md5.cpp)

Copied: trunk/griv/src/md5.hpp (from rev 2343, trunk/griv/md5.hpp)

Copied: trunk/griv/src/software_surface.cpp (from rev 2343, trunk/griv/software_surface.cpp)

Copied: trunk/griv/src/software_surface.hpp (from rev 2343, trunk/griv/software_surface.hpp)

Copied: trunk/griv/src/sqlite.cpp (from rev 2343, trunk/griv/sqlite.cpp)

Copied: trunk/griv/src/sqlite.hpp (from rev 2343, trunk/griv/sqlite.hpp)

Copied: trunk/griv/src/surface.cpp (from rev 2343, trunk/griv/surface.cpp)

Copied: trunk/griv/src/surface.hpp (from rev 2343, trunk/griv/surface.hpp)

Copied: trunk/griv/src/texture.cpp (from rev 2343, trunk/griv/texture.cpp)

Copied: trunk/griv/src/texture.hpp (from rev 2343, trunk/griv/texture.hpp)

Copied: trunk/griv/src/thread.cpp (from rev 2343, trunk/griv/thread.cpp)

Copied: trunk/griv/src/thread.hpp (from rev 2343, trunk/griv/thread.hpp)

Copied: trunk/griv/src/thread_message_queue.hpp (from rev 2343, trunk/griv/thread_message_queue.hpp)

Copied: trunk/griv/src/tile_database.cpp (from rev 2343, trunk/griv/tile_database.cpp)

Copied: trunk/griv/src/tile_database.hpp (from rev 2343, trunk/griv/tile_database.hpp)

Copied: trunk/griv/src/tile_generator.cpp (from rev 2343, trunk/griv/tile_generator.cpp)

Copied: trunk/griv/src/tile_generator.hpp (from rev 2343, trunk/griv/tile_generator.hpp)

Copied: trunk/griv/src/tile_generator_thread.cpp (from rev 2343, trunk/griv/tile_generator_thread.cpp)
===================================================================
--- trunk/griv/tile_generator_thread.cpp	2008-08-20 17:21:44 UTC (rev 2343)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -0,0 +1,97 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include <boost/bind.hpp>
+#include "tile_generator.hpp"
+#include "database_thread.hpp"
+#include "tile_generator_thread.hpp"
+ 
+TileGeneratorThread* TileGeneratorThread::current_ = 0; 
+
+TileGeneratorThread::TileGeneratorThread()
+  : quit(false)
+{
+  current_ = this;
+}
+
+TileGeneratorThread::~TileGeneratorThread()
+{
+}
+
+void
+TileGeneratorThread::request_tiles(int fileid, const std::string& filename)
+{
+  TileGeneratorMessage msg;
+
+  msg.fileid   = fileid;
+  msg.filename = filename;
+
+  msg_queue.push(msg);
+}
+
+void
+TileGeneratorThread::request_tile(int fileid, const std::string& filename, int x, int y, int scale)
+{
+  // Do some magic to group tile request for the same fileid
+}
+
+void
+TileGeneratorThread::stop()
+{
+  quit = true;
+}
+
+void
+TileGeneratorThread::receive_tile(const Tile& tile)
+{
+  DatabaseThread::current()->store_tile(tile);
+}
+
+int
+TileGeneratorThread::run()
+{
+  quit = false;
+
+  TileGenerator generator;
+
+  while(!quit)
+    {
+      while(!msg_queue.empty())
+        {
+          TileGeneratorMessage msg = msg_queue.front();
+          msg_queue.pop();
+
+          std::cout << "Generating tiles for: " << msg.filename << std::endl;
+          generator.generate_all(msg.fileid, msg.filename,
+                                 boost::bind(&TileGeneratorThread::receive_tile, this, _1));
+        }
+      msg_queue.wait();
+    }
+
+  return 0;
+}
+
+/* EOF */

Copied: trunk/griv/src/tile_generator_thread.hpp (from rev 2343, trunk/griv/tile_generator_thread.hpp)
===================================================================
--- trunk/griv/tile_generator_thread.hpp	2008-08-20 17:21:44 UTC (rev 2343)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -0,0 +1,70 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TILE_GENERATOR_THREAD_HPP
+#define HEADER_TILE_GENERATOR_THREAD_HPP
+
+#include "thread.hpp"
+#include "thread_message_queue.hpp"
+
+struct TileGeneratorMessage
+{
+  int fileid;
+  std::string filename;
+};
+
+class TileGeneratorThread : public Thread
+{
+private:
+  static TileGeneratorThread* current_; 
+public:
+  static TileGeneratorThread* current() { return current_; }
+
+private:
+  bool quit;
+  ThreadMessageQueue<TileGeneratorMessage> msg_queue;
+
+protected:
+  int run();
+  
+public:
+  TileGeneratorThread();
+  ~TileGeneratorThread();
+
+  void stop();
+
+  void request_tiles(int fileid, const std::string& filename);
+  void request_tile (int fileid, const std::string& filename, int x, int y, int scale);
+
+  void receive_tile(const Tile& tile);
+  
+private:
+  TileGeneratorThread (const TileGeneratorThread&);
+  TileGeneratorThread& operator= (const TileGeneratorThread&);
+};
+
+#endif
+
+/* EOF */

Copied: trunk/griv/src/url.cpp (from rev 2343, trunk/griv/url.cpp)

Copied: trunk/griv/src/url.hpp (from rev 2343, trunk/griv/url.hpp)

Copied: trunk/griv/src/viewer.cpp (from rev 2343, trunk/griv/viewer.cpp)

Copied: trunk/griv/src/viewer.hpp (from rev 2343, trunk/griv/viewer.hpp)

Copied: trunk/griv/src/viewer_thread.cpp (from rev 2343, trunk/griv/viewer_thread.cpp)

Copied: trunk/griv/src/viewer_thread.hpp (from rev 2343, trunk/griv/viewer_thread.hpp)

Copied: trunk/griv/src/workspace.cpp (from rev 2343, trunk/griv/workspace.cpp)

Copied: trunk/griv/src/workspace.hpp (from rev 2343, trunk/griv/workspace.hpp)

Deleted: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/surface.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,199 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <assert.h>
-#include "framebuffer.hpp"
-#include "math.hpp"
-#include "math/vector2i.hpp"
-#include "math/vector2f.hpp"
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "software_surface.hpp"
-#include "surface.hpp"
-
-class SurfaceImpl
-{
-public:
-  Texture texture;
-  Rectf   uv;
-  Size    size;
-  
-  SurfaceImpl(const Texture& texture_, const Rectf& uv_, const Size& size_)
-    : texture(texture_),
-      uv(uv_),
-      size(size_)
-  {
-    //std::cout << uv << std::endl;
-  }
-
-  SurfaceImpl(const SoftwareSurface& src, const Rect& srcrect)
-  {
-    assert(src);
-
-    texture = Texture(src, srcrect);
-    
-    uv = Rectf(Vector2f(0, 0), srcrect.get_size());
-
-    size = Size(srcrect.get_size());
-  }
-  
-  ~SurfaceImpl()
-  {
-  }
-
-  void draw(const Rectf& srcrect, const Rectf& dstrect)
-  {
-    if (texture)
-      {
-        texture.bind();
-        glEnable(GL_TEXTURE_RECTANGLE_ARB);
-        glColor3f(1.0f, 1.0f, 1.0f);       
-
-        glBegin(GL_QUADS);
-        glTexCoord2f(srcrect.left, srcrect.top);
-        glVertex2f(dstrect.left, dstrect.top);
-
-        glTexCoord2f(srcrect.right, srcrect.top);
-        glVertex2f(dstrect.right, dstrect.top);
-
-        glTexCoord2f(srcrect.right, srcrect.bottom);
-        glVertex2f(dstrect.right, dstrect.bottom);
-
-        glTexCoord2f(srcrect.left, srcrect.bottom);
-        glVertex2f(dstrect.left, dstrect.bottom);
-        glEnd();
-      }    
-  }
-
-  void draw(const Rectf& rect)
-  {
-    if (texture)
-      {
-        texture.bind();
-        glEnable(GL_TEXTURE_RECTANGLE_ARB);
-        glColor3f(1.0f, 1.0f, 1.0f);       
-
-        glBegin(GL_QUADS);
-        glTexCoord2f(uv.left, uv.top);
-        glVertex2f(rect.left, rect.top);
-
-        glTexCoord2f(uv.right, uv.top);
-        glVertex2f(rect.right, rect.top);
-
-        glTexCoord2f(uv.right, uv.bottom);
-        glVertex2f(rect.right, rect.bottom);
-
-        glTexCoord2f(uv.left, uv.bottom);
-        glVertex2f(rect.left, rect.bottom);
-        glEnd();
-      }
-  }
-
-  void draw(const Vector2f& pos)
-  {
-    draw(Rectf(pos, size));
-  }
-};
-
-Surface::Surface()
-{
-}
-
-Surface::Surface(boost::shared_ptr<SurfaceImpl> impl_)
-  : impl(impl_)
-{
-}
-
-Surface::Surface(const SoftwareSurface& src)
-  : impl(new SurfaceImpl(src, Rect(Vector2i(0, 0), src.get_size())))
-{
-}
-
-Surface::Surface(const SoftwareSurface& src, const Rect& srcrect)
-  : impl(new SurfaceImpl(src, srcrect))
-{
-}
-
-Surface::~Surface()
-{
-}
-
-void
-Surface::draw(const Vector2f& pos)
-{
-  if (impl.get())
-    impl->draw(pos);
-}
-
-void
-Surface::draw(const Rectf& srcrect, const Rectf& dstrect)
-{
-  if (impl.get())
-    impl->draw(srcrect, dstrect);  
-}
-
-void
-Surface::draw(const Rectf& rect)
-{
-  if (impl.get())
-    impl->draw(rect);
-}
-
-int
-Surface::get_width() const 
-{
-  if (impl.get())
-    return impl->size.width; 
-  else
-    return 0;
-}
-
-int
-Surface::get_height() const
-{
-  if (impl.get())
-    return impl->size.height; 
-  else
-    return 0;
-}
-
-Size
-Surface::get_size() const
-{
-  if (impl.get())
-    return impl->size;
-  else
-    return Size();
-}
-
-void
-Surface::set_size(const Size& size)
-{
-  if (impl.get())
-    impl->size = size;
-}
-
-/* EOF */

Deleted: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/surface.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,66 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_SURFACE_HPP
-#define HEADER_SURFACE_HPP
-
-#include <boost/smart_ptr.hpp>
-#include "texture.hpp"
-#include "math/size.hpp"
-#include "software_surface.hpp"
-
-class SurfaceImpl;
-class Rect;
-class Rectf;
-class Vector2f;
-
-class Surface
-{
-public:
-  Surface();
-  explicit Surface(boost::shared_ptr<SurfaceImpl> impl);
-  explicit Surface(const SoftwareSurface& src, const Rect& srcrect);
-  explicit Surface(const SoftwareSurface& src);
-  ~Surface();
-
-  void draw(const Vector2f& pos);
-  void draw(const Rectf& dstrect);
-  void draw(const Rectf& srcrect, const Rectf& dstrect);
-
-  int  get_width()  const;
-  int  get_height() const;
-  Size get_size() const;
-
-  void set_size(const Size& size);
-
-  operator bool() const { return impl.get(); }
-
-private:
-  boost::shared_ptr<SurfaceImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/texture.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,115 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-7*/
-
-#include <assert.h>
-#include <iostream>
-#include <stdexcept>
-#include <boost/format.hpp>
-#include <string.h>
-#include <GL/glew.h>
-#include <GL/gl.h>
-#include <GL/glu.h>
-#include "SDL.h"
-
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "framebuffer.hpp"
-#include "software_surface.hpp"
-#include "texture.hpp"
-
-class TextureImpl
-{
-public:
-  GLuint handle;
-  Size   size;
-
-  TextureImpl(const SoftwareSurface& src, const Rect& srcrect)
-    : size(srcrect.get_size())
-  {
-    glGenTextures(1, &handle);
-  
-    assert(src);
-    
-    glBindTexture(GL_TEXTURE_RECTANGLE_ARB, handle);
-    glEnable(GL_TEXTURE_RECTANGLE_ARB);
-
-    glPixelStorei(GL_UNPACK_ALIGNMENT,  1);
-    glPixelStorei(GL_UNPACK_ROW_LENGTH, src.get_width());
-
-    glTexImage2D(GL_TEXTURE_RECTANGLE_ARB, 0, GL_RGB,
-                 size.width, size.height,
-                 0, /* border */
-                 GL_RGB,
-                 GL_UNSIGNED_BYTE,
-                 src.get_data() + (src.get_pitch() * srcrect.top) + (srcrect.left*3));
-
-    assert_gl("packing image texture");
-    
-    glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
-    glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
-    glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_WRAP_S,     GL_CLAMP);
-    glTexParameteri(GL_TEXTURE_RECTANGLE_ARB, GL_TEXTURE_WRAP_T,     GL_CLAMP);
-
-    assert_gl("setting texture parameters");
-  }
-
-  ~TextureImpl()
-  {
-    glDeleteTextures(1, &handle);    
-  }
-};
-
-Texture::Texture()
-{
-}
-
-Texture::Texture(const SoftwareSurface& src, const Rect& srcrect)
-  : impl(new TextureImpl(src, srcrect))
-{
-}
-
-Texture::~Texture()
-{
-}
-
-void
-Texture::bind()
-{
-  glBindTexture(GL_TEXTURE_RECTANGLE_ARB, impl->handle);
-}
-
-int
-Texture::get_width() const
-{
-  return impl->size.width;
-}
-
-int
-Texture::get_height() const
-{
-  return impl->size.height;
-}
-
-/* EOF */

Deleted: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/texture.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,56 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_TEXTURE_HPP
-#define HEADER_TEXTURE_HPP
-
-#include <boost/shared_ptr.hpp>
-
-class Rect;
-class Size;
-class SoftwareSurface;
-class TextureImpl;
-
-class Texture
-{
-public:
-  Texture();
-  Texture(const SoftwareSurface& src, const Rect& srcrect);
-  ~Texture();
-
-  int get_width() const;
-  int get_height() const;
-  
-  void bind();
-
-  operator bool() const { return impl.get(); }
-
-private:
-  boost::shared_ptr<TextureImpl> impl;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/thread.cpp
===================================================================
--- trunk/griv/thread.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,99 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <assert.h>
-#include "thread.hpp"
-
-/*
-  SDL_mutex* mutex;
-  SDL_CreateMutex();
-  SDL_DestroyMutex(mutex);
-*/
-
-Mutex::Mutex()
-{
-  mutex = SDL_CreateMutex();
-}
-
-Mutex::~Mutex()
-{
-  SDL_DestroyMutex(mutex);
-}
-
-void
-Mutex::lock()
-{
-  SDL_LockMutex(mutex);
-}
-
-void
-Mutex::unlock()
-{
-  SDL_UnlockMutex(mutex);
-}
-
-int launch_thread(void* thread_ptr)
-{
-  Thread* thread = static_cast<Thread*>(thread_ptr);
-  return thread->run();
-}
-
-Thread::Thread()
-  : thread(0)
-{
-}
-
-Thread::~Thread()
-{
-}
-
-int
-Thread::join()
-{
-  int ret = 0;
-  SDL_WaitThread(thread, &ret);
-  return ret;
-}
-
-Uint32
-Thread::get_id()
-{
-  return SDL_GetThreadID(thread);
-}
-
-Uint32
-Thread::get_thread_id()
-{
-  return SDL_ThreadID();
-}
-
-void
-Thread::start()
-{
-  assert(thread == 0);
-  thread = SDL_CreateThread(launch_thread, this);
-}
-
-/* EOF */

Deleted: trunk/griv/thread.hpp
===================================================================
--- trunk/griv/thread.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,73 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_THREAD_HPP
-#define HEADER_THREAD_HPP
-
-#include "SDL.h"
-
-class Mutex 
-{
-private:
-  SDL_mutex* mutex;
-
-public:
-  Mutex();
-  ~Mutex();
-
-  void lock();
-  void unlock();
-
-private:
-  Mutex (const Mutex&);
-  Mutex& operator= (const Mutex&);
-};
-
-/** */
-class Thread
-{
-private:
-  SDL_Thread* thread;
-
-public:
-  Thread();
-  virtual ~Thread();
-
-  void start();
-  int  join();
-  Uint32 get_id();
-  
-  virtual int run() =0;
-
-  static Uint32 get_thread_id();
-
-private:
-  Thread (const Thread&);
-  Thread& operator= (const Thread&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/thread_message_queue.hpp
===================================================================
--- trunk/griv/thread_message_queue.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/thread_message_queue.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,99 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_THREAD_MESSAGE_QUEUE_HPP
-#define HEADER_THREAD_MESSAGE_QUEUE_HPP
-
-#include <queue>
-#include "thread.hpp"
-
-template<class C>
-class ThreadMessageQueue
-{
-private:
-  Mutex mutex;
-  std::queue<C> values;
-
-public:
-  ThreadMessageQueue()
-  {
-  }
-
-  ~ThreadMessageQueue()
-  {
-  }
-
-  void push(const C& value)
-  {
-    mutex.lock();
-    values.push(value);
-    mutex.unlock();
-  }
-
-  void pop()
-  {
-    mutex.lock();
-    values.pop();
-    mutex.unlock();
-  }
-
-  C front()
-  {
-    mutex.lock();
-    C c(values.front());
-    mutex.unlock();
-    return c;
-  }
-
-  int size()
-  {
-    mutex.lock();
-    int s = values.size();
-    mutex.unlock();
-    return s;
-  }
-
-  bool empty() 
-  {
-    mutex.lock();
-    bool e = values.empty();
-    mutex.unlock();
-    return e;
-  }
-
-  void wait()
-  {
-    // FIXME: implement me properly
-    SDL_Delay(100);
-  }
-
-private:
-  ThreadMessageQueue (const ThreadMessageQueue&);
-  ThreadMessageQueue& operator= (const ThreadMessageQueue&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/tile_database.cpp
===================================================================
--- trunk/griv/tile_database.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_database.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,101 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <sstream>
-#include "SDL.h"
-#include "tile_database.hpp"
-
-TileDatabase::TileDatabase(SQLiteConnection* db)
-  : db(db),
-    store_stmt(db),
-    get_stmt(db)
-{
-  db->exec("CREATE TABLE IF NOT EXISTS tiles ("
-           "fileid  INTEGER, " // link to to files.rowid
-           "scale   INTEGER, " // zoom level
-           "x       INTEGER, " // X position in tiles
-           "y       INTEGER, " // Y position in tiles
-           "data    BLOB     " // the image data, JPEG
-           ");");
-
-  db->exec("CREATE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
-
-  store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
-  get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
-}
-
-bool
-TileDatabase::get_tile(uint32_t fileid, int scale, int x, int y, Tile& tile)
-{
-  //SDL_Delay(100);
-
-  get_stmt.bind_int(1, fileid);
-  get_stmt.bind_int(2, scale);
-  get_stmt.bind_int(3, x);
-  get_stmt.bind_int(4, y);
-
-  SQLiteReader reader = get_stmt.execute_query();
-
-  if (reader.next())
-    {
-      tile.fileid  = reader.get_int (0);
-      tile.scale   = reader.get_int (1);
-      tile.x       = reader.get_int (2);
-      tile.y       = reader.get_int (3);
-
-      // FIXME: Do this in the JPEGDecoderThread
-      tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
-
-      return true;
-    }
-  else
-    {
-      return false;
-    }
-}
-
-void
-TileDatabase::store_tile(const Tile& tile)
-{
-  Blob blob = tile.surface.get_jpeg_data();
-
-  // FIXME: We need to update a already existing record, instead of
-  // just storing a duplicate
-  store_stmt.bind_int (1, tile.fileid);
-  store_stmt.bind_int (2, tile.scale);
-  store_stmt.bind_int (3, tile.x);
-  store_stmt.bind_int (4, tile.y);
-  store_stmt.bind_blob(5, blob);
-
-  store_stmt.execute();
-}
-
-void
-TileDatabase::check()
-{
-  
-}
-  
-/* EOF */

Deleted: trunk/griv/tile_database.hpp
===================================================================
--- trunk/griv/tile_database.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_database.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,62 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_TILE_DATABASE_HPP
-#define HEADER_TILE_DATABASE_HPP
-
-#include "sqlite.hpp"
-#include "software_surface.hpp"
-
-struct Tile
-{
-  int fileid;
-  int scale;
-  int x;
-  int y;
-  SoftwareSurface surface;
-};
-
-/** */
-class TileDatabase
-{
-private:
-  SQLiteConnection* db;
-  SQLiteStatement store_stmt;
-  SQLiteStatement get_stmt;
-
-public:
-  TileDatabase(SQLiteConnection* db);
-  
-  bool get_tile(uint32_t file_id, int scale, int x, int y, Tile& tile);
-  void store_tile(const Tile& tile);
-  void check();
-private:
-  TileDatabase (const TileDatabase&);
-  TileDatabase& operator= (const TileDatabase&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/tile_generator.cpp
===================================================================
--- trunk/griv/tile_generator.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_generator.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,86 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "tile_database.hpp"
-#include "tile_generator.hpp"
-
-TileGenerator::TileGenerator()
-{
-}
-
-TileGenerator::~TileGenerator()
-{
-}
-
-void
-TileGenerator::generate_all(int fileid, const SoftwareSurface& surface_, 
-                            const boost::function<void (Tile)>& callback)
-{
-  int scale = 0;
-
-  SoftwareSurface surface = surface_;
-
-  do
-    {
-      if (scale != 0)
-        {
-          surface = surface.scale(Size(surface.get_width()/2, 
-                                       surface.get_height()/2));
-        }
-
-      for(int y = 0; 256*y < surface.get_height(); ++y)
-        for(int x = 0; 256*x < surface.get_width(); ++x)
-          {
-            SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
-                                                               Size(256, 256)));
-
-            Tile tile;
-            tile.fileid = fileid;
-            tile.scale  = scale;
-            tile.x = x;
-            tile.y = y;
-            tile.surface = croped_surface;
-          
-            callback(tile);
-          }
-
-      scale += 1;
-
-      //std::cout << "Scale: " << scale << " - " << surface.get_size() << std::endl;
-    } while (surface.get_width() > 32 ||
-             surface.get_height() > 32);
-}
-
-void
-TileGenerator::generate_all(int fileid, const std::string& filename,
-                            const boost::function<void (Tile)>& callback)
-{
-  generate_all(fileid, SoftwareSurface::from_file(filename), callback);
-}
-
-/* EOF */

Deleted: trunk/griv/tile_generator.hpp
===================================================================
--- trunk/griv/tile_generator.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_generator.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,57 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_TILE_GENERATOR_HPP
-#define HEADER_TILE_GENERATOR_HPP
-
-#include <boost/function.hpp>
-#include <string>
-#include "software_surface.hpp"
-#include "tile_database.hpp"
-
-class TileGenerator
-{
-private:
-
-public:
-  TileGenerator();
-  ~TileGenerator();
-
-  /** Slow brute force approach to generate tiles, works with all
-      image formats */
-  void generate_all(int fileid, const SoftwareSurface& surface,
-                    const boost::function<void (Tile)>& callback);
-
-  void generate_all(int fileid, const std::string& filename,
-                    const boost::function<void (Tile)>& callback);
-
-private:
-  TileGenerator (const TileGenerator&);
-  TileGenerator& operator= (const TileGenerator&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/tile_generator_thread.cpp
===================================================================
--- trunk/griv/tile_generator_thread.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_generator_thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,97 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include <boost/bind.hpp>
-#include "tile_generator.hpp"
-#include "database_thread.hpp"
-#include "tile_generator_thread.hpp"
- 
-TileGeneratorThread* TileGeneratorThread::current_ = 0; 
-
-TileGeneratorThread::TileGeneratorThread()
-  : quit(false)
-{
-  current_ = this;
-}
-
-TileGeneratorThread::~TileGeneratorThread()
-{
-}
-
-void
-TileGeneratorThread::request_tiles(int fileid, const std::string& filename)
-{
-  TileGeneratorMessage msg;
-
-  msg.fileid   = fileid;
-  msg.filename = filename;
-
-  msg_queue.push(msg);
-}
-
-void
-TileGeneratorThread::request_tile(int fileid, const std::string& filename, int x, int y)
-{
-  // Do some magic to group tile request for the same fileid
-}
-
-void
-TileGeneratorThread::stop()
-{
-  quit = true;
-}
-
-void
-TileGeneratorThread::receive_tile(const Tile& tile)
-{
-  DatabaseThread::current()->store_tile(tile);
-}
-
-int
-TileGeneratorThread::run()
-{
-  quit = false;
-
-  TileGenerator generator;
-
-  while(!quit)
-    {
-      while(!msg_queue.empty())
-        {
-          TileGeneratorMessage msg = msg_queue.front();
-          msg_queue.pop();
-
-          std::cout << "Generating tiles for: " << msg.filename << std::endl;
-          generator.generate_all(msg.fileid, msg.filename,
-                                 boost::bind(&TileGeneratorThread::receive_tile, this, _1));
-        }
-      msg_queue.wait();
-    }
-
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/griv/tile_generator_thread.hpp
===================================================================
--- trunk/griv/tile_generator_thread.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/tile_generator_thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,70 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_TILE_GENERATOR_THREAD_HPP
-#define HEADER_TILE_GENERATOR_THREAD_HPP
-
-#include "thread.hpp"
-#include "thread_message_queue.hpp"
-
-struct TileGeneratorMessage
-{
-  int fileid;
-  std::string filename;
-};
-
-class TileGeneratorThread : public Thread
-{
-private:
-  static TileGeneratorThread* current_; 
-public:
-  static TileGeneratorThread* current() { return current_; }
-
-private:
-  bool quit;
-  ThreadMessageQueue<TileGeneratorMessage> msg_queue;
-
-protected:
-  int run();
-  
-public:
-  TileGeneratorThread();
-  ~TileGeneratorThread();
-
-  void stop();
-
-  void request_tiles(int fileid, const std::string& filename);
-  void request_tile(int fileid, const std::string& filename, int x, int y);
-
-  void receive_tile(const Tile& tile);
-  
-private:
-  TileGeneratorThread (const TileGeneratorThread&);
-  TileGeneratorThread& operator= (const TileGeneratorThread&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/url.cpp
===================================================================
--- trunk/griv/url.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/url.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,39 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "url.hpp"
-
-URL::URL(const std::string& url_)
-  : url(url_)
-{
-}
-
-std::string
-URL::get_filename() const
-{
-  return url;
-}
-
-/* EOF */

Deleted: trunk/griv/url.hpp
===================================================================
--- trunk/griv/url.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/url.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,45 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_URL_HPP
-#define HEADER_URL_HPP
-
-#include <string>
-
-/** */
-class URL
-{
-private:
-  std::string url;
-
-public:
-  URL(const std::string& url);
-
-  std::string get_filename() const;
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/viewer.cpp
===================================================================
--- trunk/griv/viewer.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/viewer.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,225 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <iostream>
-#include "math/rgb.hpp"
-#include "framebuffer.hpp"
-#include "software_surface.hpp"
-#include "math/vector2f.hpp"
-#include "math/rect.hpp"
-#include "workspace.hpp"
-#include "viewer.hpp"
-
-ViewerState::ViewerState()
-  : scale(1.0f),
-    offset(0.0f, 0.0f)
-{
-}
-
-void
-ViewerState::zoom(float factor, const Vector2i& pos)
-{
-  scale *= factor;
-
-  offset = Vector2f(pos) - ((Vector2f(pos) - offset) * factor);
-}
-
-void
-ViewerState::move(const Vector2i& pos)
-{
-  offset.x += pos.x;
-  offset.y += pos.y;
-}
-
-Vector2f
-ViewerState::screen2world(const Vector2i& pos) const
-{
-  return (Vector2f(pos) - offset) / scale;
-}
-
-Rectf
-ViewerState::screen2world(const Rect& rect) const
-{
-  return Rectf((rect.left   - offset.x) / scale,
-               (rect.top    - offset.y) / scale,
-               (rect.right  - offset.x) / scale,
-               (rect.bottom - offset.y) / scale);
-}
-
-Viewer::Viewer()
-  : quit(false),
-    force_redraw(false),
-    drag_n_drop(false),
-    zoom_button(0),
-    gamma(1.0f)
-{
-}
-
-void
-Viewer::process_event(const SDL_Event& event)
-{
-  switch(event.type)
-    {
-      case SDL_QUIT:
-        std::cout << "Viewer: SDL_QUIT received" << std::endl;
-        quit = true;
-        break;
-
-      case SDL_VIDEOEXPOSE:
-        force_redraw = true;
-        break;
-
-      case SDL_VIDEORESIZE:
-        Framebuffer::resize(event.resize.w, event.resize.h);
-        force_redraw = true;
-        break;
-
-      case SDL_KEYDOWN:
-        switch(event.key.keysym.sym)
-          {
-            case SDLK_ESCAPE:
-              quit = true;
-              break;
-
-            case SDLK_PAGEUP:
-                gamma *= 1.1f;
-                SDL_SetGamma(gamma, gamma, gamma);
-              break;
-
-            case SDLK_PAGEDOWN:
-                gamma /= 1.1f;
-                SDL_SetGamma(gamma, gamma, gamma);
-                break;
-                
-            case SDLK_END:
-                gamma = 1.0f;
-                SDL_SetGamma(gamma, gamma, gamma);
-                break;
-
-            default:
-              // ignore all other keypresses
-              break;
-          }
-        break;
-
-      case SDL_MOUSEMOTION:
-        mouse_pos = Vector2i(event.motion.x,
-                             event.motion.y);
-        
-        if (drag_n_drop)
-          {
-            state.move(Vector2i(event.motion.xrel * 4,
-                                event.motion.yrel * 4));
-          }
-        break;
-
-
-      case SDL_MOUSEBUTTONDOWN:
-      case SDL_MOUSEBUTTONUP:
-        switch(event.button.button)
-          {
-            case SDL_BUTTON_WHEELUP:
-              if (event.button.state == SDL_PRESSED)
-                {
-                  state.zoom(1.1f, mouse_pos);
-                }
-              break;
-
-            case SDL_BUTTON_WHEELDOWN:
-              if (event.button.state == SDL_PRESSED)
-                {
-                  state.zoom(1.0f/1.1f, mouse_pos);
-                }
-              break;
-                  
-            case SDL_BUTTON_LEFT:
-              if (event.button.state == SDL_PRESSED)
-                  zoom_button = 1;
-              else
-                  zoom_button = 0;
-              break;
-
-            case SDL_BUTTON_RIGHT:
-              if (event.button.state == SDL_PRESSED)
-                  zoom_button = -1;
-              else
-                  zoom_button = 0;
-              break;
-
-            case SDL_BUTTON_MIDDLE:
-              //std::cout << state.screen2world(mouse_pos) << std::endl;
-
-              drag_n_drop = event.button.state;
-              break;
-          }
-        break;
-
-      default:
-        break;
-    }
-}
-
-void
-Viewer::draw(Workspace& workspace)
-{
-  bool clip_debug = false;
-
-  glPushMatrix();
-
-  if (clip_debug)
-    {
-      glTranslatef(Framebuffer::get_width()/2, Framebuffer::get_height()/2, 0.0f);
-      glScalef(0.5f, 0.5f, 1.0f);
-      glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
-    }
-
-  glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
-  glScalef(state.get_scale(), state.get_scale(), 1.0f);
-
-  Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
-
-  if (clip_debug)
-    Framebuffer::draw_rect(cliprect, RGB(255, 0, 255));
-  
-  workspace.draw(cliprect,
-                 state.get_scale());
-
-  glPopMatrix();
-}
-
-void
-Viewer::update(float delta)
-{
-  if (zoom_button == -1)
-    {
-      state.zoom(1.0f / (1.0f + 4.0f * delta), mouse_pos);
-    }
-  else if (zoom_button == 1)
-    {
-      state.zoom(1.0f + 4.0f * delta, mouse_pos);
-    }
-}
-
-/* EOF */

Deleted: trunk/griv/viewer.hpp
===================================================================
--- trunk/griv/viewer.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/viewer.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,82 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_VIEWER_HPP
-#define HEADER_VIEWER_HPP
-
-#include "SDL.h"
-#include "surface.hpp"
-#include "math/vector2i.hpp"
-
-class Workspace;
-
-class ViewerState
-{
-private:
-  float    scale;
-  Vector2f offset;
-  
-public:
-  ViewerState();
-
-  void zoom(float factor, const Vector2i& pos);
-  void move(const Vector2i& pos);
-
-  Vector2f screen2world(const Vector2i&) const;
-  Rectf    screen2world(const Rect&) const;
-
-  Vector2f get_offset() const { return offset; }
-  float    get_scale()  const { return scale; }
-};
-
-class Viewer
-{
-private:
-  bool quit;
-  bool force_redraw;
-  bool drag_n_drop;
-  int  zoom_button;
-  float gamma;
-
-  Vector2i mouse_pos;
-
-  ViewerState state;
-
-public:
-  Viewer();
-
-  void draw(Workspace& workspace);
-  void update(float delta);
-  void process_event(const SDL_Event& event);
-  bool done() const { return quit; }
-
-private:
-  Viewer (const Viewer&);
-  Viewer& operator= (const Viewer&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/viewer_thread.cpp
===================================================================
--- trunk/griv/viewer_thread.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/viewer_thread.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,127 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <boost/bind.hpp>
-#include "file_database.hpp"
-#include "workspace.hpp"
-#include "framebuffer.hpp"
-#include "viewer.hpp"
-#include "viewer_thread.hpp"
-#include "tile_generator_thread.hpp"
-#include "database_thread.hpp"
-
-ViewerThread* ViewerThread::current_ = 0;
-
-ViewerThread::ViewerThread()
-{
-  current_ = this;
-}
-
-ViewerThread::~ViewerThread()
-{
-}
-
-void
-ViewerThread::receive_file(const FileEntry& entry)
-{
-  file_queue.push(entry);
-  //TileGeneratorThread::current()->request_tiles(entry.fileid, entry.filename);
-}
-
-void
-ViewerThread::receive_tile(const Image& image, const Tile& tile)
-{
-  TileMessage msg;
-  
-  msg.image = image;
-  msg.tile  = tile;
-
-  tile_queue.push(msg);
-}
-
-JobHandle 
-ViewerThread::request_tile(int fileid, int tilescale, int x, int y, const Image& image)
-{
-  return DatabaseThread::current()->request_tile(fileid, tilescale, x, y,
-                                                 boost::bind(&ViewerThread::receive_tile, this, image, _1));
-}
-
-int
-ViewerThread::run()
-{
-  Workspace workspace;
-
-  Framebuffer::set_video_mode(Size(800, 600));
-
-  workspace.layout(4,3);
-
-  Viewer viewer;
-
-  Uint32 ticks = SDL_GetTicks();
-  while(!viewer.done())
-    {     
-      while (!file_queue.empty())
-        {
-          const FileEntry& entry = file_queue.front();
-          workspace.add_image(entry.fileid, entry.filename, entry.size);
-          file_queue.pop();
-        }
-
-      while (!tile_queue.empty()) // FIXME: Crash happens somewhere here!
-        {
-          TileMessage msg = tile_queue.front();
-
-          msg.image.receive_tile(msg.tile.x, msg.tile.y, 
-                                 msg.tile.scale, msg.tile.surface);
-
-          tile_queue.pop();
-        }
-
-      SDL_Event event;
-      while (SDL_PollEvent(&event))
-        viewer.process_event(event);
-
-      Uint32 cticks = SDL_GetTicks();
-      float delta = (cticks - ticks) / 1000.0f;
-      ticks = cticks;
-
-      viewer.update(delta);
-
-      if (1) // if something has changed, redraw
-        {
-          Framebuffer::clear();
-          viewer.draw(workspace);
-          Framebuffer::flip();
-        }
-
-      SDL_Delay(30);
-    }
-
-  std::cout << "ViewerThread: done" << std::endl;
-
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/griv/viewer_thread.hpp
===================================================================
--- trunk/griv/viewer_thread.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/viewer_thread.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,74 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_VIEWER_THREAD_HPP
-#define HEADER_VIEWER_THREAD_HPP
-
-#include "thread.hpp"
-#include "thread_message_queue.hpp"
-
-#include "image.hpp"
-#include "job_handle.hpp"
-#include "tile_database.hpp"
-
-class FileEntry;
-class Image;
-class Tile;
-
-struct TileMessage
-{
-  Image image;
-  Tile  tile;
-};
-
-class ViewerThread
-{
-private:
-  static ViewerThread* current_;
-public:
-  static ViewerThread* current() { return current_; }
-  
-private:
-  ThreadMessageQueue<FileEntry>   file_queue;
-  ThreadMessageQueue<TileMessage> tile_queue;
-
-public:
-  ViewerThread();
-  virtual ~ViewerThread();
-
-  int run();
-
-  void receive_file(const FileEntry& entry);
-  void receive_tile(const Image& image, const Tile& tile);
-
-  JobHandle request_tile(int fileid, int tilescale, int x, int y, const Image& image);
-private:
-  ViewerThread (const ViewerThread&);
-  ViewerThread& operator= (const ViewerThread&);
-};
-
-#endif
-
-/* EOF */

Deleted: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/workspace.cpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,87 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "math.hpp"
-#include "workspace.hpp"
-
-Workspace::Workspace()
-{
-}
-
-void
-Workspace::add_image(int fileid, const std::string& filename, const Size& size)
-{
-  Image image(fileid, filename, size);
-  images.push_back(image);
-  image.set_scale(Math::min(1000.0f / size.width,
-                            1000.0f / size.height));
-  layout(4.0f, 3.0f);
-}
-
-void
-Workspace::layout(float aspect_w, float aspect_h)
-{
-  if (!images.empty())
-    {
-      //       float x_pos = 0;
-      //       for(Images::iterator i = images.begin(); i != images.end(); ++i)
-      //         {
-      //           i->set_pos(Vector2f(x_pos, 0.0f));
-      //           x_pos += i->get_width() + 128/*spacing*/;
-      //         }    
-      
-      int w = int(Math::sqrt(aspect_w * images.size() / aspect_h));
-
-      for(int i = 0; i < int(images.size()); ++i)
-        {
-          if ((i/w) % 2 == 0)
-            {
-              images[i].set_pos(Vector2f((i % w) * 1024.0f,
-                                         (i / w) * 1024.0f));
-            }
-          else
-            {
-              images[i].set_pos(Vector2f((w - (i % w)-1) * 1024.0f,
-                                         (i / w)         * 1024.0f));
-            }
-
-          images[i].set_pos(images[i].get_pos() + Vector2f((1000.0f - images[i].get_scaled_width()) / 2,
-                                                           (1000.0f - images[i].get_scaled_height()) / 2));
-        }
-    }
-}
-
-void
-Workspace::draw(const Rectf& cliprect, float scale)
-{
-  //std::cout << Math::clamp(1, static_cast<int>(1.0f / scale), 32) << " -> " << scale << std::endl;
-
-  for(Images::iterator i = images.begin(); i != images.end(); ++i)
-    {
-      i->draw(cliprect, scale);
-    }  
-}
-
-/* EOF */

Deleted: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2008-08-20 17:32:28 UTC (rev 2344)
+++ trunk/griv/workspace.hpp	2008-08-20 21:58:58 UTC (rev 2345)
@@ -1,54 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_WORKSPACE_HPP
-#define HEADER_WORKSPACE_HPP
-
-#include "image.hpp"
-
-class Rectf;
-
-class Workspace
-{
-private:
-  typedef std::vector<Image> Images;
-  Images images;
-  
-public:
-  Workspace();
-
-  void add_image(int fileid, const std::string& filename, const Size& size);
-  void draw(const Rectf& cliprect, float scale);
-
-  void layout(float aspect_w, float aspect_h);
-
-private:
-  Workspace (const Workspace&);
-  Workspace& operator= (const Workspace&);
-};
-
-#endif
-
-/* EOF */



From grumbel at mail.berlios.de  Thu Aug 21 01:00:21 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 01:00:21 +0200
Subject: [Windstille-commit] r2346 - trunk/griv/src
Message-ID: <200808202300.m7KN0KUQ004210@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 01:00:18 +0200 (Thu, 21 Aug 2008)
New Revision: 2346

Modified:
   trunk/griv/src/griv.cpp
   trunk/griv/src/griv.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/jpeg.cpp
   trunk/griv/src/jpeg.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/tile_generator.hpp
Log:
Added some code to generate quick thumbnails

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/griv.cpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -81,7 +81,7 @@
   for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i, ++num)
     {
       std::cout << *i << std::endl;
-      SoftwareSurface surface = JPEG::load(*i, 8);
+      SoftwareSurface surface = JPEG::load_from_file(*i, 8);
 
       std::ostringstream out;
       out << "/tmp/out-" << num << ".jpg";
@@ -129,7 +129,8 @@
 }
 
 void
-Griv::generate_tiles(const std::string& database, const std::vector<std::string>& filenames)
+Griv::thumbgen(const std::string& database, 
+               const std::vector<std::string>& filenames)
 {
   SQLiteConnection db(database);
 
@@ -149,6 +150,35 @@
       else
         {
           // Generate Image Tiles
+          std::cout << "Generating tiles... " << filenames[i]  << std::endl;         
+          tile_generator.generate_quick(entry,
+                                        boost::bind(&TileDatabase::store_tile, &tile_db, _1));
+        }
+    }
+}
+
+void
+Griv::generate_tiles(const std::string& database, 
+                     const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  TileGenerator tile_generator;
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      std::cout << "Getting file entry..." << std::endl;
+      if (!file_db.get_file_entry(filenames[i], &entry))
+        {
+          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          // Generate Image Tiles
           std::cout << "Generating tiles... " << filenames[i]  << std::endl;
           SoftwareSurface surface = SoftwareSurface::from_file(filenames[i]);
           
@@ -204,15 +234,17 @@
 void
 Griv::print_usage()
 {
-      std::cout << "Usage: griv view    [OPTIONS]... [FILES]...\n"
-                << "       griv prepare [OPTIONS]... [FILES]...\n"
-                << "       griv check   [OPTIONS]...\n"
-                << "       griv list    [OPTIONS]...\n"
-                << "       griv cleanup [OPTIONS]...\n"
+      std::cout << "Usage: griv view     [OPTIONS]... [FILES]...\n"
+                << "       griv prepare  [OPTIONS]... [FILES]...\n"
+                << "       griv thumbgen [OPTIONS]... [FILES]...\n"
+                << "       griv check    [OPTIONS]...\n"
+                << "       griv list     [OPTIONS]...\n"
+                << "       griv cleanup  [OPTIONS]...\n"
                 << "\n"
                 << "Commands:\n"
                 << "  view      Display the given files\n"
-                << "  prepare   Generate thumbnails for all given images, makes view command faster\n"
+                << "  prepare   Generate all thumbnail tiles for all given images, makes view command faster\n"
+                << "  thumbgen  Generate only small thumbnails for all given images\n"
                 << "  list      Lists all files in the database\n"
                 << "  check     Checks the database for consistency\n"
                 << "  cleanup   Runs garbage collection on the database\n"
@@ -308,6 +340,10 @@
         {
           generate_tiles(database, filenames);
         }
+      else if (strcmp(argv[1], "thumbgen") == 0)
+        {
+          thumbgen(database, filenames);
+        }
       else
         {
           print_usage();

Modified: trunk/griv/src/griv.hpp
===================================================================
--- trunk/griv/src/griv.hpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/griv.hpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -36,6 +36,8 @@
   void cleanup(const std::string& database);
   void check(const std::string& database);
   void list(const std::string& database);
+  void thumbgen(const std::string& database, 
+                const std::vector<std::string>& filenames);
   void generate_tiles(const std::string& database, 
                       const std::vector<std::string>& filenames);
   void view(const std::string& database, 

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/image.cpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -208,8 +208,9 @@
               goto retry;
             }
           else
-            {
+            {         
               // give up, no lower resolution found
+              // FIXME: Draw placeholder instead
             }
         }
     }

Modified: trunk/griv/src/jpeg.cpp
===================================================================
--- trunk/griv/src/jpeg.cpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/jpeg.cpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -73,7 +73,7 @@
 }
 
 SoftwareSurface
-JPEG::load(const std::string& filename, int scale)
+JPEG::load_from_file(const std::string& filename, int scale)
 {
   //std::cout << "-- JPEG::load(" << filename << ")" << std::endl;
 
@@ -110,20 +110,20 @@
 
   jpeg_start_decompress(&cinfo);
 
-  SoftwareSurface surface(Size(cinfo.image_width  / scale, 
-                               cinfo.image_height / scale));
+  SoftwareSurface surface(Size(cinfo.output_width,
+                               cinfo.output_height));
   
   if (cinfo.output_components == 3)
     { // RGB Image
-      JSAMPLE* scanlines[cinfo.image_height];
+      JSAMPLE* scanlines[cinfo.output_height];
 
-      for(JDIMENSION y = 0; y < cinfo.image_height; ++y)
+      for(JDIMENSION y = 0; y < cinfo.output_height; ++y)
         scanlines[y] = surface.get_row_data(y);
 
       while (cinfo.output_scanline < cinfo.output_height) 
         {
           jpeg_read_scanlines(&cinfo, &scanlines[cinfo.output_scanline], 
-                              cinfo.image_height - cinfo.output_scanline);
+                              cinfo.output_height - cinfo.output_scanline);
         }
     }
   else if (cinfo.output_components == 1)
@@ -147,7 +147,7 @@
 }
 
 SoftwareSurface
-JPEG::load(uint8_t* mem, int len)
+JPEG::load_from_mem(uint8_t* mem, int len)
 {
   //std::cout << "JPEG::load(" << static_cast<void*>(mem) << ", " << len << ")" << std::endl;
   

Modified: trunk/griv/src/jpeg.hpp
===================================================================
--- trunk/griv/src/jpeg.hpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/jpeg.hpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -37,8 +37,8 @@
 public:
   static void get_size(const std::string& filename, Size& size);
 
-  static SoftwareSurface load(const std::string& filename, int scale = 1);
-  static SoftwareSurface load(uint8_t* mem, int len);
+  static SoftwareSurface load_from_file(const std::string& filename, int scale = 1);
+  static SoftwareSurface load_from_mem(uint8_t* mem, int len);
 
   static void save(const SoftwareSurface& surface, int quality, const std::string& filename);
   static Blob save(const SoftwareSurface& surface, int quality);

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/software_surface.cpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -92,6 +92,12 @@
 }
 
 SoftwareSurface
+SoftwareSurface::halve() const
+{
+  return scale(Size(get_width()/2, get_height()/2));
+}
+
+SoftwareSurface
 SoftwareSurface::scale(const Size& size) const
 {
   SoftwareSurface surface(size);
@@ -173,13 +179,13 @@
 SoftwareSurface
 SoftwareSurface::from_file(const std::string& filename)
 {
-  return JPEG::load(filename);
+  return JPEG::load_from_file(filename);
 }
 
 SoftwareSurface
 SoftwareSurface::from_data(const Blob& blob)
 {
-  return JPEG::load(blob.get_data(), blob.size());
+  return JPEG::load_from_mem(blob.get_data(), blob.size());
 }
 
 uint8_t*

Modified: trunk/griv/src/software_surface.hpp
===================================================================
--- trunk/griv/src/software_surface.hpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/software_surface.hpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -47,6 +47,7 @@
   int get_height() const;
   int get_pitch()  const;
 
+  SoftwareSurface halve() const;
   SoftwareSurface scale(const Size& size) const;
   SoftwareSurface crop(const Rect& rect) const;
 

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/tile_generator.cpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -26,6 +26,8 @@
 #include <iostream>
 #include "math/size.hpp"
 #include "math/rect.hpp"
+#include "jpeg.hpp"
+#include "file_database.hpp"
 #include "tile_database.hpp"
 #include "tile_generator.hpp"
 
@@ -82,5 +84,58 @@
 {
   generate_all(fileid, SoftwareSurface::from_file(filename), callback);
 }
+
+void
+TileGenerator::generate_quick(const FileEntry& entry,
+                              const boost::function<void (Tile)>& callback)
+{
+  // Find scale at which the image fits on one tile
+  int width  = entry.size.width;
+  int height = entry.size.height;
+  int scale  = 0;
+  while (width  / Math::pow2(scale) > 256 || 
+         height / Math::pow2(scale) > 256)
+    scale += 1;
+
+  //std::cout << "Loading with scale: 2^" << scale << " = " << Math::pow2(scale) << " " << entry.size << std::endl;
+
+  // Load the largest scale at which the image fits on a single tile 
+  SoftwareSurface surface = JPEG::load_from_file(entry.filename, Math::pow2(scale));
+
+  // The result of JPEG::load_from_file might be larger then the requested size, so scale it down
+  // FIXME: We should not throw this data away, now that we already have loaded it! Instead we should crop it
+  if (surface.get_width()  > 256 ||
+      surface.get_height() > 256)
+    {
+      surface = surface.scale(Size(width  / Math::pow2(scale),
+                                   height / Math::pow2(scale)));
+    }
+
+  //std::cout << " => " << surface.get_size() << std::endl;
+
+  while (true)
+    {
+      //std::cout << scale << " size: " << surface.get_size() << std::endl;
+
+      Tile tile;
+      tile.fileid  = entry.fileid;
+      tile.scale   = scale;
+      tile.x       = 0;
+      tile.y       = 0;
+      tile.surface = surface;
+          
+      callback(tile);
+
+      // FIXME: Might barf if width/height get == 0
+      if (surface.get_width()  < 32 &&
+          surface.get_height() < 32)
+        {
+          break;
+        }
+
+      surface = surface.halve();
+      scale += 1;
+    }
+}
 
 /* EOF */

Modified: trunk/griv/src/tile_generator.hpp
===================================================================
--- trunk/griv/src/tile_generator.hpp	2008-08-20 21:58:58 UTC (rev 2345)
+++ trunk/griv/src/tile_generator.hpp	2008-08-20 23:00:18 UTC (rev 2346)
@@ -31,6 +31,8 @@
 #include "software_surface.hpp"
 #include "tile_database.hpp"
 
+class FileEntry;
+
 class TileGenerator
 {
 private:
@@ -47,6 +49,9 @@
   void generate_all(int fileid, const std::string& filename,
                     const boost::function<void (Tile)>& callback);
 
+  void generate_quick(const FileEntry& entry,
+                      const boost::function<void (Tile)>& callback);
+
 private:
   TileGenerator (const TileGenerator&);
   TileGenerator& operator= (const TileGenerator&);



From grumbel at mail.berlios.de  Thu Aug 21 19:00:27 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 19:00:27 +0200
Subject: [Windstille-commit] r2347 - in trunk/griv: . src
Message-ID: <200808211700.m7LH0RTC013169@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 19:00:20 +0200 (Thu, 21 Aug 2008)
New Revision: 2347

Modified:
   trunk/griv/README
   trunk/griv/TODO
   trunk/griv/src/file_database.cpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/griv.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/jpeg.cpp
   trunk/griv/src/jpeg.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/surface.cpp
   trunk/griv/src/surface.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Stuff

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/README	2008-08-21 17:00:20 UTC (rev 2347)
@@ -2,13 +2,18 @@
 =======================================
 
 griv is a image viewer that allows you to directly zoom into large
-collection of thumbnails down to the images original size. Its goal is
-to allow its viewer to view 100'000 images at once, fluently without
-any noticable load times. griv requires a tile cache to make this
-work, which require around 1.5x times as much diskspace as the original
-image data. 
+collection of tens of thousand of images from tiny thumbnails down to
+the images original size fluently with little or no noticable
+loadtimes. It accomplishes this by keeping a tile cache which stores
+not only thumbnails for one size, but thumbnails of many different
+sizes. This thumbnail cache requires at maximum 1.5x times as much
+storage as the images themselves.
 
+griv can also be used to view gigapixel sized images, it however
+currently requires the tiles for that to be generated previously,
+which can take quite a bit of time and memory.
 
+
 Required Libraries:
 ===================
 
@@ -28,10 +33,11 @@
 Bugs:
 =====
 
-When zooming into an images one will see noticable seams at the areas
-where the tiles meet. A possible fix for this would be to add a 1px
-width border to the tiles, but that would slow down the tile
-generation process from JPEG data, so it might never get implemented.
+When zooming into an images beyond its original size one will see
+noticable seams at the areas where the tiles meet. A possible fix for
+this would be to add a 1px width border to the tiles, but that would
+slow down the tile generation process from JPEG data, so it might
+never get implemented.
 
 
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/TODO	2008-08-21 17:00:20 UTC (rev 2347)
@@ -1,21 +1,24 @@
 [[ Griv ToDo ]]
 
+* add 8x8 JPEG is larger then RAW, else JPEG always wins
+
+1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
+~100MB for fullscreen 16x16 Thumbs
+~32 textures for 129600 thumbs
+
+16x16 -> 1KB
+1000 thumbnails -> 1MB
+10'000 thumbnails -> 10MB
+100'000 thumbnails -> 100MB (graphic card gets full) -> Solution: smaller thumbnails, also unload from GFX card, but keep software backstore
+
+* need to properly check for collisions in the database
 * implement fast crop
 * implement linear blending scale
-* move recursive directory code over
 * move image sorting code on workspace over
 * request lower res tiles, before requesting highres tiles
 * move JPEG decoding in a seperate thread so that the database thread can run free with database stuff 
 * jpegtran *can't* do crop of large scale JPEGs in small amount of
   space, so cropping with libjpeg likely won't work
-
-JPEG Functions:
-===============
-
-* get_size(JpegImage) -> (w, h)
-* crop(JpegImage)  -> JpegImage -> Blob
-* Filename -> JpegImage
-
 
 * multi-threading in the tile generator for multicore
 * faster image handling, FreeImage is not good enough
@@ -31,16 +34,4 @@
 * File stuff should really be seperate from Tile getting -> Seperate worker thread?
 * need to display the thread status graphically somehow
 
-Image Library Requirements:
-===========================
-
-* fast JPEG thumbnailing would be a plus (FreeImage, EPEG -> See jpeglib tools, transup.c)
-
-* fast width/height reading from file header (libjpeg, libpng)
-
-* support for PNG, JPEG, XCF, etc.
-
-* generation of subregion images without a copy
-
-
 # EOF #

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/file_database.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -121,11 +121,15 @@
       
       entry->size = Size(-1, -1);
       
-      JPEG::get_size(entry->filename, entry->size);
-
-      store_file_entry(*entry);
-      
-      return true;
+      if (JPEG::get_size(entry->filename, entry->size))
+        {
+          store_file_entry(*entry);
+          return true;
+        }
+      else
+        {
+          return false;
+        }
     }
 }
 

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/griv.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -129,6 +129,27 @@
 }
 
 void
+Griv::filegen(const std::string& database, 
+              const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db(database);
+  FileDatabase file_db(&db);  
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      if (!file_db.get_file_entry(filenames[i], &entry))
+        {
+          std::cout << "Couldn't get entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          std::cout << "Got: " << entry.filename << " " << entry.size << std::endl;
+        }
+    }
+}
+
+void
 Griv::thumbgen(const std::string& database, 
                const std::vector<std::string>& filenames)
 {
@@ -142,7 +163,6 @@
   for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
     {
       FileEntry entry;
-      std::cout << "Getting file entry..." << std::endl;
       if (!file_db.get_file_entry(filenames[i], &entry))
         {
           std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
@@ -150,7 +170,7 @@
       else
         {
           // Generate Image Tiles
-          std::cout << "Generating tiles... " << filenames[i]  << std::endl;         
+          std::cout << "Generating tiles for " << filenames[i]  << std::endl;         
           tile_generator.generate_quick(entry,
                                         boost::bind(&TileDatabase::store_tile, &tile_db, _1));
         }
@@ -237,6 +257,7 @@
       std::cout << "Usage: griv view     [OPTIONS]... [FILES]...\n"
                 << "       griv prepare  [OPTIONS]... [FILES]...\n"
                 << "       griv thumbgen [OPTIONS]... [FILES]...\n"
+                << "       griv filegen  [OPTIONS]... [FILES]...\n"
                 << "       griv check    [OPTIONS]...\n"
                 << "       griv list     [OPTIONS]...\n"
                 << "       griv cleanup  [OPTIONS]...\n"
@@ -245,6 +266,7 @@
                 << "  view      Display the given files\n"
                 << "  prepare   Generate all thumbnail tiles for all given images, makes view command faster\n"
                 << "  thumbgen  Generate only small thumbnails for all given images\n"
+                << "  filegen   Generate only small the file entries in the database\n"
                 << "  list      Lists all files in the database\n"
                 << "  check     Checks the database for consistency\n"
                 << "  cleanup   Runs garbage collection on the database\n"
@@ -344,6 +366,10 @@
         {
           thumbgen(database, filenames);
         }
+      else if (strcmp(argv[1], "filegen") == 0)
+        {
+          filegen(database, filenames);
+        }
       else
         {
           print_usage();

Modified: trunk/griv/src/griv.hpp
===================================================================
--- trunk/griv/src/griv.hpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/griv.hpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -38,6 +38,8 @@
   void list(const std::string& database);
   void thumbgen(const std::string& database, 
                 const std::vector<std::string>& filenames);
+  void filegen(const std::string& database, 
+                const std::vector<std::string>& filenames);
   void generate_tiles(const std::string& database, 
                       const std::vector<std::string>& filenames);
   void view(const std::string& database, 

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/image.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -166,7 +166,8 @@
 }
 
 void
-Image::draw_tile(int x, int y, int tiledb_scale, const Vector2f& pos, float scale)
+Image::draw_tile(int x, int y, int tiledb_scale, 
+                 const Vector2f& pos, float scale)
 {
   Surface surface = get_tile(x, y, tiledb_scale);
   if (surface)
@@ -210,7 +211,12 @@
           else
             {         
               // give up, no lower resolution found
-              // FIXME: Draw placeholder instead
+
+              Size s(Math::min(256, (impl->size.width  / Math::pow2(tiledb_scale)) - 256 * x),
+                     Math::min(256, (impl->size.height / Math::pow2(tiledb_scale)) - 256 * y));
+
+              Framebuffer::fill_rect(Rectf(pos, s*scale),
+                                     RGB(255, 0, 255));
             }
         }
     }

Modified: trunk/griv/src/jpeg.cpp
===================================================================
--- trunk/griv/src/jpeg.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/jpeg.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -42,39 +42,53 @@
   longjmp(setjmp_buffer, 1);
 }
 
-void
+bool
 JPEG::get_size(const std::string& filename, Size& size)
 {
   FILE* in = fopen(filename.c_str(), "rb");
   if (!in)
-    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
+    {
+      // throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
+      return false;
+    }
+  else
+    {
+      struct jpeg_decompress_struct  cinfo;
+      struct jpeg_error_mgr jerr;
 
-  struct jpeg_decompress_struct  cinfo;
-  struct jpeg_error_mgr jerr;
+      cinfo.err = jpeg_std_error(&jerr);
+      cinfo.err->error_exit = &fatal_error_handler;
+      jpeg_create_decompress(&cinfo);
+      jpeg_stdio_src(&cinfo, in);
 
-  cinfo.err = jpeg_std_error(&jerr);
-  cinfo.err->error_exit = &fatal_error_handler;
-  jpeg_create_decompress(&cinfo);
-  jpeg_stdio_src(&cinfo, in);
+      if (setjmp(setjmp_buffer))
+        {
+          return false;
+        }
+      else
+        {
+          jpeg_read_header(&cinfo, FALSE);
 
-  if (setjmp(setjmp_buffer))
-    {
-      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't open " + filename);
-    }
+          size.width  = cinfo.image_width;
+          size.height = cinfo.image_height;
 
-  jpeg_read_header(&cinfo, FALSE);
+          jpeg_destroy_decompress(&cinfo);
 
-  size.width  = cinfo.image_width;
-  size.height = cinfo.image_height;
+          fclose(in);
 
-  jpeg_destroy_decompress(&cinfo);
-
-  fclose(in);
+          return true;
+        }
+    }
 }
 
 SoftwareSurface
 JPEG::load_from_file(const std::string& filename, int scale)
 {
+  assert(scale == 1 ||
+         scale == 2 ||
+         scale == 4 ||
+         scale == 8);
+
   //std::cout << "-- JPEG::load(" << filename << ")" << std::endl;
 
   FILE* in = fopen(filename.c_str(), "rb");
@@ -396,5 +410,5 @@
 }
 #endif
 
-
+  
 /* EOF */

Modified: trunk/griv/src/jpeg.hpp
===================================================================
--- trunk/griv/src/jpeg.hpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/jpeg.hpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -35,9 +35,20 @@
 
 
 public:
-  static void get_size(const std::string& filename, Size& size);
+  static bool get_size(const std::string& filename, Size& size);
 
+  /** Load a SoftwareSurface from a JPEG file
+      
+      @param filename   Filename of the file to load
+      @param scale      Scale the image by 1/scale (only 1,2,4,8 allowed)
+   */
   static SoftwareSurface load_from_file(const std::string& filename, int scale = 1);
+
+  /** Load a JPEG from memory 
+      
+      @param mem   Address of the JPEG data
+      @param len   Length of the JPEG data
+   */
   static SoftwareSurface load_from_mem(uint8_t* mem, int len);
 
   static void save(const SoftwareSurface& surface, int quality, const std::string& filename);

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/software_surface.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -120,6 +120,9 @@
 SoftwareSurface
 SoftwareSurface::crop(const Rect& rect_in) const
 {
+  // FIXME: We could do a crop without copying contain, simply
+  // reference the old SoftwareSurfaceImpl and have a different pitch
+  // and pixel offset
   assert(rect_in.is_normal());
  
   // Clip the rectangle to the image

Modified: trunk/griv/src/surface.cpp
===================================================================
--- trunk/griv/src/surface.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/surface.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -188,12 +188,5 @@
   else
     return Size();
 }
-
-void
-Surface::set_size(const Size& size)
-{
-  if (impl.get())
-    impl->size = size;
-}
 
 /* EOF */

Modified: trunk/griv/src/surface.hpp
===================================================================
--- trunk/griv/src/surface.hpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/surface.hpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -53,8 +53,6 @@
   int  get_height() const;
   Size get_size() const;
 
-  void set_size(const Size& size);
-
   operator bool() const { return impl.get(); }
 
 private:

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/tile_generator.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -99,11 +99,15 @@
 
   //std::cout << "Loading with scale: 2^" << scale << " = " << Math::pow2(scale) << " " << entry.size << std::endl;
 
+  int jpeg_scale = Math::min(8, Math::pow2(scale));
+
   // Load the largest scale at which the image fits on a single tile 
-  SoftwareSurface surface = JPEG::load_from_file(entry.filename, Math::pow2(scale));
+  SoftwareSurface surface = JPEG::load_from_file(entry.filename, jpeg_scale);
 
   // The result of JPEG::load_from_file might be larger then the requested size, so scale it down
-  // FIXME: We should not throw this data away, now that we already have loaded it! Instead we should crop it
+  // FIXME: We should not throw this data away, now that we already
+  // have loaded it! Instead we should crop it and place it in the
+  // tile cache
   if (surface.get_width()  > 256 ||
       surface.get_height() > 256)
     {

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/viewer.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -78,7 +78,7 @@
 }
 
 void
-Viewer::process_event(const SDL_Event& event)
+Viewer::process_event(Workspace& workspace, const SDL_Event& event)
 {
   switch(event.type)
     {
@@ -113,13 +113,11 @@
                 SDL_SetGamma(gamma, gamma, gamma);
                 break;
                 
-            case SDLK_END:
-                gamma = 1.0f;
-                SDL_SetGamma(gamma, gamma, gamma);
-                break;
+            case SDLK_1:
+              workspace.layout(4, 3);
+              break;
 
             default:
-              // ignore all other keypresses
               break;
           }
         break;
@@ -167,7 +165,7 @@
               else
                   zoom_button = 0;
               break;
-
+  
             case SDL_BUTTON_MIDDLE:
               //std::cout << state.screen2world(mouse_pos) << std::endl;
 

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/viewer.hpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -69,7 +69,7 @@
 
   void draw(Workspace& workspace);
   void update(float delta);
-  void process_event(const SDL_Event& event);
+  void process_event(Workspace& workspace, const SDL_Event& event);
   bool done() const { return quit; }
 
 private:

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -101,7 +101,9 @@
 
       SDL_Event event;
       while (SDL_PollEvent(&event))
-        viewer.process_event(event);
+        {
+          viewer.process_event(workspace, event);
+        }
 
       Uint32 cticks = SDL_GetTicks();
       float delta = (cticks - ticks) / 1000.0f;

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/workspace.cpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -28,6 +28,7 @@
 
 Workspace::Workspace()
 {
+  next_pos = Vector2i(0, 0);
 }
 
 void
@@ -37,7 +38,12 @@
   images.push_back(image);
   image.set_scale(Math::min(1000.0f / size.width,
                             1000.0f / size.height));
-  layout(4.0f, 3.0f);
+
+  image.set_pos(next_pos * 1024.0f);
+                   
+  next_pos.x += 1;
+
+  //layout(4.0f, 3.0f);
 }
 
 void

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-20 23:00:18 UTC (rev 2346)
+++ trunk/griv/src/workspace.hpp	2008-08-21 17:00:20 UTC (rev 2347)
@@ -35,6 +35,7 @@
 private:
   typedef std::vector<Image> Images;
   Images images;
+  Vector2i next_pos;
   
 public:
   Workspace();



From grumbel at mail.berlios.de  Thu Aug 21 22:30:52 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 22:30:52 +0200
Subject: [Windstille-commit] r2348 - trunk/griv/src
Message-ID: <200808212030.m7LKUqwJ019921@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 22:30:51 +0200 (Thu, 21 Aug 2008)
New Revision: 2348

Added:
   trunk/griv/src/file_entry.cpp
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/tile_entry.hpp
Modified:
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_database.hpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/tile_generator.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
Log:
Moved FileEntry and TileEntry to their own files

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/database_thread.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -60,11 +60,11 @@
   int tilescale;
   int x;
   int y;
-  boost::function<void (Tile)> callback;
+  boost::function<void (TileEntry)> callback;
 
   TileDatabaseMessage(const JobHandle& job_handle,
                       int fileid, int tilescale, int x, int y,
-                      const boost::function<void (Tile)>& callback)
+                      const boost::function<void (TileEntry)>& callback)
     : DatabaseMessage(DATABASE_TILE_MESSAGE),
       job_handle(job_handle),
       fileid(fileid),
@@ -104,9 +104,9 @@
 class StoreTileDatabaseMessage : public DatabaseMessage
 {
 public:
-  Tile tile;
+  TileEntry tile;
 
-  StoreTileDatabaseMessage(const Tile& tile)
+  StoreTileDatabaseMessage(const TileEntry& tile)
     : DatabaseMessage(DATABASE_STORE_TILE_MESSAGE),
       tile(tile)
   {}
@@ -127,7 +127,7 @@
 }
 
 JobHandle
-DatabaseThread::request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback)
+DatabaseThread::request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (TileEntry)>& callback)
 {
   JobHandle job_handle;
   queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, x, y, callback));
@@ -147,7 +147,7 @@
 }
 
 void
-DatabaseThread::store_tile(const Tile& tile)
+DatabaseThread::store_tile(const TileEntry& tile)
 {
   queue.push(new StoreTileDatabaseMessage(tile));
 }
@@ -231,7 +231,7 @@
 
                   if (!tile_msg->job_handle.is_aborted())
                     {
-                      Tile tile;
+                      TileEntry tile;
                       if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->x, tile_msg->y, tile))
                         {
                           tile_msg->callback(tile);
@@ -249,7 +249,9 @@
 
                           tile_msg->job_handle.finish();
                           // Need to send loading command back
-                          //TileGeneratorThread::request_tile(fileid, x, y, tilescale);
+                          //TileGeneratorThread::request_tile(tile_msg->fileid, tile_msg->x, tile_msg->y, tile_msg->tilescale, 
+                          //                                  tile_msg->job_handle, 
+                          //                                  tile_msg->callback);
                         }
                     }
                 }

Modified: trunk/griv/src/database_thread.hpp
===================================================================
--- trunk/griv/src/database_thread.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/database_thread.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -29,8 +29,8 @@
 #include <boost/function.hpp>
 #include <string>
 #include "thread_message_queue.hpp"
-#include "file_database.hpp"
-#include "tile_database.hpp"
+#include "file_entry.hpp"
+#include "tile_entry.hpp"
 #include "job_handle.hpp"
 #include "thread.hpp"
 
@@ -59,11 +59,11 @@
   
   void stop();
   
-  JobHandle request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (Tile)>& callback);
+  JobHandle request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (TileEntry)>& callback);
   void request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
   void request_all_files(const boost::function<void (FileEntry)>& callback);
 
-  void store_tile(const Tile& tile);
+  void store_tile(const TileEntry& tile);
 
 private:
   DatabaseThread (const DatabaseThread&);

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/file_database.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -31,13 +31,9 @@
 #include "jpeg.hpp"
 #include "filesystem.hpp"
 #include "software_surface.hpp"
+#include "file_entry.hpp"
 #include "file_database.hpp"
 
-std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
-{
-  return os << "filename: " << entry.filename << " size: "<< entry.size;
-}
-
 FileDatabase::FileDatabase(SQLiteConnection* db)
   : db(db),
     store_stmt(db),

Modified: trunk/griv/src/file_database.hpp
===================================================================
--- trunk/griv/src/file_database.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/file_database.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -33,17 +33,7 @@
 #include "sqlite.hpp"
 #include "math/size.hpp"
 
-struct FileEntry 
-{
-  int         fileid;
-  std::string filename; // 
-  std::string md5;      //
-  int         filesize; //
-  uint32_t    mtime;    // mtime of the file
-  Size        size;
-};
-
-std::ostream& operator<<(std::ostream& os, const FileEntry& entry);
+class FileEntry;
 
 /** The FileDatabase keeps a record of all files that have been
     view. It keeps information on the last modification time and

Added: trunk/griv/src/file_entry.cpp
===================================================================
--- trunk/griv/src/file_entry.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/file_entry.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -0,0 +1,34 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "file_entry.hpp"
+
+std::ostream& operator<<(std::ostream& os, const FileEntry& entry)
+{
+  return os << "filename: " << entry.filename << " size: "<< entry.size;
+}
+
+/* EOF */


Property changes on: trunk/griv/src/file_entry.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/file_entry.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -0,0 +1,48 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FILE_ENTRY_HPP
+#define HEADER_FILE_ENTRY_HPP
+
+#include <stdint.h>
+#include <string>
+#include "math/size.hpp"
+
+class FileEntry 
+{
+public:
+  int         fileid;
+  std::string filename; // 
+  std::string md5;      //
+  int         filesize; //
+  uint32_t    mtime;    // mtime of the file
+  Size        size;
+};
+
+std::ostream& operator<<(std::ostream& os, const FileEntry& entry);
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/src/file_entry.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/griv.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -169,10 +169,16 @@
         }
       else
         {
+          // FIXME: Insert some checks if the tile already exist
+
           // Generate Image Tiles
-          std::cout << "Generating tiles for " << filenames[i]  << std::endl;         
-          tile_generator.generate_quick(entry,
-                                        boost::bind(&TileDatabase::store_tile, &tile_db, _1));
+          std::cout << "Generating tiles for " << filenames[i]  << std::endl;
+          try {
+            tile_generator.generate_quick(entry,
+                                          boost::bind(&TileDatabase::store_tile, &tile_db, _1));
+          } catch(std::exception& err) {
+            std::cout << err.what() << std::endl;
+          }
         }
     }
 }

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_database.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -25,12 +25,14 @@
 
 #include <sstream>
 #include "SDL.h"
+#include "tile_entry.hpp"
 #include "tile_database.hpp"
 
 TileDatabase::TileDatabase(SQLiteConnection* db)
   : db(db),
     store_stmt(db),
-    get_stmt(db)
+    get_stmt(db),
+    has_stmt(db)
 {
   db->exec("CREATE TABLE IF NOT EXISTS tiles ("
            "fileid  INTEGER, " // link to to files.rowid
@@ -42,13 +44,36 @@
 
   db->exec("CREATE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
 
+  // FIXME: This is brute force and doesn't handle collisions
   store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
+
   get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
+  has_stmt.prepare("SELECT (rowid) FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
 }
 
 bool
-TileDatabase::get_tile(uint32_t fileid, int scale, int x, int y, Tile& tile)
+TileDatabase::has_tile(uint32_t fileid, Vector2i& pos, int scale)
 {
+  has_stmt.bind_int(1, fileid);
+  has_stmt.bind_int(2, scale);
+  has_stmt.bind_int(3, pos.x);
+  has_stmt.bind_int(4, pos.y);
+
+  SQLiteReader reader = has_stmt.execute_query();
+
+  if (reader.next())
+    {
+      return true;
+    }  
+  else
+    {
+      return false;
+    }
+}
+
+bool
+TileDatabase::get_tile(uint32_t fileid, int scale, int x, int y, TileEntry& tile)
+{
   //SDL_Delay(100);
 
   get_stmt.bind_int(1, fileid);
@@ -72,12 +97,14 @@
     }
   else
     {
+      // Tile missing
+
       return false;
     }
 }
 
 void
-TileDatabase::store_tile(const Tile& tile)
+TileDatabase::store_tile(const TileEntry& tile)
 {
   Blob blob = tile.surface.get_jpeg_data();
 

Modified: trunk/griv/src/tile_database.hpp
===================================================================
--- trunk/griv/src/tile_database.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_database.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -27,30 +27,25 @@
 #define HEADER_TILE_DATABASE_HPP
 
 #include "sqlite.hpp"
+#include "math/vector2i.hpp"
 #include "software_surface.hpp"
 
-struct Tile
-{
-  int fileid;
-  int scale;
-  int x;
-  int y;
-  SoftwareSurface surface;
-};
-
-/** */
+class TileEntry;
+
 class TileDatabase
 {
 private:
   SQLiteConnection* db;
   SQLiteStatement store_stmt;
   SQLiteStatement get_stmt;
+  SQLiteStatement has_stmt;
 
 public:
   TileDatabase(SQLiteConnection* db);
   
-  bool get_tile(uint32_t file_id, int scale, int x, int y, Tile& tile);
-  void store_tile(const Tile& tile);
+  bool has_tile(uint32_t file_id, Vector2i& pos, int scale);
+  bool get_tile(uint32_t file_id, int scale, int x, int y, TileEntry& tile);
+  void store_tile(const TileEntry& tile);
   void check();
 private:
   TileDatabase (const TileDatabase&);

Added: trunk/griv/src/tile_entry.hpp
===================================================================
--- trunk/griv/src/tile_entry.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_entry.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -0,0 +1,46 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TILE_ENTRY_HPP
+#define HEADER_TILE_ENTRY_HPP
+
+#include "math/vector2i.hpp"
+#include "software_surface.hpp"
+
+class TileEntry
+{
+public:
+  int fileid;
+  int scale;
+  int x, y;
+  SoftwareSurface surface;
+
+  TileEntry()
+  {}
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/src/tile_entry.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_generator.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -27,8 +27,8 @@
 #include "math/size.hpp"
 #include "math/rect.hpp"
 #include "jpeg.hpp"
-#include "file_database.hpp"
-#include "tile_database.hpp"
+#include "file_entry.hpp"
+#include "tile_entry.hpp"
 #include "tile_generator.hpp"
 
 TileGenerator::TileGenerator()
@@ -41,7 +41,7 @@
 
 void
 TileGenerator::generate_all(int fileid, const SoftwareSurface& surface_, 
-                            const boost::function<void (Tile)>& callback)
+                            const boost::function<void (TileEntry)>& callback)
 {
   int scale = 0;
 
@@ -61,7 +61,7 @@
             SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
                                                                Size(256, 256)));
 
-            Tile tile;
+            TileEntry tile;
             tile.fileid = fileid;
             tile.scale  = scale;
             tile.x = x;
@@ -80,14 +80,14 @@
 
 void
 TileGenerator::generate_all(int fileid, const std::string& filename,
-                            const boost::function<void (Tile)>& callback)
+                            const boost::function<void (TileEntry)>& callback)
 {
   generate_all(fileid, SoftwareSurface::from_file(filename), callback);
 }
 
 void
 TileGenerator::generate_quick(const FileEntry& entry,
-                              const boost::function<void (Tile)>& callback)
+                              const boost::function<void (TileEntry)>& callback)
 {
   // Find scale at which the image fits on one tile
   int width  = entry.size.width;
@@ -121,7 +121,7 @@
     {
       //std::cout << scale << " size: " << surface.get_size() << std::endl;
 
-      Tile tile;
+      TileEntry tile;
       tile.fileid  = entry.fileid;
       tile.scale   = scale;
       tile.x       = 0;

Modified: trunk/griv/src/tile_generator.hpp
===================================================================
--- trunk/griv/src/tile_generator.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_generator.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -44,13 +44,13 @@
   /** Slow brute force approach to generate tiles, works with all
       image formats */
   void generate_all(int fileid, const SoftwareSurface& surface,
-                    const boost::function<void (Tile)>& callback);
+                    const boost::function<void (TileEntry)>& callback);
 
   void generate_all(int fileid, const std::string& filename,
-                    const boost::function<void (Tile)>& callback);
+                    const boost::function<void (TileEntry)>& callback);
 
   void generate_quick(const FileEntry& entry,
-                      const boost::function<void (Tile)>& callback);
+                      const boost::function<void (TileEntry)>& callback);
 
 private:
   TileGenerator (const TileGenerator&);

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -53,7 +53,7 @@
 }
 
 void
-TileGeneratorThread::request_tile(int fileid, const std::string& filename, int x, int y, int scale)
+TileGeneratorThread::request_tile(int fileid, const std::string& filename, const Vector2i& pos, int scale)
 {
   // Do some magic to group tile request for the same fileid
 }
@@ -65,7 +65,7 @@
 }
 
 void
-TileGeneratorThread::receive_tile(const Tile& tile)
+TileGeneratorThread::receive_tile(const TileEntry& tile)
 {
   DatabaseThread::current()->store_tile(tile);
 }

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -56,9 +56,9 @@
   void stop();
 
   void request_tiles(int fileid, const std::string& filename);
-  void request_tile (int fileid, const std::string& filename, int x, int y, int scale);
+  void request_tile (int fileid, const std::string& filename, const Vector2i& pos, int scale);
 
-  void receive_tile(const Tile& tile);
+  void receive_tile(const TileEntry& tile);
   
 private:
   TileGeneratorThread (const TileGeneratorThread&);

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -51,7 +51,7 @@
 }
 
 void
-ViewerThread::receive_tile(const Image& image, const Tile& tile)
+ViewerThread::receive_tile(const Image& image, const TileEntry& tile)
 {
   TileMessage msg;
   

Modified: trunk/griv/src/viewer_thread.hpp
===================================================================
--- trunk/griv/src/viewer_thread.hpp	2008-08-21 17:00:20 UTC (rev 2347)
+++ trunk/griv/src/viewer_thread.hpp	2008-08-21 20:30:51 UTC (rev 2348)
@@ -31,16 +31,16 @@
 
 #include "image.hpp"
 #include "job_handle.hpp"
-#include "tile_database.hpp"
+#include "tile_entry.hpp"
 
 class FileEntry;
 class Image;
-class Tile;
+class TileEntry;
 
 struct TileMessage
 {
-  Image image;
-  Tile  tile;
+  Image     image;
+  TileEntry tile;
 };
 
 class ViewerThread
@@ -61,7 +61,7 @@
   int run();
 
   void receive_file(const FileEntry& entry);
-  void receive_tile(const Image& image, const Tile& tile);
+  void receive_tile(const Image& image, const TileEntry& tile);
 
   JobHandle request_tile(int fileid, int tilescale, int x, int y, const Image& image);
 private:



From grumbel at mail.berlios.de  Thu Aug 21 22:32:00 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 22:32:00 +0200
Subject: [Windstille-commit] r2349 - trunk/griv/src
Message-ID: <200808212032.m7LKW0D0020167@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 22:32:00 +0200 (Thu, 21 Aug 2008)
New Revision: 2349

Modified:
   trunk/griv/src/tile_generator.hpp
   trunk/griv/src/viewer_thread.cpp
Log:
Moved FileEntry and TileEntry to their own files

Modified: trunk/griv/src/tile_generator.hpp
===================================================================
--- trunk/griv/src/tile_generator.hpp	2008-08-21 20:30:51 UTC (rev 2348)
+++ trunk/griv/src/tile_generator.hpp	2008-08-21 20:32:00 UTC (rev 2349)
@@ -29,7 +29,7 @@
 #include <boost/function.hpp>
 #include <string>
 #include "software_surface.hpp"
-#include "tile_database.hpp"
+#include "tile_entry.hpp"
 
 class FileEntry;
 

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-21 20:30:51 UTC (rev 2348)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-21 20:32:00 UTC (rev 2349)
@@ -24,7 +24,7 @@
 */
 
 #include <boost/bind.hpp>
-#include "file_database.hpp"
+#include "file_entry.hpp"
 #include "workspace.hpp"
 #include "framebuffer.hpp"
 #include "viewer.hpp"



From grumbel at mail.berlios.de  Thu Aug 21 22:39:01 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 22:39:01 +0200
Subject: [Windstille-commit] r2350 - trunk/griv/src
Message-ID: <200808212039.m7LKd19o023028@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 22:39:01 +0200 (Thu, 21 Aug 2008)
New Revision: 2350

Modified:
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_entry.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/viewer_thread.cpp
Log:
Replaced int x,y with Vector2i pos

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-21 20:32:00 UTC (rev 2349)
+++ trunk/griv/src/tile_database.cpp	2008-08-21 20:39:01 UTC (rev 2350)
@@ -87,8 +87,8 @@
     {
       tile.fileid  = reader.get_int (0);
       tile.scale   = reader.get_int (1);
-      tile.x       = reader.get_int (2);
-      tile.y       = reader.get_int (3);
+      tile.pos.x   = reader.get_int (2);
+      tile.pos.y   = reader.get_int (3);
 
       // FIXME: Do this in the JPEGDecoderThread
       tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
@@ -112,8 +112,8 @@
   // just storing a duplicate
   store_stmt.bind_int (1, tile.fileid);
   store_stmt.bind_int (2, tile.scale);
-  store_stmt.bind_int (3, tile.x);
-  store_stmt.bind_int (4, tile.y);
+  store_stmt.bind_int (3, tile.pos.x);
+  store_stmt.bind_int (4, tile.pos.y);
   store_stmt.bind_blob(5, blob);
 
   store_stmt.execute();

Modified: trunk/griv/src/tile_entry.hpp
===================================================================
--- trunk/griv/src/tile_entry.hpp	2008-08-21 20:32:00 UTC (rev 2349)
+++ trunk/griv/src/tile_entry.hpp	2008-08-21 20:39:01 UTC (rev 2350)
@@ -32,9 +32,9 @@
 class TileEntry
 {
 public:
-  int fileid;
-  int scale;
-  int x, y;
+  int      fileid; // FIXME: Can we replace this with a FileEntry object?!
+  int      scale;
+  Vector2i pos;
   SoftwareSurface surface;
 
   TileEntry()

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-21 20:32:00 UTC (rev 2349)
+++ trunk/griv/src/tile_generator.cpp	2008-08-21 20:39:01 UTC (rev 2350)
@@ -64,8 +64,8 @@
             TileEntry tile;
             tile.fileid = fileid;
             tile.scale  = scale;
-            tile.x = x;
-            tile.y = y;
+            tile.pos.x = x;
+            tile.pos.y = y;
             tile.surface = croped_surface;
           
             callback(tile);
@@ -124,8 +124,8 @@
       TileEntry tile;
       tile.fileid  = entry.fileid;
       tile.scale   = scale;
-      tile.x       = 0;
-      tile.y       = 0;
+      tile.pos.x   = 0;
+      tile.pos.y   = 0;
       tile.surface = surface;
           
       callback(tile);

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-21 20:32:00 UTC (rev 2349)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-21 20:39:01 UTC (rev 2350)
@@ -93,7 +93,7 @@
         {
           TileMessage msg = tile_queue.front();
 
-          msg.image.receive_tile(msg.tile.x, msg.tile.y, 
+          msg.image.receive_tile(msg.tile.pos.x, msg.tile.pos.y, 
                                  msg.tile.scale, msg.tile.surface);
 
           tile_queue.pop();



From grumbel at mail.berlios.de  Thu Aug 21 22:39:35 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 22:39:35 +0200
Subject: [Windstille-commit] r2351 - trunk/griv
Message-ID: <200808212039.m7LKdZYG023108@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 22:39:35 +0200 (Thu, 21 Aug 2008)
New Revision: 2351

Modified:
   trunk/griv/SConstruct
Log:
Moved FileEntry and TileEntry to their own files

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-21 20:39:01 UTC (rev 2350)
+++ trunk/griv/SConstruct	2008-08-21 20:39:35 UTC (rev 2351)
@@ -17,6 +17,7 @@
         'src/math/vector2f.cpp',
         'src/math/vector3f.cpp',
         'src/file_database.cpp',
+        'src/file_entry.cpp',
         'src/filesystem.cpp',
         'src/framebuffer.cpp',
         'src/jpeg.cpp',



From grumbel at mail.berlios.de  Thu Aug 21 23:10:12 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 21 Aug 2008 23:10:12 +0200
Subject: [Windstille-commit] r2352 - trunk/griv/src
Message-ID: <200808212110.m7LLACvG027136@sheep.berlios.de>

Author: grumbel
Date: 2008-08-21 23:10:12 +0200 (Thu, 21 Aug 2008)
New Revision: 2352

Modified:
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Pass around whole FileEntry objects, instead of breaking them up into fileid and filename

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/database_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -247,10 +247,7 @@
                                       << tile_msg->tilescale
                                       << std::endl;
 
-                          tile_msg->job_handle.finish();
-                          // Need to send loading command back
-                          //TileGeneratorThread::request_tile(tile_msg->fileid, tile_msg->x, tile_msg->y, tile_msg->tilescale, 
-                          //                                  tile_msg->job_handle, 
+                          //TileGeneratorThread::request_tile(tile_msg->fileid, tile_msg->pos, tile_msg->tilescale, 
                           //                                  tile_msg->callback);
                         }
                     }

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/image.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -28,6 +28,7 @@
 #include "framebuffer.hpp"
 #include "surface.hpp"
 #include "math.hpp"
+#include "file_entry.hpp"
 #include "database_thread.hpp"
 #include "viewer_thread.hpp"
 #include "image.hpp"
@@ -40,9 +41,7 @@
 class ImageImpl
 {
 public:
-  int fileid;
-  std::string filename;
-  Size size;
+  FileEntry file_entry;
   float scale;
 
   int max_tiledb_scale;
@@ -64,16 +63,15 @@
 {
 }
 
-Image::Image(int fileid, const std::string& filename, const Size& size)
+Image::Image(const FileEntry& file_entry)
   : impl(new ImageImpl())
 {
-  impl->fileid   = fileid;
-  impl->filename = filename;
-  impl->size     = size;
-  impl->scale    = 1.0f;
+  impl->file_entry = file_entry;
+  impl->scale      = 1.0f;
   
   int  tiledb_scale = 0;
-  Size tmpsize = size;
+  Size tmpsize = file_entry.size;
+
   do {
     tmpsize.width  /= 2;
     tmpsize.height /= 2;
@@ -111,25 +109,25 @@
 float
 Image::get_scaled_width() const
 {
-  return impl->size.width * impl->scale;
+  return impl->file_entry.size.width * impl->scale;
 }
 
 float
 Image::get_scaled_height() const
 {
-  return impl->size.height * impl->scale;
+  return impl->file_entry.size.height * impl->scale;
 }
 
 int
 Image::get_original_width() const
 {
-  return impl->size.width;
+  return impl->file_entry.size.width;
 }
 
 int
 Image::get_original_height() const
 {
-  return impl->size.height;
+  return impl->file_entry.size.height;
 }
 
 Surface
@@ -140,7 +138,7 @@
 
   if (i == impl->cache.end())
     {
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale, x, y, *this));
+      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->file_entry.fileid, tile_scale, x, y, *this));
 
       // Request the next smaller tile too, so we get a lower quality
       // image fast and a higher quality one soon after FIXME: Its
@@ -148,7 +146,7 @@
       // request gets mungled in the DatabaseThread, we should request
       // the whole group of lower res tiles at once, instead of one by
       // one, since that eats up the possible speed up
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->fileid, tile_scale+1, x, y, *this));
+      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->file_entry.fileid, tile_scale+1, x, y, *this));
 
       SurfaceStruct s;
       
@@ -212,8 +210,8 @@
             {         
               // give up, no lower resolution found
 
-              Size s(Math::min(256, (impl->size.width  / Math::pow2(tiledb_scale)) - 256 * x),
-                     Math::min(256, (impl->size.height / Math::pow2(tiledb_scale)) - 256 * y));
+              Size s(Math::min(256, (impl->file_entry.size.width  / Math::pow2(tiledb_scale)) - 256 * x),
+                     Math::min(256, (impl->file_entry.size.height / Math::pow2(tiledb_scale)) - 256 * y));
 
               Framebuffer::fill_rect(Rectf(pos, s*scale),
                                      RGB(255, 0, 255));
@@ -233,7 +231,7 @@
       impl->jobs.clear();
     }
 
-  Rectf image_rect(impl->pos, Sizef(impl->size * impl->scale)); // in world coordinates
+  Rectf image_rect(impl->pos, Sizef(impl->file_entry.size * impl->scale)); // in world coordinates
 
   //Framebuffer::draw_rect(image_rect);
 
@@ -244,8 +242,8 @@
                                                        log(2)));
       int scale_factor = Math::pow2(tiledb_scale);
 
-      int scaled_width  = impl->size.width  / scale_factor;
-      int scaled_height = impl->size.height / scale_factor;
+      int scaled_width  = impl->file_entry.size.width  / scale_factor;
+      int scaled_height = impl->file_entry.size.height / scale_factor;
 
       if (scaled_width  < 256 && scaled_height < 256)
         { // So small that only one tile is to be drawn

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/image.hpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -40,6 +40,7 @@
 class Rectf;
 class Vector2f;
 class ImageImpl;
+class FileEntry;
 
 class Image
 {
@@ -61,7 +62,7 @@
 
 public:
   Image();
-  Image(int fileid, const std::string& filename, const Size& size);
+  Image(const FileEntry& file_entry);
 
   void draw_tile(int x, int y, int tiledb_scale, const Vector2f& rect, float scale);
   void draw(const Rectf& cliprect, float scale);

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/tile_generator.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -99,6 +99,7 @@
 
   //std::cout << "Loading with scale: 2^" << scale << " = " << Math::pow2(scale) << " " << entry.size << std::endl;
 
+  // The JPEG class can only scale down by factor 2,4,8, so we have to limit things
   int jpeg_scale = Math::min(8, Math::pow2(scale));
 
   // Load the largest scale at which the image fits on a single tile 

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -42,19 +42,10 @@
 }
 
 void
-TileGeneratorThread::request_tiles(int fileid, const std::string& filename)
+TileGeneratorThread::request_tile(const FileEntry& file_entry, 
+                                  const Vector2i& pos, int scale,
+                                  const boost::function<void (TileEntry)>& callback)
 {
-  TileGeneratorMessage msg;
-
-  msg.fileid   = fileid;
-  msg.filename = filename;
-
-  msg_queue.push(msg);
-}
-
-void
-TileGeneratorThread::request_tile(int fileid, const std::string& filename, const Vector2i& pos, int scale)
-{
   // Do some magic to group tile request for the same fileid
 }
 

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -26,9 +26,13 @@
 #ifndef HEADER_TILE_GENERATOR_THREAD_HPP
 #define HEADER_TILE_GENERATOR_THREAD_HPP
 
+#include <boost/function.hpp>
 #include "thread.hpp"
 #include "thread_message_queue.hpp"
+#include "tile_entry.hpp"
 
+class FileEntry;
+
 struct TileGeneratorMessage
 {
   int fileid;
@@ -55,8 +59,9 @@
 
   void stop();
 
-  void request_tiles(int fileid, const std::string& filename);
-  void request_tile (int fileid, const std::string& filename, const Vector2i& pos, int scale);
+  void request_tile(const FileEntry& file_entry, 
+                    const Vector2i& pos, int scale,
+                    const boost::function<void (TileEntry)>& callback);
 
   void receive_tile(const TileEntry& tile);
   

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -47,7 +47,6 @@
 ViewerThread::receive_file(const FileEntry& entry)
 {
   file_queue.push(entry);
-  //TileGeneratorThread::current()->request_tiles(entry.fileid, entry.filename);
 }
 
 void
@@ -85,7 +84,7 @@
       while (!file_queue.empty())
         {
           const FileEntry& entry = file_queue.front();
-          workspace.add_image(entry.fileid, entry.filename, entry.size);
+          workspace.add_image(entry);
           file_queue.pop();
         }
 

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/workspace.cpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include "file_entry.hpp"
 #include "math.hpp"
 #include "workspace.hpp"
 
@@ -32,12 +33,12 @@
 }
 
 void
-Workspace::add_image(int fileid, const std::string& filename, const Size& size)
+Workspace::add_image(const FileEntry& file_entry)
 {
-  Image image(fileid, filename, size);
+  Image image(file_entry);
   images.push_back(image);
-  image.set_scale(Math::min(1000.0f / size.width,
-                            1000.0f / size.height));
+  image.set_scale(Math::min(1000.0f / file_entry.size.width,
+                            1000.0f / file_entry.size.height));
 
   image.set_pos(next_pos * 1024.0f);
                    

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-21 20:39:35 UTC (rev 2351)
+++ trunk/griv/src/workspace.hpp	2008-08-21 21:10:12 UTC (rev 2352)
@@ -40,7 +40,7 @@
 public:
   Workspace();
 
-  void add_image(int fileid, const std::string& filename, const Size& size);
+  void add_image(const FileEntry& file_entry);
   void draw(const Rectf& cliprect, float scale);
 
   void layout(float aspect_w, float aspect_h);



From grumbel at mail.berlios.de  Mon Aug 25 16:16:47 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 25 Aug 2008 16:16:47 +0200
Subject: [Windstille-commit] r2353 - in trunk/griv: . src
Message-ID: <200808251416.m7PEGl0r027674@sheep.berlios.de>

Author: grumbel
Date: 2008-08-25 16:16:45 +0200 (Mon, 25 Aug 2008)
New Revision: 2353

Modified:
   trunk/griv/TODO
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
Log:
A little bit of cleanup and a little ground work to get loading done automatically

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/TODO	2008-08-25 14:16:45 UTC (rev 2353)
@@ -1,5 +1,19 @@
 [[ Griv ToDo ]]
 
+Toolpalette: Select picture, scale picture, move pictures, align
+selected picture into a group, maybe have a box into which one can
+drop pictures.
+
+Generating tiles for /resources/flickr/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
+Exception: JPEG: Unsupported color depth: 4
+
+* Support for multiple databases at once would be good 
+
+* Loading JPEG file can throw exception and that isn't handled
+
+* Displaying 75'000 images gets really slow, OpenGL bottleneck,
+  texture packing might help, sending vertex array instead of glBegin/glEnd of course too
+
 * add 8x8 JPEG is larger then RAW, else JPEG always wins
 
 1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
@@ -11,27 +25,41 @@
 10'000 thumbnails -> 10MB
 100'000 thumbnails -> 100MB (graphic card gets full) -> Solution: smaller thumbnails, also unload from GFX card, but keep software backstore
 
-* need to properly check for collisions in the database
+* need to properly check for collisions in the database and update
+  entries instead of just inserting a duplicate
+
 * implement fast crop
-* implement linear blending scale
+
+* implement smooth scale in SoftwareSurface (like LINEAR instead of NEAREST),
+
 * move image sorting code on workspace over
+
 * request lower res tiles, before requesting highres tiles
-* move JPEG decoding in a seperate thread so that the database thread can run free with database stuff 
+
+* move JPEG decoding in a seperate thread so that the database thread
+  can run free with database stuff
+
 * jpegtran *can't* do crop of large scale JPEGs in small amount of
   space, so cropping with libjpeg likely won't work
-
+
 * multi-threading in the tile generator for multicore
+
 * faster image handling, FreeImage is not good enough
+
 * do something about the seams on tile borders (hard, need to save a 1px border, but that screws up the JPEG compression)
+
 * faster incremental tile generation
+
 * griv name is already taken
 
   Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview
 
 * How to avoid duplicate entries in the queue?
+
 * figure out why the thing crashes -> move viewer thread into main thread
 
 * File stuff should really be seperate from Tile getting -> Seperate worker thread?
+
 * need to display the thread status graphically somehow
 
 # EOF #

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/database_thread.cpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -35,7 +35,8 @@
   DATABASE_ALL_FILES_MESSAGE,
   DATABASE_FILE_MESSAGE,
   DATABASE_TILE_MESSAGE,
-  DATABASE_STORE_TILE_MESSAGE
+  DATABASE_STORE_TILE_MESSAGE,
+  DATABASE_THREAD_DONE_MESSAGE
 };
 
 class DatabaseMessage
@@ -58,19 +59,17 @@
 
   int fileid;
   int tilescale;
-  int x;
-  int y;
+  Vector2i pos;
   boost::function<void (TileEntry)> callback;
 
   TileDatabaseMessage(const JobHandle& job_handle,
-                      int fileid, int tilescale, int x, int y,
+                      int fileid, int tilescale, const Vector2i& pos,
                       const boost::function<void (TileEntry)>& callback)
     : DatabaseMessage(DATABASE_TILE_MESSAGE),
       job_handle(job_handle),
       fileid(fileid),
       tilescale(tilescale),
-      x(x),
-      y(y),
+      pos(pos),
       callback(callback)
   {}
 };
@@ -101,6 +100,18 @@
   }
 };
 
+class ThreadDoneDatabaseMessage : public DatabaseMessage
+{
+public: 
+  int threadid;
+
+  ThreadDoneDatabaseMessage(int threadid)
+    : DatabaseMessage(DATABASE_THREAD_DONE_MESSAGE),
+      threadid(threadid)
+  {
+  }
+};
+
 class StoreTileDatabaseMessage : public DatabaseMessage
 {
 public:
@@ -125,12 +136,12 @@
 DatabaseThread::~DatabaseThread()
 {
 }
-
+
 JobHandle
-DatabaseThread::request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (TileEntry)>& callback)
+DatabaseThread::request_tile(int fileid, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback)
 {
   JobHandle job_handle;
-  queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, x, y, callback));
+  queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, pos, callback));
   return job_handle;
 }
 
@@ -147,17 +158,51 @@
 }
 
 void
-DatabaseThread::store_tile(const TileEntry& tile)
+DatabaseThread::receive_tile(const TileEntry& tile)
 {
   queue.push(new StoreTileDatabaseMessage(tile));
 }
 
 void
+DatabaseThread::receive_job_finished(int threadid)
+{
+  
+}
+
+void
 DatabaseThread::stop()
 {
   quit = true;
 }
 
+void
+DatabaseThread::process_tile_generation(int fileid, const Vector2i& pos, int scale,
+                                        const boost::function<void (TileEntry)>& callback)
+{
+#if 0
+  for(Threads::iterator i = threads.begin(); i != threads.end(); ++i)
+    {
+      Thread& thread = *i;
+
+      // Find a thread that is processing the tiles we need and add ourself to the callback list of that thread
+      if (thread.get_fileid() == fileid)
+        {
+          if (scale >= thread.get_min_scale() ||
+              scale <= thread.get_max_scale())
+            {
+              thread.add_callback(pos, scale, callback);
+              return;
+            }
+        }
+    }
+
+  // No fitting thread found, so launch a new one, don't launch more then max_thread threads
+
+  Thread thread(fileid, scale);
+  thread.add_callback(pos, scale, callback);
+#endif
+}
+
 int
 DatabaseThread::run()
 {
@@ -191,10 +236,25 @@
               case DATABASE_STORE_TILE_MESSAGE:
                 {
                   StoreTileDatabaseMessage* tile_msg = static_cast<StoreTileDatabaseMessage*>(msg);
+                  
+                  // FIXME: Check all threads for callbacks that might
+                  // want the tile, then call those callbacks
+
                   tile_db.store_tile(tile_msg->tile);
                 }
                 break;
 
+              case DATABASE_THREAD_DONE_MESSAGE:
+                {
+                  //ThreadDoneDatabaseMessage* thread_msg = static_cast<ThreadDoneDatabaseMessage*>(msg);
+
+                  // get thread this message is refering too and mark it
+                  // as ready to take new jobs, or join() it to clean up
+
+                  // Also check if new jobs are in the queue to be given to the thread
+                }
+                break;
+
               case DATABASE_FILE_MESSAGE:
                 {
                   FileDatabaseMessage* file_msg = static_cast<FileDatabaseMessage*>(msg);
@@ -232,7 +292,7 @@
                   if (!tile_msg->job_handle.is_aborted())
                     {
                       TileEntry tile;
-                      if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->x, tile_msg->y, tile))
+                      if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->pos, tile))
                         {
                           tile_msg->callback(tile);
                           tile_msg->job_handle.finish();
@@ -242,13 +302,13 @@
                           if (0)
                             std::cout << "Error: Couldn't get tile: " 
                                       << tile_msg->fileid << " "
-                                      << tile_msg->x << " "
-                                      << tile_msg->y << " "
+                                      << tile_msg->pos.x << " "
+                                      << tile_msg->pos.y << " "
                                       << tile_msg->tilescale
                                       << std::endl;
-
-                          //TileGeneratorThread::request_tile(tile_msg->fileid, tile_msg->pos, tile_msg->tilescale, 
-                          //                                  tile_msg->callback);
+                          
+                          process_tile_generation(tile_msg->fileid, tile_msg->pos, tile_msg->tilescale, 
+                                                  tile_msg->callback);
                         }
                     }
                 }

Modified: trunk/griv/src/database_thread.hpp
===================================================================
--- trunk/griv/src/database_thread.hpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/database_thread.hpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -50,6 +50,9 @@
   
   ThreadMessageQueue<DatabaseMessage*> queue;
 
+  void process_tile_generation(int fileid, const Vector2i& pos, int scale,
+                               const boost::function<void (TileEntry)>& callback);
+
 protected: 
   int run();
 
@@ -59,12 +62,23 @@
   
   void stop();
   
-  JobHandle request_tile(int fileid, int tilescale, int x, int y, const boost::function<void (TileEntry)>& callback);
-  void request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
-  void request_all_files(const boost::function<void (FileEntry)>& callback);
+  /* @{ */ // syncronized functions to be used by other threads
+  /** Request the tile for file \a tileid */
+  JobHandle request_tile(int fileid, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback);
 
-  void store_tile(const TileEntry& tile);
+  /** Request the FileEntry for \a filename */
+  void      request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);
 
+  /** Request all FileEntrys available in the database */
+  void      request_all_files(const boost::function<void (FileEntry)>& callback);
+
+  /** Place tile into the database */
+  void      receive_tile(const TileEntry& tile);
+
+  /** A Worker Thread reports that it is done and ready to accept new jobs */
+  void      receive_job_finished(int threadid);
+  /* @} */
+
 private:
   DatabaseThread (const DatabaseThread&);
   DatabaseThread& operator= (const DatabaseThread&);

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/image.cpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <boost/bind.hpp>
 #include "math/rgb.hpp"
 #include "math/rect.hpp"
 #include "framebuffer.hpp"
@@ -31,6 +32,7 @@
 #include "file_entry.hpp"
 #include "database_thread.hpp"
 #include "viewer_thread.hpp"
+#include "thread_message_queue.hpp"
 #include "image.hpp"
 
 uint32_t make_cache_id(int x, int y, int tile_scale)
@@ -49,6 +51,8 @@
 
   Image::Cache cache;
   Image::Jobs jobs;  
+
+  ThreadMessageQueue<TileEntry> tile_queue;
   
   ImageImpl() 
   {
@@ -138,15 +142,16 @@
 
   if (i == impl->cache.end())
     {
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->file_entry.fileid, tile_scale, x, y, *this));
+      impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry.fileid, tile_scale, Vector2i(x, y), 
+                                                                   boost::bind(&Image::receive_tile, this, _1)));
 
-      // Request the next smaller tile too, so we get a lower quality
-      // image fast and a higher quality one soon after FIXME: Its
-      // unclear if this actually improves things, also the order of
-      // request gets mungled in the DatabaseThread, we should request
-      // the whole group of lower res tiles at once, instead of one by
-      // one, since that eats up the possible speed up
-      impl->jobs.push_back(ViewerThread::current()->request_tile(impl->file_entry.fileid, tile_scale+1, x, y, *this));
+      // FIXME: Something to try: Request the next smaller tile too,
+      // so we get a lower quality image fast and a higher quality one
+      // soon after FIXME: Its unclear if this actually improves
+      // things, also the order of request gets mungled in the
+      // DatabaseThread, we should request the whole group of lower
+      // res tiles at once, instead of one by one, since that eats up
+      // the possible speed up
 
       SurfaceStruct s;
       
@@ -223,6 +228,22 @@
 void
 Image::draw(const Rectf& cliprect, float fscale)
 {
+  // Check the queue for newly arrived tiles
+  while (!impl->tile_queue.empty())
+    {
+      TileEntry tile = impl->tile_queue.front();
+      impl->tile_queue.pop();
+
+      int tile_id = make_cache_id(tile.pos.x, tile.pos.y, tile.scale);
+  
+      SurfaceStruct s;
+  
+      s.surface = Surface(tile.surface);
+      s.status  = SurfaceStruct::SURFACE_OK;
+
+      impl->cache[tile_id] = s;
+    }
+
   // Cancel all old jobs (FIXME: Stupid brute force hack)
   if (0)
     {
@@ -319,16 +340,9 @@
 }
 
 void
-Image::receive_tile(int x, int y, int tiledb_scale, const SoftwareSurface& surface)
+Image::receive_tile(const TileEntry& tile)
 {
-  int tile_id = make_cache_id(x, y, tiledb_scale);
-
-  SurfaceStruct s;
-  
-  s.surface = Surface(surface);
-  s.status  = SurfaceStruct::SURFACE_OK;
-
-  impl->cache[tile_id] = s;
+  impl->tile_queue.push(tile);
 }
 
 /* EOF */

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/image.hpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -41,6 +41,7 @@
 class Vector2f;
 class ImageImpl;
 class FileEntry;
+class TileEntry;
 
 class Image
 {
@@ -79,9 +80,11 @@
   int get_original_width() const;
   int get_original_height() const;
 
-  void receive_tile(int x, int y, int tiledb_scale, const SoftwareSurface& surface);
+  operator bool() const { return impl.get(); }
+
+  /** Syncronized function to require data from other threads */
+  void receive_tile(const TileEntry& tile_entry);
 
-  operator bool() const { return impl.get(); }
 private:
   boost::shared_ptr<ImageImpl> impl;
 };

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/tile_database.cpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -72,14 +72,14 @@
 }
 
 bool
-TileDatabase::get_tile(uint32_t fileid, int scale, int x, int y, TileEntry& tile)
+TileDatabase::get_tile(uint32_t fileid, int scale, const Vector2i& pos, TileEntry& tile)
 {
   //SDL_Delay(100);
 
   get_stmt.bind_int(1, fileid);
   get_stmt.bind_int(2, scale);
-  get_stmt.bind_int(3, x);
-  get_stmt.bind_int(4, y);
+  get_stmt.bind_int(3, pos.x);
+  get_stmt.bind_int(4, pos.y);
 
   SQLiteReader reader = get_stmt.execute_query();
 

Modified: trunk/griv/src/tile_database.hpp
===================================================================
--- trunk/griv/src/tile_database.hpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/tile_database.hpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -44,7 +44,7 @@
   TileDatabase(SQLiteConnection* db);
   
   bool has_tile(uint32_t file_id, Vector2i& pos, int scale);
-  bool get_tile(uint32_t file_id, int scale, int x, int y, TileEntry& tile);
+  bool get_tile(uint32_t file_id, int scale, const Vector2i& pos, TileEntry& tile);
   void store_tile(const TileEntry& tile);
   void check();
 private:

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -42,11 +42,10 @@
 }
 
 void
-TileGeneratorThread::request_tile(const FileEntry& file_entry, 
-                                  const Vector2i& pos, int scale,
-                                  const boost::function<void (TileEntry)>& callback)
+TileGeneratorThread::request_tiles(const FileEntry& file_entry, int min_scale, int max_scale,
+                                   const boost::function<void (TileEntry)>& callback)
 {
-  // Do some magic to group tile request for the same fileid
+  
 }
 
 void
@@ -55,12 +54,6 @@
   quit = true;
 }
 
-void
-TileGeneratorThread::receive_tile(const TileEntry& tile)
-{
-  DatabaseThread::current()->store_tile(tile);
-}
-
 int
 TileGeneratorThread::run()
 {
@@ -70,18 +63,19 @@
 
   while(!quit)
     {
+#if 0
       while(!msg_queue.empty())
         {
           TileGeneratorMessage msg = msg_queue.front();
           msg_queue.pop();
-
-          std::cout << "Generating tiles for: " << msg.filename << std::endl;
-          generator.generate_all(msg.fileid, msg.filename,
-                                 boost::bind(&TileGeneratorThread::receive_tile, this, _1));
+         
+          // process message         
         }
+            
       msg_queue.wait();
+#endif
     }
-
+  
   return 0;
 }
 

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -27,17 +27,37 @@
 #define HEADER_TILE_GENERATOR_THREAD_HPP
 
 #include <boost/function.hpp>
+#include <map>
 #include "thread.hpp"
 #include "thread_message_queue.hpp"
+#include "file_entry.hpp"
 #include "tile_entry.hpp"
 
 class FileEntry;
 
-struct TileGeneratorMessage
+/** A Task as received from another thread */
+struct TileGeneratorThreadJob
 {
-  int fileid;
-  std::string filename;
+  FileEntry entry;
+  Vector2i pos;
+  int      scale;
+  boost::function<void (TileEntry)> callback;
 };
+
+/** Tasks will be grouped into groups, so that one image will be
+    handled in one go, instead of accessing multiple files over and
+    over again. Groups will be processed in one go. */
+struct TileGeneratorMessageGroup { 
+  struct TileDescription 
+  { 
+    boost::function<void (TileEntry)> callback;
+  };
+
+  FileEntry entry;
+  
+  /** [(scale, (x,y,callback)), ...] */
+  std::map<int, std::vector<TileDescription> > jobs;
+};
 
 class TileGeneratorThread : public Thread
 {
@@ -48,8 +68,7 @@
 
 private:
   bool quit;
-  ThreadMessageQueue<TileGeneratorMessage> msg_queue;
-
+  
 protected:
   int run();
   
@@ -59,11 +78,9 @@
 
   void stop();
 
-  void request_tile(const FileEntry& file_entry, 
-                    const Vector2i& pos, int scale,
-                    const boost::function<void (TileEntry)>& callback);
-
-  void receive_tile(const TileEntry& tile);
+  /** Generate tiles for \a file_entry from min_scale to max_scale */
+  void request_tiles(const FileEntry& file_entry, int min_scale, int max_scale,
+                     const boost::function<void (TileEntry)>& callback);
   
 private:
   TileGeneratorThread (const TileGeneratorThread&);

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -60,13 +60,6 @@
   tile_queue.push(msg);
 }
 
-JobHandle 
-ViewerThread::request_tile(int fileid, int tilescale, int x, int y, const Image& image)
-{
-  return DatabaseThread::current()->request_tile(fileid, tilescale, x, y,
-                                                 boost::bind(&ViewerThread::receive_tile, this, image, _1));
-}
-
 int
 ViewerThread::run()
 {
@@ -88,12 +81,11 @@
           file_queue.pop();
         }
 
-      while (!tile_queue.empty()) // FIXME: Crash happens somewhere here!
+      while (!tile_queue.empty())
         {
           TileMessage msg = tile_queue.front();
 
-          msg.image.receive_tile(msg.tile.pos.x, msg.tile.pos.y, 
-                                 msg.tile.scale, msg.tile.surface);
+          msg.image.receive_tile(msg.tile);
 
           tile_queue.pop();
         }

Modified: trunk/griv/src/viewer_thread.hpp
===================================================================
--- trunk/griv/src/viewer_thread.hpp	2008-08-21 21:10:12 UTC (rev 2352)
+++ trunk/griv/src/viewer_thread.hpp	2008-08-25 14:16:45 UTC (rev 2353)
@@ -63,7 +63,6 @@
   void receive_file(const FileEntry& entry);
   void receive_tile(const Image& image, const TileEntry& tile);
 
-  JobHandle request_tile(int fileid, int tilescale, int x, int y, const Image& image);
 private:
   ViewerThread (const ViewerThread&);
   ViewerThread& operator= (const ViewerThread&);



From grumbel at mail.berlios.de  Tue Aug 26 02:53:42 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 26 Aug 2008 02:53:42 +0200
Subject: [Windstille-commit] r2354 - in trunk/griv: . src
Message-ID: <200808260053.m7Q0rgRp005838@sheep.berlios.de>

Author: grumbel
Date: 2008-08-26 02:53:40 +0200 (Tue, 26 Aug 2008)
New Revision: 2354

Removed:
   trunk/griv/src/url.cpp
   trunk/griv/src/url.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/src/
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/image.cpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/tile_entry.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
Log:
Got rid of URL class, implemented load on demand, still quite buggy

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/SConstruct	2008-08-26 00:53:40 UTC (rev 2354)
@@ -39,7 +39,6 @@
         'src/tile_generator_thread.cpp',
         'src/database_thread.cpp',
         'src/viewer_thread.cpp',
-        'src/url.cpp',
         'src/viewer.cpp',
         'src/workspace.cpp',
         ])


Property changes on: trunk/griv/src
___________________________________________________________________
Name: svn:ignore
   + old


Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/database_thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -24,6 +24,7 @@
 */
 
 #include <iostream>
+#include <boost/bind.hpp>
 #include <assert.h>
 #include "file_database.hpp"
 #include "tile_database.hpp"
@@ -57,17 +58,17 @@
 public:
   JobHandle job_handle;
 
-  int fileid;
+  FileEntry file_entry;
   int tilescale;
   Vector2i pos;
   boost::function<void (TileEntry)> callback;
 
   TileDatabaseMessage(const JobHandle& job_handle,
-                      int fileid, int tilescale, const Vector2i& pos,
+                      const FileEntry& file_entry, int tilescale, const Vector2i& pos,
                       const boost::function<void (TileEntry)>& callback)
     : DatabaseMessage(DATABASE_TILE_MESSAGE),
       job_handle(job_handle),
-      fileid(fileid),
+      file_entry(file_entry),
       tilescale(tilescale),
       pos(pos),
       callback(callback)
@@ -138,10 +139,10 @@
 }
 
 JobHandle
-DatabaseThread::request_tile(int fileid, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback)
+DatabaseThread::request_tile(const FileEntry& file_entry, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback)
 {
   JobHandle job_handle;
-  queue.push(new TileDatabaseMessage(job_handle, fileid, tilescale, pos, callback));
+  queue.push(new TileDatabaseMessage(job_handle, file_entry, tilescale, pos, callback));
   return job_handle;
 }
 
@@ -175,34 +176,6 @@
   quit = true;
 }
 
-void
-DatabaseThread::process_tile_generation(int fileid, const Vector2i& pos, int scale,
-                                        const boost::function<void (TileEntry)>& callback)
-{
-#if 0
-  for(Threads::iterator i = threads.begin(); i != threads.end(); ++i)
-    {
-      Thread& thread = *i;
-
-      // Find a thread that is processing the tiles we need and add ourself to the callback list of that thread
-      if (thread.get_fileid() == fileid)
-        {
-          if (scale >= thread.get_min_scale() ||
-              scale <= thread.get_max_scale())
-            {
-              thread.add_callback(pos, scale, callback);
-              return;
-            }
-        }
-    }
-
-  // No fitting thread found, so launch a new one, don't launch more then max_thread threads
-
-  Thread thread(fileid, scale);
-  thread.add_callback(pos, scale, callback);
-#endif
-}
-
 int
 DatabaseThread::run()
 {
@@ -219,27 +192,36 @@
     {
       //std::cout << "DatabaseThread: looping" << std::endl;
       
-      // do things
+      // FIXME: Ugly hack to reverse the order of the queue
       while(!queue.empty() && !quit)
         {
-          messages.push_back(queue.front());
+          DatabaseMessage* msg = queue.front();
           queue.pop();
-        }
 
-      if (!messages.empty())
-        {
-          DatabaseMessage* msg = messages.back();
-          messages.pop_back();
-
           switch(msg->type)
             {
               case DATABASE_STORE_TILE_MESSAGE:
                 {
                   StoreTileDatabaseMessage* tile_msg = static_cast<StoreTileDatabaseMessage*>(msg);
                   
-                  // FIXME: Check all threads for callbacks that might
-                  // want the tile, then call those callbacks
+                  for(std::list<TileDatabaseMessage*>::iterator i = tile_queue.begin(); i != tile_queue.end();)
+                    {
+                      if (tile_msg->tile.fileid == (*i)->file_entry.fileid &&
+                          tile_msg->tile.scale  == (*i)->tilescale &&
+                          tile_msg->tile.pos    == (*i)->pos)
+                        {
+                          (*i)->callback(tile_msg->tile);
 
+                          delete *i;
+
+                          i = tile_queue.erase(i);
+                        }
+                      else
+                        {
+                          ++i;
+                        }
+                    }
+
                   tile_db.store_tile(tile_msg->tile);
                 }
                 break;
@@ -292,7 +274,7 @@
                   if (!tile_msg->job_handle.is_aborted())
                     {
                       TileEntry tile;
-                      if (tile_db.get_tile(tile_msg->fileid, tile_msg->tilescale, tile_msg->pos, tile))
+                      if (tile_db.get_tile(tile_msg->file_entry.fileid, tile_msg->tilescale, tile_msg->pos, tile))
                         {
                           tile_msg->callback(tile);
                           tile_msg->job_handle.finish();
@@ -301,14 +283,16 @@
                         {
                           if (0)
                             std::cout << "Error: Couldn't get tile: " 
-                                      << tile_msg->fileid << " "
+                                      << tile_msg->file_entry.fileid << " "
                                       << tile_msg->pos.x << " "
                                       << tile_msg->pos.y << " "
                                       << tile_msg->tilescale
                                       << std::endl;
                           
-                          process_tile_generation(tile_msg->fileid, tile_msg->pos, tile_msg->tilescale, 
-                                                  tile_msg->callback);
+                          tile_queue.push_back(tile_msg);
+
+                          //std::cout << tile_queue.size() << std::endl;
+                          msg = 0; // FIXME: HACK so that msg doesn't get deleted
                         }
                     }
                 }
@@ -320,9 +304,18 @@
 
           delete msg;
         }
-      else
+      
+      queue.wait();
+
+      std::cout << tile_queue.size() << " vs " << queue.size() << std::endl;
+
+      if (queue.empty() && // FIXME UGLY: to make load on demand somewhat usable
+          TileGeneratorThread::current() && !TileGeneratorThread::current()->is_working() && !tile_queue.empty())
         {
-          queue.wait();
+          TileGeneratorThread::current()->request_tiles(tile_queue.back()->file_entry,
+                                                        tile_queue.back()->tilescale,
+                                                        tile_queue.back()->tilescale,
+                                                        boost::bind(&DatabaseThread::receive_tile, this, _1));
         }
     }
 

Modified: trunk/griv/src/database_thread.hpp
===================================================================
--- trunk/griv/src/database_thread.hpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/database_thread.hpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -27,6 +27,7 @@
 #define HEADER_DATABASE_THREAD_HPP
 
 #include <boost/function.hpp>
+#include <list>
 #include <string>
 #include "thread_message_queue.hpp"
 #include "file_entry.hpp"
@@ -35,6 +36,7 @@
 #include "thread.hpp"
 
 class DatabaseMessage;
+class TileDatabaseMessage;
 
 /** */
 class DatabaseThread : public Thread
@@ -49,10 +51,8 @@
   bool quit;
   
   ThreadMessageQueue<DatabaseMessage*> queue;
+  std::list<TileDatabaseMessage*>    tile_queue;
 
-  void process_tile_generation(int fileid, const Vector2i& pos, int scale,
-                               const boost::function<void (TileEntry)>& callback);
-
 protected: 
   int run();
 
@@ -64,7 +64,7 @@
   
   /* @{ */ // syncronized functions to be used by other threads
   /** Request the tile for file \a tileid */
-  JobHandle request_tile(int fileid, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback);
+  JobHandle request_tile(const FileEntry&, int tilescale, const Vector2i& pos, const boost::function<void (TileEntry)>& callback);
 
   /** Request the FileEntry for \a filename */
   void      request_file(const std::string& filename, const boost::function<void (FileEntry)>& callback);

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/griv.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -38,7 +38,6 @@
 #include "math/size.hpp"
 #include "math/rect.hpp"
 #include "math/vector2i.hpp"
-#include "url.hpp"
 #include "sqlite.hpp"
 #include "software_surface.hpp"
 #include "jpeg_decoder_thread.hpp"

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/image.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -142,7 +142,7 @@
 
   if (i == impl->cache.end())
     {
-      impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry.fileid, tile_scale, Vector2i(x, y), 
+      impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry, tile_scale, Vector2i(x, y), 
                                                                    boost::bind(&Image::receive_tile, this, _1)));
 
       // FIXME: Something to try: Request the next smaller tile too,
@@ -152,6 +152,8 @@
       // DatabaseThread, we should request the whole group of lower
       // res tiles at once, instead of one by one, since that eats up
       // the possible speed up
+      //impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry, tile_scale+1, Vector2i(x, y), 
+      //                                                             boost::bind(&Image::receive_tile, this, _1)));
 
       SurfaceStruct s;
       

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/software_surface.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -33,7 +33,6 @@
 #include "math/rect.hpp"
 #include "math/size.hpp"
 
-#include "url.hpp"
 #include "software_surface.hpp"
 
 class SoftwareSurfaceImpl

Modified: trunk/griv/src/software_surface.hpp
===================================================================
--- trunk/griv/src/software_surface.hpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/software_surface.hpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -29,7 +29,6 @@
 #include <boost/shared_ptr.hpp>
 #include "blob.hpp"
 
-class URL;
 class Rect;
 class Size;
 class SoftwareSurfaceImpl;

Modified: trunk/griv/src/tile_entry.hpp
===================================================================
--- trunk/griv/src/tile_entry.hpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/tile_entry.hpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -39,6 +39,13 @@
 
   TileEntry()
   {}
+
+  TileEntry(int fileid_, int scale_, const Vector2i& pos_, const SoftwareSurface& surface_)
+    : fileid(fileid_),
+      scale(scale_),
+      pos(pos_),
+      surface(surface_)
+  {}
 };
 
 #endif

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -25,7 +25,10 @@
 
 #include <iostream>
 #include <boost/bind.hpp>
+#include "math/rect.hpp"
 #include "tile_generator.hpp"
+#include "math.hpp"
+#include "jpeg.hpp"
 #include "database_thread.hpp"
 #include "tile_generator_thread.hpp"
  
@@ -35,6 +38,7 @@
   : quit(false)
 {
   current_ = this;
+  working  = false;
 }
 
 TileGeneratorThread::~TileGeneratorThread()
@@ -45,7 +49,18 @@
 TileGeneratorThread::request_tiles(const FileEntry& file_entry, int min_scale, int max_scale,
                                    const boost::function<void (TileEntry)>& callback)
 {
-  
+  assert(working == false);
+  working = true;
+
+  TileGeneratorThreadJob job;
+
+  job.entry     = file_entry;
+  job.min_scale = min_scale;
+  job.max_scale = max_scale;
+  job.callback  = callback;
+
+  assert(msg_queue.empty());
+  msg_queue.push(job);
 }
 
 void
@@ -54,6 +69,58 @@
   quit = true;
 }
 
+void
+TileGeneratorThread::process_message(const TileGeneratorThreadJob& job)
+{
+  std::cout << "Processing: scale: " << job.min_scale << "-" << job.max_scale << " " << job.entry.filename << "..." << std::flush;
+
+  // Find scale at which the image fits on one tile
+  int width  = job.entry.size.width;
+  int height = job.entry.size.height;
+  int scale  = job.min_scale;
+
+  int jpeg_scale = Math::pow2(scale);
+  SoftwareSurface surface;
+
+  if (jpeg_scale > 8)
+    {
+      // The JPEG class can only scale down by factor 2,4,8, so we have to
+      // limit things (FIXME: is that true? if so, why?)
+      surface = JPEG::load_from_file(job.entry.filename, 8);
+      
+      surface = surface.scale(Size(width  / Math::pow2(scale),
+                                   height / Math::pow2(scale)));
+    }
+  else
+    {
+      surface = JPEG::load_from_file(job.entry.filename, jpeg_scale);
+    }
+
+  do
+    {
+      if (scale != job.min_scale)
+        {
+          surface = surface.halve();
+        }
+
+      for(int y = 0; 256*y < surface.get_height(); ++y)
+        for(int x = 0; 256*x < surface.get_width(); ++x)
+          {
+            SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
+                                                               Size(256, 256)));
+
+            job.callback(TileEntry(job.entry.fileid, scale, Vector2i(x, y), croped_surface));
+          }
+
+      scale += 1;
+
+    } while (scale <= job.max_scale);
+
+  working = false;
+
+  std::cout << "done" << std::endl;
+}
+
 int
 TileGeneratorThread::run()
 {
@@ -63,20 +130,24 @@
 
   while(!quit)
     {
-#if 0
       while(!msg_queue.empty())
         {
-          TileGeneratorMessage msg = msg_queue.front();
+          TileGeneratorThreadJob msg = msg_queue.front();
           msg_queue.pop();
          
-          // process message         
+          process_message(msg);
         }
             
       msg_queue.wait();
-#endif
     }
   
   return 0;
 }
+
+bool
+TileGeneratorThread::is_working() const
+{
+  return working;
+}
 
 /* EOF */

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -39,25 +39,11 @@
 struct TileGeneratorThreadJob
 {
   FileEntry entry;
-  Vector2i pos;
-  int      scale;
+  int       min_scale;
+  int       max_scale;
+  
   boost::function<void (TileEntry)> callback;
 };
-
-/** Tasks will be grouped into groups, so that one image will be
-    handled in one go, instead of accessing multiple files over and
-    over again. Groups will be processed in one go. */
-struct TileGeneratorMessageGroup { 
-  struct TileDescription 
-  { 
-    boost::function<void (TileEntry)> callback;
-  };
-
-  FileEntry entry;
-  
-  /** [(scale, (x,y,callback)), ...] */
-  std::map<int, std::vector<TileDescription> > jobs;
-};
 
 class TileGeneratorThread : public Thread
 {
@@ -68,7 +54,9 @@
 
 private:
   bool quit;
-  
+  bool working;
+  ThreadMessageQueue<TileGeneratorThreadJob> msg_queue;
+
 protected:
   int run();
   
@@ -78,11 +66,15 @@
 
   void stop();
 
+  bool is_working() const;
+
   /** Generate tiles for \a file_entry from min_scale to max_scale */
   void request_tiles(const FileEntry& file_entry, int min_scale, int max_scale,
                      const boost::function<void (TileEntry)>& callback);
   
 private:
+  void process_message(const TileGeneratorThreadJob& job);
+
   TileGeneratorThread (const TileGeneratorThread&);
   TileGeneratorThread& operator= (const TileGeneratorThread&);
 };

Deleted: trunk/griv/src/url.cpp
===================================================================
--- trunk/griv/src/url.cpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/url.cpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -1,39 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include "url.hpp"
-
-URL::URL(const std::string& url_)
-  : url(url_)
-{
-}
-
-std::string
-URL::get_filename() const
-{
-  return url;
-}
-
-/* EOF */

Deleted: trunk/griv/src/url.hpp
===================================================================
--- trunk/griv/src/url.hpp	2008-08-25 14:16:45 UTC (rev 2353)
+++ trunk/griv/src/url.hpp	2008-08-26 00:53:40 UTC (rev 2354)
@@ -1,45 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_URL_HPP
-#define HEADER_URL_HPP
-
-#include <string>
-
-/** */
-class URL
-{
-private:
-  std::string url;
-
-public:
-  URL(const std::string& url);
-
-  std::string get_filename() const;
-};
-
-#endif
-
-/* EOF */



From grumbel at mail.berlios.de  Wed Aug 27 19:03:01 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 27 Aug 2008 19:03:01 +0200
Subject: [Windstille-commit] r2355 - in trunk/griv: . src
Message-ID: <200808271703.m7RH31u7028034@sheep.berlios.de>

Author: grumbel
Date: 2008-08-27 19:03:00 +0200 (Wed, 27 Aug 2008)
New Revision: 2355

Added:
   trunk/griv/AUTHORS
Modified:
   trunk/griv/README
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/jpeg.cpp
   trunk/griv/src/jpeg_decoder_thread.cpp
   trunk/griv/src/thread.cpp
   trunk/griv/src/thread.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/viewer.cpp
Log:
Fixed a bunch of issues in the load on demand code

Added: trunk/griv/AUTHORS
===================================================================
--- trunk/griv/AUTHORS	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/AUTHORS	2008-08-27 17:03:00 UTC (rev 2355)
@@ -0,0 +1,7 @@
+[[ AUTHORS ]]
+=============
+
+Ingo Ruhnke <grumbel at gmx.de>
+
+
+# EOF #

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/README	2008-08-27 17:03:00 UTC (rev 2355)
@@ -30,6 +30,12 @@
 library names might be a little different.
 
 
+Running:
+========
+
+
+
+
 Bugs:
 =====
 

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/SConstruct	2008-08-27 17:03:00 UTC (rev 2355)
@@ -1,6 +1,6 @@
 # Zoomable Image Viewer
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g3"], 
-                       CXXFLAGS=["-Wall", "-Werror", "-O0", "-g3", "-Wnon-virtual-dtor"], 
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g3"], 
+                       CXXFLAGS=["-Wall", "-Werror", "-O2", "-g3", "-Wnon-virtual-dtor"], 
                        LIBS=['jpeg',
                              'mhash', 
                              'GL', 

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/TODO	2008-08-27 17:03:00 UTC (rev 2355)
@@ -1,5 +1,7 @@
 [[ Griv ToDo ]]
 
+* implement shader to change hue, saturation, contrast, brightness, etc.
+
 Toolpalette: Select picture, scale picture, move pictures, align
 selected picture into a group, maybe have a box into which one can
 drop pictures.
@@ -52,7 +54,7 @@
 
 * griv name is already taken
 
-  Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview
+  Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview, brickview
 
 * How to avoid duplicate entries in the queue?
 

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/database_thread.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -127,7 +127,8 @@
 DatabaseThread* DatabaseThread::current_ = 0;
 
 DatabaseThread::DatabaseThread(const std::string& filename_)
-  : database_filename(filename_),
+  : Thread("DatabaseThread"),
+    database_filename(filename_),
     quit(false)
 {
   assert(current_ == 0);
@@ -221,8 +222,16 @@
                           ++i;
                         }
                     }
-
-                  tile_db.store_tile(tile_msg->tile);
+                  
+                  // FIXME: Make some better error checking in case of loading failure
+                  if (tile_msg->tile.surface)
+                    {
+                      tile_db.store_tile(tile_msg->tile);
+                    }
+                  else
+                    {
+                      
+                    }
                 }
                 break;
 
@@ -307,15 +316,31 @@
       
       queue.wait();
 
-      std::cout << tile_queue.size() << " vs " << queue.size() << std::endl;
+      //std::cout << tile_queue.size() << " vs " << queue.size() << std::endl;
 
+      // Check if job is still valid before starting to generate tiles
+      for(std::list<TileDatabaseMessage*>::iterator i = tile_queue.begin(); i != tile_queue.end();)
+        {
+          if ((*i)->job_handle.is_aborted())
+            {
+              delete *i;
+              i = tile_queue.erase(i);
+            }
+          else
+            {
+              ++i;
+            }
+        }
+
       if (queue.empty() && // FIXME UGLY: to make load on demand somewhat usable
-          TileGeneratorThread::current() && !TileGeneratorThread::current()->is_working() && !tile_queue.empty())
+          TileGeneratorThread::current() && !TileGeneratorThread::current()->is_working())
         {
-          TileGeneratorThread::current()->request_tiles(tile_queue.back()->file_entry,
-                                                        tile_queue.back()->tilescale,
-                                                        tile_queue.back()->tilescale,
-                                                        boost::bind(&DatabaseThread::receive_tile, this, _1));
+
+          if (!tile_queue.empty())
+            TileGeneratorThread::current()->request_tiles(tile_queue.back()->file_entry,
+                                                          tile_queue.back()->tilescale,
+                                                          tile_queue.back()->tilescale,
+                                                          boost::bind(&DatabaseThread::receive_tile, this, _1));
         }
     }
 

Modified: trunk/griv/src/database_thread.hpp
===================================================================
--- trunk/griv/src/database_thread.hpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/database_thread.hpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -38,7 +38,6 @@
 class DatabaseMessage;
 class TileDatabaseMessage;
 
-/** */
 class DatabaseThread : public Thread
 {
 private:

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/image.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -240,24 +240,22 @@
   
       SurfaceStruct s;
   
-      s.surface = Surface(tile.surface);
-      s.status  = SurfaceStruct::SURFACE_OK;
+      if (tile.surface)
+        {
+          s.surface = Surface(tile.surface);
+          s.status  = SurfaceStruct::SURFACE_OK;
+        }
+      else
+        {
+          s.surface = Surface();
+          s.status  = SurfaceStruct::SURFACE_FAILED;
+        }
 
       impl->cache[tile_id] = s;
     }
-
-  // Cancel all old jobs (FIXME: Stupid brute force hack)
-  if (0)
-    {
-      for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
-        i->abort();
-      impl->jobs.clear();
-    }
-
+  
   Rectf image_rect(impl->pos, Sizef(impl->file_entry.size * impl->scale)); // in world coordinates
 
-  //Framebuffer::draw_rect(image_rect);
-
   if (cliprect.is_overlapped(image_rect))
     {
       // scale factor for requesting the tile from the TileDatabase
@@ -304,7 +302,10 @@
   else
     {
       // Image is not visible so clear the cache
-      
+      for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
+        i->abort();
+      impl->jobs.clear();
+        
       // FIXME: We should keep at least some tiles or wait with the
       // cache purge a bit longer
 
@@ -320,7 +321,7 @@
         {
           int max_tiledb_scale = 0;
           SurfaceStruct s;
-          int tileid;
+          int tileid = -1;
           for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
             {
               int tiledb_scale = (i->first >> 16);

Modified: trunk/griv/src/jpeg.cpp
===================================================================
--- trunk/griv/src/jpeg.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/jpeg.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -93,7 +93,7 @@
 
   FILE* in = fopen(filename.c_str(), "rb");
   if (!in)
-    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
+    throw std::runtime_error("JPEG::load_from_file: Couldn't open " + filename);
 
   struct jpeg_decompress_struct  cinfo;
   struct jpeg_error_mgr jerr;
@@ -106,7 +106,7 @@
 
   if (setjmp(setjmp_buffer))
     {
-      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't open " + filename);
+      throw std::runtime_error("JPEG::load_from_file: ERROR: Couldn't open " + filename);
     }
 
   jpeg_read_header(&cinfo, FALSE);

Modified: trunk/griv/src/jpeg_decoder_thread.cpp
===================================================================
--- trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -29,7 +29,8 @@
 JPEGDecoderThread* JPEGDecoderThread::current_ = 0;
 
 JPEGDecoderThread::JPEGDecoderThread()
-  : quit(false)
+  : Thread("JPEGDecoderThread"),
+    quit(false)
 {
   current_ = 0;
 }

Modified: trunk/griv/src/thread.cpp
===================================================================
--- trunk/griv/src/thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/thread.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -23,7 +23,9 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include <assert.h>
+#include <stdexcept>
 #include "thread.hpp"
 
 /*
@@ -57,11 +59,20 @@
 int launch_thread(void* thread_ptr)
 {
   Thread* thread = static_cast<Thread*>(thread_ptr);
-  return thread->run();
+  try 
+    {
+      return thread->run();
+    }
+  catch(std::exception& err)
+    {
+      std::cout << "\nFatal Error: " << thread->get_name() << " (" << thread->get_id() << "): " << err.what() << std::endl;
+      return EXIT_FAILURE;
+    }
 }
 
-Thread::Thread()
-  : thread(0)
+Thread::Thread(const std::string& name_)
+  : thread(0),
+    name(name_)
 {
 }
 
@@ -69,6 +80,12 @@
 {
 }
 
+std::string
+Thread::get_name() const
+{
+  return name;
+}
+
 int
 Thread::join()
 {

Modified: trunk/griv/src/thread.hpp
===================================================================
--- trunk/griv/src/thread.hpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/thread.hpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -50,14 +50,16 @@
 {
 private:
   SDL_Thread* thread;
+  std::string name;
 
 public:
-  Thread();
+  Thread(const std::string& name);
   virtual ~Thread();
 
   void start();
   int  join();
   Uint32 get_id();
+  std::string get_name() const; 
   
   virtual int run() =0;
 

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -35,7 +35,8 @@
 TileGeneratorThread* TileGeneratorThread::current_ = 0; 
 
 TileGeneratorThread::TileGeneratorThread()
-  : quit(false)
+  : Thread("TileGeneratorThread"),
+    quit(false)
 {
   current_ = this;
   working  = false;
@@ -132,10 +133,19 @@
     {
       while(!msg_queue.empty())
         {
-          TileGeneratorThreadJob msg = msg_queue.front();
+          TileGeneratorThreadJob job = msg_queue.front();
           msg_queue.pop();
          
-          process_message(msg);
+          try 
+            {
+              process_message(job);
+            }
+          catch(std::exception& err)
+            {
+              // FIXME: We need a better way to communicate errors back
+              std::cout << "\Error: nTileGeneratorThread: Loading failure: " << job.entry.filename << std::endl;
+              job.callback(TileEntry());
+            }
         }
             
       msg_queue.wait();

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-26 00:53:40 UTC (rev 2354)
+++ trunk/griv/src/viewer.cpp	2008-08-27 17:03:00 UTC (rev 2355)
@@ -33,7 +33,7 @@
 #include "viewer.hpp"
 
 ViewerState::ViewerState()
-  : scale(1.0f),
+  : scale(0.25f),
     offset(0.0f, 0.0f)
 {
 }



From grumbel at mail.berlios.de  Wed Aug 27 21:08:43 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 27 Aug 2008 21:08:43 +0200
Subject: [Windstille-commit] r2356 - in trunk/griv: . src
Message-ID: <200808271908.m7RJ8h9X030082@sheep.berlios.de>

Author: grumbel
Date: 2008-08-27 21:08:42 +0200 (Wed, 27 Aug 2008)
New Revision: 2356

Modified:
   trunk/griv/README
   trunk/griv/src/image.cpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
Log:
Removed some old code, fixed crash at startup, added some bugs in the readme

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-27 17:03:00 UTC (rev 2355)
+++ trunk/griv/README	2008-08-27 19:08:42 UTC (rev 2356)
@@ -33,17 +33,54 @@
 Running:
 ========
 
+griv comes with a number of sub commands, allowing the user to either
+view images or pre generate thumbnails. The most basic command is:
 
+ ./griv view [FILES]...
 
+Which display the given files. To pregenerate only the small
+thumbnails you use:
 
+ ./griv thumbgen [FILES]...
+
+To generate not only the small thumbnails, but all tiles you use:
+
+ ./griv prepare [FILES]...
+
+The other available commands are mostly for debugging and have little
+actualy use.
+
+When you do not supply a list of files griv will display all files in
+the database.
+
+Via the -d flag you can specifiy a database, so that you can have
+different databases for different files.
+
+
 Bugs:
 =====
 
 When zooming into an images beyond its original size one will see
-noticable seams at the areas where the tiles meet. A possible fix for
-this would be to add a 1px width border to the tiles, but that would
-slow down the tile generation process from JPEG data, so it might
-never get implemented.
+noticable seams at the areas where the tiles meet. This is an artifact
+caused by OpenGLs linear filtering that can't work across tile
+borders, but only on a single tile. A possible fix for this would be
+to add a 1px width border to the tiles, but that would slow down the
+tile generation process from JPEG data, so it is unclear if it ever
+will be implemented.
 
+Jobs are currently not prioritized properly so unimportant ones might
+be executed before important ones, not harmfull, but its unpleasing to
+see images on the edge of the screen being generated before images in
+the center of the screen.
 
+griv can only handle JPEG files, no other format is supported. 
+
+Jobs are only canceled when the image is no longer visible, but not
+when the images zoom level has changed.
+
+There is no handling of tile collisions in the database, so one might
+end up with duplicate entries for the same tile. Tile generation is
+also not optimal, since some data gets discarded.
+
+
 # EOF #

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-27 17:03:00 UTC (rev 2355)
+++ trunk/griv/src/image.cpp	2008-08-27 19:08:42 UTC (rev 2356)
@@ -142,8 +142,12 @@
 
   if (i == impl->cache.end())
     {
+      // Important: it must be '*this', not 'this', since the 'this'
+      // pointer might disappear any time, its only the impl that
+      // stays and which we can link to by making a copy of the Image
+      // object via *this.
       impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry, tile_scale, Vector2i(x, y), 
-                                                                   boost::bind(&Image::receive_tile, this, _1)));
+                                                                   boost::bind(&Image::receive_tile, *this, _1)));
 
       // FIXME: Something to try: Request the next smaller tile too,
       // so we get a lower quality image fast and a higher quality one
@@ -153,7 +157,7 @@
       // res tiles at once, instead of one by one, since that eats up
       // the possible speed up
       //impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry, tile_scale+1, Vector2i(x, y), 
-      //                                                             boost::bind(&Image::receive_tile, this, _1)));
+      //                                                             boost::bind(&Image::receive_tile, *this, _1)));
 
       SurfaceStruct s;
       
@@ -345,6 +349,7 @@
 void
 Image::receive_tile(const TileEntry& tile)
 {
+  assert(impl.get());
   impl->tile_queue.push(tile);
 }
 

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-27 17:03:00 UTC (rev 2355)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-27 19:08:42 UTC (rev 2356)
@@ -48,17 +48,6 @@
 {
   file_queue.push(entry);
 }
-
-void
-ViewerThread::receive_tile(const Image& image, const TileEntry& tile)
-{
-  TileMessage msg;
-  
-  msg.image = image;
-  msg.tile  = tile;
-
-  tile_queue.push(msg);
-}
 
 int
 ViewerThread::run()
@@ -81,15 +70,6 @@
           file_queue.pop();
         }
 
-      while (!tile_queue.empty())
-        {
-          TileMessage msg = tile_queue.front();
-
-          msg.image.receive_tile(msg.tile);
-
-          tile_queue.pop();
-        }
-
       SDL_Event event;
       while (SDL_PollEvent(&event))
         {

Modified: trunk/griv/src/viewer_thread.hpp
===================================================================
--- trunk/griv/src/viewer_thread.hpp	2008-08-27 17:03:00 UTC (rev 2355)
+++ trunk/griv/src/viewer_thread.hpp	2008-08-27 19:08:42 UTC (rev 2356)
@@ -36,12 +36,6 @@
 class FileEntry;
 class Image;
 class TileEntry;
-
-struct TileMessage
-{
-  Image     image;
-  TileEntry tile;
-};
 
 class ViewerThread
 {
@@ -52,7 +46,6 @@
   
 private:
   ThreadMessageQueue<FileEntry>   file_queue;
-  ThreadMessageQueue<TileMessage> tile_queue;
 
 public:
   ViewerThread();
@@ -61,7 +54,6 @@
   int run();
 
   void receive_file(const FileEntry& entry);
-  void receive_tile(const Image& image, const TileEntry& tile);
 
 private:
   ViewerThread (const ViewerThread&);



From grumbel at mail.berlios.de  Wed Aug 27 22:13:55 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 27 Aug 2008 22:13:55 +0200
Subject: [Windstille-commit] r2357 - in trunk/griv: . src
Message-ID: <200808272013.m7RKDt5O003150@sheep.berlios.de>

Author: grumbel
Date: 2008-08-27 22:13:54 +0200 (Wed, 27 Aug 2008)
New Revision: 2357

Modified:
   trunk/griv/TODO
   trunk/griv/src/tile_generator.cpp
Log:
Generate tiles down to 1 pixel instead of stopping at something larger

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-27 19:08:42 UTC (rev 2356)
+++ trunk/griv/TODO	2008-08-27 20:13:54 UTC (rev 2357)
@@ -1,5 +1,7 @@
 [[ Griv ToDo ]]
 
+* store the max_tile size into the FileTable
+
 * implement shader to change hue, saturation, contrast, brightness, etc.
 
 Toolpalette: Select picture, scale picture, move pictures, align

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-27 19:08:42 UTC (rev 2356)
+++ trunk/griv/src/tile_generator.cpp	2008-08-27 20:13:54 UTC (rev 2357)
@@ -74,8 +74,9 @@
       scale += 1;
 
       //std::cout << "Scale: " << scale << " - " << surface.get_size() << std::endl;
-    } while (surface.get_width() > 32 ||
-             surface.get_height() > 32);
+    } 
+  while (surface.get_width()/2  != 0 &&
+         surface.get_height()/2 != 0);
 }
 
 void
@@ -131,9 +132,8 @@
           
       callback(tile);
 
-      // FIXME: Might barf if width/height get == 0
-      if (surface.get_width()  < 32 &&
-          surface.get_height() < 32)
+      if (surface.get_width()/2  == 0 ||
+          surface.get_height()/2 == 0)
         {
           break;
         }



From grumbel at mail.berlios.de  Thu Aug 28 03:36:37 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 03:36:37 +0200
Subject: [Windstille-commit] r2358 - in trunk/griv: . src
Message-ID: <200808280136.m7S1abeb027534@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 03:36:35 +0200 (Thu, 28 Aug 2008)
New Revision: 2358

Added:
   trunk/griv/src/space_navigator.cpp
   trunk/griv/src/space_navigator.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/src/image.cpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
   trunk/griv/src/viewer_thread.cpp
Log:
Added space navigator support and some other small bug fixes

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/SConstruct	2008-08-28 01:36:35 UTC (rev 2358)
@@ -3,6 +3,7 @@
                        CXXFLAGS=["-Wall", "-Werror", "-O2", "-g3", "-Wnon-virtual-dtor"], 
                        LIBS=['jpeg',
                              'mhash', 
+                             'spnav',
                              'GL', 
                              'GLU',
                              'GLEW'])
@@ -30,6 +31,7 @@
         'src/image.cpp',
         'src/md5.cpp',
         'src/software_surface.cpp',
+        'src/space_navigator.cpp',
         'src/sqlite.cpp',
         'src/surface.cpp',
         'src/texture.cpp',

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/TODO	2008-08-28 01:36:35 UTC (rev 2358)
@@ -1,5 +1,11 @@
 [[ Griv ToDo ]]
 
+* pointing griv to an empty directory is weird (directory is empty,
+  griv displays files in database, but can't create new thumbnails due
+  to missing files). It should give an error that no images could be found
+
+* float isn't enough, on high zoom level it breaks apart, need double
+
 * store the max_tile size into the FileTable
 
 * implement shader to change hue, saturation, contrast, brightness, etc.

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/image.cpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -326,6 +326,9 @@
           int max_tiledb_scale = 0;
           SurfaceStruct s;
           int tileid = -1;
+
+          //FIXME: Calculate a size at which the thumbnail is 32x32 or
+          //smaller, keep that and everything smaller, discard the rest
           for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
             {
               int tiledb_scale = (i->first >> 16);

Added: trunk/griv/src/space_navigator.cpp
===================================================================
--- trunk/griv/src/space_navigator.cpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/space_navigator.cpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -0,0 +1,97 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <math.h>
+#include <assert.h>
+#include <iostream>
+#include <spnav.h>
+#include "viewer.hpp"
+#include "space_navigator.hpp"
+
+SpaceNavigator::SpaceNavigator()
+{
+  if (spnav_open() != 0)
+    {
+      std::cout << "Error: SpaceNavigator: open" << std::endl;
+    }
+}
+
+SpaceNavigator::~SpaceNavigator()
+{
+  if (spnav_close() != 0)
+    {
+      std::cout << "Error: SpaceNavigator: close" << std::endl;
+    }
+}
+
+void
+SpaceNavigator::poll(Viewer& viewer)
+{
+  spnav_event event;
+  while(spnav_poll_event(&event))
+    {
+      switch(event.type)
+        {
+          case SPNAV_EVENT_MOTION:
+            {
+              if (0)
+              std::cout << "MotionEvent: " 
+                        << "("
+                        << event.motion.x << ", "
+                        << event.motion.y << ", "
+                        << event.motion.z
+                        << ") ("
+                        << event.motion.rx << ", "
+                        << event.motion.ry << ", "
+                        << event.motion.rz
+                        << std::endl;              
+
+
+              float factor = -abs(event.motion.y)/10000.0f;
+
+              if (event.motion.y > 0)
+                viewer.get_state().zoom(1.0f+factor);
+              else if (event.motion.y < 0)
+                viewer.get_state().zoom(1.0f/(1.0f+factor));
+
+              viewer.get_state().move(Vector2f(-event.motion.x / 10.0f,
+                                               +event.motion.z / 10.0f));
+
+              viewer.get_state().rotate(event.motion.ry / 100.0f);                                       
+            }
+            break;
+            
+          case SPNAV_EVENT_BUTTON:
+            if (0)
+            std::cout << "ButtonEvent: " << event.button.press << event.button.bnum << std::endl;
+            break;
+
+          default:
+            assert(!"SpaceNavigator: Unhandled event");
+        }
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/src/space_navigator.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/src/space_navigator.hpp
===================================================================
--- trunk/griv/src/space_navigator.hpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/space_navigator.hpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -0,0 +1,46 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SPNAV_HPP
+#define HEADER_SPNAV_HPP
+
+class Viewer;
+
+class SpaceNavigator
+{
+public:
+  SpaceNavigator();
+  ~SpaceNavigator();
+
+  void poll(Viewer& viewer);
+
+private:
+  SpaceNavigator (const SpaceNavigator&);
+  SpaceNavigator& operator= (const SpaceNavigator&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/src/space_navigator.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -36,7 +36,10 @@
 
 TileGeneratorThread::TileGeneratorThread()
   : Thread("TileGeneratorThread"),
-    quit(false)
+    quit(false),
+    min_scale(0),
+    max_scale(0),
+    fileid(0)
 {
   current_ = this;
   working  = false;
@@ -73,53 +76,65 @@
 void
 TileGeneratorThread::process_message(const TileGeneratorThreadJob& job)
 {
-  std::cout << "Processing: scale: " << job.min_scale << "-" << job.max_scale << " " << job.entry.filename << "..." << std::flush;
-
-  // Find scale at which the image fits on one tile
-  int width  = job.entry.size.width;
-  int height = job.entry.size.height;
-  int scale  = job.min_scale;
-
-  int jpeg_scale = Math::pow2(scale);
-  SoftwareSurface surface;
-
-  if (jpeg_scale > 8)
-    {
-      // The JPEG class can only scale down by factor 2,4,8, so we have to
-      // limit things (FIXME: is that true? if so, why?)
-      surface = JPEG::load_from_file(job.entry.filename, 8);
-      
-      surface = surface.scale(Size(width  / Math::pow2(scale),
-                                   height / Math::pow2(scale)));
+  if (fileid    == job.entry.fileid &&
+      min_scale == job.min_scale &&
+      max_scale == job.max_scale)
+    { 
+      // FIXME: Workaround for jobs getting reqested multiple times in a row for some reason
+      std::cout << "TileGeneratorThread: Job rejected: " << job.min_scale << "-" << job.max_scale << " " << job.entry.filename << std::endl;
     }
   else
     {
-      surface = JPEG::load_from_file(job.entry.filename, jpeg_scale);
-    }
+      std::cout << "TileGeneratorThread: Processing: scale: " << job.min_scale << "-" << job.max_scale << " " << job.entry.filename << "..." << std::flush;
 
-  do
-    {
-      if (scale != job.min_scale)
+      min_scale = job.min_scale;
+      max_scale = job.max_scale;
+      fileid    = job.entry.fileid;
+
+      // Find scale at which the image fits on one tile
+      int width  = job.entry.size.width;
+      int height = job.entry.size.height;
+      int scale  = job.min_scale;
+
+      int jpeg_scale = Math::pow2(scale);
+      SoftwareSurface surface;
+
+      if (jpeg_scale > 8)
         {
-          surface = surface.halve();
+          // The JPEG class can only scale down by factor 2,4,8, so we have to
+          // limit things (FIXME: is that true? if so, why?)
+          surface = JPEG::load_from_file(job.entry.filename, 8);
+      
+          surface = surface.scale(Size(width  / Math::pow2(scale),
+                                       height / Math::pow2(scale)));
         }
+      else
+        {
+          surface = JPEG::load_from_file(job.entry.filename, jpeg_scale);
+        }
 
-      for(int y = 0; 256*y < surface.get_height(); ++y)
-        for(int x = 0; 256*x < surface.get_width(); ++x)
-          {
-            SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
-                                                               Size(256, 256)));
+      do
+        {
+          if (scale != job.min_scale)
+            {
+              surface = surface.halve();
+            }
 
-            job.callback(TileEntry(job.entry.fileid, scale, Vector2i(x, y), croped_surface));
-          }
+          for(int y = 0; 256*y < surface.get_height(); ++y)
+            for(int x = 0; 256*x < surface.get_width(); ++x)
+              {
+                SoftwareSurface croped_surface = surface.crop(Rect(Vector2i(x * 256, y * 256),
+                                                                   Size(256, 256)));
 
-      scale += 1;
+                job.callback(TileEntry(job.entry.fileid, scale, Vector2i(x, y), croped_surface));
+              }
 
-    } while (scale <= job.max_scale);
+          scale += 1;
 
-  working = false;
+        } while (scale <= job.max_scale);
 
-  std::cout << "done" << std::endl;
+      std::cout << "done" << std::endl;
+    }
 }
 
 int
@@ -143,11 +158,13 @@
           catch(std::exception& err)
             {
               // FIXME: We need a better way to communicate errors back
-              std::cout << "\Error: nTileGeneratorThread: Loading failure: " << job.entry.filename << std::endl;
+              std::cout << "\nError: TileGeneratorThread: Loading failure: " << job.entry.filename << std::endl;
               job.callback(TileEntry());
             }
+          working = false;
         }
-            
+
+      //std::cout << "TileGeneratorThread: Waiting" << std::endl;
       msg_queue.wait();
     }
   

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -57,6 +57,10 @@
   bool working;
   ThreadMessageQueue<TileGeneratorThreadJob> msg_queue;
 
+  int min_scale;
+  int max_scale;
+  int fileid;
+
 protected:
   int run();
   

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/viewer.cpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -34,6 +34,7 @@
 
 ViewerState::ViewerState()
   : scale(0.25f),
+    angle(0.0f),
     offset(0.0f, 0.0f)
 {
 }
@@ -47,8 +48,21 @@
 }
 
 void
-ViewerState::move(const Vector2i& pos)
+ViewerState::zoom(float factor)
 {
+  zoom(factor, Vector2i(Framebuffer::get_width()/2, // FIXME: Little ugly, isn't it?
+                        Framebuffer::get_height()/2));
+}
+
+void
+ViewerState::rotate(float r)
+{
+  angle += r;
+}
+
+void
+ViewerState::move(const Vector2f& pos)
+{
   offset.x += pos.x;
   offset.y += pos.y;
 }
@@ -117,6 +131,10 @@
               workspace.layout(4, 3);
               break;
 
+            case SDLK_2:
+              workspace.layout(16, 9);
+              break;
+
             default:
               break;
           }
@@ -128,8 +146,8 @@
         
         if (drag_n_drop)
           {
-            state.move(Vector2i(event.motion.xrel * 4,
-                                event.motion.yrel * 4));
+            state.move(Vector2f(event.motion.xrel * 4.0f,
+                                event.motion.yrel * 4.0f));
           }
         break;
 
@@ -195,6 +213,7 @@
 
   glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
   glScalef(state.get_scale(), state.get_scale(), 1.0f);
+  //glRotatef(state.get_angle(), 0.0f, 0.0f, 1.0f);
 
   Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
 

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/viewer.hpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -29,6 +29,7 @@
 #include "SDL.h"
 #include "surface.hpp"
 #include "math/vector2i.hpp"
+#include "math/vector2f.hpp"
 
 class Workspace;
 
@@ -36,19 +37,23 @@
 {
 private:
   float    scale;
+  float    angle;
   Vector2f offset;
   
 public:
   ViewerState();
 
   void zoom(float factor, const Vector2i& pos);
-  void move(const Vector2i& pos);
+  void zoom(float factor);
+  void move(const Vector2f& pos);
+  void rotate(float r);
 
   Vector2f screen2world(const Vector2i&) const;
   Rectf    screen2world(const Rect&) const;
 
   Vector2f get_offset() const { return offset; }
   float    get_scale()  const { return scale; }
+  float    get_angle() const  { return angle; }
 };
 
 class Viewer
@@ -72,6 +77,8 @@
   void process_event(Workspace& workspace, const SDL_Event& event);
   bool done() const { return quit; }
 
+  ViewerState& get_state() { return state; }
+
 private:
   Viewer (const Viewer&);
   Viewer& operator= (const Viewer&);

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-27 20:13:54 UTC (rev 2357)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-28 01:36:35 UTC (rev 2358)
@@ -30,6 +30,7 @@
 #include "viewer.hpp"
 #include "viewer_thread.hpp"
 #include "tile_generator_thread.hpp"
+#include "space_navigator.hpp"
 #include "database_thread.hpp"
 
 ViewerThread* ViewerThread::current_ = 0;
@@ -61,6 +62,9 @@
   Viewer viewer;
 
   Uint32 ticks = SDL_GetTicks();
+
+  SpaceNavigator space_navigator;
+
   while(!viewer.done())
     {     
       while (!file_queue.empty())
@@ -70,6 +74,8 @@
           file_queue.pop();
         }
 
+      space_navigator.poll(viewer);
+
       SDL_Event event;
       while (SDL_PollEvent(&event))
         {



From grumbel at mail.berlios.de  Thu Aug 28 04:00:29 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 04:00:29 +0200
Subject: [Windstille-commit] r2359 - trunk/griv/src
Message-ID: <200808280200.m7S20TgR029566@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 04:00:19 +0200 (Thu, 28 Aug 2008)
New Revision: 2359

Modified:
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/viewer.cpp
Log:
Added fullscreen and vsync

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-28 01:36:35 UTC (rev 2358)
+++ trunk/griv/src/framebuffer.cpp	2008-08-28 02:00:19 UTC (rev 2359)
@@ -40,6 +40,8 @@
 {
   assert(screen == 0);
 
+  SDL_GL_SetAttribute(SDL_GL_SWAP_CONTROL, 1); // vsync
+
   flags = SDL_RESIZABLE | SDL_OPENGL;
   screen = SDL_SetVideoMode(800, 600, 0, flags);
 
@@ -91,7 +93,7 @@
     flags |= SDL_FULLSCREEN;
  
   // Should use desktop resolution for this instead, but how?
-  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+  screen = SDL_SetVideoMode(1680, 1050, 0, flags); 
   glViewport(0, 0, screen->w, screen->h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-28 01:36:35 UTC (rev 2358)
+++ trunk/griv/src/viewer.cpp	2008-08-28 02:00:19 UTC (rev 2359)
@@ -118,14 +118,18 @@
               break;
 
             case SDLK_PAGEUP:
-                gamma *= 1.1f;
-                SDL_SetGamma(gamma, gamma, gamma);
+              gamma *= 1.1f;
+              SDL_SetGamma(gamma, gamma, gamma);
               break;
 
             case SDLK_PAGEDOWN:
-                gamma /= 1.1f;
-                SDL_SetGamma(gamma, gamma, gamma);
-                break;
+              gamma /= 1.1f;
+              SDL_SetGamma(gamma, gamma, gamma);
+              break;
+
+            case SDLK_F11:
+              Framebuffer::toggle_fullscreen();
+              break;
                 
             case SDLK_1:
               workspace.layout(4, 3);
@@ -172,16 +176,16 @@
                   
             case SDL_BUTTON_LEFT:
               if (event.button.state == SDL_PRESSED)
-                  zoom_button = 1;
+                zoom_button = 1;
               else
-                  zoom_button = 0;
+                zoom_button = 0;
               break;
 
             case SDL_BUTTON_RIGHT:
               if (event.button.state == SDL_PRESSED)
-                  zoom_button = -1;
+                zoom_button = -1;
               else
-                  zoom_button = 0;
+                zoom_button = 0;
               break;
   
             case SDL_BUTTON_MIDDLE:



From grumbel at mail.berlios.de  Thu Aug 28 12:46:59 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 12:46:59 +0200
Subject: [Windstille-commit] r2360 - in trunk/griv: . src
Message-ID: <200808281046.m7SAkx8C024874@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 12:46:57 +0200 (Thu, 28 Aug 2008)
New Revision: 2360

Modified:
   trunk/griv/README
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
   trunk/griv/src/space_navigator.cpp
   trunk/griv/src/space_navigator.hpp
Log:
Use desktop resolution for fullscreen, do not fail if space navigator is not present


Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-28 02:00:19 UTC (rev 2359)
+++ trunk/griv/README	2008-08-28 10:46:57 UTC (rev 2360)
@@ -3,11 +3,11 @@
 
 griv is a image viewer that allows you to directly zoom into large
 collection of tens of thousand of images from tiny thumbnails down to
-the images original size fluently with little or no noticable
-loadtimes. It accomplishes this by keeping a tile cache which stores
-not only thumbnails for one size, but thumbnails of many different
-sizes. This thumbnail cache requires at maximum 1.5x times as much
-storage as the images themselves.
+the images original size fluently with small loadtimes or no loss of
+interactivity. It accomplishes this by keeping a tile cache which
+stores not only thumbnails for one size, but thumbnails of many
+different sizes. This thumbnail cache requires at maximum 1.5x times
+as much storage as the images themselves.
 
 griv can also be used to view gigapixel sized images, it however
 currently requires the tiles for that to be generated previously,
@@ -57,6 +57,17 @@
 different databases for different files.
 
 
+SpaceNavigator Support:
+=======================
+
+griv supports the Space Navigator via the Open Source spacenavd daemon:
+
+ * http://spacenav.sourceforge.net
+
+The 3Dconnexion's official 3dxsrv daemon is not supported, neither is
+directly reading from /dev/input/eventX.
+
+
 Bugs:
 =====
 

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-28 02:00:19 UTC (rev 2359)
+++ trunk/griv/src/framebuffer.cpp	2008-08-28 10:46:57 UTC (rev 2360)
@@ -34,6 +34,7 @@
 SDL_SysWMinfo syswm;
 SDL_Surface* Framebuffer::screen = 0;
 Uint32 Framebuffer::flags = 0;
+Size Framebuffer::desktop_resolution;
 
 void
 Framebuffer::set_video_mode(const Size& size)
@@ -42,6 +43,9 @@
 
   SDL_GL_SetAttribute(SDL_GL_SWAP_CONTROL, 1); // vsync
 
+  const SDL_VideoInfo* info = SDL_GetVideoInfo();
+  desktop_resolution = Size(info->current_w, info->current_h);
+
   flags = SDL_RESIZABLE | SDL_OPENGL;
   screen = SDL_SetVideoMode(800, 600, 0, flags);
 
@@ -92,8 +96,7 @@
   else
     flags |= SDL_FULLSCREEN;
  
-  // Should use desktop resolution for this instead, but how?
-  screen = SDL_SetVideoMode(1680, 1050, 0, flags); 
+  screen = SDL_SetVideoMode(desktop_resolution.width, desktop_resolution.height, 0, flags); 
   glViewport(0, 0, screen->w, screen->h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();

Modified: trunk/griv/src/framebuffer.hpp
===================================================================
--- trunk/griv/src/framebuffer.hpp	2008-08-28 02:00:19 UTC (rev 2359)
+++ trunk/griv/src/framebuffer.hpp	2008-08-28 10:46:57 UTC (rev 2360)
@@ -53,6 +53,7 @@
 private:
   static SDL_Surface* screen;
   static Uint32 flags;
+  static Size desktop_resolution;
 
 public:
   static void set_video_mode(const Size& size);

Modified: trunk/griv/src/space_navigator.cpp
===================================================================
--- trunk/griv/src/space_navigator.cpp	2008-08-28 02:00:19 UTC (rev 2359)
+++ trunk/griv/src/space_navigator.cpp	2008-08-28 10:46:57 UTC (rev 2360)
@@ -31,15 +31,22 @@
 #include "space_navigator.hpp"
 
 SpaceNavigator::SpaceNavigator()
+  : usable(false)
 {
   if (spnav_open() != 0)
     {
-      std::cout << "Error: SpaceNavigator: open" << std::endl;
+      std::cout << "Error: SpaceNavigator: open failed" << std::endl;
+      usable = false;
     }
+  else
+    {
+      usable = true;
+    }
 }
 
 SpaceNavigator::~SpaceNavigator()
 {
+  if (usable)
   if (spnav_close() != 0)
     {
       std::cout << "Error: SpaceNavigator: close" << std::endl;
@@ -49,47 +56,50 @@
 void
 SpaceNavigator::poll(Viewer& viewer)
 {
-  spnav_event event;
-  while(spnav_poll_event(&event))
+  if (usable)
     {
-      switch(event.type)
+      spnav_event event;
+      while(spnav_poll_event(&event))
         {
-          case SPNAV_EVENT_MOTION:
+          switch(event.type)
             {
-              if (0)
-              std::cout << "MotionEvent: " 
-                        << "("
-                        << event.motion.x << ", "
-                        << event.motion.y << ", "
-                        << event.motion.z
-                        << ") ("
-                        << event.motion.rx << ", "
-                        << event.motion.ry << ", "
-                        << event.motion.rz
-                        << std::endl;              
+              case SPNAV_EVENT_MOTION:
+                {
+                  if (0)
+                    std::cout << "MotionEvent: " 
+                              << "("
+                              << event.motion.x << ", "
+                              << event.motion.y << ", "
+                              << event.motion.z
+                              << ") ("
+                              << event.motion.rx << ", "
+                              << event.motion.ry << ", "
+                              << event.motion.rz
+                              << std::endl;              
 
 
-              float factor = -abs(event.motion.y)/10000.0f;
+                  float factor = -abs(event.motion.y)/10000.0f;
 
-              if (event.motion.y > 0)
-                viewer.get_state().zoom(1.0f+factor);
-              else if (event.motion.y < 0)
-                viewer.get_state().zoom(1.0f/(1.0f+factor));
+                  if (event.motion.y > 0)
+                    viewer.get_state().zoom(1.0f+factor);
+                  else if (event.motion.y < 0)
+                    viewer.get_state().zoom(1.0f/(1.0f+factor));
 
-              viewer.get_state().move(Vector2f(-event.motion.x / 10.0f,
-                                               +event.motion.z / 10.0f));
+                  viewer.get_state().move(Vector2f(-event.motion.x / 10.0f,
+                                                   +event.motion.z / 10.0f));
 
-              viewer.get_state().rotate(event.motion.ry / 100.0f);                                       
-            }
-            break;
+                  viewer.get_state().rotate(event.motion.ry / 100.0f);                                       
+                }
+                break;
             
-          case SPNAV_EVENT_BUTTON:
-            if (0)
-            std::cout << "ButtonEvent: " << event.button.press << event.button.bnum << std::endl;
-            break;
+              case SPNAV_EVENT_BUTTON:
+                if (0)
+                  std::cout << "ButtonEvent: " << event.button.press << event.button.bnum << std::endl;
+                break;
 
-          default:
-            assert(!"SpaceNavigator: Unhandled event");
+              default:
+                assert(!"SpaceNavigator: Unhandled event");
+            }
         }
     }
 }

Modified: trunk/griv/src/space_navigator.hpp
===================================================================
--- trunk/griv/src/space_navigator.hpp	2008-08-28 02:00:19 UTC (rev 2359)
+++ trunk/griv/src/space_navigator.hpp	2008-08-28 10:46:57 UTC (rev 2360)
@@ -30,6 +30,9 @@
 
 class SpaceNavigator
 {
+private:
+  bool usable;
+
 public:
   SpaceNavigator();
   ~SpaceNavigator();



From grumbel at mail.berlios.de  Thu Aug 28 12:55:51 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 12:55:51 +0200
Subject: [Windstille-commit] r2361 - trunk/griv/src
Message-ID: <200808281055.m7SAtpHK005571@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 12:55:50 +0200 (Thu, 28 Aug 2008)
New Revision: 2361

Modified:
   trunk/griv/src/framebuffer.cpp
Log:
Added some debug output

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-28 10:46:57 UTC (rev 2360)
+++ trunk/griv/src/framebuffer.cpp	2008-08-28 10:55:50 UTC (rev 2361)
@@ -90,12 +90,17 @@
 void
 Framebuffer::toggle_fullscreen()
 {
-  flags |= SDL_OPENGL;
   if (flags & SDL_FULLSCREEN)
-    flags &= ~SDL_FULLSCREEN;
+    {
+      flags = SDL_OPENGL | SDL_RESIZABLE;
+    }
   else
-    flags |= SDL_FULLSCREEN;
+    {
+      flags = SDL_OPENGL | SDL_FULLSCREEN;
+    }
  
+  std::cout << "Switching to fullscreen " 
+            << desktop_resolution.width << "x" << desktop_resolution.height << std::endl;
   screen = SDL_SetVideoMode(desktop_resolution.width, desktop_resolution.height, 0, flags); 
   glViewport(0, 0, screen->w, screen->h);
   glMatrixMode(GL_PROJECTION);



From grumbel at mail.berlios.de  Thu Aug 28 13:01:43 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 13:01:43 +0200
Subject: [Windstille-commit] r2362 - trunk/griv/src
Message-ID: <200808281101.m7SB1hwY011482@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 13:01:40 +0200 (Thu, 28 Aug 2008)
New Revision: 2362

Modified:
   trunk/griv/src/framebuffer.cpp
Log:
Small fix in fullscreen toggle

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-28 10:55:50 UTC (rev 2361)
+++ trunk/griv/src/framebuffer.cpp	2008-08-28 11:01:40 UTC (rev 2362)
@@ -90,18 +90,23 @@
 void
 Framebuffer::toggle_fullscreen()
 {
+  Size res(800,600);
   if (flags & SDL_FULLSCREEN)
     {
       flags = SDL_OPENGL | SDL_RESIZABLE;
+      res = Size(800, 600);
+      std::cout << "Switching to fullscreen " 
+                << res.width << "x" << res.height << std::endl;
     }
   else
     {
       flags = SDL_OPENGL | SDL_FULLSCREEN;
+      res = desktop_resolution;
+      std::cout << "Switching to desktop " 
+                << res.width << "x" << res.height << std::endl;
     }
  
-  std::cout << "Switching to fullscreen " 
-            << desktop_resolution.width << "x" << desktop_resolution.height << std::endl;
-  screen = SDL_SetVideoMode(desktop_resolution.width, desktop_resolution.height, 0, flags); 
+  screen = SDL_SetVideoMode(res.width, res.height, 0, flags); 
   glViewport(0, 0, screen->w, screen->h);
   glMatrixMode(GL_PROJECTION);
   glLoadIdentity();



From grumbel at mail.berlios.de  Thu Aug 28 15:20:53 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 15:20:53 +0200
Subject: [Windstille-commit] r2363 - trunk/griv/src
Message-ID: <200808281320.m7SDKrud008418@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 15:20:53 +0200 (Thu, 28 Aug 2008)
New Revision: 2363

Modified:
   trunk/griv/src/griv.cpp
Log:
Documented 'info'

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-28 11:01:40 UTC (rev 2362)
+++ trunk/griv/src/griv.cpp	2008-08-28 13:20:53 UTC (rev 2363)
@@ -263,6 +263,7 @@
                 << "       griv prepare  [OPTIONS]... [FILES]...\n"
                 << "       griv thumbgen [OPTIONS]... [FILES]...\n"
                 << "       griv filegen  [OPTIONS]... [FILES]...\n"
+                << "       griv info     [OPTIONS]... [FILES]...\n"
                 << "       griv check    [OPTIONS]...\n"
                 << "       griv list     [OPTIONS]...\n"
                 << "       griv cleanup  [OPTIONS]...\n"
@@ -274,6 +275,7 @@
                 << "  filegen   Generate only small the file entries in the database\n"
                 << "  list      Lists all files in the database\n"
                 << "  check     Checks the database for consistency\n"
+                << "  info      Display size of the given files\n"
                 << "  cleanup   Runs garbage collection on the database\n"
                 << "\n"
                 << "Options:\n"



From grumbel at mail.berlios.de  Thu Aug 28 15:21:32 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 28 Aug 2008 15:21:32 +0200
Subject: [Windstille-commit] r2364 - trunk/griv/src
Message-ID: <200808281321.m7SDLWN9008502@sheep.berlios.de>

Author: grumbel
Date: 2008-08-28 15:21:32 +0200 (Thu, 28 Aug 2008)
New Revision: 2364

Modified:
   trunk/griv/src/framebuffer.cpp
Log:
Trying to get OpenGL speeded up a bit and tearing fixed

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-28 13:20:53 UTC (rev 2363)
+++ trunk/griv/src/framebuffer.cpp	2008-08-28 13:21:32 UTC (rev 2364)
@@ -41,6 +41,13 @@
 {
   assert(screen == 0);
 
+  SDL_GL_SetAttribute(SDL_GL_RED_SIZE,   5);
+  SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
+  SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,  5);
+  SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 16);
+
+  SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
+
   SDL_GL_SetAttribute(SDL_GL_SWAP_CONTROL, 1); // vsync
 
   const SDL_VideoInfo* info = SDL_GetVideoInfo();



From grumbel at mail.berlios.de  Fri Aug 29 02:33:58 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 29 Aug 2008 02:33:58 +0200
Subject: [Windstille-commit] r2365 - trunk/griv/src
Message-ID: <200808290033.m7T0XwLk027739@sheep.berlios.de>

Author: grumbel
Date: 2008-08-29 02:33:56 +0200 (Fri, 29 Aug 2008)
New Revision: 2365

Modified:
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
Log:
Small code cleanup

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-28 13:21:32 UTC (rev 2364)
+++ trunk/griv/src/image.cpp	2008-08-29 00:33:56 UTC (rev 2365)
@@ -231,8 +231,23 @@
     }
 }
 
+void 
+Image::draw_tiles(const Rect& rect, int tiledb_scale, 
+                  const Vector2f& pos, float scale)
+{
+  float tilesize = 256.0f * scale;
+
+  for(int y = rect.top; y < rect.bottom; ++y)
+    for(int x = rect.left; x < rect.right; ++x)
+      {
+        draw_tile(x, y, tiledb_scale, 
+                  impl->pos + Vector2f(x,y) * tilesize,
+                  scale);
+      }
+}
+
 void
-Image::draw(const Rectf& cliprect, float fscale)
+Image::process_queue()
 {
   // Check the queue for newly arrived tiles
   while (!impl->tile_queue.empty())
@@ -257,11 +272,68 @@
 
       impl->cache[tile_id] = s;
     }
+}
+
+void
+Image::cache_cleanup()
+{
+  // Image is not visible so clear the cache
+  for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
+    i->abort();
+  impl->jobs.clear();
+        
+  // FIXME: We should keep at least some tiles or wait with the
+  // cache purge a bit longer
+
+  // FIXME: We also need to purge the cache more often, since with
+  // big images we would end up never clearing it
+      
+  // Clear the cache, but keep the smallest tile (Wonky hack)
+  if (0)
+    {
+      impl->cache.clear();
+    }
+  else
+    {
+      int max_tiledb_scale = 0;
+      SurfaceStruct s;
+      int tileid = -1;
+
+      //FIXME: Calculate a size at which the thumbnail is 32x32 or
+      //smaller, keep that and everything smaller, discard the rest
+      for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
+        {
+          int tiledb_scale = (i->first >> 16);
+          if (tiledb_scale > max_tiledb_scale)
+            {
+              max_tiledb_scale = tiledb_scale;
+              tileid = i->first;
+              s      = i->second;
+            }
+        }
+      impl->cache.clear();
+
+      if (max_tiledb_scale != 0)
+        {
+          impl->cache[tileid] = s;
+        }
+    } 
+}
+
+
+void
+Image::draw(const Rectf& cliprect, float fscale)
+{
+  process_queue();
   
   Rectf image_rect(impl->pos, Sizef(impl->file_entry.size * impl->scale)); // in world coordinates
 
-  if (cliprect.is_overlapped(image_rect))
+  if (!cliprect.is_overlapped(image_rect))
     {
+      cache_cleanup();
+    }
+  else
+    {
       // scale factor for requesting the tile from the TileDatabase
       int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale*impl->scale)) /
                                                        log(2)));
@@ -286,69 +358,22 @@
           image_region.bottom = (image_region.bottom - impl->pos.y) / impl->scale;
 
           int   itilesize = 256 * scale_factor;
-          float tilesize  = 256.0f * scale_factor * impl->scale;
-
+          
           int start_x = (image_region.left)  / itilesize;
           int end_x   = (image_region.right) / itilesize + 1;
 
           int start_y = (image_region.top   ) / itilesize;
           int end_y   = (image_region.bottom) / itilesize + 1;
 
-          for(int y = start_y; y < end_y; y += 1)
-            for(int x = start_x; x < end_x; x += 1)
-              {
-                draw_tile(x, y, tiledb_scale, 
-                          impl->pos + Vector2f(x,y) * tilesize,
-                          scale_factor * impl->scale);
-              }
+          draw_tiles(Rect(start_x, start_y, end_x, end_y), 
+                     tiledb_scale, 
+                     impl->pos,
+                     scale_factor * impl->scale);
         }
     }
-  else
-    {
-      // Image is not visible so clear the cache
-      for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
-        i->abort();
-      impl->jobs.clear();
-        
-      // FIXME: We should keep at least some tiles or wait with the
-      // cache purge a bit longer
-
-      // FIXME: We also need to purge the cache more often, since with
-      // big images we would end up never clearing it
-      
-      // Clear the cache, but keep the smallest tile (Wonky hack)
-      if (0)
-        {
-          impl->cache.clear();
-        }
-      else
-        {
-          int max_tiledb_scale = 0;
-          SurfaceStruct s;
-          int tileid = -1;
-
-          //FIXME: Calculate a size at which the thumbnail is 32x32 or
-          //smaller, keep that and everything smaller, discard the rest
-          for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
-            {
-              int tiledb_scale = (i->first >> 16);
-              if (tiledb_scale > max_tiledb_scale)
-                {
-                  max_tiledb_scale = tiledb_scale;
-                  tileid = i->first;
-                  s      = i->second;
-                }
-            }
-          impl->cache.clear();
-
-          if (max_tiledb_scale != 0)
-            {
-              impl->cache[tileid] = s;
-            }
-        }
-    }
 }
 
+
 void
 Image::receive_tile(const TileEntry& tile)
 {

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-28 13:21:32 UTC (rev 2364)
+++ trunk/griv/src/image.hpp	2008-08-29 00:33:56 UTC (rev 2365)
@@ -61,11 +61,15 @@
 private:
   Surface get_tile(int x, int y, int tile_scale);
 
+  void cache_cleanup();
+  void process_queue();
+
 public:
   Image();
   Image(const FileEntry& file_entry);
 
   void draw_tile(int x, int y, int tiledb_scale, const Vector2f& rect, float scale);
+  void draw_tiles(const Rect& rect, int tiledb_scale, const Vector2f& pos, float scale);
   void draw(const Rectf& cliprect, float scale);
 
   void set_pos(const Vector2f& pos);



From grumbel at mail.berlios.de  Fri Aug 29 13:45:42 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 29 Aug 2008 13:45:42 +0200
Subject: [Windstille-commit] r2366 - trunk/griv/src
Message-ID: <200808291145.m7TBjgCu010596@sheep.berlios.de>

Author: grumbel
Date: 2008-08-29 13:45:41 +0200 (Fri, 29 Aug 2008)
New Revision: 2366

Modified:
   trunk/griv/src/image.cpp
Log:
Small improvement in which tiles are cached and which aren't

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-29 00:33:56 UTC (rev 2365)
+++ trunk/griv/src/image.cpp	2008-08-29 11:45:41 UTC (rev 2366)
@@ -46,7 +46,7 @@
   FileEntry file_entry;
   float scale;
 
-  int max_tiledb_scale;
+  int min_keep_scale; 
   Vector2f pos;
 
   Image::Cache cache;
@@ -66,24 +66,21 @@
 Image::Image()
 {
 }
-
+
 Image::Image(const FileEntry& file_entry)
   : impl(new ImageImpl())
 {
   impl->file_entry = file_entry;
   impl->scale      = 1.0f;
-  
-  int  tiledb_scale = 0;
-  Size tmpsize = file_entry.size;
 
-  do {
-    tmpsize.width  /= 2;
-    tmpsize.height /= 2;
-    tiledb_scale += 1;
-  } while (tmpsize.width  > 32 ||
-           tmpsize.height > 32);
-
-  impl->max_tiledb_scale = tiledb_scale;
+  int size  = Math::max(file_entry.size.width, file_entry.size.height);
+  impl->min_keep_scale = 0;
+  while(size > 32) 
+    {
+      size /= 2;
+      impl->min_keep_scale +=1 ;
+    }
+  
 }
 
 void
@@ -277,50 +274,30 @@
 void
 Image::cache_cleanup()
 {
-  // Image is not visible so clear the cache
+  // Image is not visible, so cancel all jobs
   for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
     i->abort();
   impl->jobs.clear();
         
-  // FIXME: We should keep at least some tiles or wait with the
-  // cache purge a bit longer
-
   // FIXME: We also need to purge the cache more often, since with
-  // big images we would end up never clearing it
+  // big gigapixel images we would end up never clearing it
       
-  // Clear the cache, but keep the smallest tile (Wonky hack)
-  if (0)
-    {
-      impl->cache.clear();
-    }
-  else
-    {
-      int max_tiledb_scale = 0;
-      SurfaceStruct s;
-      int tileid = -1;
+  // Erase all tiles larger then 32x32
 
-      //FIXME: Calculate a size at which the thumbnail is 32x32 or
-      //smaller, keep that and everything smaller, discard the rest
-      for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
+  // FIXME: Could make this more clever and relative to the number
+  // of the images we display, since with large collections 32x32
+  // might be to much for memory while with small collections it
+  // will lead to unnecessary loading artifacts.      
+  for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
+    {
+      int tiledb_scale = (i->first >> 16); // get scale
+      if (tiledb_scale > impl->min_keep_scale)
         {
-          int tiledb_scale = (i->first >> 16);
-          if (tiledb_scale > max_tiledb_scale)
-            {
-              max_tiledb_scale = tiledb_scale;
-              tileid = i->first;
-              s      = i->second;
-            }
+          impl->cache.erase(i);
         }
-      impl->cache.clear();
-
-      if (max_tiledb_scale != 0)
-        {
-          impl->cache[tileid] = s;
-        }
-    } 
+    }
 }
 
-
 void
 Image::draw(const Rectf& cliprect, float fscale)
 {
@@ -335,6 +312,7 @@
   else
     {
       // scale factor for requesting the tile from the TileDatabase
+      // FIXME: Can likely be done without float
       int tiledb_scale = Math::max(0, static_cast<int>(log(1.0f / (fscale*impl->scale)) /
                                                        log(2)));
       int scale_factor = Math::pow2(tiledb_scale);



From grumbel at mail.berlios.de  Fri Aug 29 19:48:22 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 29 Aug 2008 19:48:22 +0200
Subject: [Windstille-commit] r2367 - in trunk/griv: . src
Message-ID: <200808291748.m7THmMCl008615@sheep.berlios.de>

Author: grumbel
Date: 2008-08-29 19:48:21 +0200 (Fri, 29 Aug 2008)
New Revision: 2367

Modified:
   trunk/griv/README
   trunk/griv/TODO
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Some cleanup

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/README	2008-08-29 17:48:21 UTC (rev 2367)
@@ -68,30 +68,4 @@
 directly reading from /dev/input/eventX.
 
 
-Bugs:
-=====
-
-When zooming into an images beyond its original size one will see
-noticable seams at the areas where the tiles meet. This is an artifact
-caused by OpenGLs linear filtering that can't work across tile
-borders, but only on a single tile. A possible fix for this would be
-to add a 1px width border to the tiles, but that would slow down the
-tile generation process from JPEG data, so it is unclear if it ever
-will be implemented.
-
-Jobs are currently not prioritized properly so unimportant ones might
-be executed before important ones, not harmfull, but its unpleasing to
-see images on the edge of the screen being generated before images in
-the center of the screen.
-
-griv can only handle JPEG files, no other format is supported. 
-
-Jobs are only canceled when the image is no longer visible, but not
-when the images zoom level has changed.
-
-There is no handling of tile collisions in the database, so one might
-end up with duplicate entries for the same tile. Tile generation is
-also not optimal, since some data gets discarded.
-
-
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/TODO	2008-08-29 17:48:21 UTC (rev 2367)
@@ -1,75 +1,131 @@
 [[ Griv ToDo ]]
 
+* build "scons configure" like stuff, see Pingus for reference
+
+* allow rotation of view, maybe later of images
+
+* save color or a 8x8 thumbnail in the FileEntry, for faster loading, also save 1x1 Color in FileEntry
+
+* store the max_tile size into the FileTable
+
+* opening a large directory causes file entries to be generated, but
+  no tiles to be shown, because tiles are last in the queue, different
+  jobs should have different queue
+
 * pointing griv to an empty directory is weird (directory is empty,
   griv displays files in database, but can't create new thumbnails due
   to missing files). It should give an error that no images could be found
 
-* float isn't enough, on high zoom level it breaks apart, need double
+* Loading JPEG file can throw exception and that isn't handled
 
-* store the max_tile size into the FileTable
+* Displaying 75'000 images gets really slow, OpenGL bottleneck,
+  texture packing might help, sending vertex array instead of glBegin/glEnd of course too
 
-* implement shader to change hue, saturation, contrast, brightness, etc.
+* need to properly check for collisions in the database and update
+  entries instead of just inserting a duplicate
 
-Toolpalette: Select picture, scale picture, move pictures, align
-selected picture into a group, maybe have a box into which one can
-drop pictures.
+* implement smooth scale in SoftwareSurface (like LINEAR instead of NEAREST),
 
-Generating tiles for /resources/flickr/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
-Exception: JPEG: Unsupported color depth: 4
+* implement non-copying crop in SoftwareSurface (use parent image data
+  as pixel source)
 
-* Support for multiple databases at once would be good 
+* multi-threading in the tile generator for multicore
 
-* Loading JPEG file can throw exception and that isn't handled
+* faster incremental tile generation
 
-* Displaying 75'000 images gets really slow, OpenGL bottleneck,
-  texture packing might help, sending vertex array instead of glBegin/glEnd of course too
+* griv name is already taken, need a new one:
 
-* add 8x8 JPEG is larger then RAW, else JPEG always wins
+  Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview, brickview, birdview, hawkeye
 
-1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
-~100MB for fullscreen 16x16 Thumbs
-~32 textures for 129600 thumbs
+* File stuff should really be seperate from Tile getting -> Seperate worker thread?
 
-16x16 -> 1KB
-1000 thumbnails -> 1MB
-10'000 thumbnails -> 10MB
-100'000 thumbnails -> 100MB (graphic card gets full) -> Solution: smaller thumbnails, also unload from GFX card, but keep software backstore
+* need to display the thread status graphically somehow (graphical
+  rotating wheel? per image or overall?)
 
-* need to properly check for collisions in the database and update
-  entries instead of just inserting a duplicate
+* Jobs are only canceled when the image is no longer visible, but not
+  when the images zoom level has changed.
 
-* implement fast crop
 
-* implement smooth scale in SoftwareSurface (like LINEAR instead of NEAREST),
+Database Stuff:
+===============
 
-* move image sorting code on workspace over
+* There is no handling of tile collisions in the database, so one
+  might end up with duplicate entries for the same tile. Tile
+  generation is also not optimal, since some data gets discarded.
 
+* Support for multiple databases at once would be good 
+
+
+Thread Stuff:
+=============
+
+* Jobs are currently not prioritized properly so unimportant ones
+  might be executed before important ones, not harmfull, but its
+  unpleasing to see images on the edge of the screen being generated
+  before images in the center of the screen.
+
 * request lower res tiles, before requesting highres tiles
 
 * move JPEG decoding in a seperate thread so that the database thread
   can run free with database stuff
 
-* jpegtran *can't* do crop of large scale JPEGs in small amount of
-  space, so cropping with libjpeg likely won't work
 
-* multi-threading in the tile generator for multicore
+Old Features that need to be moved:
+===================================
 
-* faster image handling, FreeImage is not good enough
+* move dynamic image sorting/movement code over
 
-* do something about the seams on tile borders (hard, need to save a 1px border, but that screws up the JPEG compression)
+* grid drawing over to new griv 
 
-* faster incremental tile generation
 
-* griv name is already taken
+Possible Future Improvements:
+=============================
 
-  Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview, brickview
+* float isn't enough, on high zoom level it breaks apart, might need double
 
-* How to avoid duplicate entries in the queue?
+* implement shader to change hue, saturation, contrast, brightness, etc.
 
-* figure out why the thing crashes -> move viewer thread into main thread
+* Toolpalette: Select picture, scale picture, move pictures, align
+  selected picture into a group, maybe have a box into which one can
+  drop pictures.
 
-* File stuff should really be seperate from Tile getting -> Seperate worker thread?
+* griv can only handle JPEG files, no other format is supported. 
 
-* need to display the thread status graphically somehow
+* When zooming into an images beyond its original size one will see
+  noticable seams at the areas where the tiles meet. This is an
+  artifact caused by OpenGLs linear filtering that can't work across
+  tile borders, but only on a single tile. A possible fix for this
+  would be to add a 1px width border to the tiles, but that would slow
+  down the tile generation process from JPEG data, so it is unclear if
+  it ever will be implemented.
+
+* griv completly ignores ~/.thumbnails/, it should maybe make use of
+  that to speed up initial thumbnail generation
+
+* Generating tiles for /resources/flickr/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
+  Exception: JPEG: Unsupported color depth: 4
+
+* Grayscale JPEGs aren't supported either (easy to fix)
+
+
+Random Notes:
+=============
+
+* jpegtran can't do crop of large scale JPEGs in small amount of
+  space, so cropping with libjpeg likely won't work
+
+* a single 2048x2048 texture can hold 65536 8x8 tiles -> ~12MB
+
+* when 8x8 or smaller JPEG is larger then RAW, else JPEG always wins
+
+1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
+~100MB for fullscreen 16x16 Thumbs
+~32 textures for 129600 thumbs
+
+16x16 -> 1KB
+1000 thumbnails -> 1MB
+10'000 thumbnails -> 10MB
+100'000 thumbnails -> 100MB (graphic card gets full) -> Solution: smaller thumbnails, also unload from GFX card, but keep software backstore
+
 
 # EOF #

Modified: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/src/file_entry.hpp	2008-08-29 17:48:21 UTC (rev 2367)
@@ -29,16 +29,44 @@
 #include <stdint.h>
 #include <string>
 #include "math/size.hpp"
+#include "math/rgb.hpp"
+#include "software_surface.hpp"
 
 class FileEntry 
 {
 public:
-  int         fileid;
-  std::string filename; // 
-  std::string md5;      //
-  int         filesize; //
-  uint32_t    mtime;    // mtime of the file
-  Size        size;
+  /** Unique id by which one can refer to this FileEntry, used in the
+      'tile' table in the database */
+  int fileid;
+
+  /** The absolute filename of the image file */
+  std::string filename; 
+
+  /** MD5 Checksum of the image file 
+      FIXME: currently not used */
+  std::string md5;      
+
+  /** MD5 Checksum of the image file 
+      FIXME: currently not used */
+  int         filesize; 
+
+  /** Modification time of the image file
+      FIXME: currently not used */
+  uint32_t    mtime;
+
+  /** The size of the image in pixels */
+  Size size;
+
+  /** The average color of the image, it can also be thought of as a
+      1x1 thumbnail, it is used when drawing the place holder rect
+      when no Tile is available */
+  RGB color;
+
+  /** A 8x8 thumbnail of the image, at this size the thumbnail doesn't
+      consume more more diskspace then the filename, so it makes a
+      good lower bound, it also the point at which the pixel data
+      stored raw consumes less space then a JPEG compressed file */
+  SoftwareSurface surface;
 };
 
 std::ostream& operator<<(std::ostream& os, const FileEntry& entry);

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/src/image.cpp	2008-08-29 17:48:21 UTC (rev 2367)
@@ -171,6 +171,27 @@
     }
 }
 
+Surface
+Image::find_smaller_tile(int x, int y, int tiledb_scale, int& downscale)
+{
+  int  downscale_factor = 1;
+
+  // FIXME: Replace this loop with a 'find_next_best_smaller_tile()' function
+  while(downscale_factor < 10) // Make this 'max_scale' instead of random number
+    {
+      downscale = Math::pow2(downscale_factor);
+      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+downscale_factor);
+      Cache::iterator i = impl->cache.find(cache_id);
+      if (i != impl->cache.end() && i->second.surface)
+        {
+          return i->second.surface;
+        }
+
+      downscale_factor += 1;
+    }
+  return Surface();
+}
+
 void
 Image::draw_tile(int x, int y, int tiledb_scale, 
                  const Vector2f& pos, float scale)
@@ -184,46 +205,29 @@
   else
     {
       // Look for the next smaller tile
-      // FIXME: Rewrite this to work all smaller tiles, not just the next
-      
-      int downscale_factor = 1;
-
-    retry:
-      int downscale = Math::pow2(downscale_factor);
-
-      uint32_t cache_id = make_cache_id(x/downscale, y/downscale, tiledb_scale+downscale_factor);
-      Cache::iterator i = impl->cache.find(cache_id);
-  
-      if (i != impl->cache.end() && i->second.surface)
+      // FIXME: Rewrite this to work all smaller tiles, not just the next     
+      int downscale;
+      surface = find_smaller_tile(x, y, tiledb_scale, downscale);
+      if (surface)
         { // Must only draw relevant section!
-          Size s((x%downscale) ? (i->second.surface.get_width()  - 256/downscale * (x%downscale)) : 256/downscale,
-                 (y%downscale) ? (i->second.surface.get_height() - 256/downscale * (y%downscale)) : 256/downscale);
+          Size s((x%downscale) ? (surface.get_width()  - 256/downscale * (x%downscale)) : 256/downscale,
+                 (y%downscale) ? (surface.get_height() - 256/downscale * (y%downscale)) : 256/downscale);
 
-          s.width  = Math::min(i->second.surface.get_width(),  s.width);
-          s.height = Math::min(i->second.surface.get_height(), s.height);
+          s.width  = Math::min(surface.get_width(),  s.width);
+          s.height = Math::min(surface.get_height(), s.height);
           
-          i->second.surface.draw(Rectf(Vector2f(x%downscale, y%downscale) * 256/downscale, 
-                                       s),
-                                 Rectf(pos, s * scale * downscale));
-          //Framebuffer::draw_rect(Rectf(pos, s * scale * downscale), RGB(255, 255, 255));
+          surface.draw(Rectf(Vector2f(x%downscale, y%downscale) * 256/downscale, 
+                             s),
+                       Rectf(pos, s * scale * downscale));
         }
-      else
-        {
-          if (downscale_factor < 6) // Make this 'max_scale' instead of random number
-            {
-              downscale_factor += 1;
-              goto retry;
-            }
-          else
-            {         
-              // give up, no lower resolution found
+      else // draw replacement rect when no tile could be loaded
+        {         
+          // Calculate the actual size of the tile (i.e. border tiles might be smaller then 256x256)
+          Size s(Math::min(256, (impl->file_entry.size.width  / Math::pow2(tiledb_scale)) - 256 * x),
+                 Math::min(256, (impl->file_entry.size.height / Math::pow2(tiledb_scale)) - 256 * y));
 
-              Size s(Math::min(256, (impl->file_entry.size.width  / Math::pow2(tiledb_scale)) - 256 * x),
-                     Math::min(256, (impl->file_entry.size.height / Math::pow2(tiledb_scale)) - 256 * y));
-
-              Framebuffer::fill_rect(Rectf(pos, s*scale),
-                                     RGB(255, 0, 255));
-            }
+          Framebuffer::fill_rect(Rectf(pos, s*scale),
+                                 RGB(255, 0, 255));
         }
     }
 }
@@ -274,6 +278,9 @@
 void
 Image::cache_cleanup()
 {
+  // FIXME: Cache cleanup should happen based on if the Tile is
+  // visible, not if the image is visible
+
   // Image is not visible, so cancel all jobs
   for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
     i->abort();

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/src/image.hpp	2008-08-29 17:48:21 UTC (rev 2367)
@@ -63,6 +63,7 @@
 
   void cache_cleanup();
   void process_queue();
+  Surface find_smaller_tile(int x, int y, int tiledb_scale, int& downscale_in);
 
 public:
   Image();

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/src/workspace.cpp	2008-08-29 17:48:21 UTC (rev 2367)
@@ -30,6 +30,7 @@
 Workspace::Workspace()
 {
   next_pos = Vector2i(0, 0);
+  row_width = 100;
 }
 
 void
@@ -41,25 +42,24 @@
                             1000.0f / file_entry.size.height));
 
   image.set_pos(next_pos * 1024.0f);
-                   
+
+  // FIXME: Ugly, instead we should relayout once a second or so
   next_pos.x += 1;
-
-  //layout(4.0f, 3.0f);
+  if (next_pos.x >= row_width)
+    {
+      next_pos.x  = 0;
+      next_pos.y += 1;
+    }
 }
 
 void
 Workspace::layout(float aspect_w, float aspect_h)
 {
   if (!images.empty())
-    {
-      //       float x_pos = 0;
-      //       for(Images::iterator i = images.begin(); i != images.end(); ++i)
-      //         {
-      //           i->set_pos(Vector2f(x_pos, 0.0f));
-      //           x_pos += i->get_width() + 128/*spacing*/;
-      //         }    
+    {     
+      int w = int(Math::sqrt(aspect_w * images.size() / aspect_h));
       
-      int w = int(Math::sqrt(aspect_w * images.size() / aspect_h));
+      row_width = w;
 
       for(int i = 0; i < int(images.size()); ++i)
         {
@@ -76,6 +76,8 @@
 
           images[i].set_pos(images[i].get_pos() + Vector2f((1000.0f - images[i].get_scaled_width()) / 2,
                                                            (1000.0f - images[i].get_scaled_height()) / 2));
+
+          next_pos = Vector2i(i % w, i / w);
         }
     }
 }

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-29 11:45:41 UTC (rev 2366)
+++ trunk/griv/src/workspace.hpp	2008-08-29 17:48:21 UTC (rev 2367)
@@ -36,6 +36,7 @@
   typedef std::vector<Image> Images;
   Images images;
   Vector2i next_pos;
+  int row_width;
   
 public:
   Workspace();



From grumbel at mail.berlios.de  Sat Aug 30 04:33:28 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 04:33:28 +0200
Subject: [Windstille-commit] r2368 - in trunk/griv: . src
Message-ID: <200808300233.m7U2XSBO015777@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 04:33:27 +0200 (Sat, 30 Aug 2008)
New Revision: 2368

Modified:
   trunk/griv/TODO
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Added dynamic image movement and changed the database format a bit

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/TODO	2008-08-30 02:33:27 UTC (rev 2368)
@@ -1,5 +1,7 @@
 [[ Griv ToDo ]]
 
+* hide mouse cursor on rejuest
+
 * build "scons configure" like stuff, see Pingus for reference
 
 * allow rotation of view, maybe later of images

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/database_thread.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -335,7 +335,6 @@
       if (queue.empty() && // FIXME UGLY: to make load on demand somewhat usable
           TileGeneratorThread::current() && !TileGeneratorThread::current()->is_working())
         {
-
           if (!tile_queue.empty())
             TileGeneratorThread::current()->request_tiles(tile_queue.back()->file_entry,
                                                           tile_queue.back()->tilescale,

Modified: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/file_entry.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -57,6 +57,10 @@
   /** The size of the image in pixels */
   Size size;
 
+  /** The maximum scale for which a tile is generated, any tile
+      smaller then this will not be generated */
+  int max_tiledb_scale;
+
   /** The average color of the image, it can also be thought of as a
       1x1 thumbnail, it is used when drawing the place holder rect
       when no Tile is available */

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/griv.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -123,8 +123,10 @@
   SQLiteConnection db(database);
 
   FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
 
   file_db.check();
+  tile_db.check();
 }
 
 void

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/image.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -48,6 +48,8 @@
 
   int min_keep_scale; 
   Vector2f pos;
+  Vector2f last_pos;
+  Vector2f target_pos;
 
   Image::Cache cache;
   Image::Jobs jobs;  
@@ -75,7 +77,7 @@
 
   int size  = Math::max(file_entry.size.width, file_entry.size.height);
   impl->min_keep_scale = 0;
-  while(size > 32) 
+  while(size > 8) 
     {
       size /= 2;
       impl->min_keep_scale +=1 ;
@@ -84,9 +86,11 @@
 }
 
 void
-Image::set_pos(const Vector2f& pos_)
+Image::set_pos(const Vector2f& pos)
 {
-  impl->pos = pos_;
+  impl->pos        = pos;
+  impl->last_pos   = pos;
+  impl->target_pos = pos;
 }
 
 Vector2f
@@ -96,6 +100,29 @@
 }
 
 void
+Image::set_target_pos(const Vector2f& target_pos)
+{
+  impl->last_pos   = impl->pos;
+  impl->target_pos = target_pos;
+}
+
+void
+Image::update_pos(float progress)
+{
+  assert(progress >= 0.0f &&
+         progress <= 1.0f);
+
+  if (progress == 1.0f)
+    {
+      set_pos(impl->target_pos);
+    }
+  else
+    {
+      impl->pos = (impl->last_pos * (1.0f - progress)) + (impl->target_pos * progress);
+    }
+}
+
+void
 Image::set_scale(float f)
 {
   impl->scale = f;

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/image.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -73,6 +73,10 @@
   void draw_tiles(const Rect& rect, int tiledb_scale, const Vector2f& pos, float scale);
   void draw(const Rectf& cliprect, float scale);
 
+  void update_pos(float progress);
+
+  void set_target_pos(const Vector2f& target_pos);
+
   void set_pos(const Vector2f& pos);
   Vector2f get_pos() const;
 

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/software_surface.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -31,9 +31,13 @@
 #include "math.hpp"
 #include "jpeg.hpp"
 #include "math/rect.hpp"
+#include "math/rgb.hpp"
 #include "math/size.hpp"
 
 #include "software_surface.hpp"
+
+// FIXME: Stuff in this file is currently written to just work, not to
+// be fast
 
 class SoftwareSurfaceImpl
 {
@@ -69,25 +73,25 @@
 }
 
 void
-SoftwareSurface::put_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b)
+SoftwareSurface::put_pixel(int x, int y, const RGB& rgb)
 {
   assert(x >= 0 && x < impl->size.width &&
          y >= 0 && y < impl->size.height);
 
-  impl->pixels[y * impl->pitch + x*3 + 0] = r;
-  impl->pixels[y * impl->pitch + x*3 + 1] = g;
-  impl->pixels[y * impl->pitch + x*3 + 2] = b;
+  impl->pixels[y * impl->pitch + x*3 + 0] = rgb.r;
+  impl->pixels[y * impl->pitch + x*3 + 1] = rgb.g;
+  impl->pixels[y * impl->pitch + x*3 + 2] = rgb.b;
 }
 
 void
-SoftwareSurface::get_pixel(int x, int y, uint8_t* r, uint8_t* g, uint8_t* b) const
+SoftwareSurface::get_pixel(int x, int y, RGB& rgb) const
 {
   assert(x >= 0 && x < impl->size.width &&
          y >= 0 && y < impl->size.height);
 
-  *r = impl->pixels[y * impl->pitch + x*3 + 0];
-  *g = impl->pixels[y * impl->pitch + x*3 + 1];
-  *b = impl->pixels[y * impl->pitch + x*3 + 2];
+  rgb.r = impl->pixels[y * impl->pitch + x*3 + 0];
+  rgb.g = impl->pixels[y * impl->pitch + x*3 + 1];
+  rgb.b = impl->pixels[y * impl->pitch + x*3 + 2];
 }
 
 SoftwareSurface
@@ -102,15 +106,15 @@
   SoftwareSurface surface(size);
   // Very much non-fast, needs replacement with proper
 
-  uint8_t r,g,b;
+  RGB rgb;
   for(int y = 0; y < surface.get_height(); ++y)
     for(int x = 0; x < surface.get_width(); ++x)
       {
         get_pixel(x * impl->size.width  / surface.impl->size.width,
                   y * impl->size.height / surface.impl->size.height,
-                  &r, &g, &b);
+                  rgb);
 
-        surface.put_pixel(x, y, r, g, b);
+        surface.put_pixel(x, y, rgb);
       }
 
   return surface;
@@ -202,5 +206,32 @@
   return impl->pixels + (y * impl->pitch);
   
 }
+
+RGB
+SoftwareSurface::get_average_color() const
+{
+  // Only works for smaller surfaces, else we would run into integer overflows
+  assert(get_width() > 256 || get_height() > 256); // random limit, but should be enough for griv
+
+  unsigned int r = 0;
+  unsigned int g = 0;
+  unsigned int b = 0;
+
+  for(int y = 0; y < get_height(); ++y)
+    for(int x = 0; x < get_width(); ++x)
+      {
+        RGB rgb;
+        get_pixel(x, y, rgb);
+
+        r += rgb.r;
+        g += rgb.g;
+        b += rgb.b;
+      }
+
+  int num_pixels = get_width() * get_height();
+  return RGB(r / num_pixels,
+             g / num_pixels,
+             b / num_pixels);
+}
   
 /* EOF */

Modified: trunk/griv/src/software_surface.hpp
===================================================================
--- trunk/griv/src/software_surface.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/software_surface.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -29,6 +29,7 @@
 #include <boost/shared_ptr.hpp>
 #include "blob.hpp"
 
+class RGB;
 class Rect;
 class Size;
 class SoftwareSurfaceImpl;
@@ -57,12 +58,14 @@
   static SoftwareSurface from_data(const Blob& blob);
   static SoftwareSurface from_file(const std::string& filename);
  
-  void put_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b);
-  void get_pixel(int x, int y, uint8_t* r, uint8_t* g, uint8_t* b) const;
+  void put_pixel(int x, int y, const RGB& rgb);
+  void get_pixel(int x, int y, RGB& rgb) const;
 
   uint8_t* get_data() const;
   uint8_t* get_row_data(int y) const;
 
+  RGB get_average_color() const;
+
   operator bool() const { return impl.get(); }
 
 private:

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/tile_database.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -32,6 +32,7 @@
   : db(db),
     store_stmt(db),
     get_stmt(db),
+    get_all_stmt(db),
     has_stmt(db)
 {
   db->exec("CREATE TABLE IF NOT EXISTS tiles ("
@@ -39,16 +40,19 @@
            "scale   INTEGER, " // zoom level
            "x       INTEGER, " // X position in tiles
            "y       INTEGER, " // Y position in tiles
-           "data    BLOB     " // the image data, JPEG
+           "data    BLOB,    " // the image data, JPEG
+           "quality INTEGER  " // the quality of the tile (default: 0)
            ");");
 
   db->exec("CREATE INDEX IF NOT EXISTS tiles_index ON tiles ( fileid, x, y, scale );");
 
   // FIXME: This is brute force and doesn't handle collisions
-  store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data) VALUES (?1, ?2, ?3, ?4, ?5);");
+  store_stmt.prepare("INSERT into tiles (fileid, scale, x, y, data, quality) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
 
   get_stmt.prepare("SELECT * FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
   has_stmt.prepare("SELECT (rowid) FROM tiles WHERE fileid = ?1 AND scale = ?2 AND x = ?3 AND y = ?4;");
+
+  get_all_stmt.prepare("SELECT * FROM tiles ORDER BY fileid;");
 }
 
 bool
@@ -90,7 +94,7 @@
       tile.pos.x   = reader.get_int (2);
       tile.pos.y   = reader.get_int (3);
 
-      // FIXME: Do this in the JPEGDecoderThread
+      // FIXME: Do this in a JPEGDecoderThread
       tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
 
       return true;
@@ -115,6 +119,7 @@
   store_stmt.bind_int (3, tile.pos.x);
   store_stmt.bind_int (4, tile.pos.y);
   store_stmt.bind_blob(5, blob);
+  store_stmt.bind_int (6, 0);
 
   store_stmt.execute();
 }
@@ -122,7 +127,18 @@
 void
 TileDatabase::check()
 {
-  
+  SQLiteReader reader = get_all_stmt.execute_query();
+
+  while(reader.next())
+    {
+      /*
+        int fileid = reader.get_int(0);
+        int scale  = reader.get_int(1);
+        int x      = reader.get_int(2);
+        int y      = reader.get_int(3);
+        Blob blob  = reader.get_blob(4);
+      */
+    }
 }
   
 /* EOF */

Modified: trunk/griv/src/tile_database.hpp
===================================================================
--- trunk/griv/src/tile_database.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/tile_database.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -32,12 +32,15 @@
 
 class TileEntry;
 
+/** 
+ */
 class TileDatabase
 {
 private:
   SQLiteConnection* db;
   SQLiteStatement store_stmt;
   SQLiteStatement get_stmt;
+  SQLiteStatement get_all_stmt;
   SQLiteStatement has_stmt;
 
 public:

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/viewer.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -231,7 +231,7 @@
 }
 
 void
-Viewer::update(float delta)
+Viewer::update(Workspace& workspace, float delta)
 {
   if (zoom_button == -1)
     {
@@ -241,6 +241,8 @@
     {
       state.zoom(1.0f + 4.0f * delta, mouse_pos);
     }
+
+  workspace.update(delta);
 }
 
 /* EOF */

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/viewer.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -73,7 +73,7 @@
   Viewer();
 
   void draw(Workspace& workspace);
-  void update(float delta);
+  void update(Workspace& workspace, float delta);
   void process_event(Workspace& workspace, const SDL_Event& event);
   bool done() const { return quit; }
 

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -86,7 +86,7 @@
       float delta = (cticks - ticks) / 1000.0f;
       ticks = cticks;
 
-      viewer.update(delta);
+      viewer.update(workspace, delta);
 
       if (1) // if something has changed, redraw
         {

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/workspace.cpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -31,6 +31,7 @@
 {
   next_pos = Vector2i(0, 0);
   row_width = 100;
+  progress = 0.0f;
 }
 
 void
@@ -63,23 +64,26 @@
 
       for(int i = 0; i < int(images.size()); ++i)
         {
+          // Offset that positions the image in the center of the 1000x1000 rectangle
+          Vector2f off((1000.0f - images[i].get_scaled_width()) / 2,
+                       (1000.0f - images[i].get_scaled_height()) / 2);
+
           if ((i/w) % 2 == 0)
             {
-              images[i].set_pos(Vector2f((i % w) * 1024.0f,
-                                         (i / w) * 1024.0f));
+              images[i].set_target_pos(Vector2f((i % w) * 1024.0f,
+                                         (i / w) * 1024.0f) + off);
             }
           else
             {
-              images[i].set_pos(Vector2f((w - (i % w)-1) * 1024.0f,
-                                         (i / w)         * 1024.0f));
+              images[i].set_target_pos(Vector2f((w - (i % w)-1) * 1024.0f,
+                                         (i / w)         * 1024.0f) + off);
             }
 
-          images[i].set_pos(images[i].get_pos() + Vector2f((1000.0f - images[i].get_scaled_width()) / 2,
-                                                           (1000.0f - images[i].get_scaled_height()) / 2));
-
           next_pos = Vector2i(i % w, i / w);
         }
     }
+
+  progress = 0.0f;
 }
 
 void
@@ -92,5 +96,22 @@
       i->draw(cliprect, scale);
     }  
 }
+
+void
+Workspace::update(float delta)
+{
+  if (progress != 1.0f)
+    {
+      progress += delta * 2.0f;
+
+      if (progress > 1.0f)
+        progress = 1.0f;
+
+      for(Images::iterator i = images.begin(); i != images.end(); ++i)
+        {
+          i->update_pos(progress);
+        }
+    }
+}
 
 /* EOF */

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-29 17:48:21 UTC (rev 2367)
+++ trunk/griv/src/workspace.hpp	2008-08-30 02:33:27 UTC (rev 2368)
@@ -37,12 +37,14 @@
   Images images;
   Vector2i next_pos;
   int row_width;
+  float progress;
   
 public:
   Workspace();
 
   void add_image(const FileEntry& file_entry);
   void draw(const Rectf& cliprect, float scale);
+  void update(float delta);
 
   void layout(float aspect_w, float aspect_h);
 



From grumbel at mail.berlios.de  Sat Aug 30 04:40:06 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 04:40:06 +0200
Subject: [Windstille-commit] r2369 - trunk/griv/src
Message-ID: <200808300240.m7U2e6qw016123@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 04:40:05 +0200 (Sat, 30 Aug 2008)
New Revision: 2369

Modified:
   trunk/griv/src/file_database.cpp
Log:
Order get_all requests

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-30 02:33:27 UTC (rev 2368)
+++ trunk/griv/src/file_database.cpp	2008-08-30 02:40:05 UTC (rev 2369)
@@ -55,7 +55,7 @@
   store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
   get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
   get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
-  get_all_stmt.prepare("SELECT * FROM files");
+  get_all_stmt.prepare("SELECT * FROM files ORDER BY filename");
 }
  
 FileDatabase::~FileDatabase()



From grumbel at mail.berlios.de  Sat Aug 30 04:50:35 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 04:50:35 +0200
Subject: [Windstille-commit] r2370 - in trunk/griv: . src
Message-ID: <200808300250.m7U2oZqp016793@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 04:50:33 +0200 (Sat, 30 Aug 2008)
New Revision: 2370

Modified:
   trunk/griv/TODO
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
Log:
Moved grid drawing code over

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-30 02:40:05 UTC (rev 2369)
+++ trunk/griv/TODO	2008-08-30 02:50:33 UTC (rev 2370)
@@ -1,6 +1,6 @@
 [[ Griv ToDo ]]
 
-* hide mouse cursor on rejuest
+* hide mouse cursor on request
 
 * build "scons configure" like stuff, see Pingus for reference
 
@@ -72,14 +72,6 @@
   can run free with database stuff
 
 
-Old Features that need to be moved:
-===================================
-
-* move dynamic image sorting/movement code over
-
-* grid drawing over to new griv 
-
-
 Possible Future Improvements:
 =============================
 

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-30 02:40:05 UTC (rev 2369)
+++ trunk/griv/src/framebuffer.cpp	2008-08-30 02:50:33 UTC (rev 2370)
@@ -174,4 +174,32 @@
   glEnd();
 }
 
+void
+Framebuffer::draw_grid(int grid_size)
+{
+  glDisable(GL_TEXTURE_RECTANGLE_ARB);
+ 
+  glBegin(GL_LINES);
+  //  if (grid_color)
+    glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
+  //else
+  //  glColor4f(0.0f, 0.0f, 0.0f, 0.5f);
+
+  for(int x = Framebuffer::get_width()/grid_size;
+      x < Framebuffer::get_width(); 
+      x += Framebuffer::get_width()/grid_size)
+    {
+      glVertex2f(x, 0);
+      glVertex2f(x, Framebuffer::get_height());
+    }
+
+  for(int y = Framebuffer::get_height()/grid_size;
+      y < Framebuffer::get_height(); y += Framebuffer::get_height()/grid_size)
+    {
+      glVertex2f(0, y);
+      glVertex2f(Framebuffer::get_width(), y);
+    }
+  glEnd();
+}
+
 /* EOF */

Modified: trunk/griv/src/framebuffer.hpp
===================================================================
--- trunk/griv/src/framebuffer.hpp	2008-08-30 02:40:05 UTC (rev 2369)
+++ trunk/griv/src/framebuffer.hpp	2008-08-30 02:50:33 UTC (rev 2370)
@@ -70,6 +70,7 @@
 
   static void draw_rect(const Rectf& rect, const RGB& rgb);
   static void fill_rect(const Rectf& rect, const RGB& rgb);
+  static void draw_grid(int grid_size);
 };
 
 #endif

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-30 02:40:05 UTC (rev 2369)
+++ trunk/griv/src/viewer.cpp	2008-08-30 02:50:33 UTC (rev 2370)
@@ -86,6 +86,7 @@
   : quit(false),
     force_redraw(false),
     drag_n_drop(false),
+    draw_grid(false),
     zoom_button(0),
     gamma(1.0f)
 {
@@ -131,6 +132,10 @@
               Framebuffer::toggle_fullscreen();
               break;
                 
+            case SDLK_g:
+              draw_grid = !draw_grid;
+              break;
+
             case SDLK_1:
               workspace.layout(4, 3);
               break;
@@ -228,6 +233,9 @@
                  state.get_scale());
 
   glPopMatrix();
+
+  if (draw_grid)
+    Framebuffer::draw_grid(3);
 }
 
 void

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-30 02:40:05 UTC (rev 2369)
+++ trunk/griv/src/viewer.hpp	2008-08-30 02:50:33 UTC (rev 2370)
@@ -62,6 +62,7 @@
   bool quit;
   bool force_redraw;
   bool drag_n_drop;
+  bool draw_grid;
   int  zoom_button;
   float gamma;
 



From grumbel at mail.berlios.de  Sat Aug 30 20:11:14 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 20:11:14 +0200
Subject: [Windstille-commit] r2371 - in trunk/griv/src: . math
Message-ID: <200808301811.m7UIBEnA026076@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 20:11:13 +0200 (Sat, 30 Aug 2008)
New Revision: 2371

Modified:
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_database.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/jpeg_decoder_thread.cpp
   trunk/griv/src/math/rgb.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/space_navigator.cpp
   trunk/griv/src/space_navigator.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
Log:
Added simplistic rotation, change database format to handle color and thumbnail in filetable

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/database_thread.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -226,6 +226,9 @@
                   // FIXME: Make some better error checking in case of loading failure
                   if (tile_msg->tile.surface)
                     {
+                      // FIXME: if (tile_msg->tile.scale == file_entry.max_scale)
+                      //   file_db.store_tile(tile_msg->tile);
+                      // else
                       tile_db.store_tile(tile_msg->tile);
                     }
                   else

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/file_database.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -32,11 +32,13 @@
 #include "filesystem.hpp"
 #include "software_surface.hpp"
 #include "file_entry.hpp"
+#include "tile_entry.hpp"
 #include "file_database.hpp"
 
 FileDatabase::FileDatabase(SQLiteConnection* db)
   : db(db),
     store_stmt(db),
+    store_tile_stmt(db),
     get_by_filename_stmt(db),
     get_all_stmt(db),
     get_by_file_id_stmt(db)
@@ -48,11 +50,15 @@
            "filesize  INTEGER, "
            "width     INTEGER, "
            "height    INTEGER, "
-           "mtime     INTEGER);");
+           "mtime     INTEGER, "
+           "color     INTEGER, "
+           "thumbnail BLOB);");
 
   db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename );");
 
   store_stmt.prepare("INSERT INTO files (filename, md5, filesize, width, height, mtime) VALUES (?1, ?2, ?3, ?4, ?5, ?6);");
+  store_tile_stmt.prepare("UPDATE files SET thumbnail=?1, color=?2 WHERE fileid=?3");
+
   get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
   get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
   get_all_stmt.prepare("SELECT * FROM files ORDER BY filename");
@@ -76,7 +82,9 @@
   store_stmt.bind_int (3, entry.filesize); 
   store_stmt.bind_int (4, entry.size.width); 
   store_stmt.bind_int (5, entry.size.height);
-  store_stmt.bind_int (6, entry.mtime); 
+  // FIXME: Should we handle them her or depend on store_tile()?
+  // store_stmt.bind_int (6, entry.color); 
+  // store_stmt.bind_int (7, entry.surface.get_raw_data()); 
 
   store_stmt.execute();
   
@@ -85,6 +93,16 @@
   return entry.fileid;
 }
 
+void
+FileDatabase::store_tile(TileEntry& entry)
+{
+  store_tile_stmt.bind_blob(1, entry.surface.get_raw_data());
+  store_tile_stmt.bind_int (2, entry.surface.get_average_color().get_uint32());
+  store_tile_stmt.bind_int (3, entry.fileid);
+
+  store_tile_stmt.execute();
+}
+
 bool
 FileDatabase::get_file_entry(const std::string& filename, FileEntry* entry)
 {
@@ -105,6 +123,8 @@
       entry->filesize    = reader.get_int (3);
       entry->size.width  = reader.get_int (4);
       entry->size.height = reader.get_int (5);
+      entry->color       = RGB(reader.get_int(6));
+      entry->surface     = SoftwareSurface::from_raw_data(reader.get_blob(7));
 
       return true;
     }

Modified: trunk/griv/src/file_database.hpp
===================================================================
--- trunk/griv/src/file_database.hpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/file_database.hpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -34,6 +34,7 @@
 #include "math/size.hpp"
 
 class FileEntry;
+class TileEntry;
 
 /** The FileDatabase keeps a record of all files that have been
     view. It keeps information on the last modification time and
@@ -48,6 +49,7 @@
 private:
   SQLiteConnection* db;
   SQLiteStatement store_stmt;
+  SQLiteStatement store_tile_stmt;
   SQLiteStatement get_by_filename_stmt;
   SQLiteStatement get_all_stmt;
   SQLiteStatement get_by_file_id_stmt;
@@ -73,6 +75,8 @@
   bool get_file_entry(const std::string& filename, FileEntry* entry);
   void get_file_entries(std::vector<FileEntry>& entries);
 
+  void store_tile(TileEntry& entry);
+
   void check();
 
 private:

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/image.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -253,8 +253,7 @@
           Size s(Math::min(256, (impl->file_entry.size.width  / Math::pow2(tiledb_scale)) - 256 * x),
                  Math::min(256, (impl->file_entry.size.height / Math::pow2(tiledb_scale)) - 256 * y));
 
-          Framebuffer::fill_rect(Rectf(pos, s*scale),
-                                 RGB(255, 0, 255));
+          Framebuffer::fill_rect(Rectf(pos, s*scale), impl->file_entry.color);
         }
     }
 }

Modified: trunk/griv/src/jpeg_decoder_thread.cpp
===================================================================
--- trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -61,7 +61,7 @@
         {
           JPEGDecoderThreadMessage msg = queue.front();
           queue.pop();
-          msg.callback(SoftwareSurface::from_data(msg.blob));
+          msg.callback(SoftwareSurface::from_jpeg_data(msg.blob));
         }
       queue.wait();
     }

Modified: trunk/griv/src/math/rgb.hpp
===================================================================
--- trunk/griv/src/math/rgb.hpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/math/rgb.hpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -42,6 +42,16 @@
   RGB(uint8_t r, uint8_t g, uint8_t b)
     : r(r), g(g), b(b)
   {}
+
+  RGB(uint32_t c)
+    : r((c>> 0) & 0xFF), 
+      g((c>> 8) & 0xFF),
+      b((c>>16) & 0xFF)
+  {}
+
+  uint32_t get_uint32() const {
+    return ((r << 0) | (g << 8) | (b << 16));
+  }
 };
 
 #endif

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/software_surface.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -182,6 +182,13 @@
   return JPEG::save(*this, 75);
 }
 
+Blob
+SoftwareSurface::get_raw_data() const
+{
+  assert(impl->pitch != impl->size.width*3);
+  return Blob(impl->pixels, impl->size.height * impl->pitch);
+}
+
 SoftwareSurface
 SoftwareSurface::from_file(const std::string& filename)
 {
@@ -189,11 +196,18 @@
 }
 
 SoftwareSurface
-SoftwareSurface::from_data(const Blob& blob)
+SoftwareSurface::from_jpeg_data(const Blob& blob)
 {
   return JPEG::load_from_mem(blob.get_data(), blob.size());
 }
 
+SoftwareSurface
+SoftwareSurface::from_raw_data(const Blob& blob)
+{
+  std::cout << "SoftwareSurface::from_raw_data(const Blob& blob): Implement me" << std::endl;
+  return SoftwareSurface();
+}
+
 uint8_t*
 SoftwareSurface::get_data() const
 {

Modified: trunk/griv/src/software_surface.hpp
===================================================================
--- trunk/griv/src/software_surface.hpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/software_surface.hpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -42,10 +42,10 @@
 
   ~SoftwareSurface();
 
-  Size get_size()  const;
-  int get_width()  const;
-  int get_height() const;
-  int get_pitch()  const;
+  Size get_size()   const;
+  int  get_width()  const;
+  int  get_height() const;
+  int  get_pitch()  const;
 
   SoftwareSurface halve() const;
   SoftwareSurface scale(const Size& size) const;
@@ -54,8 +54,10 @@
   void save(const std::string& filename) const;
   
   Blob get_jpeg_data() const;
+  Blob get_raw_data()  const;
   
-  static SoftwareSurface from_data(const Blob& blob);
+  static SoftwareSurface from_jpeg_data(const Blob& blob);
+  static SoftwareSurface from_raw_data(const Blob& blob);
   static SoftwareSurface from_file(const std::string& filename);
  
   void put_pixel(int x, int y, const RGB& rgb);

Modified: trunk/griv/src/space_navigator.cpp
===================================================================
--- trunk/griv/src/space_navigator.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/space_navigator.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -31,7 +31,8 @@
 #include "space_navigator.hpp"
 
 SpaceNavigator::SpaceNavigator()
-  : usable(false)
+  : usable(false),
+    allow_rotate(false)
 {
   if (spnav_open() != 0)
     {
@@ -88,13 +89,20 @@
                   viewer.get_state().move(Vector2f(-event.motion.x / 10.0f,
                                                    +event.motion.z / 10.0f));
 
-                  viewer.get_state().rotate(event.motion.ry / 100.0f);                                       
+                  if (allow_rotate)
+                    viewer.get_state().rotate(event.motion.ry / 200.0f);
                 }
                 break;
             
               case SPNAV_EVENT_BUTTON:
                 if (0)
-                  std::cout << "ButtonEvent: " << event.button.press << event.button.bnum << std::endl;
+                std::cout << "ButtonEvent: " << event.button.press << event.button.bnum << std::endl;
+
+                if (event.button.bnum == 0 && event.button.press)
+                  viewer.get_state().set_angle(0.0f);
+                
+                if (event.button.bnum == 1 && event.button.press)
+                  allow_rotate = !allow_rotate;
                 break;
 
               default:

Modified: trunk/griv/src/space_navigator.hpp
===================================================================
--- trunk/griv/src/space_navigator.hpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/space_navigator.hpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -32,6 +32,7 @@
 {
 private:
   bool usable;
+  bool allow_rotate;
 
 public:
   SpaceNavigator();

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/tile_database.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -95,7 +95,7 @@
       tile.pos.y   = reader.get_int (3);
 
       // FIXME: Do this in a JPEGDecoderThread
-      tile.surface = SoftwareSurface::from_data(reader.get_blob(4));
+      tile.surface = SoftwareSurface::from_jpeg_data(reader.get_blob(4));
 
       return true;
     }

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/viewer.cpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -61,10 +61,17 @@
 }
 
 void
+ViewerState::set_angle(float r)
+{
+  angle = r;
+}
+
+void
 ViewerState::move(const Vector2f& pos)
 {
-  offset.x += pos.x;
-  offset.y += pos.y;
+  // FIXME: Implement a proper 2D Matrix instead of this hackery
+  offset.x += pos.x * cosf(angle/180.0f*M_PI) +  pos.y * sinf(angle/180.0f*M_PI);
+  offset.y -= pos.x * sinf(angle/180.0f*M_PI) -  pos.y * cosf(angle/180.0f*M_PI);
 }
 
 Vector2f
@@ -131,6 +138,22 @@
             case SDLK_F11:
               Framebuffer::toggle_fullscreen();
               break;
+
+            case SDLK_LEFT:
+              state.rotate(90.0f);
+              break;
+
+            case SDLK_RIGHT:
+              state.rotate(-90.0f);
+              break;
+
+            case SDLK_UP:
+              state.set_angle(0.0f);
+              break;
+
+            case SDLK_DOWN:
+              state.set_angle(0.0f);
+              break;
                 
             case SDLK_g:
               draw_grid = !draw_grid;
@@ -220,9 +243,12 @@
       glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
     }
 
+  glTranslatef(Framebuffer::get_width()/2, Framebuffer::get_height()/2, 0.0f);
+  glRotatef(state.get_angle(), 0.0f, 0.0f, 1.0f); // Rotates around 0.0
+  glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
+
   glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
   glScalef(state.get_scale(), state.get_scale(), 1.0f);
-  //glRotatef(state.get_angle(), 0.0f, 0.0f, 1.0f);
 
   Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
 

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-30 02:50:33 UTC (rev 2370)
+++ trunk/griv/src/viewer.hpp	2008-08-30 18:11:13 UTC (rev 2371)
@@ -47,6 +47,7 @@
   void zoom(float factor);
   void move(const Vector2f& pos);
   void rotate(float r);
+  void set_angle(float r);
 
   Vector2f screen2world(const Vector2i&) const;
   Rectf    screen2world(const Rect&) const;



From grumbel at mail.berlios.de  Sat Aug 30 21:43:45 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 21:43:45 +0200
Subject: [Windstille-commit] r2372 - trunk/griv/src
Message-ID: <200808301943.m7UJhjS5032484@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 21:43:44 +0200 (Sat, 30 Aug 2008)
New Revision: 2372

Modified:
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
Log:
Grid drawing cleanup

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-30 18:11:13 UTC (rev 2371)
+++ trunk/griv/src/framebuffer.cpp	2008-08-30 19:43:44 UTC (rev 2372)
@@ -175,7 +175,7 @@
 }
 
 void
-Framebuffer::draw_grid(int grid_size)
+Framebuffer::draw_grid(int num_cells)
 {
   glDisable(GL_TEXTURE_RECTANGLE_ARB);
  
@@ -185,20 +185,20 @@
   //else
   //  glColor4f(0.0f, 0.0f, 0.0f, 0.5f);
 
-  for(int x = Framebuffer::get_width()/grid_size;
-      x < Framebuffer::get_width(); 
-      x += Framebuffer::get_width()/grid_size)
-    {
-      glVertex2f(x, 0);
-      glVertex2f(x, Framebuffer::get_height());
-    }
+    int cell_width = Framebuffer::get_width()/num_cells;
+    for(int x = 1; x < num_cells; ++x)
+      {
+        glVertex2f(x*cell_width, 0);
+        glVertex2f(x*cell_width, Framebuffer::get_height());
+      }
 
-  for(int y = Framebuffer::get_height()/grid_size;
-      y < Framebuffer::get_height(); y += Framebuffer::get_height()/grid_size)
-    {
-      glVertex2f(0, y);
-      glVertex2f(Framebuffer::get_width(), y);
-    }
+    int cell_height = Framebuffer::get_height()/num_cells;
+    for(int y = 1; y < num_cells; ++y)
+      {
+        glVertex2f(0, y*cell_height);
+        glVertex2f(Framebuffer::get_width(), y*cell_height);
+      }
+
   glEnd();
 }
 

Modified: trunk/griv/src/framebuffer.hpp
===================================================================
--- trunk/griv/src/framebuffer.hpp	2008-08-30 18:11:13 UTC (rev 2371)
+++ trunk/griv/src/framebuffer.hpp	2008-08-30 19:43:44 UTC (rev 2372)
@@ -70,7 +70,7 @@
 
   static void draw_rect(const Rectf& rect, const RGB& rgb);
   static void fill_rect(const Rectf& rect, const RGB& rgb);
-  static void draw_grid(int grid_size);
+  static void draw_grid(int num_cells);
 };
 
 #endif



From grumbel at mail.berlios.de  Sat Aug 30 21:44:22 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 21:44:22 +0200
Subject: [Windstille-commit] r2373 - in trunk/griv/src: . math
Message-ID: <200808301944.m7UJiMuj032533@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 21:44:21 +0200 (Sat, 30 Aug 2008)
New Revision: 2373

Modified:
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/math/rect.hpp
   trunk/griv/src/sqlite.cpp
   trunk/griv/src/sqlite.hpp
   trunk/griv/src/viewer.cpp
Log:
Some better handling of NULL entries in table, adjust cliprect when stuff is rotated

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/database_thread.cpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -226,9 +226,9 @@
                   // FIXME: Make some better error checking in case of loading failure
                   if (tile_msg->tile.surface)
                     {
-                      // FIXME: if (tile_msg->tile.scale == file_entry.max_scale)
-                      //   file_db.store_tile(tile_msg->tile);
-                      // else
+                      //if (tile_msg->tile.scale == file_entry.max_scale)
+                      //  file_db.store_tile(tile_msg->tile);
+                      //else
                       tile_db.store_tile(tile_msg->tile);
                     }
                   else

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/file_database.cpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -52,7 +52,8 @@
            "height    INTEGER, "
            "mtime     INTEGER, "
            "color     INTEGER, "
-           "thumbnail BLOB);");
+           "thumbnail BLOB,"
+           "thumbnail_scale INTEGER);");
 
   db->exec("CREATE UNIQUE INDEX IF NOT EXISTS files_index ON files ( filename );");
 
@@ -82,9 +83,11 @@
   store_stmt.bind_int (3, entry.filesize); 
   store_stmt.bind_int (4, entry.size.width); 
   store_stmt.bind_int (5, entry.size.height);
-  // FIXME: Should we handle them her or depend on store_tile()?
+  // FIXME: Should we handle them here or depend on store_tile()?
   // store_stmt.bind_int (6, entry.color); 
   // store_stmt.bind_int (7, entry.surface.get_raw_data()); 
+  
+  store_stmt.bind_int (8, entry.thumbnail_scale);
 
   store_stmt.execute();
   
@@ -123,8 +126,9 @@
       entry->filesize    = reader.get_int (3);
       entry->size.width  = reader.get_int (4);
       entry->size.height = reader.get_int (5);
-      entry->color       = RGB(reader.get_int(6));
-      entry->surface     = SoftwareSurface::from_raw_data(reader.get_blob(7));
+      entry->color       = reader.is_null(6) ? RGB(155,0,155) : RGB(reader.get_int(6));
+      entry->thumbnail   = reader.is_null(7) ? SoftwareSurface() : SoftwareSurface::from_raw_data(reader.get_blob(7));
+      entry->thumbnail_scale = reader.get_int(8);
 
       return true;
     }
@@ -134,8 +138,11 @@
       entry->filename = filename;
       entry->filesize = Filesystem::get_size(filename);
       entry->mtime    = Filesystem::get_mtime(filename);
-      
+     
       entry->size = Size(-1, -1);
+
+      entry->color    = RGB(155,0,155);
+      entry->thumbnail = SoftwareSurface();
       
       if (JPEG::get_size(entry->filename, entry->size))
         {
@@ -164,6 +171,8 @@
       entry.size.width  = reader.get_int (4);
       entry.size.height = reader.get_int (5);
       entry.mtime       = reader.get_int (6);
+      entry.color       = reader.is_null(6) ? RGB(155,0,155) : RGB(reader.get_int(6));
+      entry.thumbnail   = reader.is_null(7) ? SoftwareSurface() : SoftwareSurface::from_raw_data(reader.get_blob(7));
 
       entries.push_back(entry);
     }

Modified: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/file_entry.hpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -57,10 +57,6 @@
   /** The size of the image in pixels */
   Size size;
 
-  /** The maximum scale for which a tile is generated, any tile
-      smaller then this will not be generated */
-  int max_tiledb_scale;
-
   /** The average color of the image, it can also be thought of as a
       1x1 thumbnail, it is used when drawing the place holder rect
       when no Tile is available */
@@ -70,7 +66,11 @@
       consume more more diskspace then the filename, so it makes a
       good lower bound, it also the point at which the pixel data
       stored raw consumes less space then a JPEG compressed file */
-  SoftwareSurface surface;
+  SoftwareSurface thumbnail;
+
+  /** The maximum scale for which a tile is generated, any tile
+      smaller then this will not be generated */
+  int thumbnail_scale;
 };
 
 std::ostream& operator<<(std::ostream& os, const FileEntry& entry);

Modified: trunk/griv/src/math/rect.hpp
===================================================================
--- trunk/griv/src/math/rect.hpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/math/rect.hpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -31,9 +31,11 @@
 #define __MATH_RECT_HPP__
 
 #include <iosfwd>
+#include <math.h>
 #include "../math.hpp"
 #include "origin.hpp"
 #include "vector3f.hpp"
+#include "vector2f.hpp"
 #include "size.hpp"
 
 class Rectf;
@@ -353,6 +355,17 @@
                  Math::min(right,  cliprect.right),
                  Math::min(bottom, cliprect.bottom));
   }
+
+  float get_diagonal() const
+  {
+    return sqrtf((get_width() * get_width()) + (get_height() * get_height()));
+  }
+
+  Vector2f get_center() const
+  {
+    return Vector2f((left + right) / 2.0f,
+                    (top  + bottom) / 2.0f);
+  }
 };
 
 inline Rect::Rect(const Rectf& rect)

Modified: trunk/griv/src/sqlite.cpp
===================================================================
--- trunk/griv/src/sqlite.cpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/sqlite.cpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -266,6 +266,18 @@
   return sqlite3_column_int(stmt, column);
 }
 
+bool
+SQLiteReader::is_null(int column)
+{
+  return sqlite3_column_type(stmt, column) == SQLITE_NULL;
+}
+
+int
+SQLiteReader::get_type(int column)
+{
+  return sqlite3_column_type(stmt, column);
+}
+
 std::string
 SQLiteReader::get_text(int column)
 {

Modified: trunk/griv/src/sqlite.hpp
===================================================================
--- trunk/griv/src/sqlite.hpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/sqlite.hpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -74,6 +74,8 @@
 
   bool next();
 
+  bool        is_null(int column);
+  int         get_type(int column);
   int         get_int(int column);
   std::string get_text(int column);
   Blob        get_blob(int column);

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-30 19:43:44 UTC (rev 2372)
+++ trunk/griv/src/viewer.cpp	2008-08-30 19:44:21 UTC (rev 2373)
@@ -24,6 +24,7 @@
 */
 
 #include <iostream>
+#include <math.h>
 #include "math/rgb.hpp"
 #include "framebuffer.hpp"
 #include "software_surface.hpp"
@@ -243,15 +244,28 @@
       glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
     }
 
-  glTranslatef(Framebuffer::get_width()/2, Framebuffer::get_height()/2, 0.0f);
-  glRotatef(state.get_angle(), 0.0f, 0.0f, 1.0f); // Rotates around 0.0
-  glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
+  Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
 
+  if (state.get_angle() != 0.0f)
+    {
+      glTranslatef(Framebuffer::get_width()/2, Framebuffer::get_height()/2, 0.0f);
+      glRotatef(state.get_angle(), 0.0f, 0.0f, 1.0f); // Rotates around 0.0
+      glTranslatef(-Framebuffer::get_width()/2, -Framebuffer::get_height()/2, 0.0f);
+
+      // FIXME: We enlarge the cliprect so much that we can rotate
+      // freely, however this enlargement creates a cliprect that
+      // might be quite a bit larger then what is really needed
+      float  diagonal = cliprect.get_diagonal();
+      Vector2f center = cliprect.get_center();
+      cliprect.left   = center.x - diagonal;
+      cliprect.right  = center.x + diagonal;
+      cliprect.top    = center.y - diagonal;
+      cliprect.bottom = center.y + diagonal;
+    }
+
   glTranslatef(state.get_offset().x, state.get_offset().y, 0.0f);
   glScalef(state.get_scale(), state.get_scale(), 1.0f);
 
-  Rectf cliprect = state.screen2world(Rect(0, 0, Framebuffer::get_width(), Framebuffer::get_height())); 
-
   if (clip_debug)
     Framebuffer::draw_rect(cliprect, RGB(255, 0, 255));
   



From grumbel at mail.berlios.de  Sat Aug 30 23:43:52 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 30 Aug 2008 23:43:52 +0200
Subject: [Windstille-commit] r2374 - trunk/griv/src
Message-ID: <200808302143.m7ULhqdn012853@sheep.berlios.de>

Author: grumbel
Date: 2008-08-30 23:43:51 +0200 (Sat, 30 Aug 2008)
New Revision: 2374

Modified:
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/math.hpp
   trunk/griv/src/sqlite.cpp
   trunk/griv/src/sqlite.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/tile_entry.hpp
   trunk/griv/src/tile_generator_thread.hpp
Log:
Some more code, maybe some more bugs

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/database_thread.cpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -26,6 +26,7 @@
 #include <iostream>
 #include <boost/bind.hpp>
 #include <assert.h>
+#include "math.hpp"
 #include "file_database.hpp"
 #include "tile_database.hpp"
 #include "tile_generator_thread.hpp"
@@ -213,8 +214,9 @@
                         {
                           (*i)->callback(tile_msg->tile);
 
+                          // FIXME: Correct!?
+
                           delete *i;
-
                           i = tile_queue.erase(i);
                         }
                       else
@@ -226,10 +228,11 @@
                   // FIXME: Make some better error checking in case of loading failure
                   if (tile_msg->tile.surface)
                     {
-                      //if (tile_msg->tile.scale == file_entry.max_scale)
-                      //  file_db.store_tile(tile_msg->tile);
+                      // FIXME: Need file_entry object for this:
+                      //if (tile_msg->tile.scale == file_entry.thumbnail_scale)
+                        //  file_db.store_tile(tile_msg->tile);
                       //else
-                      tile_db.store_tile(tile_msg->tile);
+                        tile_db.store_tile(tile_msg->tile);
                     }
                   else
                     {
@@ -339,10 +342,41 @@
           TileGeneratorThread::current() && !TileGeneratorThread::current()->is_working())
         {
           if (!tile_queue.empty())
-            TileGeneratorThread::current()->request_tiles(tile_queue.back()->file_entry,
-                                                          tile_queue.back()->tilescale,
-                                                          tile_queue.back()->tilescale,
-                                                          boost::bind(&DatabaseThread::receive_tile, this, _1));
+            {
+              // FIXME: Either buggy or not syncronized
+              TileDatabaseMessage& msg = *tile_queue.back();
+
+              int max_scale = msg.tilescale;
+
+              bool tiles_missing;
+              do
+                {
+                  tiles_missing = false;
+
+                  int width  = Math::ceil_div(msg.file_entry.size.width  / Math::pow2(max_scale), 256);
+                  int height = Math::ceil_div(msg.file_entry.size.height / Math::pow2(max_scale), 256);
+
+                  for(int y = 0; y < height; ++y)
+                    for(int x = 0; x < width; ++x)
+                      {
+                        if (!tile_db.has_tile(msg.file_entry.fileid, Vector2i(x,y), max_scale+1))
+                          {
+                            tiles_missing = true;
+                            max_scale += 1;
+                            goto here;
+                          }
+                      }
+
+                here:
+                  ;
+                }
+              while(tiles_missing && max_scale < msg.file_entry.thumbnail_scale);
+              
+              TileGeneratorThread::current()->request_tiles(msg.file_entry,
+                                                            msg.tilescale,
+                                                            max_scale,
+                                                            boost::bind(&DatabaseThread::receive_tile, this, _1));
+            }
         }
     }
 

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/file_database.cpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -28,6 +28,7 @@
 #include <stdexcept>
 
 #include <assert.h>
+#include "math.hpp"
 #include "jpeg.hpp"
 #include "filesystem.hpp"
 #include "software_surface.hpp"
@@ -73,8 +74,6 @@
 int
 FileDatabase::store_file_entry(FileEntry& entry)
 {
-  assert(entry.fileid == -1);
-
   store_stmt.bind_text(1, entry.filename);
   if (entry.md5.empty())
     store_stmt.bind_null(2);
@@ -86,8 +85,7 @@
   // FIXME: Should we handle them here or depend on store_tile()?
   // store_stmt.bind_int (6, entry.color); 
   // store_stmt.bind_int (7, entry.surface.get_raw_data()); 
-  
-  store_stmt.bind_int (8, entry.thumbnail_scale);
+  // store_stmt.bind_int (8, entry.thumbnail_scale);
 
   store_stmt.execute();
   
@@ -106,6 +104,20 @@
   store_tile_stmt.execute();
 }
 
+int get_thumbnail_scale(const Size& size)
+{
+  int s = Math::max(size.width, size.height);
+  int i = 0;
+  
+  while(s > 8)
+    {
+      s /= 2;
+      i += 1;
+    }
+
+  return i;
+}
+
 bool
 FileDatabase::get_file_entry(const std::string& filename, FileEntry* entry)
 {
@@ -128,7 +140,7 @@
       entry->size.height = reader.get_int (5);
       entry->color       = reader.is_null(6) ? RGB(155,0,155) : RGB(reader.get_int(6));
       entry->thumbnail   = reader.is_null(7) ? SoftwareSurface() : SoftwareSurface::from_raw_data(reader.get_blob(7));
-      entry->thumbnail_scale = reader.get_int(8);
+      entry->thumbnail_scale = reader.is_null(8) ? get_thumbnail_scale(entry->size) : reader.get_int(8);
 
       return true;
     }
@@ -147,6 +159,7 @@
       if (JPEG::get_size(entry->filename, entry->size))
         {
           store_file_entry(*entry);
+          entry->thumbnail_scale = get_thumbnail_scale(entry->size);
           return true;
         }
       else
@@ -173,6 +186,7 @@
       entry.mtime       = reader.get_int (6);
       entry.color       = reader.is_null(6) ? RGB(155,0,155) : RGB(reader.get_int(6));
       entry.thumbnail   = reader.is_null(7) ? SoftwareSurface() : SoftwareSurface::from_raw_data(reader.get_blob(7));
+      entry.thumbnail_scale = reader.is_null(8) ? get_thumbnail_scale(entry.size) : reader.get_int(8);
 
       entries.push_back(entry);
     }

Modified: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/file_entry.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -37,7 +37,7 @@
 public:
   /** Unique id by which one can refer to this FileEntry, used in the
       'tile' table in the database */
-  int fileid;
+  uint32_t fileid;
 
   /** The absolute filename of the image file */
   std::string filename; 

Modified: trunk/griv/src/math.hpp
===================================================================
--- trunk/griv/src/math.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/math.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -124,6 +124,12 @@
   return (n > 0) && ((n & (n - 1)) == 0);
 }
 
+/** Does a/b and rounds the result up */
+inline int ceil_div(int a, int b)
+{
+  return (a + b - 1) / b;
+}
+
 } // namespace Math
 
 #endif

Modified: trunk/griv/src/sqlite.cpp
===================================================================
--- trunk/griv/src/sqlite.cpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/sqlite.cpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -126,6 +126,8 @@
 void
 SQLiteStatement::prepare(const std::string& sqlstmt)
 {
+  stmt_str = sqlstmt;
+
   if (sqlite3_prepare_v2(db->get_db(), sqlstmt.c_str(), -1, &stmt,  0)
       != SQLITE_OK)
     {
@@ -142,6 +144,7 @@
     {
       std::ostringstream str;
       str << "SQLiteStatement::bind_int: " << sqlite3_errmsg(db->get_db());
+      str << "\n" << stmt_str;
       throw SQLiteError(str.str());
     }
 }

Modified: trunk/griv/src/sqlite.hpp
===================================================================
--- trunk/griv/src/sqlite.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/sqlite.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -88,6 +88,7 @@
 private:
   SQLiteConnection* db;
   sqlite3_stmt*   stmt;
+  std::string     stmt_str;
 
   void reset();
   
@@ -106,6 +107,8 @@
   void execute();
   SQLiteReader execute_query();
 
+  std::string str() const { return stmt_str; }
+
 private:
   SQLiteStatement(const SQLiteStatement&);
   SQLiteStatement();

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/tile_database.cpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -56,7 +56,7 @@
 }
 
 bool
-TileDatabase::has_tile(uint32_t fileid, Vector2i& pos, int scale)
+TileDatabase::has_tile(uint32_t fileid, const Vector2i& pos, int scale)
 {
   has_stmt.bind_int(1, fileid);
   has_stmt.bind_int(2, scale);
@@ -132,7 +132,7 @@
   while(reader.next())
     {
       /*
-        int fileid = reader.get_int(0);
+        uint32_t fileid = reader.get_int(0);
         int scale  = reader.get_int(1);
         int x      = reader.get_int(2);
         int y      = reader.get_int(3);

Modified: trunk/griv/src/tile_database.hpp
===================================================================
--- trunk/griv/src/tile_database.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/tile_database.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -46,7 +46,7 @@
 public:
   TileDatabase(SQLiteConnection* db);
   
-  bool has_tile(uint32_t file_id, Vector2i& pos, int scale);
+  bool has_tile(uint32_t file_id, const Vector2i& pos, int scale);
   bool get_tile(uint32_t file_id, int scale, const Vector2i& pos, TileEntry& tile);
   void store_tile(const TileEntry& tile);
   void check();

Modified: trunk/griv/src/tile_entry.hpp
===================================================================
--- trunk/griv/src/tile_entry.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/tile_entry.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -32,7 +32,7 @@
 class TileEntry
 {
 public:
-  int      fileid; // FIXME: Can we replace this with a FileEntry object?!
+  uint32_t fileid; // FIXME: Can we replace this with a FileEntry object?!
   int      scale;
   Vector2i pos;
   SoftwareSurface surface;
@@ -40,7 +40,7 @@
   TileEntry()
   {}
 
-  TileEntry(int fileid_, int scale_, const Vector2i& pos_, const SoftwareSurface& surface_)
+  TileEntry(uint32_t fileid_, int scale_, const Vector2i& pos_, const SoftwareSurface& surface_)
     : fileid(fileid_),
       scale(scale_),
       pos(pos_),

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-30 19:44:21 UTC (rev 2373)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-30 21:43:51 UTC (rev 2374)
@@ -59,7 +59,7 @@
 
   int min_scale;
   int max_scale;
-  int fileid;
+  uint32_t fileid;
 
 protected:
   int run();



From grumbel at mail.berlios.de  Sun Aug 31 02:56:08 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 31 Aug 2008 02:56:08 +0200
Subject: [Windstille-commit] r2375 - trunk/griv/src
Message-ID: <200808310056.m7V0u8rL018752@sheep.berlios.de>

Author: grumbel
Date: 2008-08-31 02:56:06 +0200 (Sun, 31 Aug 2008)
New Revision: 2375

Modified:
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Fixed issue with tile cache not getting cleared, added some debugging output functions

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-30 21:43:51 UTC (rev 2374)
+++ trunk/griv/src/image.cpp	2008-08-31 00:56:06 UTC (rev 2375)
@@ -52,6 +52,8 @@
   Vector2f target_pos;
 
   Image::Cache cache;
+
+  /** FIXME: Jobs array does not get cleared after jobs are done */
   Image::Jobs jobs;  
 
   ThreadMessageQueue<TileEntry> tile_queue;
@@ -77,7 +79,7 @@
 
   int size  = Math::max(file_entry.size.width, file_entry.size.height);
   impl->min_keep_scale = 0;
-  while(size > 8) 
+  while(size > 32) 
     {
       size /= 2;
       impl->min_keep_scale +=1 ;
@@ -323,15 +325,31 @@
   // will lead to unnecessary loading artifacts.      
   for(Cache::iterator i = impl->cache.begin(); i != impl->cache.end(); ++i)
     {
-      int tiledb_scale = (i->first >> 16); // get scale
-      if (tiledb_scale > impl->min_keep_scale)
-        {
-          impl->cache.erase(i);
-        }
+      int tiledb_scale = (i->first >> 16);
+      if (tiledb_scale < impl->min_keep_scale)
+        impl->cache.erase(i);
     }
 }
 
 void
+Image::clear_cache()
+{
+ for(Jobs::iterator i = impl->jobs.begin(); i != impl->jobs.end(); ++i)
+    i->abort();
+  impl->jobs.clear();
+
+  impl->cache.clear();
+}
+
+void
+Image::print_info()
+{
+  std::cout << "  Image: " << impl.get() << std::endl;
+  std::cout << "    Cache Size: " << impl->cache.size() << std::endl;
+  std::cout << "    Job Size:   " << impl->jobs.size() << std::endl;
+}
+
+void
 Image::draw(const Rectf& cliprect, float fscale)
 {
   process_queue();

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-30 21:43:51 UTC (rev 2374)
+++ trunk/griv/src/image.hpp	2008-08-31 00:56:06 UTC (rev 2375)
@@ -61,7 +61,6 @@
 private:
   Surface get_tile(int x, int y, int tile_scale);
 
-  void cache_cleanup();
   void process_queue();
   Surface find_smaller_tile(int x, int y, int tiledb_scale, int& downscale_in);
 
@@ -89,6 +88,10 @@
   int get_original_width() const;
   int get_original_height() const;
 
+  void clear_cache();
+  void cache_cleanup();
+  void print_info();
+
   operator bool() const { return impl.get(); }
 
   /** Syncronized function to require data from other threads */

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-30 21:43:51 UTC (rev 2374)
+++ trunk/griv/src/viewer.cpp	2008-08-31 00:56:06 UTC (rev 2375)
@@ -156,6 +156,20 @@
               state.set_angle(0.0f);
               break;
                 
+            case SDLK_c:
+              std::cout << "Workspace: Clearing cache" << std::endl;
+              workspace.clear_cache();
+              break;
+
+            case SDLK_k:
+              std::cout << "Workspace: Cache Cleanup" << std::endl;
+              workspace.cache_cleanup();
+              break;
+
+            case SDLK_i:
+              workspace.print_info();
+              break;
+
             case SDLK_g:
               draw_grid = !draw_grid;
               break;

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-30 21:43:51 UTC (rev 2374)
+++ trunk/griv/src/workspace.cpp	2008-08-31 00:56:06 UTC (rev 2375)
@@ -113,5 +113,36 @@
         }
     }
 }
+
+void
+Workspace::clear_cache()
+{
+  for(Images::iterator i = images.begin(); i != images.end(); ++i)
+    {
+      i->clear_cache();
+    }  
+}
+
+void
+Workspace::cache_cleanup()
+{
+  for(Images::iterator i = images.begin(); i != images.end(); ++i)
+    {
+      i->cache_cleanup();
+    }   
+}
+
+void
+Workspace::print_info()
+{
+  std::cout << "-------------------------------------------------------" << std::endl;
+  std::cout << "Workspace Info:" << std::endl;
+  std::cout << "  Number of Images: " << images.size() << std::endl;
+  for(Images::iterator i = images.begin(); i != images.end(); ++i)
+    {
+      i->print_info();
+    }
+  std::cout << "-------------------------------------------------------" << std::endl;
+}
 
 /* EOF */

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-30 21:43:51 UTC (rev 2374)
+++ trunk/griv/src/workspace.hpp	2008-08-31 00:56:06 UTC (rev 2375)
@@ -47,7 +47,9 @@
   void update(float delta);
 
   void layout(float aspect_w, float aspect_h);
-
+  void clear_cache();
+  void cache_cleanup();
+  void print_info();
 private:
   Workspace (const Workspace&);
   Workspace& operator= (const Workspace&);



From grumbel at mail.berlios.de  Sun Aug 31 11:45:01 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 31 Aug 2008 11:45:01 +0200
Subject: [Windstille-commit] r2376 - trunk/griv/src
Message-ID: <200808310945.m7V9j1UN017651@sheep.berlios.de>

Author: grumbel
Date: 2008-08-31 11:45:01 +0200 (Sun, 31 Aug 2008)
New Revision: 2376

Modified:
   trunk/griv/src/image.cpp
Log:
Fixed 'job rejection' issue, caused by wrong divison

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-31 00:56:06 UTC (rev 2375)
+++ trunk/griv/src/image.cpp	2008-08-31 09:45:01 UTC (rev 2376)
@@ -172,6 +172,7 @@
       // pointer might disappear any time, its only the impl that
       // stays and which we can link to by making a copy of the Image
       // object via *this.
+      //std::cout << "  Requesting: " << impl->file_entry.size << " " << x << "x" << y << " scale: " << tile_scale << std::endl;
       impl->jobs.push_back(DatabaseThread::current()->request_tile(impl->file_entry, tile_scale, Vector2i(x, y), 
                                                                    boost::bind(&Image::receive_tile, *this, _1)));
 
@@ -264,6 +265,8 @@
 Image::draw_tiles(const Rect& rect, int tiledb_scale, 
                   const Vector2f& pos, float scale)
 {
+  //std::cout << " drawtiles: " << rect << " scale: " << tiledb_scale << std::endl;
+
   float tilesize = 256.0f * scale;
 
   for(int y = rect.top; y < rect.bottom; ++y)
@@ -388,11 +391,11 @@
 
           int   itilesize = 256 * scale_factor;
           
-          int start_x = (image_region.left)  / itilesize;
-          int end_x   = (image_region.right) / itilesize + 1;
+          int start_x = image_region.left  / itilesize;
+          int end_x   = Math::ceil_div(image_region.right, itilesize);
 
-          int start_y = (image_region.top   ) / itilesize;
-          int end_y   = (image_region.bottom) / itilesize + 1;
+          int start_y = image_region.top / itilesize;
+          int end_y   = Math::ceil_div(image_region.bottom, itilesize);
 
           draw_tiles(Rect(start_x, start_y, end_x, end_y), 
                      tiledb_scale, 
@@ -402,6 +405,12 @@
     }
 }
 
+std::string
+Image::get_filename() const
+{
+  return impl->file_entry.filename;
+}
+
 
 void
 Image::receive_tile(const TileEntry& tile)



From grumbel at mail.berlios.de  Sun Aug 31 14:03:23 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 31 Aug 2008 14:03:23 +0200
Subject: [Windstille-commit] r2377 - in trunk/griv: . src
Message-ID: <200808311203.m7VC3N0k024526@sheep.berlios.de>

Author: grumbel
Date: 2008-08-31 14:03:21 +0200 (Sun, 31 Aug 2008)
New Revision: 2377

Modified:
   trunk/griv/TODO
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
   trunk/griv/src/griv.cpp
   trunk/griv/src/griv.hpp
   trunk/griv/src/image.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Added fullscreen and geometry options, moved sorting to Workspace

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/TODO	2008-08-31 12:03:21 UTC (rev 2377)
@@ -1,11 +1,16 @@
 [[ Griv ToDo ]]
 
+* trackball control
+
+* add more command line options:
+
+  --aspect
+  --select (?)
+
 * hide mouse cursor on request
 
 * build "scons configure" like stuff, see Pingus for reference
 
-* allow rotation of view, maybe later of images
-
 * save color or a 8x8 thumbnail in the FileEntry, for faster loading, also save 1x1 Color in FileEntry
 
 * store the max_tile size into the FileTable
@@ -101,7 +106,12 @@
 
 * Grayscale JPEGs aren't supported either (easy to fix)
 
+* allow rotation of images
 
+* record how long an image has been viewed and allow to display which
+  images have been viewed most
+
+
 Random Notes:
 =============
 

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/database_thread.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -206,6 +206,12 @@
                 {
                   StoreTileDatabaseMessage* tile_msg = static_cast<StoreTileDatabaseMessage*>(msg);
                   
+                  if (0)
+                  std::cout << "Received Tile: "
+                            << tile_msg->tile.fileid << " pos: " 
+                            << tile_msg->tile.pos  << " scale: " 
+                            << tile_msg->tile.scale << std::endl;
+
                   for(std::list<TileDatabaseMessage*>::iterator i = tile_queue.begin(); i != tile_queue.end();)
                     {
                       if (tile_msg->tile.fileid == (*i)->file_entry.fileid &&

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/file_database.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -63,7 +63,7 @@
 
   get_by_filename_stmt.prepare("SELECT * FROM files WHERE filename = ?1;");
   get_by_file_id_stmt.prepare("SELECT * FROM files WHERE rowid = ?1;");
-  get_all_stmt.prepare("SELECT * FROM files ORDER BY filename");
+  get_all_stmt.prepare("SELECT * FROM files");
 }
  
 FileDatabase::~FileDatabase()

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/framebuffer.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -37,7 +37,7 @@
 Size Framebuffer::desktop_resolution;
 
 void
-Framebuffer::set_video_mode(const Size& size)
+Framebuffer::set_video_mode(const Size& size, bool fullscreen)
 {
   assert(screen == 0);
 
@@ -54,8 +54,17 @@
   desktop_resolution = Size(info->current_w, info->current_h);
 
   flags = SDL_RESIZABLE | SDL_OPENGL;
-  screen = SDL_SetVideoMode(800, 600, 0, flags);
 
+  if (fullscreen)
+    {
+      flags |= SDL_FULLSCREEN;
+      screen = SDL_SetVideoMode(desktop_resolution.width, desktop_resolution.height, 0, flags);
+    }
+  else
+    {
+      screen = SDL_SetVideoMode(size.width, size.height, 0, flags);
+    }
+
   if (screen == NULL) 
     {
       std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;

Modified: trunk/griv/src/framebuffer.hpp
===================================================================
--- trunk/griv/src/framebuffer.hpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/framebuffer.hpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -56,7 +56,7 @@
   static Size desktop_resolution;
 
 public:
-  static void set_video_mode(const Size& size);
+  static void set_video_mode(const Size& size, bool fullscreen);
 
   static void toggle_fullscreen();
 

Modified: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/griv.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -53,6 +53,8 @@
 #include "griv.hpp"
 
 Griv::Griv()
+  : fullscreen(false),
+    geometry(800, 600)
 {
   Filesystem::init();
 }
@@ -228,7 +230,7 @@
   JPEGDecoderThread   jpeg_thread;
   DatabaseThread      database_thread(database);
   TileGeneratorThread tile_generator_thread;
-  ViewerThread        viewer_thread;
+  ViewerThread        viewer_thread(geometry, fullscreen);
 
   jpeg_thread.start();
   database_thread.start();
@@ -282,6 +284,8 @@
                 << "\n"
                 << "Options:\n"
                 << "  -d, --database FILE    Use FILE has database (default: test.sqlite)\n"
+                << "  -f, --fullscreen       Start in fullscreen mode\n"
+                << "  -g, --geometry WxH     Start with window size WxH\n"        
                 << "\n"
                 << "If you do not supply any files, the whole content of the given database will be displayed."
                 << std::endl;
@@ -326,6 +330,20 @@
                       throw std::runtime_error(std::string(argv[i-1]) + " requires an argument");
                     }
                 }
+              else if (strcmp(argv[i], "--geometry") == 0 ||
+                       strcmp(argv[i], "-g") == 0)
+                {
+                  i += 1;
+                  if (i < argc)
+                    sscanf(argv[i], "%dx%d", &geometry.width, &geometry.height);
+                  else
+                    throw std::runtime_error(std::string("Option ") + argv[i-1] + " requires an argument");
+                }
+              else if (strcmp(argv[i], "--fullscreen") == 0 ||
+                       strcmp(argv[i], "-f") == 0)
+                {
+                  fullscreen = true;
+                }
               else
                 {
                   throw std::runtime_error("Unknown option " + std::string(argv[i]));

Modified: trunk/griv/src/griv.hpp
===================================================================
--- trunk/griv/src/griv.hpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/griv.hpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -20,10 +20,15 @@
 
 #ifndef HEADER_GRIV_HPP
 #define HEADER_GRIV_HPP
+
+#include "math/size.hpp"
 
 class Griv
 {
 private:
+  bool fullscreen;
+  Size geometry;
+
 public:
   Griv();
   ~Griv();

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/image.hpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -92,6 +92,8 @@
   void cache_cleanup();
   void print_info();
 
+  std::string get_filename() const;
+
   operator bool() const { return impl.get(); }
 
   /** Syncronized function to require data from other threads */

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/viewer.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -166,6 +166,10 @@
               workspace.cache_cleanup();
               break;
 
+            case SDLK_s:
+              workspace.sort();
+              break;
+
             case SDLK_i:
               workspace.print_info();
               break;

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -35,7 +35,9 @@
 
 ViewerThread* ViewerThread::current_ = 0;
 
-ViewerThread::ViewerThread()
+ViewerThread::ViewerThread(const Size& geometry, bool fullscreen)
+  : geometry(geometry),
+    fullscreen(fullscreen)
 {
   current_ = this;
 }
@@ -55,7 +57,7 @@
 {
   Workspace workspace;
 
-  Framebuffer::set_video_mode(Size(800, 600));
+  Framebuffer::set_video_mode(geometry, fullscreen);
 
   workspace.layout(4,3);
 

Modified: trunk/griv/src/viewer_thread.hpp
===================================================================
--- trunk/griv/src/viewer_thread.hpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/viewer_thread.hpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -26,6 +26,7 @@
 #ifndef HEADER_VIEWER_THREAD_HPP
 #define HEADER_VIEWER_THREAD_HPP
 
+#include "math/size.hpp"
 #include "thread.hpp"
 #include "thread_message_queue.hpp"
 
@@ -45,10 +46,13 @@
   static ViewerThread* current() { return current_; }
   
 private:
+  Size geometry;
+  bool fullscreen;
+
   ThreadMessageQueue<FileEntry>   file_queue;
 
 public:
-  ViewerThread();
+  ViewerThread(const Size& geometry, bool fullscreen);
   virtual ~ViewerThread();
 
   int run();

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/workspace.cpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -56,6 +56,8 @@
 void
 Workspace::layout(float aspect_w, float aspect_h)
 {
+  sort();
+
   if (!images.empty())
     {     
       int w = int(Math::sqrt(aspect_w * images.size() / aspect_h));
@@ -114,7 +116,21 @@
     }
 }
 
+struct ImageSorter
+{
+  bool operator()(const Image& lhs, const Image& rhs)
+  {
+    return lhs.get_filename() < rhs.get_filename();
+  }
+};
+
 void
+Workspace::sort()
+{
+  std::sort(images.begin(), images.end(), ImageSorter());
+}
+
+void
 Workspace::clear_cache()
 {
   for(Images::iterator i = images.begin(); i != images.end(); ++i)

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-31 09:45:01 UTC (rev 2376)
+++ trunk/griv/src/workspace.hpp	2008-08-31 12:03:21 UTC (rev 2377)
@@ -46,6 +46,7 @@
   void draw(const Rectf& cliprect, float scale);
   void update(float delta);
 
+  void sort();
   void layout(float aspect_w, float aspect_h);
   void clear_cache();
   void cache_cleanup();



From grumbel at mail.berlios.de  Sun Aug 31 15:01:29 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 31 Aug 2008 15:01:29 +0200
Subject: [Windstille-commit] r2378 - in trunk/griv: . src
Message-ID: <200808311301.m7VD1TjX030522@sheep.berlios.de>

Author: grumbel
Date: 2008-08-31 15:01:29 +0200 (Sun, 31 Aug 2008)
New Revision: 2378

Modified:
   trunk/griv/TODO
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
Log:
Added trackball control

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-31 12:03:21 UTC (rev 2377)
+++ trunk/griv/TODO	2008-08-31 13:01:29 UTC (rev 2378)
@@ -1,7 +1,10 @@
 [[ Griv ToDo ]]
 
-* trackball control
+* SDL returns different mouse butten numbers depending in if a grab is active or not!
 
+* handle file failures more gracefully, currently we run into a 'job
+  rejected' situation because the job can never be completed
+
 * add more command line options:
 
   --aspect

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-31 12:03:21 UTC (rev 2377)
+++ trunk/griv/src/viewer.cpp	2008-08-31 13:01:29 UTC (rev 2378)
@@ -92,6 +92,7 @@
 
 Viewer::Viewer()
   : quit(false),
+    trackball_mode(false),
     force_redraw(false),
     drag_n_drop(false),
     draw_grid(false),
@@ -166,6 +167,22 @@
               workspace.cache_cleanup();
               break;
 
+            case SDLK_t:
+              trackball_mode = !trackball_mode;
+              if (trackball_mode)
+                {
+                  std::cout << "Trackball mode active, press 't' to leave" << std::endl;
+                  SDL_ShowCursor(SDL_DISABLE);
+                  SDL_WM_GrabInput(SDL_GRAB_ON);
+                }
+              else
+                {
+                  std::cout << "Trackball mode deactivated" << std::endl;
+                  SDL_ShowCursor(SDL_ENABLE);
+                  SDL_WM_GrabInput(SDL_GRAB_OFF);
+                }
+              break;
+
             case SDLK_s:
               workspace.sort();
               break;
@@ -192,19 +209,29 @@
         break;
 
       case SDL_MOUSEMOTION:
-        mouse_pos = Vector2i(event.motion.x,
-                             event.motion.y);
-        
-        if (drag_n_drop)
+        if (trackball_mode)
           {
             state.move(Vector2f(event.motion.xrel * 4.0f,
                                 event.motion.yrel * 4.0f));
           }
+        else
+          {
+            mouse_pos = Vector2i(event.motion.x,
+                                 event.motion.y);
+        
+            if (drag_n_drop)
+              { // FIXME: This is of course wrong, since depending on x/yrel will lead to drift
+                // Also we shouldn't use 4x speed, but 1x seems so useless
+                state.move(Vector2f(event.motion.xrel * 4,
+                                    event.motion.yrel * 4));
+              }
+          }
         break;
 
 
       case SDL_MOUSEBUTTONDOWN:
       case SDL_MOUSEBUTTONUP:
+        // FIXME: SDL Reverses the mouse buttons when a grab is active!
         switch(event.button.button)
           {
             case SDL_BUTTON_WHEELUP:
@@ -237,8 +264,10 @@
   
             case SDL_BUTTON_MIDDLE:
               //std::cout << state.screen2world(mouse_pos) << std::endl;
-
-              drag_n_drop = event.button.state;
+              if (trackball_mode)
+                drag_n_drop = false;
+              else
+                drag_n_drop = event.button.state;
               break;
           }
         break;
@@ -299,13 +328,19 @@
 void
 Viewer::update(Workspace& workspace, float delta)
 {
-  if (zoom_button == -1)
+  if (trackball_mode)
     {
-      state.zoom(1.0f / (1.0f + 4.0f * delta), mouse_pos);
+      if (zoom_button == -1)
+        state.zoom(1.0f / (1.0f + 4.0f * delta));
+      else if (zoom_button == 1)
+        state.zoom(1.0f + 4.0f * delta);
     }
-  else if (zoom_button == 1)
+  else
     {
-      state.zoom(1.0f + 4.0f * delta, mouse_pos);
+      if (zoom_button == -1)
+        state.zoom(1.0f / (1.0f + 4.0f * delta), mouse_pos);
+      else if (zoom_button == 1)
+        state.zoom(1.0f + 4.0f * delta, mouse_pos);
     }
 
   workspace.update(delta);

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-31 12:03:21 UTC (rev 2377)
+++ trunk/griv/src/viewer.hpp	2008-08-31 13:01:29 UTC (rev 2378)
@@ -61,6 +61,7 @@
 {
 private:
   bool quit;
+  bool trackball_mode;
   bool force_redraw;
   bool drag_n_drop;
   bool draw_grid;



From grumbel at mail.berlios.de  Sun Aug 31 22:54:46 2008
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sun, 31 Aug 2008 22:54:46 +0200
Subject: [Windstille-commit] r2379 - in trunk/griv: . src
Message-ID: <200808312054.m7VKsktA000413@sheep.berlios.de>

Author: grumbel
Date: 2008-08-31 22:54:43 +0200 (Sun, 31 Aug 2008)
New Revision: 2379

Added:
   trunk/griv/src/galapix.cpp
   trunk/griv/src/galapix.hpp
Removed:
   trunk/griv/src/griv.cpp
   trunk/griv/src/griv.hpp
Modified:
   trunk/griv/README
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/src/blob.cpp
   trunk/griv/src/blob.hpp
   trunk/griv/src/database_thread.cpp
   trunk/griv/src/database_thread.hpp
   trunk/griv/src/file_database.cpp
   trunk/griv/src/file_database.hpp
   trunk/griv/src/file_entry.cpp
   trunk/griv/src/file_entry.hpp
   trunk/griv/src/filesystem.cpp
   trunk/griv/src/filesystem.hpp
   trunk/griv/src/framebuffer.cpp
   trunk/griv/src/framebuffer.hpp
   trunk/griv/src/grid.hpp
   trunk/griv/src/image.cpp
   trunk/griv/src/image.hpp
   trunk/griv/src/job_handle.cpp
   trunk/griv/src/job_handle.hpp
   trunk/griv/src/jpeg.cpp
   trunk/griv/src/jpeg.hpp
   trunk/griv/src/jpeg_decoder_thread.cpp
   trunk/griv/src/jpeg_decoder_thread.hpp
   trunk/griv/src/jpeg_image.cpp
   trunk/griv/src/jpeg_image.hpp
   trunk/griv/src/jpeg_memory_dest.cpp
   trunk/griv/src/jpeg_memory_dest.hpp
   trunk/griv/src/jpeg_memory_src.cpp
   trunk/griv/src/jpeg_memory_src.hpp
   trunk/griv/src/md5.cpp
   trunk/griv/src/md5.hpp
   trunk/griv/src/software_surface.cpp
   trunk/griv/src/software_surface.hpp
   trunk/griv/src/space_navigator.cpp
   trunk/griv/src/space_navigator.hpp
   trunk/griv/src/sqlite.cpp
   trunk/griv/src/sqlite.hpp
   trunk/griv/src/surface.cpp
   trunk/griv/src/surface.hpp
   trunk/griv/src/texture.cpp
   trunk/griv/src/texture.hpp
   trunk/griv/src/thread.cpp
   trunk/griv/src/thread.hpp
   trunk/griv/src/thread_message_queue.hpp
   trunk/griv/src/tile_database.cpp
   trunk/griv/src/tile_database.hpp
   trunk/griv/src/tile_entry.hpp
   trunk/griv/src/tile_generator.cpp
   trunk/griv/src/tile_generator.hpp
   trunk/griv/src/tile_generator_thread.cpp
   trunk/griv/src/tile_generator_thread.hpp
   trunk/griv/src/viewer.cpp
   trunk/griv/src/viewer.hpp
   trunk/griv/src/viewer_thread.cpp
   trunk/griv/src/viewer_thread.hpp
   trunk/griv/src/workspace.cpp
   trunk/griv/src/workspace.hpp
Log:
Renamed griv to galapix

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/README	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,15 +1,15 @@
-griv - A Zoomable Image Viewer zoomview 
-=======================================
+galapix - A Zoomable Image Viewer zoomview 
+==========================================
 
-griv is a image viewer that allows you to directly zoom into large
+galapix is an image viewer that allows you to directly zoom into large
 collection of tens of thousand of images from tiny thumbnails down to
-the images original size fluently with small loadtimes or no loss of
+the images original size fluently with short load times and no loss of
 interactivity. It accomplishes this by keeping a tile cache which
 stores not only thumbnails for one size, but thumbnails of many
 different sizes. This thumbnail cache requires at maximum 1.5x times
 as much storage as the images themselves.
 
-griv can also be used to view gigapixel sized images, it however
+galapix can also be used to view gigapixel sized images, it however
 currently requires the tiles for that to be generated previously,
 which can take quite a bit of time and memory.
 
@@ -33,24 +33,24 @@
 Running:
 ========
 
-griv comes with a number of sub commands, allowing the user to either
+galapix comes with a number of sub commands, allowing the user to either
 view images or pre generate thumbnails. The most basic command is:
 
- ./griv view [FILES]...
+ ./galapix view [FILES]...
 
 Which display the given files. To pregenerate only the small
 thumbnails you use:
 
- ./griv thumbgen [FILES]...
+ ./galapix thumbgen [FILES]...
 
 To generate not only the small thumbnails, but all tiles you use:
 
- ./griv prepare [FILES]...
+ ./galapix prepare [FILES]...
 
 The other available commands are mostly for debugging and have little
 actualy use.
 
-When you do not supply a list of files griv will display all files in
+When you do not supply a list of files galapix will display all files in
 the database.
 
 Via the -d flag you can specifiy a database, so that you can have
@@ -60,7 +60,7 @@
 SpaceNavigator Support:
 =======================
 
-griv supports the Space Navigator via the Open Source spacenavd daemon:
+galapix supports the Space Navigator via the Open Source spacenavd daemon:
 
  * http://spacenav.sourceforge.net
 

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/SConstruct	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,5 +1,5 @@
 # Zoomable Image Viewer
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g3"], 
+galapix_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g3"], 
                        CXXFLAGS=["-Wall", "-Werror", "-O2", "-g3", "-Wnon-virtual-dtor"], 
                        LIBS=['jpeg',
                              'mhash', 
@@ -7,9 +7,9 @@
                              'GL', 
                              'GLU',
                              'GLEW'])
-griv_env.ParseConfig("sdl-config --libs --cflags")
-griv_env.ParseConfig("pkg-config sqlite3 --libs --cflags")
-griv_env.Program('griv', [
+galapix_env.ParseConfig("sdl-config --libs --cflags")
+galapix_env.ParseConfig("pkg-config sqlite3 --libs --cflags")
+galapix_env.Program('galapix', [
         'src/blob.cpp',
         'src/math.cpp',
         'src/math/size.cpp',
@@ -27,7 +27,7 @@
         'src/jpeg_memory_dest.cpp',
         'src/jpeg_decoder_thread.cpp',
         'src/job_handle.cpp',
-        'src/griv.cpp',
+        'src/galapix.cpp',
         'src/image.cpp',
         'src/md5.cpp',
         'src/software_surface.cpp',

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/TODO	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,6 +1,7 @@
-[[ Griv ToDo ]]
+[[ Galapix ToDo ]]
 
-* SDL returns different mouse butten numbers depending in if a grab is active or not!
+* SDL returns different mouse button numbers depending in if a grab is
+  active or not, so buttons will get swapped in left-hand situations
 
 * handle file failures more gracefully, currently we run into a 'job
   rejected' situation because the job can never be completed
@@ -10,10 +11,9 @@
   --aspect
   --select (?)
 
-* hide mouse cursor on request
+* build "scons configure" like stuff, see Pingus for reference, so
+  that SpaceNavigator libraries are optional
 
-* build "scons configure" like stuff, see Pingus for reference
-
 * save color or a 8x8 thumbnail in the FileEntry, for faster loading, also save 1x1 Color in FileEntry
 
 * store the max_tile size into the FileTable
@@ -22,8 +22,8 @@
   no tiles to be shown, because tiles are last in the queue, different
   jobs should have different queue
 
-* pointing griv to an empty directory is weird (directory is empty,
-  griv displays files in database, but can't create new thumbnails due
+* pointing galapix to an empty directory is weird (directory is empty,
+  galapix displays files in database, but can't create new thumbnails due
   to missing files). It should give an error that no images could be found
 
 * Loading JPEG file can throw exception and that isn't handled
@@ -43,9 +43,10 @@
 
 * faster incremental tile generation
 
-* griv name is already taken, need a new one:
+* galapix name is already taken, need a new one:
 
   Possible alternative names: ZoomIV, ZUIIV, VIIUZ, viuz, zoiv zoui, magzoi, gig, zuiview, brickview, birdview, hawkeye
+  Closer selection: zoomiv, galapix
 
 * File stuff should really be seperate from Tile getting -> Seperate worker thread?
 
@@ -91,7 +92,7 @@
   selected picture into a group, maybe have a box into which one can
   drop pictures.
 
-* griv can only handle JPEG files, no other format is supported. 
+* galapix can only handle JPEG files, no other format is supported. 
 
 * When zooming into an images beyond its original size one will see
   noticable seams at the areas where the tiles meet. This is an
@@ -101,7 +102,7 @@
   down the tile generation process from JPEG data, so it is unclear if
   it ever will be implemented.
 
-* griv completly ignores ~/.thumbnails/, it should maybe make use of
+* galapix completly ignores ~/.thumbnails/, it should maybe make use of
   that to speed up initial thumbnail generation
 
 * Generating tiles for /resources/flickr/flickr/farm3.static.flickr.com/2123/1782745732_d7f5c8cc8c_o.jpg
@@ -125,6 +126,11 @@
 
 * when 8x8 or smaller JPEG is larger then RAW, else JPEG always wins
 
+8x8   -> 250
+16x16 -> 430
+32x32 -> 700
+64x64 -> 1600
+
 1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
 ~100MB for fullscreen 16x16 Thumbs
 ~32 textures for 129600 thumbs

Modified: trunk/griv/src/blob.cpp
===================================================================
--- trunk/griv/src/blob.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/blob.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <fstream>

Modified: trunk/griv/src/blob.hpp
===================================================================
--- trunk/griv/src/blob.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/blob.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_BLOB_HPP

Modified: trunk/griv/src/database_thread.cpp
===================================================================
--- trunk/griv/src/database_thread.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/database_thread.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/database_thread.hpp
===================================================================
--- trunk/griv/src/database_thread.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/database_thread.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_DATABASE_THREAD_HPP

Modified: trunk/griv/src/file_database.cpp
===================================================================
--- trunk/griv/src/file_database.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/file_database.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/file_database.hpp
===================================================================
--- trunk/griv/src/file_database.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/file_database.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_FILE_DATABASE_HPP

Modified: trunk/griv/src/file_entry.cpp
===================================================================
--- trunk/griv/src/file_entry.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/file_entry.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/file_entry.hpp
===================================================================
--- trunk/griv/src/file_entry.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/file_entry.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_FILE_ENTRY_HPP

Modified: trunk/griv/src/filesystem.cpp
===================================================================
--- trunk/griv/src/filesystem.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/filesystem.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,27 +1,18 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
+//  Galapix - an image viewer for large image collections
+//  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
+//
+//  This program is free software: you can redistribute it and/or modify
+//  it under the terms of the GNU General Public License as published by
+//  the Free Software Foundation, either version 3 of the License, or
+//  (at your option) any later version.
+//
+//  This program is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+//  GNU General Public License for more details.
+//
+//  You should have received a copy of the GNU General Public License
+//  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include <fstream>
 #include <dirent.h>
@@ -137,7 +128,7 @@
       throw std::runtime_error("Couldn't get HOME environment variable");
     }
 
-  mkdir(home_directory + "/.griv");
+  mkdir(home_directory + "/.galapix");
 }
 
 void

Modified: trunk/griv/src/filesystem.hpp
===================================================================
--- trunk/griv/src/filesystem.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/filesystem.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_FILESYSTEM_HPP

Modified: trunk/griv/src/framebuffer.cpp
===================================================================
--- trunk/griv/src/framebuffer.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/framebuffer.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/framebuffer.hpp
===================================================================
--- trunk/griv/src/framebuffer.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/framebuffer.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_DISPLAY_HPP

Copied: trunk/griv/src/galapix.cpp (from rev 2377, trunk/griv/src/griv.cpp)
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-31 12:03:21 UTC (rev 2377)
+++ trunk/griv/src/galapix.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -0,0 +1,416 @@
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include <boost/bind.hpp>
+#include <algorithm>
+#include <sstream>
+#include <stdexcept>
+#include <iostream>
+#include <string>
+#include <vector>
+#include <sqlite3.h>
+
+#include "jpeg.hpp"
+#include "surface.hpp"
+#include "framebuffer.hpp"
+#include "math/size.hpp"
+#include "math/rect.hpp"
+#include "math/vector2i.hpp"
+#include "sqlite.hpp"
+#include "software_surface.hpp"
+#include "jpeg_decoder_thread.hpp"
+#include "file_database.hpp"
+#include "tile_database.hpp"
+#include "database_thread.hpp"
+#include "filesystem.hpp"
+#include "tile_generator.hpp"
+#include "tile_generator_thread.hpp"
+#include "workspace.hpp"
+#include "viewer_thread.hpp"
+#include "viewer.hpp"
+#include "galapix.hpp"
+
+Griv::Griv()
+  : fullscreen(false),
+    geometry(800, 600)
+{
+  Filesystem::init();
+}
+
+Griv::~Griv()
+{
+  Filesystem::deinit();
+}
+
+void
+Griv::info(const std::vector<std::string>& filenames)
+{
+  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i)
+    {
+      Size size;
+      JPEG::get_size(*i, size);
+      std::cout << *i << " " << size.width << "x" << size.height << std::endl;
+    }
+}
+
+void
+Griv::downscale(const std::vector<std::string>& filenames)
+{
+  int num = 0;
+  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i, ++num)
+    {
+      std::cout << *i << std::endl;
+      SoftwareSurface surface = JPEG::load_from_file(*i, 8);
+
+      std::ostringstream out;
+      out << "/tmp/out-" << num << ".jpg";
+      Blob blob = JPEG::save(surface, 75);
+      blob.write_to_file(out.str());
+
+      std::cout << "Wrote: " << out.str() << std::endl;
+    }  
+}
+
+void
+Griv::cleanup(const std::string& database)
+{
+  SQLiteConnection db(database); 
+  std::cout << "Running database cleanup routines, this process can take multiple minutes." << std::endl;
+   std::cout << "You can interrupt it via Ctrl-c, which won't do harm, but will throw away all the cleanup work done till that point" << std::endl;
+  db.vacuum();
+  std::cout << "Running database cleanup routines done" << std::endl;
+}
+
+void
+Griv::list(const std::string& database)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+
+  std::vector<FileEntry> entries;
+  file_db.get_file_entries(entries);
+
+  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
+    {
+      std::cout << i->filename << std::endl;
+    }  
+}
+
+void
+Griv::check(const std::string& database)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  file_db.check();
+  tile_db.check();
+}
+
+void
+Griv::filegen(const std::string& database, 
+              const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db(database);
+  FileDatabase file_db(&db);  
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      if (!file_db.get_file_entry(filenames[i], &entry))
+        {
+          std::cout << "Couldn't get entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          std::cout << "Got: " << entry.filename << " " << entry.size << std::endl;
+        }
+    }
+}
+
+void
+Griv::thumbgen(const std::string& database, 
+               const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  TileGenerator tile_generator;
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      if (!file_db.get_file_entry(filenames[i], &entry))
+        {
+          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          // FIXME: Insert some checks if the tile already exist
+
+          // Generate Image Tiles
+          std::cout << "Generating tiles for " << filenames[i]  << std::endl;
+          try {
+            tile_generator.generate_quick(entry,
+                                          boost::bind(&TileDatabase::store_tile, &tile_db, _1));
+          } catch(std::exception& err) {
+            std::cout << err.what() << std::endl;
+          }
+        }
+    }
+}
+
+void
+Griv::generate_tiles(const std::string& database, 
+                     const std::vector<std::string>& filenames)
+{
+  SQLiteConnection db(database);
+
+  FileDatabase file_db(&db);
+  TileDatabase tile_db(&db);
+
+  TileGenerator tile_generator;
+
+  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+    {
+      FileEntry entry;
+      std::cout << "Getting file entry..." << std::endl;
+      if (!file_db.get_file_entry(filenames[i], &entry))
+        {
+          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
+        }
+      else
+        {
+          // Generate Image Tiles
+          std::cout << "Generating tiles... " << filenames[i]  << std::endl;
+          SoftwareSurface surface = SoftwareSurface::from_file(filenames[i]);
+          
+          tile_generator.generate_all(entry.fileid, surface, 
+                                      boost::bind(&TileDatabase::store_tile, &tile_db, _1));
+        }
+    }
+}
+
+void
+Griv::view(const std::string& database, const std::vector<std::string>& filenames)
+{
+  if (SDL_Init(SDL_INIT_VIDEO) != 0)
+    {
+      std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
+  atexit(SDL_Quit); 
+
+  JPEGDecoderThread   jpeg_thread;
+  DatabaseThread      database_thread(database);
+  TileGeneratorThread tile_generator_thread;
+  ViewerThread        viewer_thread(geometry, fullscreen);
+
+  jpeg_thread.start();
+  database_thread.start();
+  tile_generator_thread.start();
+
+  if (filenames.empty())
+    {
+      // When no files are given, display everything in the database
+      database_thread.request_all_files(boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
+    }
+  else
+    {
+      for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
+        {
+          database_thread.request_file(filenames[i], boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
+        }
+    }
+
+  viewer_thread.run();
+
+  tile_generator_thread.stop();
+  database_thread.stop();
+  jpeg_thread.stop();
+
+  tile_generator_thread.join(); 
+  database_thread.join();
+  jpeg_thread.join();
+}
+
+void
+Griv::print_usage()
+{
+      std::cout << "Usage: galapix view     [OPTIONS]... [FILES]...\n"
+                << "       galapix prepare  [OPTIONS]... [FILES]...\n"
+                << "       galapix thumbgen [OPTIONS]... [FILES]...\n"
+                << "       galapix filegen  [OPTIONS]... [FILES]...\n"
+                << "       galapix info     [OPTIONS]... [FILES]...\n"
+                << "       galapix check    [OPTIONS]...\n"
+                << "       galapix list     [OPTIONS]...\n"
+                << "       galapix cleanup  [OPTIONS]...\n"
+                << "\n"
+                << "Commands:\n"
+                << "  view      Display the given files\n"
+                << "  prepare   Generate all thumbnail tiles for all given images, makes view command faster\n"
+                << "  thumbgen  Generate only small thumbnails for all given images\n"
+                << "  filegen   Generate only small the file entries in the database\n"
+                << "  list      Lists all files in the database\n"
+                << "  check     Checks the database for consistency\n"
+                << "  info      Display size of the given files\n"
+                << "  cleanup   Runs garbage collection on the database\n"
+                << "\n"
+                << "Options:\n"
+                << "  -d, --database FILE    Use FILE has database (default: none)\n"
+                << "  -f, --fullscreen       Start in fullscreen mode\n"
+                << "  -g, --geometry WxH     Start with window size WxH\n"        
+                << "\n"
+                << "If you do not supply any files, the whole content of the given database will be displayed."
+                << std::endl;
+}
+
+int
+Griv::main(int argc, char** argv)
+{
+  // FIXME: Function doesn't seem to be available in 3.4.2
+  // if (!sqlite3_threadsafe())
+  //  throw std::runtime_error("Error: SQLite must be compiled with SQLITE_THREADSAFE");
+
+  std::string database = "";
+  
+  if (argc < 2)
+    {
+      print_usage();
+    }
+  else
+    {
+      std::vector<std::string> argument_filenames;
+      for(int i = 2; i < argc; ++i)
+        {
+          if (argv[i][0] == '-')
+            {
+              if (strcmp(argv[i], "--help") == 0 ||
+                  strcmp(argv[i], "-h") == 0)
+                {
+                  print_usage();
+                  exit(0);
+                }
+              else if (strcmp(argv[i], "--database") == 0 ||
+                  strcmp(argv[i], "-d") == 0)
+                {
+                  ++i;
+                  if (i < argc)
+                    {
+                      database = argv[i];
+                    }
+                  else
+                    {
+                      throw std::runtime_error(std::string(argv[i-1]) + " requires an argument");
+                    }
+                }
+              else if (strcmp(argv[i], "--geometry") == 0 ||
+                       strcmp(argv[i], "-g") == 0)
+                {
+                  i += 1;
+                  if (i < argc)
+                    sscanf(argv[i], "%dx%d", &geometry.width, &geometry.height);
+                  else
+                    throw std::runtime_error(std::string("Option ") + argv[i-1] + " requires an argument");
+                }
+              else if (strcmp(argv[i], "--fullscreen") == 0 ||
+                       strcmp(argv[i], "-f") == 0)
+                {
+                  fullscreen = true;
+                }
+              else
+                {
+                  throw std::runtime_error("Unknown option " + std::string(argv[i]));
+                }
+            }
+          else
+            {
+              argument_filenames.push_back(Filesystem::realpath(argv[i]));
+            }
+        }
+
+      std::vector<std::string> filenames;
+      for(std::vector<std::string>::iterator i = argument_filenames.begin(); i != argument_filenames.end(); ++i)
+        Filesystem::generate_jpeg_file_list(*i, filenames);
+
+      std::sort(filenames.begin(), filenames.end());
+
+      if (strcmp(argv[1], "view") == 0)
+        {
+          view(database, filenames);
+        }
+      else if (strcmp(argv[1], "check") == 0)
+        {
+          check(database);
+        }
+      else if (strcmp(argv[1], "list") == 0)
+        {
+          list(database);
+        }
+      else if (strcmp(argv[1], "cleanup") == 0)
+        {
+          cleanup(database);
+        }
+      else if (strcmp(argv[1], "info") == 0)
+        {
+          info(filenames);
+        }
+      else if (strcmp(argv[1], "downscale") == 0)
+        {
+          downscale(filenames);
+        }
+      else if (strcmp(argv[1], "prepare") == 0)
+        {
+          generate_tiles(database, filenames);
+        }
+      else if (strcmp(argv[1], "thumbgen") == 0)
+        {
+          thumbgen(database, filenames);
+        }
+      else if (strcmp(argv[1], "filegen") == 0)
+        {
+          filegen(database, filenames);
+        }
+      else
+        {
+          print_usage();
+        }
+    }
+
+  return 0;
+}
+  
+int main(int argc, char** argv)
+{
+  try 
+    {
+      Griv app;
+      int ret = app.main(argc, argv);
+      return ret;
+    }
+  catch(const std::exception& err) 
+    {
+      std::cout << "Exception: " << err.what() << std::endl;
+    }
+}
+  
+/* EOF */

Copied: trunk/griv/src/galapix.hpp (from rev 2377, trunk/griv/src/griv.hpp)

Modified: trunk/griv/src/grid.hpp
===================================================================
--- trunk/griv/src/grid.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/grid.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_GRID_HPP

Deleted: trunk/griv/src/griv.cpp
===================================================================
--- trunk/griv/src/griv.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/griv.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,423 +0,0 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#include <boost/bind.hpp>
-#include <algorithm>
-#include <sstream>
-#include <stdexcept>
-#include <iostream>
-#include <string>
-#include <vector>
-#include <sqlite3.h>
-
-#include "jpeg.hpp"
-#include "surface.hpp"
-#include "framebuffer.hpp"
-#include "math/size.hpp"
-#include "math/rect.hpp"
-#include "math/vector2i.hpp"
-#include "sqlite.hpp"
-#include "software_surface.hpp"
-#include "jpeg_decoder_thread.hpp"
-#include "file_database.hpp"
-#include "tile_database.hpp"
-#include "database_thread.hpp"
-#include "filesystem.hpp"
-#include "tile_generator.hpp"
-#include "tile_generator_thread.hpp"
-#include "workspace.hpp"
-#include "viewer_thread.hpp"
-#include "viewer.hpp"
-#include "griv.hpp"
-
-Griv::Griv()
-  : fullscreen(false),
-    geometry(800, 600)
-{
-  Filesystem::init();
-}
-
-Griv::~Griv()
-{
-  Filesystem::deinit();
-}
-
-void
-Griv::info(const std::vector<std::string>& filenames)
-{
-  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i)
-    {
-      Size size;
-      JPEG::get_size(*i, size);
-      std::cout << *i << " " << size.width << "x" << size.height << std::endl;
-    }
-}
-
-void
-Griv::downscale(const std::vector<std::string>& filenames)
-{
-  int num = 0;
-  for(std::vector<std::string>::const_iterator i = filenames.begin(); i != filenames.end(); ++i, ++num)
-    {
-      std::cout << *i << std::endl;
-      SoftwareSurface surface = JPEG::load_from_file(*i, 8);
-
-      std::ostringstream out;
-      out << "/tmp/out-" << num << ".jpg";
-      Blob blob = JPEG::save(surface, 75);
-      blob.write_to_file(out.str());
-
-      std::cout << "Wrote: " << out.str() << std::endl;
-    }  
-}
-
-void
-Griv::cleanup(const std::string& database)
-{
-  SQLiteConnection db(database); 
-  std::cout << "Running database cleanup routines, this process can take multiple minutes." << std::endl;
-   std::cout << "You can interrupt it via Ctrl-c, which won't do harm, but will throw away all the cleanup work done till that point" << std::endl;
-  db.vacuum();
-  std::cout << "Running database cleanup routines done" << std::endl;
-}
-
-void
-Griv::list(const std::string& database)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-
-  std::vector<FileEntry> entries;
-  file_db.get_file_entries(entries);
-
-  for(std::vector<FileEntry>::iterator i = entries.begin(); i != entries.end(); ++i)
-    {
-      std::cout << i->filename << std::endl;
-    }  
-}
-
-void
-Griv::check(const std::string& database)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-
-  file_db.check();
-  tile_db.check();
-}
-
-void
-Griv::filegen(const std::string& database, 
-              const std::vector<std::string>& filenames)
-{
-  SQLiteConnection db(database);
-  FileDatabase file_db(&db);  
-
-  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-    {
-      FileEntry entry;
-      if (!file_db.get_file_entry(filenames[i], &entry))
-        {
-          std::cout << "Couldn't get entry for " << filenames[i] << std::endl;
-        }
-      else
-        {
-          std::cout << "Got: " << entry.filename << " " << entry.size << std::endl;
-        }
-    }
-}
-
-void
-Griv::thumbgen(const std::string& database, 
-               const std::vector<std::string>& filenames)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-
-  TileGenerator tile_generator;
-
-  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-    {
-      FileEntry entry;
-      if (!file_db.get_file_entry(filenames[i], &entry))
-        {
-          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
-        }
-      else
-        {
-          // FIXME: Insert some checks if the tile already exist
-
-          // Generate Image Tiles
-          std::cout << "Generating tiles for " << filenames[i]  << std::endl;
-          try {
-            tile_generator.generate_quick(entry,
-                                          boost::bind(&TileDatabase::store_tile, &tile_db, _1));
-          } catch(std::exception& err) {
-            std::cout << err.what() << std::endl;
-          }
-        }
-    }
-}
-
-void
-Griv::generate_tiles(const std::string& database, 
-                     const std::vector<std::string>& filenames)
-{
-  SQLiteConnection db(database);
-
-  FileDatabase file_db(&db);
-  TileDatabase tile_db(&db);
-
-  TileGenerator tile_generator;
-
-  for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-    {
-      FileEntry entry;
-      std::cout << "Getting file entry..." << std::endl;
-      if (!file_db.get_file_entry(filenames[i], &entry))
-        {
-          std::cout << "Couldn't find entry for " << filenames[i] << std::endl;
-        }
-      else
-        {
-          // Generate Image Tiles
-          std::cout << "Generating tiles... " << filenames[i]  << std::endl;
-          SoftwareSurface surface = SoftwareSurface::from_file(filenames[i]);
-          
-          tile_generator.generate_all(entry.fileid, surface, 
-                                      boost::bind(&TileDatabase::store_tile, &tile_db, _1));
-        }
-    }
-}
-
-void
-Griv::view(const std::string& database, const std::vector<std::string>& filenames)
-{
-  if (SDL_Init(SDL_INIT_VIDEO) != 0)
-    {
-      std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
-      exit(1);
-    }
-  atexit(SDL_Quit); 
-
-  JPEGDecoderThread   jpeg_thread;
-  DatabaseThread      database_thread(database);
-  TileGeneratorThread tile_generator_thread;
-  ViewerThread        viewer_thread(geometry, fullscreen);
-
-  jpeg_thread.start();
-  database_thread.start();
-  tile_generator_thread.start();
-
-  if (filenames.empty())
-    {
-      // When no files are given, display everything in the database
-      database_thread.request_all_files(boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
-    }
-  else
-    {
-      for(std::vector<std::string>::size_type i = 0; i < filenames.size(); ++i)
-        {
-          database_thread.request_file(filenames[i], boost::bind(&ViewerThread::receive_file, &viewer_thread, _1));
-        }
-    }
-
-  viewer_thread.run();
-
-  tile_generator_thread.stop();
-  database_thread.stop();
-  jpeg_thread.stop();
-
-  tile_generator_thread.join(); 
-  database_thread.join();
-  jpeg_thread.join();
-}
-
-void
-Griv::print_usage()
-{
-      std::cout << "Usage: griv view     [OPTIONS]... [FILES]...\n"
-                << "       griv prepare  [OPTIONS]... [FILES]...\n"
-                << "       griv thumbgen [OPTIONS]... [FILES]...\n"
-                << "       griv filegen  [OPTIONS]... [FILES]...\n"
-                << "       griv info     [OPTIONS]... [FILES]...\n"
-                << "       griv check    [OPTIONS]...\n"
-                << "       griv list     [OPTIONS]...\n"
-                << "       griv cleanup  [OPTIONS]...\n"
-                << "\n"
-                << "Commands:\n"
-                << "  view      Display the given files\n"
-                << "  prepare   Generate all thumbnail tiles for all given images, makes view command faster\n"
-                << "  thumbgen  Generate only small thumbnails for all given images\n"
-                << "  filegen   Generate only small the file entries in the database\n"
-                << "  list      Lists all files in the database\n"
-                << "  check     Checks the database for consistency\n"
-                << "  info      Display size of the given files\n"
-                << "  cleanup   Runs garbage collection on the database\n"
-                << "\n"
-                << "Options:\n"
-                << "  -d, --database FILE    Use FILE has database (default: test.sqlite)\n"
-                << "  -f, --fullscreen       Start in fullscreen mode\n"
-                << "  -g, --geometry WxH     Start with window size WxH\n"        
-                << "\n"
-                << "If you do not supply any files, the whole content of the given database will be displayed."
-                << std::endl;
-}
-
-int
-Griv::main(int argc, char** argv)
-{
-  // FIXME: Function doesn't seem to be available in 3.4.2
-  // if (!sqlite3_threadsafe())
-  //  throw std::runtime_error("Error: SQLite must be compiled with SQLITE_THREADSAFE");
-
-  std::string database = "test.sqlite";
-  
-  if (argc < 2)
-    {
-      print_usage();
-    }
-  else
-    {
-      std::vector<std::string> argument_filenames;
-      for(int i = 2; i < argc; ++i)
-        {
-          if (argv[i][0] == '-')
-            {
-              if (strcmp(argv[i], "--help") == 0 ||
-                  strcmp(argv[i], "-h") == 0)
-                {
-                  print_usage();
-                  exit(0);
-                }
-              else if (strcmp(argv[i], "--database") == 0 ||
-                  strcmp(argv[i], "-d") == 0)
-                {
-                  ++i;
-                  if (i < argc)
-                    {
-                      database = argv[i];
-                    }
-                  else
-                    {
-                      throw std::runtime_error(std::string(argv[i-1]) + " requires an argument");
-                    }
-                }
-              else if (strcmp(argv[i], "--geometry") == 0 ||
-                       strcmp(argv[i], "-g") == 0)
-                {
-                  i += 1;
-                  if (i < argc)
-                    sscanf(argv[i], "%dx%d", &geometry.width, &geometry.height);
-                  else
-                    throw std::runtime_error(std::string("Option ") + argv[i-1] + " requires an argument");
-                }
-              else if (strcmp(argv[i], "--fullscreen") == 0 ||
-                       strcmp(argv[i], "-f") == 0)
-                {
-                  fullscreen = true;
-                }
-              else
-                {
-                  throw std::runtime_error("Unknown option " + std::string(argv[i]));
-                }
-            }
-          else
-            {
-              argument_filenames.push_back(Filesystem::realpath(argv[i]));
-            }
-        }
-
-      std::vector<std::string> filenames;
-      for(std::vector<std::string>::iterator i = argument_filenames.begin(); i != argument_filenames.end(); ++i)
-        Filesystem::generate_jpeg_file_list(*i, filenames);
-
-      std::sort(filenames.begin(), filenames.end());
-
-      if (strcmp(argv[1], "view") == 0)
-        {
-          view(database, filenames);
-        }
-      else if (strcmp(argv[1], "check") == 0)
-        {
-          check(database);
-        }
-      else if (strcmp(argv[1], "list") == 0)
-        {
-          list(database);
-        }
-      else if (strcmp(argv[1], "cleanup") == 0)
-        {
-          cleanup(database);
-        }
-      else if (strcmp(argv[1], "info") == 0)
-        {
-          info(filenames);
-        }
-      else if (strcmp(argv[1], "downscale") == 0)
-        {
-          downscale(filenames);
-        }
-      else if (strcmp(argv[1], "prepare") == 0)
-        {
-          generate_tiles(database, filenames);
-        }
-      else if (strcmp(argv[1], "thumbgen") == 0)
-        {
-          thumbgen(database, filenames);
-        }
-      else if (strcmp(argv[1], "filegen") == 0)
-        {
-          filegen(database, filenames);
-        }
-      else
-        {
-          print_usage();
-        }
-    }
-
-  return 0;
-}
-  
-int main(int argc, char** argv)
-{
-  try 
-    {
-      Griv app;
-      int ret = app.main(argc, argv);
-      return ret;
-    }
-  catch(const std::exception& err) 
-    {
-      std::cout << "Exception: " << err.what() << std::endl;
-    }
-}
-  
-/* EOF */

Deleted: trunk/griv/src/griv.hpp
===================================================================
--- trunk/griv/src/griv.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/griv.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,56 +0,0 @@
-/*
-**  Griv - Grumbel's Image Viewer
-**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-** 
-**  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
-*/
-
-#ifndef HEADER_GRIV_HPP
-#define HEADER_GRIV_HPP
-
-#include "math/size.hpp"
-
-class Griv
-{
-private:
-  bool fullscreen;
-  Size geometry;
-
-public:
-  Griv();
-  ~Griv();
-
-  void print_usage();
-  int main(int argc, char** argv);
-
-  void info(const std::vector<std::string>& filenames);
-  void downscale(const std::vector<std::string>& filenames);
-  void cleanup(const std::string& database);
-  void check(const std::string& database);
-  void list(const std::string& database);
-  void thumbgen(const std::string& database, 
-                const std::vector<std::string>& filenames);
-  void filegen(const std::string& database, 
-                const std::vector<std::string>& filenames);
-  void generate_tiles(const std::string& database, 
-                      const std::vector<std::string>& filenames);
-  void view(const std::string& database, 
-            const std::vector<std::string>& filenames);
-};
-
-#endif
-
-/* EOF */

Modified: trunk/griv/src/image.cpp
===================================================================
--- trunk/griv/src/image.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/image.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <boost/bind.hpp>

Modified: trunk/griv/src/image.hpp
===================================================================
--- trunk/griv/src/image.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/image.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_IMAGE_HPP

Modified: trunk/griv/src/job_handle.cpp
===================================================================
--- trunk/griv/src/job_handle.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/job_handle.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "job_handle.hpp"

Modified: trunk/griv/src/job_handle.hpp
===================================================================
--- trunk/griv/src/job_handle.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/job_handle.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JOB_HANDLE_HPP

Modified: trunk/griv/src/jpeg.cpp
===================================================================
--- trunk/griv/src/jpeg.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/jpeg.hpp
===================================================================
--- trunk/griv/src/jpeg.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JPEG_HPP

Modified: trunk/griv/src/jpeg_decoder_thread.cpp
===================================================================
--- trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_decoder_thread.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "software_surface.hpp"

Modified: trunk/griv/src/jpeg_decoder_thread.hpp
===================================================================
--- trunk/griv/src/jpeg_decoder_thread.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_decoder_thread.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JPEG_DECODER_THREAD_HPP

Modified: trunk/griv/src/jpeg_image.cpp
===================================================================
--- trunk/griv/src/jpeg_image.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_image.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "jpeg_image.hpp"

Modified: trunk/griv/src/jpeg_image.hpp
===================================================================
--- trunk/griv/src/jpeg_image.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_image.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JPEG_IMAGE_HPP

Modified: trunk/griv/src/jpeg_memory_dest.cpp
===================================================================
--- trunk/griv/src/jpeg_memory_dest.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_memory_dest.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/jpeg_memory_dest.hpp
===================================================================
--- trunk/griv/src/jpeg_memory_dest.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_memory_dest.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JPEG_MEMORY_DEST_HPP

Modified: trunk/griv/src/jpeg_memory_src.cpp
===================================================================
--- trunk/griv/src/jpeg_memory_src.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_memory_src.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <assert.h>

Modified: trunk/griv/src/jpeg_memory_src.hpp
===================================================================
--- trunk/griv/src/jpeg_memory_src.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/jpeg_memory_src.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_JPEG_MEMORY_SRC_HPP

Modified: trunk/griv/src/md5.cpp
===================================================================
--- trunk/griv/src/md5.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/md5.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <mhash.h>

Modified: trunk/griv/src/md5.hpp
===================================================================
--- trunk/griv/src/md5.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/md5.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_MD5_HPP

Modified: trunk/griv/src/software_surface.cpp
===================================================================
--- trunk/griv/src/software_surface.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/software_surface.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <assert.h>
@@ -225,7 +218,7 @@
 SoftwareSurface::get_average_color() const
 {
   // Only works for smaller surfaces, else we would run into integer overflows
-  assert(get_width() > 256 || get_height() > 256); // random limit, but should be enough for griv
+  assert(get_width() > 256 || get_height() > 256); // random limit, but should be enough for galapix
 
   unsigned int r = 0;
   unsigned int g = 0;

Modified: trunk/griv/src/software_surface.hpp
===================================================================
--- trunk/griv/src/software_surface.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/software_surface.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_SOFTWARE_SURFACE_HPP

Modified: trunk/griv/src/space_navigator.cpp
===================================================================
--- trunk/griv/src/space_navigator.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/space_navigator.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <math.h>

Modified: trunk/griv/src/space_navigator.hpp
===================================================================
--- trunk/griv/src/space_navigator.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/space_navigator.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_SPNAV_HPP

Modified: trunk/griv/src/sqlite.cpp
===================================================================
--- trunk/griv/src/sqlite.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/sqlite.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "SDL.h"

Modified: trunk/griv/src/sqlite.hpp
===================================================================
--- trunk/griv/src/sqlite.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/sqlite.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_SQLITE_HPP

Modified: trunk/griv/src/surface.cpp
===================================================================
--- trunk/griv/src/surface.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/surface.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/surface.hpp
===================================================================
--- trunk/griv/src/surface.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/surface.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_SURFACE_HPP

Modified: trunk/griv/src/texture.cpp
===================================================================
--- trunk/griv/src/texture.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/texture.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,4 +1,4 @@
-/*  $Id$
+/* 
 **   __      __ __             ___        __   __ __   __
 **  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
 **  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \

Modified: trunk/griv/src/texture.hpp
===================================================================
--- trunk/griv/src/texture.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/texture.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_TEXTURE_HPP

Modified: trunk/griv/src/thread.cpp
===================================================================
--- trunk/griv/src/thread.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/thread.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/thread.hpp
===================================================================
--- trunk/griv/src/thread.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/thread.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_THREAD_HPP

Modified: trunk/griv/src/thread_message_queue.hpp
===================================================================
--- trunk/griv/src/thread_message_queue.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/thread_message_queue.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_THREAD_MESSAGE_QUEUE_HPP

Modified: trunk/griv/src/tile_database.cpp
===================================================================
--- trunk/griv/src/tile_database.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_database.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <sstream>

Modified: trunk/griv/src/tile_database.hpp
===================================================================
--- trunk/griv/src/tile_database.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_database.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_TILE_DATABASE_HPP

Modified: trunk/griv/src/tile_entry.hpp
===================================================================
--- trunk/griv/src/tile_entry.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_entry.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_TILE_ENTRY_HPP

Modified: trunk/griv/src/tile_generator.cpp
===================================================================
--- trunk/griv/src/tile_generator.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_generator.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/tile_generator.hpp
===================================================================
--- trunk/griv/src/tile_generator.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_generator.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_TILE_GENERATOR_HPP

Modified: trunk/griv/src/tile_generator_thread.cpp
===================================================================
--- trunk/griv/src/tile_generator_thread.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_generator_thread.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/tile_generator_thread.hpp
===================================================================
--- trunk/griv/src/tile_generator_thread.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/tile_generator_thread.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_TILE_GENERATOR_THREAD_HPP

Modified: trunk/griv/src/viewer.cpp
===================================================================
--- trunk/griv/src/viewer.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/viewer.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <iostream>

Modified: trunk/griv/src/viewer.hpp
===================================================================
--- trunk/griv/src/viewer.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/viewer.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_VIEWER_HPP

Modified: trunk/griv/src/viewer_thread.cpp
===================================================================
--- trunk/griv/src/viewer_thread.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/viewer_thread.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include <boost/bind.hpp>

Modified: trunk/griv/src/viewer_thread.hpp
===================================================================
--- trunk/griv/src/viewer_thread.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/viewer_thread.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_VIEWER_THREAD_HPP

Modified: trunk/griv/src/workspace.cpp
===================================================================
--- trunk/griv/src/workspace.cpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/workspace.cpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #include "file_entry.hpp"

Modified: trunk/griv/src/workspace.hpp
===================================================================
--- trunk/griv/src/workspace.hpp	2008-08-31 13:01:29 UTC (rev 2378)
+++ trunk/griv/src/workspace.hpp	2008-08-31 20:54:43 UTC (rev 2379)
@@ -1,26 +1,19 @@
-/*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
-**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+/*
+**  Galapix - an image viewer for large image collections
+**  Copyright (C) 2008 Ingo Ruhnke <grumbel at gmx.de>
 **
-**  This program is free software; you can redistribute it and/or
-**  modify it under the terms of the GNU General Public License
-**  as published by the Free Software Foundation; either version 2
-**  of the License, or (at your option) any later version.
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
 **
 **  This program is distributed in the hope that it will be useful,
 **  but WITHOUT ANY WARRANTY; without even the implied warranty of
 **  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 **  GNU General Public License for more details.
-** 
+**
 **  You should have received a copy of the GNU General Public License
-**  along with this program; if not, write to the Free Software
-**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
-**  02111-1307, USA.
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
 #ifndef HEADER_WORKSPACE_HPP



