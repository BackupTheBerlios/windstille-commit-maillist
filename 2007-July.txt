From grumbel at mail.berlios.de  Mon Jul  2 16:31:12 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 2 Jul 2007 16:31:12 +0200
Subject: [Windstille-commit] r1512 - trunk/windstille/src
Message-ID: <200707021431.l62EVCW2024471@sheep.berlios.de>

Author: grumbel
Date: 2007-07-02 16:31:11 +0200 (Mon, 02 Jul 2007)
New Revision: 1512

Modified:
   trunk/windstille/src/conversation.cpp
   trunk/windstille/src/conversation.hpp
Log:
- added a bit of wobble to the conversation menu items

Modified: trunk/windstille/src/conversation.cpp
===================================================================
--- trunk/windstille/src/conversation.cpp	2007-06-30 09:53:18 UTC (rev 1511)
+++ trunk/windstille/src/conversation.cpp	2007-07-02 14:31:11 UTC (rev 1512)
@@ -37,7 +37,8 @@
 Conversation* Conversation::current_ = 0;
 
 Conversation::Conversation()
-  : pos(400, 300)
+  : pos(400, 300),
+    time(0)
 {
   current_ = this;
   active = false;
@@ -84,16 +85,18 @@
       float start = -segment/2 - 90.0f + segment*i;
       float end   = -segment/2 - 90.0f + segment*(i+1);
       
-      // FIXME: Doesn't handle multi line text
-      Sizef size(Fonts::vera20->get_width(choices[i].topic) + 60,
-                 Fonts::vera20->get_height() + 40);
       float distance = 160.0f;
 
       Vector textpos = pos + Vector(0, 16.0f);
-      Rectf  rect(textpos + distance * offset - Vector(size.width/2, size.height - 20), size);
+      // FIXME: Doesn't handle multi line text
+      Sizef size(Fonts::vera20->get_width(choices[i].topic) + 50,
+                 Fonts::vera20->get_height() + 30);
+      Rectf  rect(textpos + distance * offset - Vector(size.width/2, size.height - 15), size);
 
       if (i == selection)
         {
+          rect = rect.grow(grow);
+          
           Display::fill_arc(pos, 42.0f, start, end, Color(1.0f, 1.0f, 1.0f, 0.5f), 24);
           Display::fill_rounded_rect(rect, 5.0f, Color(0.5f, 0.5f, 0.5f, 0.75f));
           Fonts::vera20->draw_center(textpos.x + distance * offset.x,
@@ -127,9 +130,13 @@
 void
 Conversation::update(float delta, const Controller& controller)
 {
+  time += delta;
+
   if (!active)
     return;
 
+  grow = sin(time * 3.0f) * 4.0f;
+
   direction = Vector(controller.get_axis_state(X_AXIS),
                      controller.get_axis_state(Y_AXIS));
 
@@ -139,28 +146,20 @@
       float segment = 360.0f / choices.size();
       float angle = math::rad2deg(math::normalize_angle(atan2f(direction.y, direction.x) + M_PI/2 + math::deg2rad(segment/2.0f)));
 
-      selection = int(angle / segment);
-      selection = math::mid(0, selection, int(choices.size()));
+      int new_selection = int(angle / segment);
+      new_selection = math::mid(0, new_selection, int(choices.size()));
+
+      if (new_selection != selection) {
+        selection = new_selection;
+        // FIXME: Might be a good idea to do the woople-size per button, not globaly
+        grow = 0.0f;
+        time = 0;
+      }
     }
   else
     {
       selection = -1;
     }
-
-  /*
-    if (controller.button_was_pressed(MENU_UP_BUTTON))
-    {
-    selection -= 1;
-    if (selection < 0)
-    selection = choices.size() - 1;
-    }
-    else if (controller.button_was_pressed(MENU_DOWN_BUTTON))
-    {
-    selection += 1;
-    if (selection >= int(choices.size()))
-    selection = 0;
-    }
-  */
   
   if (controller.button_was_pressed(OK_BUTTON) && selection != -1)
     {

Modified: trunk/windstille/src/conversation.hpp
===================================================================
--- trunk/windstille/src/conversation.hpp	2007-06-30 09:53:18 UTC (rev 1511)
+++ trunk/windstille/src/conversation.hpp	2007-07-02 14:31:11 UTC (rev 1512)
@@ -39,6 +39,8 @@
   Vector direction;
   bool   active;
   int    selection;
+  float  grow;
+  float  time;
 
   struct Choice {
     Choice(const std::string topic_,



From grumbel at mail.berlios.de  Tue Jul  3 06:33:08 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 3 Jul 2007 06:33:08 +0200
Subject: [Windstille-commit] r1513 - in trunk/media/images: . objects tiles
Message-ID: <200707030433.l634X866031018@sheep.berlios.de>

Author: grumbel
Date: 2007-07-03 06:32:10 +0200 (Tue, 03 Jul 2007)
New Revision: 1513

Added:
   trunk/media/images/bartest.xcf
   trunk/media/images/objects/lightpole.xcf
   trunk/media/images/particles/
   trunk/media/images/tiles/baroutside.xcf
Modified:
   trunk/media/images/tiles/bar2.xcf
Log:
- some more gfx

Added: trunk/media/images/bartest.xcf
===================================================================
(Binary files differ)


Property changes on: trunk/media/images/bartest.xcf
___________________________________________________________________
Name: svn:mime-type
   + application/x-xcf

Added: trunk/media/images/objects/lightpole.xcf
===================================================================
(Binary files differ)


Property changes on: trunk/media/images/objects/lightpole.xcf
___________________________________________________________________
Name: svn:mime-type
   + application/x-xcf

Modified: trunk/media/images/tiles/bar2.xcf
===================================================================
(Binary files differ)

Added: trunk/media/images/tiles/baroutside.xcf
===================================================================
(Binary files differ)


Property changes on: trunk/media/images/tiles/baroutside.xcf
___________________________________________________________________
Name: svn:mime-type
   + application/x-xcf



From grumbel at mail.berlios.de  Tue Jul  3 07:20:49 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 3 Jul 2007 07:20:49 +0200
Subject: [Windstille-commit] r1514 - trunk/media/images/gui
Message-ID: <200707030520.l635KnrA031673@sheep.berlios.de>

Author: grumbel
Date: 2007-07-03 07:20:14 +0200 (Tue, 03 Jul 2007)
New Revision: 1514

Added:
   trunk/media/images/gui/wii.xcf
Log:
- some more buttons

Added: trunk/media/images/gui/wii.xcf
===================================================================
(Binary files differ)


Property changes on: trunk/media/images/gui/wii.xcf
___________________________________________________________________
Name: svn:mime-type
   + application/x-xcf



From grumbel at mail.berlios.de  Tue Jul  3 11:12:36 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 3 Jul 2007 11:12:36 +0200
Subject: [Windstille-commit] r1515 - trunk/media/images/tiles
Message-ID: <200707030912.l639CavG025461@sheep.berlios.de>

Author: grumbel
Date: 2007-07-03 11:12:13 +0200 (Tue, 03 Jul 2007)
New Revision: 1515

Modified:
   trunk/media/images/tiles/baroutside.xcf
Log:
- some more gfx

Modified: trunk/media/images/tiles/baroutside.xcf
===================================================================
(Binary files differ)



From grumbel at mail.berlios.de  Thu Jul  5 14:42:09 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jul 2007 14:42:09 +0200
Subject: [Windstille-commit] r1516 - in trunk/windstille/src: . input
Message-ID: <200707051242.l65Cg9QT013745@sheep.berlios.de>

Author: grumbel
Date: 2007-07-05 14:42:08 +0200 (Thu, 05 Jul 2007)
New Revision: 1516

Added:
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/input/wiimote.hpp
Modified:
   trunk/windstille/src/SConscript
Log:
- some wiimote support framework

Modified: trunk/windstille/src/SConscript
===================================================================
--- trunk/windstille/src/SConscript	2007-07-03 09:12:13 UTC (rev 1515)
+++ trunk/windstille/src/SConscript	2007-07-05 12:42:08 UTC (rev 1516)
@@ -29,7 +29,7 @@
 SConscript('scripting/SConscript')
 
 env = conf_env.Copy()
-env.Append(LIBS    = ['GL', 'GLU', 'squirrel', 'physfs', 'SDL_image', 'openal', 'glew', 'ogg', 'vorbis', 'vorbisfile', 'png'])
+env.Append(LIBS    = ['cwiid', 'GL', 'GLU', 'squirrel', 'physfs', 'SDL_image', 'openal', 'glew', 'ogg', 'vorbis', 'vorbisfile', 'png'])
 env.Append(LIBPATH = ['../lib/'] )
 env.Append(CPPPATH = ['.', '..', '../lib/SQUIRREL2/include/', '../lib/glew'])
 
@@ -149,6 +149,7 @@
 'gui/tab_component.cpp',
 'gui/text_view.cpp',
 'input/controller.cpp',
+'input/wiimote.cpp',
 'input/controller_description.cpp',
 'input/input_configurator.cpp',
 'input/input_manager.cpp',

Added: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2007-07-03 09:12:13 UTC (rev 1515)
+++ trunk/windstille/src/input/wiimote.cpp	2007-07-05 12:42:08 UTC (rev 1516)
@@ -0,0 +1,212 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <assert.h>
+#include "wiimote.hpp"
+
+Wiimote* wiimote = 0;
+
+Wiimote::Wiimote()
+  : m_wiimote(0)
+{
+  assert(wiimote == 0);
+  wiimote = this;
+  
+  cwiid_set_err(&Wiimote::error_callback);
+}
+
+void
+Wiimote::connect()
+{
+  assert(m_wiimote == 0);
+
+  /* Connect to any wiimote */
+  bdaddr_t bdaddr = *BDADDR_ANY;
+
+  /* Connect to address in string WIIMOTE_BDADDR */
+  /* str2ba(WIIMOTE_BDADDR, &bdaddr); */
+
+  /* Connect to the wiimote */
+  printf("Put Wiimote in discoverable mode now (press 1+2)...\n");
+
+  if (!(m_wiimote = cwiid_connect(&bdaddr, 0))) { // FIXME: flags?
+    fprintf(stderr, "Unable to connect to wiimote\n");
+  } else {
+    cwiid_set_mesg_callback(m_wiimote, &Wiimote::status_callback);
+  }
+}
+
+void
+Wiimote::disconnect()
+{
+  if (m_wiimote)
+    {
+      cwiid_disconnect(m_wiimote);
+      m_wiimote = 0;
+    }
+}
+
+void
+Wiimote::on_status(const cwiid_status_mesg& msg)
+{
+  printf("Status Report: battery=%d extension=",
+         msg.battery);
+  switch (msg.ext_type)
+    {
+
+    case CWIID_EXT_NONE:
+      printf("none");
+      break;
+
+    case CWIID_EXT_NUNCHUK:
+      printf("Nunchuk");
+      break;
+
+    case CWIID_EXT_CLASSIC:
+      printf("Classic Controller");
+      break;
+    default:
+      printf("Unknown Extension");
+      break;
+    }
+  printf("\n");
+}
+
+void
+Wiimote::on_error(const cwiid_error_mesg& msg)
+{
+  if (m_wiimote)
+    {
+      if (cwiid_disconnect(m_wiimote)) {
+        fprintf(stderr, "Error on wiimote disconnect\n");
+        m_wiimote = 0;
+      }
+    }
+}
+
+void
+Wiimote::on_button(const cwiid_btn_mesg& msg)
+{
+  printf("Button Report: %.4X\n", msg.buttons);
+}
+
+void
+Wiimote::on_acc(const cwiid_acc_mesg& msg)
+{
+  printf("Acc Report: x=%d, y=%d, z=%d\n", msg.acc[0], msg.acc[1], msg.acc[2]);
+}
+
+void
+Wiimote::on_ir(const cwiid_ir_mesg& msg)
+{
+  printf("IR Report: ");
+  for (int i = 0; i < CWIID_IR_SRC_COUNT; ++i)
+    {
+      if (msg.src[i].valid) {
+        printf("(%d,%d) ", msg.src[i].pos[0], msg.src[i].pos[1]);
+      }
+    }
+}
+
+void
+Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
+{
+  printf("Nunchuk Report: btns=%.2X stick=(%d,%d) acc.x=%d acc.y=%d acc.z=%d\n", 
+         msg.buttons,
+         msg.stick[0], msg.stick[1], 
+         msg.acc[0], msg.acc[1], msg.acc[2]);
+}
+
+void
+Wiimote::on_classic(const cwiid_classic_mesg& msg)
+{
+  printf("Classic Report: btns=%.4X l_stick=(%d,%d) r_stick=(%d,%d) "
+         "l=%d r=%d\n", msg.buttons,
+         msg.l_stick[0], msg.l_stick[1],
+         msg.r_stick[0], msg.r_stick[1],
+         msg.l, msg.r);
+}
+
+void
+Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
+{
+ if (w) 
+    printf("%d:", cwiid_get_id(w));
+  else 
+    printf("-1:");
+
+  vprintf(s, ap);
+  printf("\n");  
+}
+
+void
+Wiimote::error_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
+{
+  wiimote->err(w, s, ap);
+}
+
+void
+Wiimote::status_callback(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[])
+{
+  for (int i=0; i < mesg_count; i++)
+    {
+      switch (mesg[i].type) 
+        {
+        case CWIID_MESG_STATUS:
+          wiimote->on_status(mesg[i].status_mesg);
+          break;
+
+        case CWIID_MESG_BTN:
+          wiimote->on_button(mesg[i].btn_mesg);
+          break;
+
+        case CWIID_MESG_ACC:
+          wiimote->on_acc(mesg[i].acc_mesg);
+          break;
+
+        case CWIID_MESG_IR:
+          wiimote->on_ir(mesg[i].ir_mesg);
+          break;
+
+        case CWIID_MESG_NUNCHUK:
+          wiimote->on_nunchuck(mesg[i].nunchuk_mesg);
+          break;
+
+        case CWIID_MESG_CLASSIC:
+          wiimote->on_classic(mesg[i].classic_mesg);
+          break;
+
+        case CWIID_MESG_ERROR:
+          wiimote->on_error(mesg[i].error_mesg);
+          break;
+
+        default:
+          printf("Wiimote: Unknown Report");
+          break;
+        }
+    }
+}
+
+/* EOF */


Property changes on: trunk/windstille/src/input/wiimote.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/windstille/src/input/wiimote.hpp
===================================================================
--- trunk/windstille/src/input/wiimote.hpp	2007-07-03 09:12:13 UTC (rev 1515)
+++ trunk/windstille/src/input/wiimote.hpp	2007-07-05 12:42:08 UTC (rev 1516)
@@ -0,0 +1,66 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_WIIMOTE_HPP
+#define HEADER_WIIMOTE_HPP
+
+#include "cwiid.h"
+
+/** */
+class Wiimote
+{
+public:
+  static void error_callback(cwiid_wiimote_t*, const char *s, va_list ap);
+  static void status_callback(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[]);
+
+private:
+  cwiid_wiimote_t* m_wiimote;
+  
+public:
+  Wiimote();
+  
+  void connect();
+  void disconnect();
+
+  // Callback functions
+  void on_status  (const cwiid_status_mesg& msg);
+  void on_error   (const cwiid_error_mesg& msg);
+  void on_button  (const cwiid_btn_mesg& msg);
+  void on_acc     (const cwiid_acc_mesg& msg);
+  void on_ir      (const cwiid_ir_mesg& msg);
+  void on_nunchuck(const cwiid_nunchuk_mesg& msg);
+  void on_classic (const cwiid_classic_mesg& msg);
+  void err(cwiid_wiimote_t*, const char *s, va_list ap);
+
+private:
+  Wiimote(const Wiimote&);
+  Wiimote& operator=(const Wiimote&);
+};
+
+extern Wiimote* wiimote;
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/src/input/wiimote.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Thu Jul  5 19:56:39 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jul 2007 19:56:39 +0200
Subject: [Windstille-commit] r1517 - in trunk/windstille: data/controller
	src src/input
Message-ID: <200707051756.l65Huda0015475@sheep.berlios.de>

Author: grumbel
Date: 2007-07-05 19:56:36 +0200 (Thu, 05 Jul 2007)
New Revision: 1517

Added:
   trunk/windstille/data/controller/wiimote.scm
Modified:
   trunk/windstille/src/conversation.cpp
   trunk/windstille/src/input/input_manager_sdl.cpp
   trunk/windstille/src/input/input_manager_sdl.hpp
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/input/wiimote.hpp
Log:
- Wiimote/nunchuck is now usable in-game

Added: trunk/windstille/data/controller/wiimote.scm
===================================================================
--- trunk/windstille/data/controller/wiimote.scm	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/data/controller/wiimote.scm	2007-07-05 17:56:36 UTC (rev 1517)
@@ -0,0 +1,30 @@
+;; -*- scheme -*-
+;; Configuration for a Wiimote+Nunchuck which can be used with the cwiid library
+
+(windstille-controller
+ (x-axis  (wiimote-axis (device 0)  (axis 0)))
+ (y-axis  (wiimote-axis (device 0)  (axis 1)))
+ 
+ ;;(x2-axis (joystick-axis (device 0)  (axis 4)))
+ ;;(y2-axis (joystick-axis (device 0)  (axis 3) (invert #t)))
+
+ (view-center-button (wiimote-button (device 0) (button 9)))
+
+ (primary-button    (wiimote-button (device 0)  (button 0)))
+ (secondary-button  (wiimote-button (device 0)  (button 1)))
+ (tertiary-button   (wiimote-button (device 0)  (button 11)))
+
+ (pda-button        (wiimote-button (device 0)  (button 6)))
+
+ (aim-button        (wiimote-button (device 0)  (button 12)))
+ (pause-button      (wiimote-button (device 0)  (button 7)))
+ (inventory-button  (wiimote-button (device 0)  (button 8)))
+
+ ;; allow to use the dpad for menu navigation
+ (menu-up-button    (wiimote-button (device 0)  (button 4)))
+ (menu-down-button  (wiimote-button (device 0)  (button 5)))
+ (menu-left-button  (wiimote-button (device 0)  (button 2)))
+ (menu-right-button (wiimote-button (device 0)  (button 3)))
+ )
+
+;; EOF ;;

Modified: trunk/windstille/src/conversation.cpp
===================================================================
--- trunk/windstille/src/conversation.cpp	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/src/conversation.cpp	2007-07-05 17:56:36 UTC (rev 1517)
@@ -135,7 +135,7 @@
   if (!active)
     return;
 
-  grow = sin(time * 3.0f) * 4.0f;
+  grow = fabs(sinf(time * 3.0f)) * 4.0f;
 
   direction = Vector(controller.get_axis_state(X_AXIS),
                      controller.get_axis_state(Y_AXIS));

Modified: trunk/windstille/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-05 17:56:36 UTC (rev 1517)
@@ -23,10 +23,12 @@
 **  02111-1307, USA.
 */
 
+#include <assert.h>
 #include <iostream>
 #include <sstream>
 #include <stdexcept>
 #include <vector>
+#include "wiimote.hpp"
 #include "file_reader.hpp"
 #include "controller_def.hpp"
 #include "input_manager_sdl.hpp"
@@ -47,6 +49,9 @@
 
   std::vector<MouseButtonBinding>   mouse_button_bindings;
 
+  std::vector<WiimoteButtonBinding> wiimote_button_bindings;
+  std::vector<WiimoteAxisBinding>   wiimote_axis_bindings;
+
   std::vector<SDL_Joystick*> joysticks;
 
   std::map<std::string, SDLKey> keyidmapping;
@@ -131,6 +136,17 @@
                   bind_joystick_button(controller_description.get_definition(i->get_name()).id,
                                        device, button);
                 }
+              else if (j->get_name() == "wiimote-button")
+                {
+                  int device = 0;
+                  int button = 0;
+
+                  j->get("device", device);
+                  j->get("button", button);
+
+                  bind_wiimote_button(controller_description.get_definition(i->get_name()).id,
+                                      device, button);
+                }
               else if (j->get_name() == "keyboard-button")
                 {
                   std::string key;
@@ -175,6 +191,17 @@
                   bind_keyboard_axis(controller_description.get_definition(i->get_name()).id, 
                                      string_to_keyid(minus), string_to_keyid(plus));
                 }
+              else if (j->get_name() == "wiimote-axis")
+                {
+                  int  device = 0;
+                  int  axis   = 0;
+                  
+                  j->get("device", device);
+                  j->get("axis",   axis);
+                  
+                  bind_wiimote_axis(controller_description.get_definition(i->get_name()).id,
+                                    device, axis);
+                }
               else
                 {
                   std::cout << "InputManagerSDL: Unknown tag: " << j->get_name() << std::endl;
@@ -196,6 +223,10 @@
     // FIXME: Make the keynames somewhere user visible so that users can use them
     // std::cout << key_name << std::endl;
   }
+  
+  // FIXME: doesn't really belong here
+  Wiimote::init();
+  wiimote->connect();
 }
 
 InputManagerSDL::~InputManagerSDL()
@@ -216,18 +247,22 @@
     }
   else if (event.keysym.sym == SDLK_LEFT)
     {
+      wiimote->set_led(1, 0);
       add_button_event(MENU_LEFT_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_RIGHT)
     {
+      wiimote->set_led(2, 0);
       add_button_event(MENU_RIGHT_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_UP)
     {
+      wiimote->set_led(1, 1);
       add_button_event(MENU_UP_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_DOWN)
     {
+      wiimote->set_led(2, 1);
       add_button_event(MENU_DOWN_BUTTON, event.state);
     }
 
@@ -407,6 +442,49 @@
 void
 InputManagerSDL::update(float delta)
 {
+  if (wiimote->is_connected())
+    {
+      // Check for new events from the Wiimote
+      std::vector<WiimoteEvent> events = wiimote->pop_events();
+      for(std::vector<WiimoteEvent>::iterator i = events.begin(); i != events.end(); ++i)
+        {
+          WiimoteEvent& event = *i;
+          if (event.type == WiimoteEvent::WIIMOTE_BUTTON_EVENT)
+            {
+              //std::cout << "WiimoteButton: " << event.button.button << " " << event.button.down << std::endl;
+
+              for (std::vector<WiimoteButtonBinding>::const_iterator j = impl->wiimote_button_bindings.begin();
+                   j != impl->wiimote_button_bindings.end();
+                   ++j)
+                {
+                  if (event.button.device == j->device &&
+                      event.button.button == j->button)
+                    {
+                      add_button_event(j->event, event.button.down);
+                    }
+                }
+            }
+          else if (event.type == WiimoteEvent::WIIMOTE_AXIS_EVENT)
+            {
+              //std::cout << "WiimoteAxis: " << event.axis.axis << " " << event.axis.pos << std::endl;
+
+              for (std::vector<WiimoteAxisBinding>::const_iterator j = impl->wiimote_axis_bindings.begin();
+                   j != impl->wiimote_axis_bindings.end();
+                   ++j)
+                {
+                  if (event.axis.device == j->device &&
+                      event.axis.axis == j->axis)
+                    {
+                      add_axis_event(j->event, event.axis.pos);
+                    }
+                }
+            }
+          else
+            {
+              assert(!"Never reached");
+            }
+        }
+    }
 }
 
 void
@@ -495,6 +573,30 @@
 }
 
 void
+InputManagerSDL::bind_wiimote_button(int event, int device, int button)
+{
+  WiimoteButtonBinding binding;
+
+  binding.event  = event;
+  binding.device = device;
+  binding.button = button;
+
+  impl->wiimote_button_bindings.push_back(binding);
+}
+
+void
+InputManagerSDL::bind_wiimote_axis(int event, int device, int axis)
+{
+  WiimoteAxisBinding binding;
+
+  binding.event  = event;
+  binding.device = device;
+  binding.axis   = axis;
+
+  impl->wiimote_axis_bindings.push_back(binding);
+}
+
+void
 InputManagerSDL::clear_bindings()
 {
   impl->joystick_button_bindings.clear();
@@ -503,6 +605,11 @@
   
   impl->keyboard_button_bindings.clear();
   impl->keyboard_axis_bindings.clear();
+
+  impl->mouse_button_bindings.clear();
+
+  impl->wiimote_button_bindings.clear();
+  impl->wiimote_axis_bindings.clear();
 }
 
 void

Modified: trunk/windstille/src/input/input_manager_sdl.hpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.hpp	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/src/input/input_manager_sdl.hpp	2007-07-05 17:56:36 UTC (rev 1517)
@@ -75,13 +75,18 @@
   SDLKey plus;
 };
 
-struct ButtonBinding
+struct WiimoteButtonBinding
 {
-  enum Type { JOYSTICK_BUTTON, JOYSTICK_AXIS, JOYSTICK_HAT, MOUSE_BUTTON };
+  int event;
+  int device;
+  int button;
+};
 
-  Type type;
-  int  device;
-  int  button;
+struct WiimoteAxisBinding
+{
+  int event;
+  int device;
+  int axis;
 };
 
 /** */
@@ -107,7 +112,11 @@
 
   void bind_keyboard_button(int event, SDLKey key);
   void bind_keyboard_axis(int event, SDLKey minus, SDLKey plus);
+
   void bind_mouse_button(int event, int device, int button);
+
+  void bind_wiimote_button(int event, int device, int button);
+  void bind_wiimote_axis(int event, int device, int axis);
   
   void clear_bindings();
 

Modified: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/src/input/wiimote.cpp	2007-07-05 17:56:36 UTC (rev 1517)
@@ -23,20 +23,49 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include <assert.h>
+#include <pthread.h>
+#include "math.hpp"
 #include "wiimote.hpp"
 
 Wiimote* wiimote = 0;
 
+void
+Wiimote::init()
+{
+  wiimote = new Wiimote();
+}
+
+void
+Wiimote::deinit()
+{
+  delete wiimote;
+}
+
 Wiimote::Wiimote()
-  : m_wiimote(0)
+  : m_wiimote(0),
+    m_rumble(false),
+    m_led_state(0),
+    m_nunchuk_btns(0),
+    m_nunchuk_stick_x(0),
+    m_nunchuk_stick_y(0),
+    m_buttons(0)
 {
+  pthread_mutex_init(&mutex, NULL);
+
   assert(wiimote == 0);
   wiimote = this;
   
-  cwiid_set_err(&Wiimote::error_callback);
+  cwiid_set_err(&Wiimote::err_callback);
 }
 
+Wiimote::~Wiimote()
+{
+  disconnect();
+  pthread_mutex_destroy(&mutex);
+}
+
 void
 Wiimote::connect()
 {
@@ -51,11 +80,26 @@
   /* Connect to the wiimote */
   printf("Put Wiimote in discoverable mode now (press 1+2)...\n");
 
-  if (!(m_wiimote = cwiid_connect(&bdaddr, 0))) { // FIXME: flags?
-    fprintf(stderr, "Unable to connect to wiimote\n");
-  } else {
-    cwiid_set_mesg_callback(m_wiimote, &Wiimote::status_callback);
-  }
+  if (!(m_wiimote = cwiid_connect(&bdaddr, CWIID_FLAG_MESG_IFC))) 
+    {
+      fprintf(stderr, "Unable to connect to wiimote\n");
+    }
+  else 
+    {
+      std::cout << "Wiimote connected: " << m_wiimote << std::endl;
+      if (cwiid_set_mesg_callback(m_wiimote, &Wiimote::mesg_callback)) {
+        std::cerr << "Unable to set message callback" << std::endl;
+      }
+
+      if (cwiid_command(m_wiimote, CWIID_CMD_RPT_MODE, 
+                        CWIID_RPT_STATUS |
+                        CWIID_RPT_NUNCHUK |
+                        //CWIID_RPT_ACC |
+                        CWIID_RPT_BTN))
+        {
+          std::cerr << "Wiimote: Error setting report mode" << std::endl;
+        }
+    }
 }
 
 void
@@ -69,13 +113,52 @@
 }
 
 void
+Wiimote::set_led(unsigned char led_state)
+{
+  if (m_led_state != led_state)
+    {
+      //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
+      m_led_state = led_state;
+
+      if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {
+        fprintf(stderr, "Error setting LEDs \n");
+      }
+    }
+}
+
+void
+Wiimote::set_led(int num, bool state)
+{
+  assert(num >= 1 && num <= 4);
+
+  int new_led_state = m_led_state;
+  if (state)
+    new_led_state |= (1 << (num-1));
+  else // (!state)
+    new_led_state &= ~(1 << (num-1));
+
+  set_led(new_led_state);
+}
+
+void
+Wiimote::set_rumble(bool r)
+{
+  if (r != m_rumble)
+    {
+      m_rumble = r;
+
+      if (cwiid_command(m_wiimote, CWIID_CMD_RUMBLE, m_rumble)) {
+        std::cerr << "Error setting rumble" << std::endl;
+      }
+    }
+}
+
+void
 Wiimote::on_status(const cwiid_status_mesg& msg)
 {
-  printf("Status Report: battery=%d extension=",
-         msg.battery);
+  printf("Status Report: battery=%d extension=", msg.battery);
   switch (msg.ext_type)
     {
-
     case CWIID_EXT_NONE:
       printf("none");
       break;
@@ -87,6 +170,7 @@
     case CWIID_EXT_CLASSIC:
       printf("Classic Controller");
       break;
+
     default:
       printf("Unknown Extension");
       break;
@@ -99,17 +183,66 @@
 {
   if (m_wiimote)
     {
-      if (cwiid_disconnect(m_wiimote)) {
-        fprintf(stderr, "Error on wiimote disconnect\n");
-        m_wiimote = 0;
-      }
+      if (cwiid_disconnect(m_wiimote)) 
+        {
+          fprintf(stderr, "Error on wiimote disconnect\n");
+          m_wiimote = 0;
+        }
     }
 }
 
 void
+Wiimote::add_button_event(int device, int button, bool down)
+{
+  // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
+
+  WiimoteEvent event;
+
+  event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
+  event.button.device = 0;
+  event.button.button = button;
+  event.button.down   = down;
+
+  events.push_back(event);
+}
+
+void
+Wiimote::add_axis_event(int device, int axis, float pos)
+{
+  //std::cout << "Wiimote::add_axis_event: " << device << " " << axis << " " << pos << std::endl;
+
+  WiimoteEvent event;
+
+  event.type = WiimoteEvent::WIIMOTE_AXIS_EVENT;
+  event.axis.device = 0;
+  event.axis.axis = axis;
+  event.axis.pos  = pos;
+
+  events.push_back(event); 
+}
+
+void
 Wiimote::on_button(const cwiid_btn_mesg& msg)
 {
-  printf("Button Report: %.4X\n", msg.buttons);
+#define CHECK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_buttons & btn)
+
+  uint16_t changes = m_buttons ^ msg.buttons;
+  m_buttons = msg.buttons;
+ 
+  CHECK_BTN(CWIID_BTN_A, 0);
+  CHECK_BTN(CWIID_BTN_B, 1);
+
+  CHECK_BTN(CWIID_BTN_LEFT,  2);
+  CHECK_BTN(CWIID_BTN_RIGHT, 3);
+  CHECK_BTN(CWIID_BTN_UP,    4);
+  CHECK_BTN(CWIID_BTN_DOWN,  5);
+
+  CHECK_BTN(CWIID_BTN_PLUS,  6);
+  CHECK_BTN(CWIID_BTN_HOME,  7);
+  CHECK_BTN(CWIID_BTN_MINUS, 8);
+
+  CHECK_BTN(CWIID_BTN_1,  9);
+  CHECK_BTN(CWIID_BTN_2, 10);
 }
 
 void
@@ -130,13 +263,61 @@
     }
 }
 
+/** Convert value to float while taking calibration data, left/center/right into account */
+inline float to_float(uint8_t min, 
+                      uint8_t center, 
+                      uint8_t max, 
+                      uint8_t value)
+{
+  if (value < center)
+    {
+      return math::mid(-1.0f, -(center - value) / float(center - min), 1.0f);
+    }
+  else if (value > center)
+    {
+      return math::mid(-1.0f, (value - center) / float(max - center), 1.0f);
+    }
+  else 
+    {
+      return 0.0f;
+    }
+}
+
 void
 Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
 {
-  printf("Nunchuk Report: btns=%.2X stick=(%d,%d) acc.x=%d acc.y=%d acc.z=%d\n", 
-         msg.buttons,
-         msg.stick[0], msg.stick[1], 
-         msg.acc[0], msg.acc[1], msg.acc[2]);
+  uint8_t changes = m_nunchuk_btns ^ msg.buttons;
+  m_nunchuk_btns    = msg.buttons;
+
+#define CHECK_NCK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_nunchuk_btns & btn)
+      
+  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_Z, 11);
+  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_C, 12);
+  
+
+  // FIXME: Read real calibration data, instead of hardcoded one
+  float nunchuk_stick_x =  to_float(37, 129, 231, msg.stick[0]);
+  float nunchuk_stick_y = -to_float(22, 119, 213, msg.stick[1]);
+
+  if (m_nunchuk_stick_x != nunchuk_stick_x)
+    {
+      m_nunchuk_stick_x = nunchuk_stick_x;
+      add_axis_event(0, 0, m_nunchuk_stick_x);
+    } 
+
+  if (m_nunchuk_stick_y != nunchuk_stick_y)
+    {
+      m_nunchuk_stick_y = nunchuk_stick_y;
+      add_axis_event(0, 1, m_nunchuk_stick_y);
+    }
+
+  if (0)
+    printf("Nunchuk Report: btns=%.2X stick=(%3d,%3d) (%5.2f, %5.2f) acc.x=%d acc.y=%d acc.z=%d\n", 
+           msg.buttons,
+           msg.stick[0], msg.stick[1], 
+           m_nunchuk_stick_x,
+           m_nunchuk_stick_y,
+           msg.acc[0], msg.acc[1], msg.acc[2]);
 }
 
 void
@@ -149,9 +330,21 @@
          msg.l, msg.r);
 }
 
+std::vector<WiimoteEvent>
+Wiimote::pop_events()
+{
+  pthread_mutex_lock(&mutex);
+  std::vector<WiimoteEvent> ret = events;
+  events.clear();
+  pthread_mutex_unlock(&mutex);
+  return ret;
+}
+
 void
 Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
 {
+  pthread_mutex_lock(&mutex);
+
  if (w) 
     printf("%d:", cwiid_get_id(w));
   else 
@@ -159,17 +352,16 @@
 
   vprintf(s, ap);
   printf("\n");  
+
+  pthread_mutex_unlock(&mutex);
 }
-
+
 void
-Wiimote::error_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
+Wiimote::mesg(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
 {
-  wiimote->err(w, s, ap);
-}
+  pthread_mutex_lock(&mutex);
 
-void
-Wiimote::status_callback(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[])
-{
+  //std::cout << "StatusCallback: " << w << " " << mesg_count << std::endl;
   for (int i=0; i < mesg_count; i++)
     {
       switch (mesg[i].type) 
@@ -207,6 +399,20 @@
           break;
         }
     }
+
+  pthread_mutex_unlock(&mutex);
 }
+
+void
+Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
+{
+  wiimote->err(w, s, ap);
+}
 
+void
+Wiimote::mesg_callback(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
+{
+  wiimote->mesg(w, mesg_count, mesg);
+}
+
 /* EOF */

Modified: trunk/windstille/src/input/wiimote.hpp
===================================================================
--- trunk/windstille/src/input/wiimote.hpp	2007-07-05 12:42:08 UTC (rev 1516)
+++ trunk/windstille/src/input/wiimote.hpp	2007-07-05 17:56:36 UTC (rev 1517)
@@ -26,24 +26,75 @@
 #ifndef HEADER_WIIMOTE_HPP
 #define HEADER_WIIMOTE_HPP
 
+#include <vector>
 #include "cwiid.h"
 
+struct WiimoteButtonEvent
+{
+  int  device;
+  int  button;
+  bool down; 
+};
+
+struct WiimoteAxisEvent
+{
+  int   device;
+  int   axis;
+  float pos;
+};
+
+struct WiimoteEvent
+{
+  enum { WIIMOTE_AXIS_EVENT, WIIMOTE_BUTTON_EVENT } type;
+  union {
+    WiimoteAxisEvent   axis;
+    WiimoteButtonEvent button;
+    // FIXME: add accel support here
+  };
+};
+
 /** */
 class Wiimote
 {
 public:
-  static void error_callback(cwiid_wiimote_t*, const char *s, va_list ap);
-  static void status_callback(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[]);
+  static void err_callback(cwiid_wiimote_t*, const char *s, va_list ap);
+  static void mesg_callback(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[]);
 
+  static void init();
+  static void deinit();
+
 private:
+  pthread_mutex_t  mutex;
   cwiid_wiimote_t* m_wiimote;
-  
+  bool             m_rumble;
+  unsigned char    m_led_state;
+  uint8_t          m_nunchuk_btns;
+  float            m_nunchuk_stick_x;
+  float            m_nunchuk_stick_y;
+  uint16_t         m_buttons;
+
+  std::vector<WiimoteEvent> events;
+
+  void add_button_event(int device, int button, bool down);
+  void add_axis_event(int device, int axis, float pos);
 public:
   Wiimote();
+  ~Wiimote();
   
   void connect();
   void disconnect();
 
+  void set_led(int num, bool state);
+  void set_led(unsigned char led_state);
+  unsigned char get_led() const { return m_led_state; }
+
+  void set_rumble(bool t);
+  bool get_rumble() const { return m_rumble; }
+
+  std::vector<WiimoteEvent> pop_events();
+
+  bool is_connected() const { return m_wiimote != 0; }
+
   // Callback functions
   void on_status  (const cwiid_status_mesg& msg);
   void on_error   (const cwiid_error_mesg& msg);
@@ -52,6 +103,8 @@
   void on_ir      (const cwiid_ir_mesg& msg);
   void on_nunchuck(const cwiid_nunchuk_mesg& msg);
   void on_classic (const cwiid_classic_mesg& msg);
+  
+  void mesg(cwiid_wiimote_t*, int mesg_count, union cwiid_mesg mesg[]);
   void err(cwiid_wiimote_t*, const char *s, va_list ap);
 
 private:



From grumbel at mail.berlios.de  Thu Jul  5 22:36:07 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 5 Jul 2007 22:36:07 +0200
Subject: [Windstille-commit] r1518 - trunk/windstille/src/input
Message-ID: <200707052036.l65Ka7Hx027384@sheep.berlios.de>

Author: grumbel
Date: 2007-07-05 22:36:06 +0200 (Thu, 05 Jul 2007)
New Revision: 1518

Modified:
   trunk/windstille/src/input/input_manager_sdl.cpp
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/input/wiimote.hpp
Log:
- added wiimote calibration

Modified: trunk/windstille/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-05 17:56:36 UTC (rev 1517)
+++ trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-05 20:36:06 UTC (rev 1518)
@@ -231,6 +231,7 @@
 
 InputManagerSDL::~InputManagerSDL()
 {
+  Wiimote::deinit();
 }
 
 void
@@ -247,22 +248,18 @@
     }
   else if (event.keysym.sym == SDLK_LEFT)
     {
-      wiimote->set_led(1, 0);
       add_button_event(MENU_LEFT_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_RIGHT)
     {
-      wiimote->set_led(2, 0);
       add_button_event(MENU_RIGHT_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_UP)
     {
-      wiimote->set_led(1, 1);
       add_button_event(MENU_UP_BUTTON, event.state);
     }
   else if (event.keysym.sym == SDLK_DOWN)
     {
-      wiimote->set_led(2, 1);
       add_button_event(MENU_DOWN_BUTTON, event.state);
     }
 
@@ -442,7 +439,7 @@
 void
 InputManagerSDL::update(float delta)
 {
-  if (wiimote->is_connected())
+  if (wiimote && wiimote->is_connected())
     {
       // Check for new events from the Wiimote
       std::vector<WiimoteEvent> events = wiimote->pop_events();

Modified: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2007-07-05 17:56:36 UTC (rev 1517)
+++ trunk/windstille/src/input/wiimote.cpp	2007-07-05 20:36:06 UTC (rev 1518)
@@ -99,320 +99,371 @@
         {
           std::cerr << "Wiimote: Error setting report mode" << std::endl;
         }
-    }
-}
 
-void
-Wiimote::disconnect()
-{
-  if (m_wiimote)
-    {
-      cwiid_disconnect(m_wiimote);
-      m_wiimote = 0;
-    }
-}
+      { // read calibration data
+	uint8_t buf[7];
 
-void
-Wiimote::set_led(unsigned char led_state)
-{
-  if (m_led_state != led_state)
-    {
-      //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
-      m_led_state = led_state;
+        if (cwiid_read(m_wiimote, CWIID_RW_EEPROM, 0x16, 7, buf))
+          {
+            std::cout << "Wiimote: Unable to retrieve accelerometer calibration" << std::endl;
+          }
+        else
+          {
+            wiimote_zero.x = buf[0];
+            wiimote_zero.y = buf[1];
+            wiimote_zero.z = buf[2];
 
-      if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {
-        fprintf(stderr, "Error setting LEDs \n");
+            wiimote_one.x  = buf[4];
+            wiimote_one.y  = buf[5];
+            wiimote_one.z  = buf[6];
+          }
+
+        if (cwiid_read(m_wiimote, CWIID_RW_REG | CWIID_RW_DECODE, 0xA40020, 7, buf))
+          {
+            std::cout << "Wiimote: Unable to retrieve wiimote accelerometer calibration" << std::endl;
+          }
+        else
+          {
+            nunchuk_zero.x = buf[0];
+            nunchuk_zero.y = buf[1];
+            nunchuk_zero.z = buf[2];
+            
+            nunchuk_one.x  = buf[4];
+            nunchuk_one.y  = buf[5];
+            nunchuk_one.z  = buf[6];
+          }
+
+        std::cout << "Wiimote Calibration: "
+                  << (int)wiimote_zero.x << ", "
+                  << (int)wiimote_zero.x << ", "
+                  << (int)wiimote_zero.x << " - "
+                  << (int)wiimote_one.x << ", "
+                  << (int)wiimote_one.x << ", "
+                  << (int)wiimote_one.x << std::endl;
+
+        std::cout << "Nunchuk Calibration: "
+                  << (int)nunchuk_zero.x << ", "
+                  << (int)nunchuk_zero.x << ", "
+                  << (int)nunchuk_zero.x << " - "
+                  << (int)nunchuk_one.x << ", "
+                  << (int)nunchuk_one.x << ", "
+                  << (int)nunchuk_one.x << std::endl;
+          
       }
     }
 }
 
-void
-Wiimote::set_led(int num, bool state)
-{
-  assert(num >= 1 && num <= 4);
+  void
+    Wiimote::disconnect()
+  {
+    if (m_wiimote)
+      {
+        cwiid_disconnect(m_wiimote);
+        m_wiimote = 0;
+      }
+  }
 
-  int new_led_state = m_led_state;
-  if (state)
-    new_led_state |= (1 << (num-1));
-  else // (!state)
-    new_led_state &= ~(1 << (num-1));
+  void
+    Wiimote::set_led(unsigned char led_state)
+  {
+    if (m_led_state != led_state)
+      {
+        //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
+        m_led_state = led_state;
 
-  set_led(new_led_state);
-}
+        if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {
+          fprintf(stderr, "Error setting LEDs \n");
+        }
+      }
+  }
 
-void
-Wiimote::set_rumble(bool r)
-{
-  if (r != m_rumble)
-    {
-      m_rumble = r;
+  void
+    Wiimote::set_led(int num, bool state)
+  {
+    assert(num >= 1 && num <= 4);
 
-      if (cwiid_command(m_wiimote, CWIID_CMD_RUMBLE, m_rumble)) {
-        std::cerr << "Error setting rumble" << std::endl;
+    int new_led_state = m_led_state;
+    if (state)
+      new_led_state |= (1 << (num-1));
+    else // (!state)
+      new_led_state &= ~(1 << (num-1));
+
+    set_led(new_led_state);
+  }
+
+  void
+    Wiimote::set_rumble(bool r)
+  {
+    if (r != m_rumble)
+      {
+        m_rumble = r;
+
+        if (cwiid_command(m_wiimote, CWIID_CMD_RUMBLE, m_rumble)) {
+          std::cerr << "Error setting rumble" << std::endl;
+        }
       }
-    }
-}
+  }
 
-void
-Wiimote::on_status(const cwiid_status_mesg& msg)
-{
-  printf("Status Report: battery=%d extension=", msg.battery);
-  switch (msg.ext_type)
-    {
-    case CWIID_EXT_NONE:
-      printf("none");
-      break;
+  void
+    Wiimote::on_status(const cwiid_status_mesg& msg)
+  {
+    printf("Status Report: battery=%d extension=", msg.battery);
+    switch (msg.ext_type)
+      {
+      case CWIID_EXT_NONE:
+        printf("none");
+        break;
 
-    case CWIID_EXT_NUNCHUK:
-      printf("Nunchuk");
-      break;
+      case CWIID_EXT_NUNCHUK:
+        printf("Nunchuk");
+        break;
 
-    case CWIID_EXT_CLASSIC:
-      printf("Classic Controller");
-      break;
+      case CWIID_EXT_CLASSIC:
+        printf("Classic Controller");
+        break;
 
-    default:
-      printf("Unknown Extension");
-      break;
-    }
-  printf("\n");
-}
+      default:
+        printf("Unknown Extension");
+        break;
+      }
+    printf("\n");
+  }
 
-void
-Wiimote::on_error(const cwiid_error_mesg& msg)
-{
-  if (m_wiimote)
-    {
-      if (cwiid_disconnect(m_wiimote)) 
-        {
-          fprintf(stderr, "Error on wiimote disconnect\n");
-          m_wiimote = 0;
-        }
-    }
-}
+  void
+    Wiimote::on_error(const cwiid_error_mesg& msg)
+  {
+    if (m_wiimote)
+      {
+        if (cwiid_disconnect(m_wiimote)) 
+          {
+            fprintf(stderr, "Error on wiimote disconnect\n");
+            m_wiimote = 0;
+          }
+      }
+  }
 
-void
-Wiimote::add_button_event(int device, int button, bool down)
-{
-  // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
+  void
+    Wiimote::add_button_event(int device, int button, bool down)
+  {
+    // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
 
-  WiimoteEvent event;
+    WiimoteEvent event;
 
-  event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
-  event.button.device = 0;
-  event.button.button = button;
-  event.button.down   = down;
+    event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
+    event.button.device = 0;
+    event.button.button = button;
+    event.button.down   = down;
 
-  events.push_back(event);
-}
+    events.push_back(event);
+  }
 
-void
-Wiimote::add_axis_event(int device, int axis, float pos)
-{
-  //std::cout << "Wiimote::add_axis_event: " << device << " " << axis << " " << pos << std::endl;
+  void
+    Wiimote::add_axis_event(int device, int axis, float pos)
+  {
+    //std::cout << "Wiimote::add_axis_event: " << device << " " << axis << " " << pos << std::endl;
 
-  WiimoteEvent event;
+    WiimoteEvent event;
 
-  event.type = WiimoteEvent::WIIMOTE_AXIS_EVENT;
-  event.axis.device = 0;
-  event.axis.axis = axis;
-  event.axis.pos  = pos;
+    event.type = WiimoteEvent::WIIMOTE_AXIS_EVENT;
+    event.axis.device = 0;
+    event.axis.axis = axis;
+    event.axis.pos  = pos;
 
-  events.push_back(event); 
-}
+    events.push_back(event); 
+  }
 
-void
-Wiimote::on_button(const cwiid_btn_mesg& msg)
-{
+  void
+    Wiimote::on_button(const cwiid_btn_mesg& msg)
+  {
 #define CHECK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_buttons & btn)
 
-  uint16_t changes = m_buttons ^ msg.buttons;
-  m_buttons = msg.buttons;
+    uint16_t changes = m_buttons ^ msg.buttons;
+    m_buttons = msg.buttons;
  
-  CHECK_BTN(CWIID_BTN_A, 0);
-  CHECK_BTN(CWIID_BTN_B, 1);
+    CHECK_BTN(CWIID_BTN_A, 0);
+    CHECK_BTN(CWIID_BTN_B, 1);
 
-  CHECK_BTN(CWIID_BTN_LEFT,  2);
-  CHECK_BTN(CWIID_BTN_RIGHT, 3);
-  CHECK_BTN(CWIID_BTN_UP,    4);
-  CHECK_BTN(CWIID_BTN_DOWN,  5);
+    CHECK_BTN(CWIID_BTN_LEFT,  2);
+    CHECK_BTN(CWIID_BTN_RIGHT, 3);
+    CHECK_BTN(CWIID_BTN_UP,    4);
+    CHECK_BTN(CWIID_BTN_DOWN,  5);
 
-  CHECK_BTN(CWIID_BTN_PLUS,  6);
-  CHECK_BTN(CWIID_BTN_HOME,  7);
-  CHECK_BTN(CWIID_BTN_MINUS, 8);
+    CHECK_BTN(CWIID_BTN_PLUS,  6);
+    CHECK_BTN(CWIID_BTN_HOME,  7);
+    CHECK_BTN(CWIID_BTN_MINUS, 8);
 
-  CHECK_BTN(CWIID_BTN_1,  9);
-  CHECK_BTN(CWIID_BTN_2, 10);
-}
+    CHECK_BTN(CWIID_BTN_1,  9);
+    CHECK_BTN(CWIID_BTN_2, 10);
+  }
 
-void
-Wiimote::on_acc(const cwiid_acc_mesg& msg)
-{
-  printf("Acc Report: x=%d, y=%d, z=%d\n", msg.acc[0], msg.acc[1], msg.acc[2]);
-}
+  void
+    Wiimote::on_acc(const cwiid_acc_mesg& msg)
+  {
+    printf("Acc Report: x=%d, y=%d, z=%d\n", msg.acc[0], msg.acc[1], msg.acc[2]);
+  }
 
-void
-Wiimote::on_ir(const cwiid_ir_mesg& msg)
-{
-  printf("IR Report: ");
-  for (int i = 0; i < CWIID_IR_SRC_COUNT; ++i)
-    {
-      if (msg.src[i].valid) {
-        printf("(%d,%d) ", msg.src[i].pos[0], msg.src[i].pos[1]);
+  void
+    Wiimote::on_ir(const cwiid_ir_mesg& msg)
+  {
+    printf("IR Report: ");
+    for (int i = 0; i < CWIID_IR_SRC_COUNT; ++i)
+      {
+        if (msg.src[i].valid) {
+          printf("(%d,%d) ", msg.src[i].pos[0], msg.src[i].pos[1]);
+        }
       }
-    }
-}
+  }
 
-/** Convert value to float while taking calibration data, left/center/right into account */
-inline float to_float(uint8_t min, 
-                      uint8_t center, 
-                      uint8_t max, 
-                      uint8_t value)
-{
-  if (value < center)
-    {
-      return math::mid(-1.0f, -(center - value) / float(center - min), 1.0f);
-    }
-  else if (value > center)
-    {
-      return math::mid(-1.0f, (value - center) / float(max - center), 1.0f);
-    }
-  else 
-    {
-      return 0.0f;
-    }
-}
+  /** Convert value to float while taking calibration data, left/center/right into account */
+  inline float to_float(uint8_t min, 
+                        uint8_t center, 
+                        uint8_t max, 
+                        uint8_t value)
+  {
+    if (value < center)
+      {
+        return math::mid(-1.0f, -(center - value) / float(center - min), 1.0f);
+      }
+    else if (value > center)
+      {
+        return math::mid(-1.0f, (value - center) / float(max - center), 1.0f);
+      }
+    else 
+      {
+        return 0.0f;
+      }
+  }
 
-void
-Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
-{
-  uint8_t changes = m_nunchuk_btns ^ msg.buttons;
-  m_nunchuk_btns    = msg.buttons;
+  void
+    Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
+  {
+    uint8_t changes = m_nunchuk_btns ^ msg.buttons;
+    m_nunchuk_btns    = msg.buttons;
 
 #define CHECK_NCK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_nunchuk_btns & btn)
       
-  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_Z, 11);
-  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_C, 12);
+    CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_Z, 11);
+    CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_C, 12);
   
 
-  // FIXME: Read real calibration data, instead of hardcoded one
-  float nunchuk_stick_x =  to_float(37, 129, 231, msg.stick[0]);
-  float nunchuk_stick_y = -to_float(22, 119, 213, msg.stick[1]);
+    // FIXME: Read real calibration data, instead of hardcoded one
+    float nunchuk_stick_x =  to_float(37, 129, 231, msg.stick[0]);
+    float nunchuk_stick_y = -to_float(22, 119, 213, msg.stick[1]);
 
-  if (m_nunchuk_stick_x != nunchuk_stick_x)
-    {
-      m_nunchuk_stick_x = nunchuk_stick_x;
-      add_axis_event(0, 0, m_nunchuk_stick_x);
-    } 
+    if (m_nunchuk_stick_x != nunchuk_stick_x)
+      {
+        m_nunchuk_stick_x = nunchuk_stick_x;
+        add_axis_event(0, 0, m_nunchuk_stick_x);
+      } 
 
-  if (m_nunchuk_stick_y != nunchuk_stick_y)
-    {
-      m_nunchuk_stick_y = nunchuk_stick_y;
-      add_axis_event(0, 1, m_nunchuk_stick_y);
-    }
+    if (m_nunchuk_stick_y != nunchuk_stick_y)
+      {
+        m_nunchuk_stick_y = nunchuk_stick_y;
+        add_axis_event(0, 1, m_nunchuk_stick_y);
+      }
 
-  if (0)
-    printf("Nunchuk Report: btns=%.2X stick=(%3d,%3d) (%5.2f, %5.2f) acc.x=%d acc.y=%d acc.z=%d\n", 
-           msg.buttons,
-           msg.stick[0], msg.stick[1], 
-           m_nunchuk_stick_x,
-           m_nunchuk_stick_y,
-           msg.acc[0], msg.acc[1], msg.acc[2]);
-}
+    if (0)
+      printf("Nunchuk Report: btns=%.2X stick=(%3d,%3d) (%5.2f, %5.2f) acc.x=%d acc.y=%d acc.z=%d\n", 
+             msg.buttons,
+             msg.stick[0], msg.stick[1], 
+             m_nunchuk_stick_x,
+             m_nunchuk_stick_y,
+             msg.acc[0], msg.acc[1], msg.acc[2]);
+  }
 
-void
-Wiimote::on_classic(const cwiid_classic_mesg& msg)
-{
-  printf("Classic Report: btns=%.4X l_stick=(%d,%d) r_stick=(%d,%d) "
-         "l=%d r=%d\n", msg.buttons,
-         msg.l_stick[0], msg.l_stick[1],
-         msg.r_stick[0], msg.r_stick[1],
-         msg.l, msg.r);
-}
+  void
+    Wiimote::on_classic(const cwiid_classic_mesg& msg)
+  {
+    printf("Classic Report: btns=%.4X l_stick=(%d,%d) r_stick=(%d,%d) "
+           "l=%d r=%d\n", msg.buttons,
+           msg.l_stick[0], msg.l_stick[1],
+           msg.r_stick[0], msg.r_stick[1],
+           msg.l, msg.r);
+  }
 
-std::vector<WiimoteEvent>
-Wiimote::pop_events()
-{
-  pthread_mutex_lock(&mutex);
-  std::vector<WiimoteEvent> ret = events;
-  events.clear();
-  pthread_mutex_unlock(&mutex);
-  return ret;
-}
+  std::vector<WiimoteEvent>
+    Wiimote::pop_events()
+  {
+    pthread_mutex_lock(&mutex);
+    std::vector<WiimoteEvent> ret = events;
+    events.clear();
+    pthread_mutex_unlock(&mutex);
+    return ret;
+  }
 
-void
-Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
-{
-  pthread_mutex_lock(&mutex);
+  void
+    Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
+  {
+    pthread_mutex_lock(&mutex);
 
- if (w) 
-    printf("%d:", cwiid_get_id(w));
-  else 
-    printf("-1:");
+    if (w) 
+      printf("%d:", cwiid_get_id(w));
+    else 
+      printf("-1:");
 
-  vprintf(s, ap);
-  printf("\n");  
+    vprintf(s, ap);
+    printf("\n");  
 
-  pthread_mutex_unlock(&mutex);
-}
+    pthread_mutex_unlock(&mutex);
+  }
 
-void
-Wiimote::mesg(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
-{
-  pthread_mutex_lock(&mutex);
+  void
+    Wiimote::mesg(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
+  {
+    pthread_mutex_lock(&mutex);
 
-  //std::cout << "StatusCallback: " << w << " " << mesg_count << std::endl;
-  for (int i=0; i < mesg_count; i++)
-    {
-      switch (mesg[i].type) 
-        {
-        case CWIID_MESG_STATUS:
-          wiimote->on_status(mesg[i].status_mesg);
-          break;
+    //std::cout << "StatusCallback: " << w << " " << mesg_count << std::endl;
+    for (int i=0; i < mesg_count; i++)
+      {
+        switch (mesg[i].type) 
+          {
+          case CWIID_MESG_STATUS:
+            wiimote->on_status(mesg[i].status_mesg);
+            break;
 
-        case CWIID_MESG_BTN:
-          wiimote->on_button(mesg[i].btn_mesg);
-          break;
+          case CWIID_MESG_BTN:
+            wiimote->on_button(mesg[i].btn_mesg);
+            break;
 
-        case CWIID_MESG_ACC:
-          wiimote->on_acc(mesg[i].acc_mesg);
-          break;
+          case CWIID_MESG_ACC:
+            wiimote->on_acc(mesg[i].acc_mesg);
+            break;
 
-        case CWIID_MESG_IR:
-          wiimote->on_ir(mesg[i].ir_mesg);
-          break;
+          case CWIID_MESG_IR:
+            wiimote->on_ir(mesg[i].ir_mesg);
+            break;
 
-        case CWIID_MESG_NUNCHUK:
-          wiimote->on_nunchuck(mesg[i].nunchuk_mesg);
-          break;
+          case CWIID_MESG_NUNCHUK:
+            wiimote->on_nunchuck(mesg[i].nunchuk_mesg);
+            break;
 
-        case CWIID_MESG_CLASSIC:
-          wiimote->on_classic(mesg[i].classic_mesg);
-          break;
+          case CWIID_MESG_CLASSIC:
+            wiimote->on_classic(mesg[i].classic_mesg);
+            break;
 
-        case CWIID_MESG_ERROR:
-          wiimote->on_error(mesg[i].error_mesg);
-          break;
+          case CWIID_MESG_ERROR:
+            wiimote->on_error(mesg[i].error_mesg);
+            break;
 
-        default:
-          printf("Wiimote: Unknown Report");
-          break;
-        }
-    }
+          default:
+            printf("Wiimote: Unknown Report");
+            break;
+          }
+      }
 
-  pthread_mutex_unlock(&mutex);
-}
-
-void
-Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
-{
-  wiimote->err(w, s, ap);
-}
+    pthread_mutex_unlock(&mutex);
+  }
+  
+  void
+    Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
+  {
+    wiimote->err(w, s, ap);
+  }
 
-void
-Wiimote::mesg_callback(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
-{
-  wiimote->mesg(w, mesg_count, mesg);
-}
+  void
+    Wiimote::mesg_callback(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
+  {
+    wiimote->mesg(w, mesg_count, mesg);
+  }
 
-/* EOF */
+  /* EOF */

Modified: trunk/windstille/src/input/wiimote.hpp
===================================================================
--- trunk/windstille/src/input/wiimote.hpp	2007-07-05 17:56:36 UTC (rev 1517)
+++ trunk/windstille/src/input/wiimote.hpp	2007-07-05 20:36:06 UTC (rev 1518)
@@ -53,6 +53,13 @@
   };
 };
 
+struct AccCalibration
+{
+  uint8_t x;
+  uint8_t y;
+  uint8_t z;
+};
+
 /** */
 class Wiimote
 {
@@ -73,6 +80,12 @@
   float            m_nunchuk_stick_y;
   uint16_t         m_buttons;
 
+  AccCalibration wiimote_zero;
+  AccCalibration wiimote_one;
+
+  AccCalibration nunchuk_zero;
+  AccCalibration nunchuk_one;
+
   std::vector<WiimoteEvent> events;
 
   void add_button_event(int device, int button, bool down);



From grumbel at mail.berlios.de  Fri Jul  6 08:46:23 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jul 2007 08:46:23 +0200
Subject: [Windstille-commit] r1519 - in trunk/windstille/src: . input
Message-ID: <200707060646.l666kNO6030740@sheep.berlios.de>

Author: grumbel
Date: 2007-07-06 08:46:20 +0200 (Fri, 06 Jul 2007)
New Revision: 1519

Modified:
   trunk/windstille/src/config.cpp
   trunk/windstille/src/input/input_manager_sdl.cpp
   trunk/windstille/src/menu_manager.cpp
   trunk/windstille/src/menu_manager.hpp
Log:
- made connection to wiimote an option

Modified: trunk/windstille/src/config.cpp
===================================================================
--- trunk/windstille/src/config.cpp	2007-07-05 20:36:06 UTC (rev 1518)
+++ trunk/windstille/src/config.cpp	2007-07-06 06:46:20 UTC (rev 1519)
@@ -50,7 +50,6 @@
   add(new ConfigValue<int>("screen-width",   _("Screen Width"),   true, 800));
   add(new ConfigValue<int>("screen-height",   _("Screen Height"), true, 600));
 
-
   add(new ConfigValue<std::string>("levelfile",       _("Levelfile to be used at startup"), false));
 
   // FIXME: There is no need to limit this to just two
@@ -63,6 +62,8 @@
   add(new ConfigValue<std::string>("playback-file",   _("File from which a demo is played"), false));
 
   add(new ConfigValue<int>("master-volume",  _("Master Volume"), true, 100));
+
+  add(new ConfigValue<bool>("wiimote", _("Try to connect to Wiimote on startup"), true, false));
 }
 
 Config::~Config()
@@ -163,6 +164,7 @@
   argp.add_option('c', "controller", "FILE", "Use controller as defined in FILE");
   argp.add_option(secondary_controller_file, "secondary-controller", "FILE",
                   "Use controller as defined in FILE");
+  argp.add_option('w', "wiimote", "", "Connect to Wiimote on startup");
 
   argp.add_group("Misc Options:");
   argp.add_option('d', "datadir",    "DIR", "Fetch game data from DIR");
@@ -206,6 +208,10 @@
           get<std::string>("playback-file") = argp.get_argument();
           break;
 
+        case 'w':
+          get<bool>("wiimote") = true;
+          break;
+
         case 'd':
           datadir = argp.get_argument();
           break;

Modified: trunk/windstille/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-05 20:36:06 UTC (rev 1518)
+++ trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-06 06:46:20 UTC (rev 1519)
@@ -28,6 +28,7 @@
 #include <sstream>
 #include <stdexcept>
 #include <vector>
+#include "config.hpp"
 #include "wiimote.hpp"
 #include "file_reader.hpp"
 #include "controller_def.hpp"
@@ -226,7 +227,9 @@
   
   // FIXME: doesn't really belong here
   Wiimote::init();
-  wiimote->connect();
+  
+  if (config.get<bool>("wiimote").get())
+    wiimote->connect();
 }
 
 InputManagerSDL::~InputManagerSDL()

Modified: trunk/windstille/src/menu_manager.cpp
===================================================================
--- trunk/windstille/src/menu_manager.cpp	2007-07-05 20:36:06 UTC (rev 1518)
+++ trunk/windstille/src/menu_manager.cpp	2007-07-06 06:46:20 UTC (rev 1519)
@@ -43,6 +43,7 @@
 #include "armature_test.hpp"
 #include "navigation_test.hpp"
 #include "gui/menu_item.hpp"
+#include "input/wiimote.hpp"
 #include "menu_manager.hpp"
 
 MenuManager menu_manager;
@@ -109,6 +110,13 @@
   slots.push_back(gamma_item->sig_change().connect(this, &MenuManager::menu_gamma));
   menu->add_item(gamma_item);
 
+  if (wiimote)
+    {
+      ButtonMenuItem* wiimote_button = new ButtonMenuItem(menu,  "Try to Connect Wiimote");
+      slots.push_back(wiimote_button->sig_click().connect(this, &MenuManager::menu_wiimote));
+      menu->add_item(wiimote_button);
+    }
+
   manager->get_root()->add_child(group);
   group->layout();
   screen_manager.push_overlay(manager);
@@ -600,6 +608,27 @@
 }
 
 void
+MenuManager::menu_wiimote()
+{
+  if (wiimote && !wiimote->is_connected())
+    {
+      // FIXME: This never appears on screen due to timeout
+      console << "Trying to connect Wiimote: Press buttons 1 and 2 to connect" << std::endl;
+
+      wiimote->connect();
+
+      if (wiimote->is_connected())
+        console << "Wiimote connected" << std::endl;
+      else
+        console << "Wiimote connection failed" << std::endl;
+    }
+  else
+    {
+      console << "Wiimote already is connected" << std::endl;
+    }
+}
+
+void
 MenuManager::menu_music_volume(int i)
 {
   config.set_int("master-volume", i);

Modified: trunk/windstille/src/menu_manager.hpp
===================================================================
--- trunk/windstille/src/menu_manager.hpp	2007-07-05 20:36:06 UTC (rev 1518)
+++ trunk/windstille/src/menu_manager.hpp	2007-07-06 06:46:20 UTC (rev 1519)
@@ -64,6 +64,7 @@
   void menu_show_navigation_test();
   void menu_show_particle_system(std::string file);
   void menu_gamma(int i);
+  void menu_wiimote();
 private:
   MenuManager (const MenuManager&);
   MenuManager& operator= (const MenuManager&);



From grumbel at mail.berlios.de  Fri Jul  6 11:18:28 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 6 Jul 2007 11:18:28 +0200
Subject: [Windstille-commit] r1520 - in trunk/windstille/src: . input
Message-ID: <200707060918.l669ISJJ013423@sheep.berlios.de>

Author: grumbel
Date: 2007-07-06 11:18:28 +0200 (Fri, 06 Jul 2007)
New Revision: 1520

Modified:
   trunk/windstille/src/input/input_manager_sdl.cpp
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/input/wiimote.hpp
   trunk/windstille/src/physics.cpp
Log:
- some experiments with accelerometers

Modified: trunk/windstille/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-06 06:46:20 UTC (rev 1519)
+++ trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-06 09:18:28 UTC (rev 1520)
@@ -24,10 +24,14 @@
 */
 
 #include <assert.h>
+#include <boost/format.hpp>
+#include <math.h>
 #include <iostream>
 #include <sstream>
 #include <stdexcept>
+#include <stdio.h>
 #include <vector>
+#include "math.hpp"
 #include "config.hpp"
 #include "wiimote.hpp"
 #include "file_reader.hpp"
@@ -479,6 +483,26 @@
                     }
                 }
             }
+          else if (event.type == WiimoteEvent::WIIMOTE_ACC_EVENT)
+            {
+              if (event.acc.accelerometer == 0)
+                {
+                  if (0)
+                    printf("%d - %6.3f %6.3f %6.3f\n",  
+                           event.acc.accelerometer,
+                           event.acc.x,
+                           event.acc.y,
+                           event.acc.z);
+
+                  float pitch = atan2(event.acc.x, event.acc.z);
+                  float roll  = atan2(event.acc.y, event.acc.z);
+
+                  std::cout << boost::format("%|6.3f| %|6.3f|") % pitch % roll << std::endl;
+
+                  add_axis_event(X2_AXIS, math::mid(-1.0f, float(pitch / M_PI) * 4.0f, 1.0f));
+                  add_axis_event(Y2_AXIS, math::mid(-1.0f, float(roll  / M_PI) * 4.0f, 1.0f));
+                }
+            }
           else
             {
               assert(!"Never reached");

Modified: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2007-07-06 06:46:20 UTC (rev 1519)
+++ trunk/windstille/src/input/wiimote.cpp	2007-07-06 09:18:28 UTC (rev 1520)
@@ -92,9 +92,9 @@
       }
 
       if (cwiid_command(m_wiimote, CWIID_CMD_RPT_MODE, 
-                        CWIID_RPT_STATUS |
+                        CWIID_RPT_STATUS  |
                         CWIID_RPT_NUNCHUK |
-                        //CWIID_RPT_ACC |
+                        CWIID_RPT_ACC     |
                         CWIID_RPT_BTN))
         {
           std::cerr << "Wiimote: Error setting report mode" << std::endl;
@@ -153,317 +153,341 @@
     }
 }
 
-  void
-    Wiimote::disconnect()
-  {
-    if (m_wiimote)
-      {
-        cwiid_disconnect(m_wiimote);
-        m_wiimote = 0;
-      }
-  }
+void
+Wiimote::disconnect()
+{
+  if (m_wiimote)
+    {
+      cwiid_disconnect(m_wiimote);
+      m_wiimote = 0;
+    }
+}
 
-  void
-    Wiimote::set_led(unsigned char led_state)
-  {
-    if (m_led_state != led_state)
-      {
-        //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
-        m_led_state = led_state;
+void
+Wiimote::set_led(unsigned char led_state)
+{
+  if (m_led_state != led_state)
+    {
+      //std::cout << "Wiimote: " << (int)m_led_state << std::endl;
+      m_led_state = led_state;
 
-        if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {
-          fprintf(stderr, "Error setting LEDs \n");
-        }
+      if (cwiid_command(m_wiimote, CWIID_CMD_LED, m_led_state)) {
+        fprintf(stderr, "Error setting LEDs \n");
       }
-  }
+    }
+}
 
-  void
-    Wiimote::set_led(int num, bool state)
-  {
-    assert(num >= 1 && num <= 4);
+void
+Wiimote::set_led(int num, bool state)
+{
+  assert(num >= 1 && num <= 4);
 
-    int new_led_state = m_led_state;
-    if (state)
-      new_led_state |= (1 << (num-1));
-    else // (!state)
-      new_led_state &= ~(1 << (num-1));
+  int new_led_state = m_led_state;
+  if (state)
+    new_led_state |= (1 << (num-1));
+  else // (!state)
+    new_led_state &= ~(1 << (num-1));
 
-    set_led(new_led_state);
-  }
+  set_led(new_led_state);
+}
 
-  void
-    Wiimote::set_rumble(bool r)
-  {
-    if (r != m_rumble)
-      {
-        m_rumble = r;
+void
+Wiimote::set_rumble(bool r)
+{
+  if (r != m_rumble)
+    {
+      m_rumble = r;
 
-        if (cwiid_command(m_wiimote, CWIID_CMD_RUMBLE, m_rumble)) {
-          std::cerr << "Error setting rumble" << std::endl;
-        }
+      if (cwiid_command(m_wiimote, CWIID_CMD_RUMBLE, m_rumble)) {
+        std::cerr << "Error setting rumble" << std::endl;
       }
-  }
+    }
+}
 
-  void
-    Wiimote::on_status(const cwiid_status_mesg& msg)
-  {
-    printf("Status Report: battery=%d extension=", msg.battery);
-    switch (msg.ext_type)
-      {
-      case CWIID_EXT_NONE:
-        printf("none");
-        break;
+void
+Wiimote::on_status(const cwiid_status_mesg& msg)
+{
+  printf("Status Report: battery=%d extension=", msg.battery);
+  switch (msg.ext_type)
+    {
+    case CWIID_EXT_NONE:
+      printf("none");
+      break;
 
-      case CWIID_EXT_NUNCHUK:
-        printf("Nunchuk");
-        break;
+    case CWIID_EXT_NUNCHUK:
+      printf("Nunchuk");
+      break;
 
-      case CWIID_EXT_CLASSIC:
-        printf("Classic Controller");
-        break;
+    case CWIID_EXT_CLASSIC:
+      printf("Classic Controller");
+      break;
 
-      default:
-        printf("Unknown Extension");
-        break;
-      }
-    printf("\n");
-  }
+    default:
+      printf("Unknown Extension");
+      break;
+    }
+  printf("\n");
+}
 
-  void
-    Wiimote::on_error(const cwiid_error_mesg& msg)
-  {
-    if (m_wiimote)
-      {
-        if (cwiid_disconnect(m_wiimote)) 
-          {
-            fprintf(stderr, "Error on wiimote disconnect\n");
-            m_wiimote = 0;
-          }
-      }
-  }
+void
+Wiimote::on_error(const cwiid_error_mesg& msg)
+{
+  if (m_wiimote)
+    {
+      if (cwiid_disconnect(m_wiimote)) 
+        {
+          fprintf(stderr, "Error on wiimote disconnect\n");
+          m_wiimote = 0;
+        }
+    }
+}
 
-  void
-    Wiimote::add_button_event(int device, int button, bool down)
-  {
-    // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
+void
+Wiimote::add_button_event(int device, int button, bool down)
+{
+  // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
 
-    WiimoteEvent event;
+  WiimoteEvent event;
 
-    event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
-    event.button.device = 0;
-    event.button.button = button;
-    event.button.down   = down;
+  event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
+  event.button.device = 0;
+  event.button.button = button;
+  event.button.down   = down;
 
-    events.push_back(event);
-  }
+  events.push_back(event);
+}
 
-  void
-    Wiimote::add_axis_event(int device, int axis, float pos)
-  {
-    //std::cout << "Wiimote::add_axis_event: " << device << " " << axis << " " << pos << std::endl;
+void
+Wiimote::add_axis_event(int device, int axis, float pos)
+{
+  //std::cout << "Wiimote::add_axis_event: " << device << " " << axis << " " << pos << std::endl;
 
-    WiimoteEvent event;
+  WiimoteEvent event;
 
-    event.type = WiimoteEvent::WIIMOTE_AXIS_EVENT;
-    event.axis.device = 0;
-    event.axis.axis = axis;
-    event.axis.pos  = pos;
+  event.type = WiimoteEvent::WIIMOTE_AXIS_EVENT;
+  event.axis.device = 0;
+  event.axis.axis = axis;
+  event.axis.pos  = pos;
 
-    events.push_back(event); 
-  }
+  events.push_back(event); 
+}
 
-  void
-    Wiimote::on_button(const cwiid_btn_mesg& msg)
-  {
+void
+Wiimote::add_acc_event(int device, int accelerometer, float x, float y, float z)
+{
+  WiimoteEvent event;
+
+  event.type = WiimoteEvent::WIIMOTE_ACC_EVENT;
+  event.acc.device = 0;
+  event.acc.accelerometer = accelerometer;
+  event.acc.x = x;
+  event.acc.y = y;
+  event.acc.z = z;
+
+  events.push_back(event);  
+}
+
+void
+Wiimote::on_button(const cwiid_btn_mesg& msg)
+{
 #define CHECK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_buttons & btn)
 
-    uint16_t changes = m_buttons ^ msg.buttons;
-    m_buttons = msg.buttons;
+  uint16_t changes = m_buttons ^ msg.buttons;
+  m_buttons = msg.buttons;
  
-    CHECK_BTN(CWIID_BTN_A, 0);
-    CHECK_BTN(CWIID_BTN_B, 1);
+  CHECK_BTN(CWIID_BTN_A, 0);
+  CHECK_BTN(CWIID_BTN_B, 1);
 
-    CHECK_BTN(CWIID_BTN_LEFT,  2);
-    CHECK_BTN(CWIID_BTN_RIGHT, 3);
-    CHECK_BTN(CWIID_BTN_UP,    4);
-    CHECK_BTN(CWIID_BTN_DOWN,  5);
+  CHECK_BTN(CWIID_BTN_LEFT,  2);
+  CHECK_BTN(CWIID_BTN_RIGHT, 3);
+  CHECK_BTN(CWIID_BTN_UP,    4);
+  CHECK_BTN(CWIID_BTN_DOWN,  5);
 
-    CHECK_BTN(CWIID_BTN_PLUS,  6);
-    CHECK_BTN(CWIID_BTN_HOME,  7);
-    CHECK_BTN(CWIID_BTN_MINUS, 8);
+  CHECK_BTN(CWIID_BTN_PLUS,  6);
+  CHECK_BTN(CWIID_BTN_HOME,  7);
+  CHECK_BTN(CWIID_BTN_MINUS, 8);
 
-    CHECK_BTN(CWIID_BTN_1,  9);
-    CHECK_BTN(CWIID_BTN_2, 10);
-  }
+  CHECK_BTN(CWIID_BTN_1,  9);
+  CHECK_BTN(CWIID_BTN_2, 10);
+}
 
-  void
-    Wiimote::on_acc(const cwiid_acc_mesg& msg)
-  {
-    printf("Acc Report: x=%d, y=%d, z=%d\n", msg.acc[0], msg.acc[1], msg.acc[2]);
-  }
+void
+Wiimote::on_acc(const cwiid_acc_mesg& msg)
+{
+  //printf("Acc Report: x=%d, y=%d, z=%d\n", msg.acc[0], msg.acc[1], msg.acc[2]);
 
-  void
-    Wiimote::on_ir(const cwiid_ir_mesg& msg)
-  {
-    printf("IR Report: ");
-    for (int i = 0; i < CWIID_IR_SRC_COUNT; ++i)
-      {
-        if (msg.src[i].valid) {
-          printf("(%d,%d) ", msg.src[i].pos[0], msg.src[i].pos[1]);
-        }
-      }
-  }
+  add_acc_event(0, 0, 
+                (msg.acc[0] - wiimote_zero.x) / float(wiimote_one.x - wiimote_zero.x),
+                (msg.acc[1] - wiimote_zero.y) / float(wiimote_one.y - wiimote_zero.y),
+                (msg.acc[2] - wiimote_zero.z) / float(wiimote_one.z - wiimote_zero.z));
+}
 
-  /** Convert value to float while taking calibration data, left/center/right into account */
-  inline float to_float(uint8_t min, 
-                        uint8_t center, 
-                        uint8_t max, 
-                        uint8_t value)
-  {
-    if (value < center)
-      {
-        return math::mid(-1.0f, -(center - value) / float(center - min), 1.0f);
+void
+Wiimote::on_ir(const cwiid_ir_mesg& msg)
+{
+  printf("IR Report: ");
+  for (int i = 0; i < CWIID_IR_SRC_COUNT; ++i)
+    {
+      if (msg.src[i].valid) {
+        printf("(%d,%d) ", msg.src[i].pos[0], msg.src[i].pos[1]);
       }
-    else if (value > center)
-      {
-        return math::mid(-1.0f, (value - center) / float(max - center), 1.0f);
-      }
-    else 
-      {
-        return 0.0f;
-      }
-  }
+    }
+}
 
-  void
-    Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
-  {
-    uint8_t changes = m_nunchuk_btns ^ msg.buttons;
-    m_nunchuk_btns    = msg.buttons;
+/** Convert value to float while taking calibration data, left/center/right into account */
+inline float to_float(uint8_t min, 
+                      uint8_t center, 
+                      uint8_t max, 
+                      uint8_t value)
+{
+  if (value < center)
+    {
+      return math::mid(-1.0f, -(center - value) / float(center - min), 1.0f);
+    }
+  else if (value > center)
+    {
+      return math::mid(-1.0f, (value - center) / float(max - center), 1.0f);
+    }
+  else 
+    {
+      return 0.0f;
+    }
+}
 
+void
+Wiimote::on_nunchuck(const cwiid_nunchuk_mesg& msg)
+{
+  uint8_t changes = m_nunchuk_btns ^ msg.buttons;
+  m_nunchuk_btns  = msg.buttons;
+
 #define CHECK_NCK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_nunchuk_btns & btn)
       
-    CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_Z, 11);
-    CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_C, 12);
+  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_Z, 11);
+  CHECK_NCK_BTN(CWIID_NUNCHUK_BTN_C, 12);
   
 
-    // FIXME: Read real calibration data, instead of hardcoded one
-    float nunchuk_stick_x =  to_float(37, 129, 231, msg.stick[0]);
-    float nunchuk_stick_y = -to_float(22, 119, 213, msg.stick[1]);
+  // FIXME: Read real calibration data, instead of hardcoded one
+  float nunchuk_stick_x =  to_float(37, 129, 231, msg.stick[0]);
+  float nunchuk_stick_y = -to_float(22, 119, 213, msg.stick[1]);
 
-    if (m_nunchuk_stick_x != nunchuk_stick_x)
-      {
-        m_nunchuk_stick_x = nunchuk_stick_x;
-        add_axis_event(0, 0, m_nunchuk_stick_x);
-      } 
+  if (m_nunchuk_stick_x != nunchuk_stick_x)
+    {
+      m_nunchuk_stick_x = nunchuk_stick_x;
+      add_axis_event(0, 0, m_nunchuk_stick_x);
+    } 
 
-    if (m_nunchuk_stick_y != nunchuk_stick_y)
-      {
-        m_nunchuk_stick_y = nunchuk_stick_y;
-        add_axis_event(0, 1, m_nunchuk_stick_y);
-      }
+  if (m_nunchuk_stick_y != nunchuk_stick_y)
+    {
+      m_nunchuk_stick_y = nunchuk_stick_y;
+      add_axis_event(0, 1, m_nunchuk_stick_y);
+    }
 
-    if (0)
-      printf("Nunchuk Report: btns=%.2X stick=(%3d,%3d) (%5.2f, %5.2f) acc.x=%d acc.y=%d acc.z=%d\n", 
-             msg.buttons,
-             msg.stick[0], msg.stick[1], 
-             m_nunchuk_stick_x,
-             m_nunchuk_stick_y,
-             msg.acc[0], msg.acc[1], msg.acc[2]);
-  }
+  add_acc_event(0, 1, 
+                (msg.acc[0] - nunchuk_zero.x) / float(nunchuk_one.x - nunchuk_zero.x),
+                (msg.acc[1] - nunchuk_zero.y) / float(nunchuk_one.y - nunchuk_zero.y),
+                (msg.acc[2] - nunchuk_zero.z) / float(nunchuk_one.z - nunchuk_zero.z));
+  if (0)
+    printf("Nunchuk Report: btns=%.2X stick=(%3d,%3d) (%5.2f, %5.2f) acc.x=%d acc.y=%d acc.z=%d\n", 
+           msg.buttons,
+           msg.stick[0], msg.stick[1], 
+           m_nunchuk_stick_x,
+           m_nunchuk_stick_y,
+           msg.acc[0], msg.acc[1], msg.acc[2]);
+}
 
-  void
-    Wiimote::on_classic(const cwiid_classic_mesg& msg)
-  {
-    printf("Classic Report: btns=%.4X l_stick=(%d,%d) r_stick=(%d,%d) "
-           "l=%d r=%d\n", msg.buttons,
-           msg.l_stick[0], msg.l_stick[1],
-           msg.r_stick[0], msg.r_stick[1],
-           msg.l, msg.r);
-  }
+void
+Wiimote::on_classic(const cwiid_classic_mesg& msg)
+{
+  printf("Classic Report: btns=%.4X l_stick=(%d,%d) r_stick=(%d,%d) "
+         "l=%d r=%d\n", msg.buttons,
+         msg.l_stick[0], msg.l_stick[1],
+         msg.r_stick[0], msg.r_stick[1],
+         msg.l, msg.r);
+}
 
-  std::vector<WiimoteEvent>
-    Wiimote::pop_events()
-  {
-    pthread_mutex_lock(&mutex);
-    std::vector<WiimoteEvent> ret = events;
-    events.clear();
-    pthread_mutex_unlock(&mutex);
-    return ret;
-  }
+std::vector<WiimoteEvent>
+Wiimote::pop_events()
+{
+  pthread_mutex_lock(&mutex);
+  std::vector<WiimoteEvent> ret = events;
+  events.clear();
+  pthread_mutex_unlock(&mutex);
+  return ret;
+}
 
-  void
-    Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
-  {
-    pthread_mutex_lock(&mutex);
+void
+Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
+{
+  pthread_mutex_lock(&mutex);
 
-    if (w) 
-      printf("%d:", cwiid_get_id(w));
-    else 
-      printf("-1:");
+  if (w) 
+    printf("%d:", cwiid_get_id(w));
+  else 
+    printf("-1:");
 
-    vprintf(s, ap);
-    printf("\n");  
+  vprintf(s, ap);
+  printf("\n");  
 
-    pthread_mutex_unlock(&mutex);
-  }
+  pthread_mutex_unlock(&mutex);
+}
 
-  void
-    Wiimote::mesg(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
-  {
-    pthread_mutex_lock(&mutex);
+void
+Wiimote::mesg(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
+{
+  pthread_mutex_lock(&mutex);
 
-    //std::cout << "StatusCallback: " << w << " " << mesg_count << std::endl;
-    for (int i=0; i < mesg_count; i++)
-      {
-        switch (mesg[i].type) 
-          {
-          case CWIID_MESG_STATUS:
-            wiimote->on_status(mesg[i].status_mesg);
-            break;
+  //std::cout << "StatusCallback: " << w << " " << mesg_count << std::endl;
+  for (int i=0; i < mesg_count; i++)
+    {
+      switch (mesg[i].type) 
+        {
+        case CWIID_MESG_STATUS:
+          wiimote->on_status(mesg[i].status_mesg);
+          break;
 
-          case CWIID_MESG_BTN:
-            wiimote->on_button(mesg[i].btn_mesg);
-            break;
+        case CWIID_MESG_BTN:
+          wiimote->on_button(mesg[i].btn_mesg);
+          break;
 
-          case CWIID_MESG_ACC:
-            wiimote->on_acc(mesg[i].acc_mesg);
-            break;
+        case CWIID_MESG_ACC:
+          wiimote->on_acc(mesg[i].acc_mesg);
+          break;
 
-          case CWIID_MESG_IR:
-            wiimote->on_ir(mesg[i].ir_mesg);
-            break;
+        case CWIID_MESG_IR:
+          wiimote->on_ir(mesg[i].ir_mesg);
+          break;
 
-          case CWIID_MESG_NUNCHUK:
-            wiimote->on_nunchuck(mesg[i].nunchuk_mesg);
-            break;
+        case CWIID_MESG_NUNCHUK:
+          wiimote->on_nunchuck(mesg[i].nunchuk_mesg);
+          break;
 
-          case CWIID_MESG_CLASSIC:
-            wiimote->on_classic(mesg[i].classic_mesg);
-            break;
+        case CWIID_MESG_CLASSIC:
+          wiimote->on_classic(mesg[i].classic_mesg);
+          break;
 
-          case CWIID_MESG_ERROR:
-            wiimote->on_error(mesg[i].error_mesg);
-            break;
+        case CWIID_MESG_ERROR:
+          wiimote->on_error(mesg[i].error_mesg);
+          break;
 
-          default:
-            printf("Wiimote: Unknown Report");
-            break;
-          }
-      }
+        default:
+          printf("Wiimote: Unknown Report");
+          break;
+        }
+    }
 
-    pthread_mutex_unlock(&mutex);
-  }
+  pthread_mutex_unlock(&mutex);
+}
   
-  void
-    Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
-  {
-    wiimote->err(w, s, ap);
-  }
+void
+Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
+{
+  wiimote->err(w, s, ap);
+}
 
-  void
-    Wiimote::mesg_callback(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
-  {
-    wiimote->mesg(w, mesg_count, mesg);
-  }
+void
+Wiimote::mesg_callback(cwiid_wiimote_t* w, int mesg_count, union cwiid_mesg mesg[])
+{
+  wiimote->mesg(w, mesg_count, mesg);
+}
 
-  /* EOF */
+/* EOF */

Modified: trunk/windstille/src/input/wiimote.hpp
===================================================================
--- trunk/windstille/src/input/wiimote.hpp	2007-07-06 06:46:20 UTC (rev 1519)
+++ trunk/windstille/src/input/wiimote.hpp	2007-07-06 09:18:28 UTC (rev 1520)
@@ -43,13 +43,22 @@
   float pos;
 };
 
+struct WiimoteAccEvent
+{
+  int   device;
+  int   accelerometer;
+  float x;
+  float y;
+  float z;
+};
+
 struct WiimoteEvent
 {
-  enum { WIIMOTE_AXIS_EVENT, WIIMOTE_BUTTON_EVENT } type;
+  enum { WIIMOTE_AXIS_EVENT, WIIMOTE_ACC_EVENT, WIIMOTE_BUTTON_EVENT } type;
   union {
     WiimoteAxisEvent   axis;
     WiimoteButtonEvent button;
-    // FIXME: add accel support here
+    WiimoteAccEvent    acc;
   };
 };
 
@@ -90,6 +99,7 @@
 
   void add_button_event(int device, int button, bool down);
   void add_axis_event(int device, int axis, float pos);
+  void add_acc_event(int device, int accelerometer, float x, float y, float z);
 public:
   Wiimote();
   ~Wiimote();

Modified: trunk/windstille/src/physics.cpp
===================================================================
--- trunk/windstille/src/physics.cpp	2007-07-06 06:46:20 UTC (rev 1519)
+++ trunk/windstille/src/physics.cpp	2007-07-06 09:18:28 UTC (rev 1520)
@@ -64,8 +64,7 @@
 Physics::bounce_collision(const CollisionData& data)
 {
   printf("bounce collision.\n");
-  Vector collision_vel
-    = data.direction * (velocity() * data.direction);
+  Vector collision_vel = data.direction * (velocity() * data.direction);
 
   velocity() -= collision_vel * (1.0 + bounciness);
   //force -= collision_vel * (1.0f + bounciness) * mass / data.delta;



From grumbel at mail.berlios.de  Sat Jul  7 17:28:59 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 7 Jul 2007 17:28:59 +0200
Subject: [Windstille-commit] r1521 - in trunk/windstille/src: . input
Message-ID: <200707071528.l67FSxwn013712@sheep.berlios.de>

Author: grumbel
Date: 2007-07-07 17:28:58 +0200 (Sat, 07 Jul 2007)
New Revision: 1521

Modified:
   trunk/windstille/src/SConscript
   trunk/windstille/src/config.cpp
   trunk/windstille/src/input/input_manager_sdl.cpp
   trunk/windstille/src/input/wiimote.cpp
   trunk/windstille/src/input/wiimote.hpp
   trunk/windstille/src/menu_manager.cpp
   trunk/windstille/src/player.cpp
   trunk/windstille/src/sprite3dview.cpp
Log:
- some #ifdef to disable the wiimote

Modified: trunk/windstille/src/SConscript
===================================================================
--- trunk/windstille/src/SConscript	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/SConscript	2007-07-07 15:28:58 UTC (rev 1521)
@@ -29,7 +29,7 @@
 SConscript('scripting/SConscript')
 
 env = conf_env.Copy()
-env.Append(LIBS    = ['cwiid', 'GL', 'GLU', 'squirrel', 'physfs', 'SDL_image', 'openal', 'glew', 'ogg', 'vorbis', 'vorbisfile', 'png'])
+env.Append(LIBS    = ['GL', 'GLU', 'squirrel', 'physfs', 'SDL_image', 'openal', 'glew', 'ogg', 'vorbis', 'vorbisfile', 'png'])
 env.Append(LIBPATH = ['../lib/'] )
 env.Append(CPPPATH = ['.', '..', '../lib/SQUIRREL2/include/', '../lib/glew'])
 

Modified: trunk/windstille/src/config.cpp
===================================================================
--- trunk/windstille/src/config.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/config.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -164,7 +164,9 @@
   argp.add_option('c', "controller", "FILE", "Use controller as defined in FILE");
   argp.add_option(secondary_controller_file, "secondary-controller", "FILE",
                   "Use controller as defined in FILE");
+#ifdef HAVE_CWIID
   argp.add_option('w', "wiimote", "", "Connect to Wiimote on startup");
+#endif
 
   argp.add_group("Misc Options:");
   argp.add_option('d', "datadir",    "DIR", "Fetch game data from DIR");

Modified: trunk/windstille/src/input/input_manager_sdl.cpp
===================================================================
--- trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/input/input_manager_sdl.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -33,10 +33,10 @@
 #include <vector>
 #include "math.hpp"
 #include "config.hpp"
-#include "wiimote.hpp"
 #include "file_reader.hpp"
 #include "controller_def.hpp"
 #include "input_manager_sdl.hpp"
+#include "wiimote.hpp"
 
 InputManagerSDL* InputManagerSDL::current_ = 0;
 
@@ -229,16 +229,21 @@
     // std::cout << key_name << std::endl;
   }
   
+#ifdef HAVE_CWIID
   // FIXME: doesn't really belong here
   Wiimote::init();
-  
-  if (config.get<bool>("wiimote").get())
+
+  if (wiimote && config.get<bool>("wiimote").get())
     wiimote->connect();
+
+#endif // HAVE_CWIID  
 }
 
 InputManagerSDL::~InputManagerSDL()
 {
+#ifdef HAVE_CWIID
   Wiimote::deinit();
+#endif
 }
 
 void
@@ -446,6 +451,7 @@
 void
 InputManagerSDL::update(float delta)
 {
+#ifdef HAVE_CWIID
   if (wiimote && wiimote->is_connected())
     {
       // Check for new events from the Wiimote
@@ -493,14 +499,19 @@
                            event.acc.x,
                            event.acc.y,
                            event.acc.z);
+                 
+                  float roll = atan(event.acc.x/event.acc.z);
+                  if (event.acc.z <= 0.0) {
+                    roll += M_PI * ((event.acc.x > 0.0) ? 1 : -1);
+                  }
+                  roll *= -1;
 
-                  float pitch = atan2(event.acc.x, event.acc.z);
-                  float roll  = atan2(event.acc.y, event.acc.z);
+                  float pitch = atan(event.acc.y/event.acc.z*cos(roll));
 
+                  add_axis_event(X2_AXIS, math::mid(-1.0f, -float(pitch / M_PI), 1.0f));
+                  add_axis_event(Y2_AXIS, math::mid(-1.0f, -float(roll  / M_PI), 1.0f));
+
                   std::cout << boost::format("%|6.3f| %|6.3f|") % pitch % roll << std::endl;
-
-                  add_axis_event(X2_AXIS, math::mid(-1.0f, float(pitch / M_PI) * 4.0f, 1.0f));
-                  add_axis_event(Y2_AXIS, math::mid(-1.0f, float(roll  / M_PI) * 4.0f, 1.0f));
                 }
             }
           else
@@ -509,6 +520,7 @@
             }
         }
     }
+#endif
 }
 
 void

Modified: trunk/windstille/src/input/wiimote.cpp
===================================================================
--- trunk/windstille/src/input/wiimote.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/input/wiimote.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -31,6 +31,8 @@
 
 Wiimote* wiimote = 0;
 
+#ifdef HAVE_CWIID
+
 void
 Wiimote::init()
 {
@@ -203,50 +205,11 @@
       }
     }
 }
-
+
 void
-Wiimote::on_status(const cwiid_status_mesg& msg)
-{
-  printf("Status Report: battery=%d extension=", msg.battery);
-  switch (msg.ext_type)
-    {
-    case CWIID_EXT_NONE:
-      printf("none");
-      break;
-
-    case CWIID_EXT_NUNCHUK:
-      printf("Nunchuk");
-      break;
-
-    case CWIID_EXT_CLASSIC:
-      printf("Classic Controller");
-      break;
-
-    default:
-      printf("Unknown Extension");
-      break;
-    }
-  printf("\n");
-}
-
-void
-Wiimote::on_error(const cwiid_error_mesg& msg)
-{
-  if (m_wiimote)
-    {
-      if (cwiid_disconnect(m_wiimote)) 
-        {
-          fprintf(stderr, "Error on wiimote disconnect\n");
-          m_wiimote = 0;
-        }
-    }
-}
-
-void
 Wiimote::add_button_event(int device, int button, bool down)
 {
   // std::cout << "Wiimote::add_button_event: " << device << " " << button << " " << down << std::endl;
-
   WiimoteEvent event;
 
   event.type = WiimoteEvent::WIIMOTE_BUTTON_EVENT;
@@ -286,8 +249,49 @@
 
   events.push_back(event);  
 }
+
 
 void
+Wiimote::on_status(const cwiid_status_mesg& msg)
+{
+  printf("Status Report: battery=%d extension=", msg.battery);
+  switch (msg.ext_type)
+    {
+    case CWIID_EXT_NONE:
+      printf("none");
+      break;
+
+    case CWIID_EXT_NUNCHUK:
+      printf("Nunchuk");
+      break;
+
+    case CWIID_EXT_CLASSIC:
+      printf("Classic Controller");
+      break;
+
+    default:
+      printf("Unknown Extension");
+      break;
+    }
+  printf("\n");
+}
+
+void
+Wiimote::on_error(const cwiid_error_mesg& msg)
+{
+  std::cout << "On Error" << std::endl;
+
+  if (m_wiimote)
+    {
+      if (cwiid_disconnect(m_wiimote)) 
+        {
+          fprintf(stderr, "Error on wiimote disconnect\n");
+          m_wiimote = 0;
+        }
+    }
+}
+
+void
 Wiimote::on_button(const cwiid_btn_mesg& msg)
 {
 #define CHECK_BTN(btn, num) if (changes & btn) add_button_event(0, num, m_buttons & btn)
@@ -415,6 +419,7 @@
   return ret;
 }
 
+// Callback function that get called by the Wiimote thread
 void
 Wiimote::err(cwiid_wiimote_t* w, const char *s, va_list ap)
 {
@@ -477,6 +482,8 @@
 
   pthread_mutex_unlock(&mutex);
 }
+
+// static callback functions
   
 void
 Wiimote::err_callback(cwiid_wiimote_t* w, const char *s, va_list ap)
@@ -490,4 +497,6 @@
   wiimote->mesg(w, mesg_count, mesg);
 }
 
+#endif // HAVE_CWIID
+
 /* EOF */

Modified: trunk/windstille/src/input/wiimote.hpp
===================================================================
--- trunk/windstille/src/input/wiimote.hpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/input/wiimote.hpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -26,6 +26,8 @@
 #ifndef HEADER_WIIMOTE_HPP
 #define HEADER_WIIMOTE_HPP
 
+#ifdef HAVE_CWIID
+
 #include <vector>
 #include "cwiid.h"
 
@@ -100,6 +102,7 @@
   void add_button_event(int device, int button, bool down);
   void add_axis_event(int device, int axis, float pos);
   void add_acc_event(int device, int accelerometer, float x, float y, float z);
+
 public:
   Wiimote();
   ~Wiimote();
@@ -135,6 +138,9 @@
   Wiimote& operator=(const Wiimote&);
 };
 
+#endif // HAVE_CWIID
+
+class Wiimote;
 extern Wiimote* wiimote;
 
 #endif

Modified: trunk/windstille/src/menu_manager.cpp
===================================================================
--- trunk/windstille/src/menu_manager.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/menu_manager.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -610,6 +610,7 @@
 void
 MenuManager::menu_wiimote()
 {
+#ifdef HAVE_CWIID
   if (wiimote && !wiimote->is_connected())
     {
       // FIXME: This never appears on screen due to timeout
@@ -626,6 +627,7 @@
     {
       console << "Wiimote already is connected" << std::endl;
     }
+#endif
 }
 
 void

Modified: trunk/windstille/src/player.cpp
===================================================================
--- trunk/windstille/src/player.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/player.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -158,7 +158,10 @@
   controller = InputManager::get_controller();
 
   laser_pointer->set_angle(laser_pointer->get_angle() + controller.get_axis_state(Y_AXIS) * delta);
+  //laser_pointer->set_angle(controller.get_axis_state(Y2_AXIS) * M_PI);
 
+  //std::cout << controller.get_axis_state(Y2_AXIS) * M_PI << std::endl;
+
   if (GameSession::current()->is_active())
     {
       switch(state) {

Modified: trunk/windstille/src/sprite3dview.cpp
===================================================================
--- trunk/windstille/src/sprite3dview.cpp	2007-07-06 09:18:28 UTC (rev 1520)
+++ trunk/windstille/src/sprite3dview.cpp	2007-07-07 15:28:58 UTC (rev 1521)
@@ -143,9 +143,12 @@
       sprite.set_action(actions[current_action]);
     }
 
-  rotation = Quaternion(Vector3(0.0f, 1.0f, 0.0f), controller.get_axis_state(X2_AXIS) * delta * 2.0f) * rotation;
-  rotation = Quaternion(Vector3(1.0f, 0.0f, 0.0f), controller.get_axis_state(Y2_AXIS) * delta * 2.0f) * rotation;
-  rotation = Quaternion(Vector3(0.0f, 0.0f, 1.0f), controller.get_axis_state(X_AXIS) * delta * 2.0f) * rotation;
+  rotation = Quaternion(Vector3(0.0f, 1.0f, 0.0f),
+                        -controller.get_axis_state(X_AXIS) * delta * 4.0f) * rotation;
+  rotation = Quaternion(Vector3(1.0f, 0.0f, 0.0f),
+                        controller.get_axis_state(X2_AXIS) * delta * 4.0f) * rotation;
+  rotation = Quaternion(Vector3(0.0f, 0.0f, 1.0f),
+                        controller.get_axis_state(Y2_AXIS) * delta * 4.0f) * rotation;
 
   if (controller.get_button_state(VIEW_CENTER_BUTTON))
     {



