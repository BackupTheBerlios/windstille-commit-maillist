From grumbel at mail.berlios.de  Mon Nov 12 04:31:55 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 04:31:55 +0100
Subject: [Windstille-commit] r1525 - trunk/griv
Message-ID: <200711120331.lAC3VtpS003745@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 04:31:54 +0100 (Mon, 12 Nov 2007)
New Revision: 1525

Modified:
   trunk/griv/griv.cpp
   trunk/griv/thumbnail.py
Log:
- added directory handling

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 02:28:15 UTC (rev 1524)
+++ trunk/griv/griv.cpp	2007-11-12 03:31:54 UTC (rev 1525)
@@ -1,3 +1,8 @@
+#include <dirent.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <sys/types.h>
+#include <unistd.h>
 #include <vector>
 #include <math.h>
 #include <sstream>
@@ -12,6 +17,42 @@
 int x_offset = 0;
 int y_offset = 0;
 
+bool is_directory(const std::string& pathname)
+{
+  struct stat buf;
+  stat(pathname.c_str(), &buf);
+  return S_ISDIR(buf.st_mode);
+}
+
+std::vector<std::string>
+open_directory(const std::string& pathname)
+{
+  std::vector<std::string> dir_list;
+
+  DIR* dp    = 0;
+  dirent* de = 0;
+
+  dp = ::opendir(pathname.c_str());
+
+  if (dp == 0)
+    {
+      std::cout << "System: Couldn't open: " << pathname << std::endl;
+    }
+  else
+    {
+      while ((de = ::readdir(dp)) != 0)
+        {
+          if (strcmp(de->d_name, ".")  != 0 &&
+              strcmp(de->d_name, "..") != 0)
+            dir_list.push_back(pathname + "/" + de->d_name);
+        }
+
+      closedir(dp);
+    }
+
+  return dir_list;
+}
+
 std::string getxattr(const std::string& pathname)
 {
   char buf[2048];
@@ -103,22 +144,34 @@
 
   void add(const std::string& filename)
   {
-    std::string md5 = getxattr(filename);
-    if (!md5.empty())
+    // if directory, do recursion
+    if (is_directory(filename))
       {
-        images.push_back(Image(md5));
+        std::vector<std::string> dir_list = open_directory(filename);
+        for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+          {
+            add(*i);
+          }
       }
     else
       {
-        std::cout << "Ignoring: " << filename << std::endl;
+        std::string md5 = getxattr(filename);
+        if (!md5.empty())
+          {
+            images.push_back(Image(md5));
+          }
+        else
+          {
+            std::cout << "Ignoring: " << filename << std::endl;
+          }
       }
   }
 
   void zoom_in()
   {
     res *= 2;
-    if (res > 1024)
-      res = 1024;
+    if (res > 2048)
+      res = 2048;
     else
       { //300,200 ~ 212, 134 ~ 64, 0
         x_offset *= 2;
@@ -147,24 +200,24 @@
   }
   atexit(SDL_Quit); 
   
-    Uint32 flags = 0;
+  Uint32 flags = 0;
   
-    if (1)
-      {
-        flags |= SDL_FULLSCREEN;
-        screen = SDL_SetVideoMode(1152, 864, 0, flags);
-      }
-    else
-      {
-        flags |= SDL_RESIZABLE;
-        screen = SDL_SetVideoMode(800, 600, 0, flags);
-      }
+  if (1)
+    {
+      flags |= SDL_FULLSCREEN;
+      screen = SDL_SetVideoMode(1152, 864, 0, flags);
+    }
+  else
+    {
+      flags |= SDL_RESIZABLE;
+      screen = SDL_SetVideoMode(800, 600, 0, flags);
+    }
     
-    if (screen == NULL) 
-      {
-        std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
-        exit(1);
-      }
+  if (screen == NULL) 
+    {
+      std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
 
   SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
 
@@ -173,7 +226,9 @@
   Workspace workspace;
 
   for(int i = 1; i < argc; ++i)
-    workspace.add(argv[i]);
+    {
+      workspace.add(argv[i]);
+    }
 
   bool drag_n_drop = false;
   int old_res = -1;
@@ -227,7 +282,8 @@
               case SDL_MOUSEBUTTONDOWN:
               case SDL_MOUSEBUTTONUP:
                 
-                if (event.button.button == 3)
+                if (event.button.button == 3 ||
+                    event.button.button == 5)
                   {
                     if (event.button.state == SDL_PRESSED)
                       {
@@ -235,7 +291,8 @@
                         workspace.zoom_out();
                       }
                   }
-                else if (event.button.button == 1)
+                else if (event.button.button == 1 ||
+                         event.button.button == 4)
                   {
                     if (event.button.state == SDL_PRESSED)
                       {

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-12 02:28:15 UTC (rev 1524)
+++ trunk/griv/thumbnail.py	2007-11-12 03:31:54 UTC (rev 1525)
@@ -51,7 +51,7 @@
             md5 = get_md5(pathname)
 
             orig_img = Image.open(pathname)
-            for res in [16, 32, 64, 128, 256, 512, 1024]:
+            for res in [16, 32, 64, 128, 256, 512, 1024, 2048]:
                 genthumb(pathname, md5, orig_img, res)
 
         except IOError, err:



From grumbel at mail.berlios.de  Mon Nov 12 13:15:32 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 13:15:32 +0100
Subject: [Windstille-commit] r1526 - trunk/griv
Message-ID: <200711121215.lACCFWb8021086@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 13:15:31 +0100 (Mon, 12 Nov 2007)
New Revision: 1526

Added:
   trunk/griv/REAME
Modified:
   trunk/griv/griv.cpp
   trunk/griv/thumbnail.py
Log:
- added HOME handling

Added: trunk/griv/REAME
===================================================================
--- trunk/griv/REAME	2007-11-12 03:31:54 UTC (rev 1525)
+++ trunk/griv/REAME	2007-11-12 12:15:31 UTC (rev 1526)
@@ -0,0 +1,17 @@
+griv 
+=====
+
+griv is a image viewer that allows you to directly zoom into thumbnails.
+
+Usage:
+======
+
+To use it, first you have to generate thumbnails by calling:
+
+./thumbnail.py [PATHNAME]...
+
+Once done, you can view any collectino of files in that directory:
+
+./griv [PATHNAME]...
+
+# EOF #

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 03:31:54 UTC (rev 1525)
+++ trunk/griv/griv.cpp	2007-11-12 12:15:31 UTC (rev 1526)
@@ -16,6 +16,7 @@
 SDL_Surface* screen = 0;
 int x_offset = 0;
 int y_offset = 0;
+std::string config_home;
 
 bool is_directory(const std::string& pathname)
 {
@@ -100,7 +101,7 @@
         if (surface == 0 || res != this->res)
           {
             std::ostringstream out;
-            out << "/home/ingo/.griv/" << res << "/" << uid << ".jpg";
+            out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
             surface = IMG_Load(out.str().c_str());
             //std::cout << "Loading: " << out.str() << std::endl;
             this->res = res;
@@ -194,6 +195,17 @@
 
 int main(int argc, char** argv)
 {
+  char* home;
+  if ((home = getenv("HOME")))
+    {
+      config_home = home;
+    }
+  else
+    {
+      std::cout << "Couldn't get HOME environment variable" << std::endl;
+      return 0;
+    }
+
   if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK) != 0) {
     std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
     exit(1);
@@ -310,7 +322,8 @@
 
       if (workspace.res != old_res ||
           old_x_offset != x_offset ||
-          old_y_offset != y_offset)
+          old_y_offset != y_offset
+          )
         {
           SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));
           workspace.draw();
@@ -322,7 +335,7 @@
         }
       else
         {
-          SDL_Delay(20);
+          SDL_Delay(5);
         }
     }
 

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-12 03:31:54 UTC (rev 1525)
+++ trunk/griv/thumbnail.py	2007-11-12 12:15:31 UTC (rev 1526)
@@ -6,8 +6,29 @@
 import md5
 import Image
 from stat import *
+from glob import fnmatch
 import dircache
 
+image_exts = [".jpg", ".png", ".JPG", ".JPEG", ".PNG"]
+
+config_home = os.getenv("HOME")
+
+if not config_home:
+    print "Couldn't find $HOME environment variable"
+    exit()
+else:
+    for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
+        dir = config_home + "/.griv/%d" % res
+        if not os.access(dir, os.F_OK):
+            os.mkdir(dir)
+            print "Created", dir
+
+def has_extension(filename, extensions):
+    for ext in extensions:
+        if filename.endswith(ext):
+            return True
+    return False
+
 def md5sum(filename):
     f = open(filename)
     m = md5.new()
@@ -24,38 +45,40 @@
         mtime = os.stat(filename)[ST_MTIME]
         xattr.setxattr(filename, "user.griv.md5", md5)
         xattr.setxattr(filename, "user.griv.mtime", "%d" % mtime)
-        xattr.setxattr(filename, "user.griv.filter", "BICUBIC")
+        xattr.setxattr(filename, "user.griv.filter", "repeated-antialias")
         
     return md5
 
-def genthumb(orig_filename, guid, img, res):
-    filename = "/home/ingo/.griv/%d/%s.jpg" % (res, guid)
-    if not os.path.exists(filename):
-        if res < img.size[0] or res < img.size[1]:
-            if (img.size[0] > img.size[1]):
-                size = (res, res * img.size[1] / img.size[0])
-            else:
-                size = (res * img.size[0] / img.size[1], res)
+def genthumb(orig_filename, guid, img):
+    global config_home
+    for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
+        filename = config_home + "/.griv/%d/%s.jpg" % (res, guid)
+        if not os.path.exists(filename):
+            if res < img.size[0] or res < img.size[1]:
+                if (img.size[0] > img.size[1]):
+                    size = (res, res * img.size[1] / img.size[0])
+                else:
+                    size = (res * img.size[0] / img.size[1], res)
 
-            new_img = img.resize(size, Image.BICUBIC) #ANTIALIAS)
-            new_img.save(filename, "JPEG", quality = 75)
+                img = img.resize(size, Image.ANTIALIAS) # BICUBIC) #
+                img.save(filename, "JPEG", quality = 75)
 
-            print "%s %4d %s => %s" % (guid, res, orig_filename, filename)
+                print "%s %4d %s => %s" % (guid, res, orig_filename, filename)
 
 def process_file(pathname):
     if os.path.isdir(pathname): 
         for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
             process_file(i)        
-    else:
+    elif has_extension(pathname, image_exts):
         try:
             md5 = get_md5(pathname)
-
             orig_img = Image.open(pathname)
-            for res in [16, 32, 64, 128, 256, 512, 1024, 2048]:
-                genthumb(pathname, md5, orig_img, res)
+            genthumb(pathname, md5, orig_img)
 
         except IOError, err:
-            print "Image Error:", err
+            print "Image Error:", pathname, err
+    else:
+        pass # ignore non-image files
 
 def main(args):
     for pathname in args:



From grumbel at mail.berlios.de  Mon Nov 12 13:15:57 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 13:15:57 +0100
Subject: [Windstille-commit] r1527 - trunk/griv
Message-ID: <200711121215.lACCFvhU021595@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 13:15:57 +0100 (Mon, 12 Nov 2007)
New Revision: 1527

Added:
   trunk/griv/README
Removed:
   trunk/griv/REAME
Log:
- added HOME handling

Copied: trunk/griv/README (from rev 1526, trunk/griv/REAME)

Deleted: trunk/griv/REAME
===================================================================
--- trunk/griv/REAME	2007-11-12 12:15:31 UTC (rev 1526)
+++ trunk/griv/REAME	2007-11-12 12:15:57 UTC (rev 1527)
@@ -1,17 +0,0 @@
-griv 
-=====
-
-griv is a image viewer that allows you to directly zoom into thumbnails.
-
-Usage:
-======
-
-To use it, first you have to generate thumbnails by calling:
-
-./thumbnail.py [PATHNAME]...
-
-Once done, you can view any collectino of files in that directory:
-
-./griv [PATHNAME]...
-
-# EOF #



From grumbel at mail.berlios.de  Mon Nov 12 21:25:55 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 21:25:55 +0100
Subject: [Windstille-commit] r1528 - trunk/griv
Message-ID: <200711122025.lACKPt9R024339@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 21:25:52 +0100 (Mon, 12 Nov 2007)
New Revision: 1528

Added:
   trunk/griv/griv.hpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/loading_1024.jpg
   trunk/griv/loading_128.jpg
   trunk/griv/loading_16.jpg
   trunk/griv/loading_256.jpg
   trunk/griv/loading_32.jpg
   trunk/griv/loading_512.jpg
   trunk/griv/loading_64.jpg
Modified:
   trunk/griv/SConstruct
   trunk/griv/griv.cpp
Log:
- splitted code in a few more files

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/SConstruct	2007-11-12 20:25:52 UTC (rev 1528)
@@ -3,6 +3,6 @@
 env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0"], LIBS=['SDL_image'])
 env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', 'griv.cpp')
+env.Program('griv', ['griv.cpp', 'loader.cpp'])
 
 # EOF #

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/griv.cpp	2007-11-12 20:25:52 UTC (rev 1528)
@@ -13,10 +13,14 @@
 #include "SDL.h"
 #include "SDL_image.h"
 
+#include "loader.hpp"
+#include "image.hpp"
+
 SDL_Surface* screen = 0;
 int x_offset = 0;
 int y_offset = 0;
 std::string config_home;
+bool force_redraw = false;
 
 bool is_directory(const std::string& pathname)
 {
@@ -69,57 +73,6 @@
   return std::string(buf, len);
 }
 
-struct Image
-{
-  std::string uid;
-  SDL_Surface* surface;
-  int res;
-  
-  Image(const std::string& uid) 
-    : uid(uid),
-      surface(0),
-      res(0)
-  {
-  }
-
-  void draw(int x, int y, int res)
-  {
-    if (x > screen->w ||
-        y > screen->h ||
-        x < -res || 
-        y < -res)
-      {
-        if (0)
-          if (surface)
-            {
-              SDL_FreeSurface(surface);
-              surface = 0;
-            }
-      }
-    else
-      {
-        if (surface == 0 || res != this->res)
-          {
-            std::ostringstream out;
-            out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
-            surface = IMG_Load(out.str().c_str());
-            //std::cout << "Loading: " << out.str() << std::endl;
-            this->res = res;
-          }
-
-        if (surface != 0)
-          {
-            SDL_Rect dstrect;
-
-            dstrect.x = x;
-            dstrect.y = y;
-
-            SDL_BlitSurface(surface, NULL, screen, &dstrect);
-          }
-      }
-  }
-};
-
 class Workspace
 {
 public:
@@ -214,9 +167,9 @@
   
   Uint32 flags = 0;
   
-  if (1)
+  if (0)
     {
-      flags |= SDL_FULLSCREEN;
+      //flags |= SDL_FULLSCREEN;
       screen = SDL_SetVideoMode(1152, 864, 0, flags);
     }
   else
@@ -257,6 +210,11 @@
                 exit(1);
                 break;
 
+              case SDL_VIDEORESIZE:
+                screen = SDL_SetVideoMode(event.resize.w, event.resize.h, 0, SDL_RESIZABLE);
+                force_redraw = true;
+                break;
+
               case SDL_KEYDOWN:
                 if (event.key.keysym.sym == SDLK_ESCAPE)
                   {
@@ -270,6 +228,7 @@
                       flags |= SDL_FULLSCREEN;
                     
                     screen = SDL_SetVideoMode(1152, 864, 0, flags);
+                    force_redraw = true;
                   }
                 else if (event.key.keysym.sym == SDLK_SPACE)
                   {
@@ -322,8 +281,8 @@
 
       if (workspace.res != old_res ||
           old_x_offset != x_offset ||
-          old_y_offset != y_offset
-          )
+          old_y_offset != y_offset ||
+          force_redraw)
         {
           SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));
           workspace.draw();
@@ -332,6 +291,7 @@
           old_res = workspace.res;
           old_x_offset = x_offset;
           old_y_offset = y_offset;
+          force_redraw = false;
         }
       else
         {

Added: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/griv.hpp	2007-11-12 20:25:52 UTC (rev 1528)
@@ -0,0 +1,37 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_GRIV_HPP
+#define HEADER_GRIV_HPP
+
+#include <SDL.h>
+#include <string>
+
+extern SDL_Surface* screen;
+extern std::string config_home;
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/griv.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/image.hpp	2007-11-12 20:25:52 UTC (rev 1528)
@@ -0,0 +1,96 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_IMAGE_HPP
+#define HEADER_IMAGE_HPP
+
+#include <sstream>
+#include "loader.hpp"
+#include "griv.hpp"
+
+class Image
+{
+public:
+  std::string uid;
+  SDL_Surface* surface;
+  int res;
+  
+  Image(const std::string& uid) 
+    : uid(uid),
+      surface(0),
+      res(0)
+  {
+  }
+
+  void receive(SDL_Surface* new_surface)
+  {
+    if (surface)
+      SDL_FreeSurface(surface);    
+    
+    surface = new_surface;
+  }
+
+  void draw(int x, int y, int res)
+  {
+    if (x > screen->w ||
+        y > screen->h ||
+        x < -res || 
+        y < -res)
+      {
+        if (0)
+          if (surface)
+            {
+              SDL_FreeSurface(surface);
+              surface = 0;
+            }
+      }
+    else
+      {
+        if (surface == 0 || res != this->res)
+          {
+            std::ostringstream out;
+            out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
+            loader.request(out.str(), this);
+            //surface = IMG_Load(out.str().c_str());
+            //std::cout << "Loading: " << out.str() << std::endl;
+            this->res = res;
+          }
+
+        if (surface != 0)
+          {
+            SDL_Rect dstrect;
+
+            dstrect.x = x;
+            dstrect.y = y;
+
+            SDL_BlitSurface(surface, NULL, screen, &dstrect);
+          }
+      }
+  }
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/image.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/loader.cpp	2007-11-12 20:25:52 UTC (rev 1528)
@@ -0,0 +1,47 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "SDL_image.h"
+#include "image.hpp"
+#include "loader.hpp"
+
+Loader loader;
+
+Loader::Loader()
+{
+}
+
+Loader::~Loader()
+{
+}
+
+void
+Loader::request(const std::string& filename, Image* receiver)
+{
+  SDL_Surface* surface = IMG_Load(filename.c_str());
+  receiver->receive(surface);
+}
+
+/* EOF */


Property changes on: trunk/griv/loader.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-12 12:15:57 UTC (rev 1527)
+++ trunk/griv/loader.hpp	2007-11-12 20:25:52 UTC (rev 1528)
@@ -0,0 +1,51 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_LOADER_HPP
+#define HEADER_LOADER_HPP
+
+#include <string>
+
+class Image;
+
+/** */
+class Loader
+{
+private:
+public:
+  Loader();
+  ~Loader();
+
+  void request(const std::string& filename, Image* receiver);
+private:
+  Loader (const Loader&);
+  Loader& operator= (const Loader&);
+};
+
+extern Loader loader;
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/loader.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/loading_1024.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_1024.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_128.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_128.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_16.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_16.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_256.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_256.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_32.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_32.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_512.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_512.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg

Added: trunk/griv/loading_64.jpg
===================================================================
(Binary files differ)


Property changes on: trunk/griv/loading_64.jpg
___________________________________________________________________
Name: svn:mime-type
   + image/jpeg



From grumbel at mail.berlios.de  Mon Nov 12 21:44:13 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 21:44:13 +0100
Subject: [Windstille-commit] r1529 - trunk/griv
Message-ID: <200711122044.lACKiD5a028601@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 21:44:11 +0100 (Mon, 12 Nov 2007)
New Revision: 1529

Added:
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/image.cpp
   trunk/griv/workspace.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.hpp
Log:
- splitted code in a few more files

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/SConstruct	2007-11-12 20:44:11 UTC (rev 1529)
@@ -3,6 +3,6 @@
 env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0"], LIBS=['SDL_image'])
 env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', ['griv.cpp', 'loader.cpp'])
+env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp'])
 
 # EOF #

Added: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/filesystem.cpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -0,0 +1,87 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <stdexcept>
+#include <iostream>
+#include <dirent.h>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <attr/xattr.h>
+
+#include "filesystem.hpp"
+
+bool is_directory(const std::string& pathname)
+{
+  struct stat buf;
+  stat(pathname.c_str(), &buf);
+  return S_ISDIR(buf.st_mode);
+}
+
+std::vector<std::string>
+open_directory(const std::string& pathname)
+{
+  std::vector<std::string> dir_list;
+
+  DIR* dp    = 0;
+  dirent* de = 0;
+
+  dp = ::opendir(pathname.c_str());
+
+  if (dp == 0)
+    {
+      std::cout << "System: Couldn't open: " << pathname << std::endl;
+    }
+  else
+    {
+      while ((de = ::readdir(dp)) != 0)
+        {
+          if (strcmp(de->d_name, ".")  != 0 &&
+              strcmp(de->d_name, "..") != 0)
+            dir_list.push_back(pathname + "/" + de->d_name);
+        }
+
+      closedir(dp);
+    }
+
+  return dir_list;
+}
+
+std::string getxattr(const std::string& pathname)
+{
+  char buf[2048];
+  int len;
+  if ((len = getxattr (pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
+    {
+      if (errno == ENOATTR)
+        return "";
+      else
+        throw std::runtime_error("Couldn't get xattr for " + pathname);
+    }
+
+  return std::string(buf, len);
+}
+
+/* EOF */


Property changes on: trunk/griv/filesystem.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/filesystem.hpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -0,0 +1,38 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_FILESYSTEM_HPP
+#define HEADER_FILESYSTEM_HPP
+
+#include <string>
+#include <vector>
+
+bool is_directory(const std::string& pathname);
+std::vector<std::string> open_directory(const std::string& pathname);
+std::string getxattr(const std::string& pathname);
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/filesystem.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/griv.cpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -1,18 +1,13 @@
-#include <dirent.h>
-#include <sys/stat.h>
-#include <sys/types.h>
-#include <sys/types.h>
-#include <unistd.h>
 #include <vector>
 #include <math.h>
 #include <sstream>
 #include <sys/types.h>
-#include <attr/xattr.h>
 #include <stdexcept>
 #include <iostream>
 #include "SDL.h"
 #include "SDL_image.h"
 
+#include "workspace.hpp"
 #include "loader.hpp"
 #include "image.hpp"
 
@@ -22,130 +17,6 @@
 std::string config_home;
 bool force_redraw = false;
 
-bool is_directory(const std::string& pathname)
-{
-  struct stat buf;
-  stat(pathname.c_str(), &buf);
-  return S_ISDIR(buf.st_mode);
-}
-
-std::vector<std::string>
-open_directory(const std::string& pathname)
-{
-  std::vector<std::string> dir_list;
-
-  DIR* dp    = 0;
-  dirent* de = 0;
-
-  dp = ::opendir(pathname.c_str());
-
-  if (dp == 0)
-    {
-      std::cout << "System: Couldn't open: " << pathname << std::endl;
-    }
-  else
-    {
-      while ((de = ::readdir(dp)) != 0)
-        {
-          if (strcmp(de->d_name, ".")  != 0 &&
-              strcmp(de->d_name, "..") != 0)
-            dir_list.push_back(pathname + "/" + de->d_name);
-        }
-
-      closedir(dp);
-    }
-
-  return dir_list;
-}
-
-std::string getxattr(const std::string& pathname)
-{
-  char buf[2048];
-  int len;
-  if ((len = getxattr (pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
-    {
-      if (errno == ENOATTR)
-        return "";
-      else
-        throw std::runtime_error("Couldn't get xattr for " + pathname);
-    }
-
-  return std::string(buf, len);
-}
-
-class Workspace
-{
-public:
-  std::vector<Image> images;
-  int res;
-  
-public:
-  Workspace()
-  {
-    res = 16;
-  }
-
-  void draw()
-  {
-    int w = int(sqrt(4 * images.size() / 3));
-    for(int i = 0; i < int(images.size()); ++i)
-      {
-        images[i].draw((i % w) * res + x_offset + screen->w/2,
-                       (i / w) * res + y_offset + screen->h/2,
-                       res);
-      }
-  }
-
-  void add(const std::string& filename)
-  {
-    // if directory, do recursion
-    if (is_directory(filename))
-      {
-        std::vector<std::string> dir_list = open_directory(filename);
-        for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
-          {
-            add(*i);
-          }
-      }
-    else
-      {
-        std::string md5 = getxattr(filename);
-        if (!md5.empty())
-          {
-            images.push_back(Image(md5));
-          }
-        else
-          {
-            std::cout << "Ignoring: " << filename << std::endl;
-          }
-      }
-  }
-
-  void zoom_in()
-  {
-    res *= 2;
-    if (res > 2048)
-      res = 2048;
-    else
-      { //300,200 ~ 212, 134 ~ 64, 0
-        x_offset *= 2;
-        y_offset *= 2;
-      }
-  }
-
-  void zoom_out()
-  {
-    res /= 2;
-    if (res < 16)
-      res = 16;
-    else
-      {
-        x_offset /= 2;
-        y_offset /= 2;
-      }
-  }
-};
-
 int main(int argc, char** argv)
 {
   char* home;
@@ -188,6 +59,8 @@
 
   SDL_EnableUNICODE(1);
 
+  Image::init();
+
   Workspace workspace;
 
   for(int i = 1; i < argc; ++i)

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/griv.hpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -29,6 +29,8 @@
 #include <SDL.h>
 #include <string>
 
+extern int x_offset;
+extern int y_offset;
 extern SDL_Surface* screen;
 extern std::string config_home;
 

Added: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/image.cpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -0,0 +1,49 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "SDL_image.h"
+#include "image.hpp"
+
+SDL_Surface* Image::loading_16;
+SDL_Surface* Image::loading_32;
+SDL_Surface* Image::loading_64;
+SDL_Surface* Image::loading_128;
+SDL_Surface* Image::loading_256;
+SDL_Surface* Image::loading_512;
+SDL_Surface* Image::loading_1024;
+
+void 
+Image::init()
+{
+  loading_1024 = IMG_Load("loading_1024.jpg");
+  loading_512  = IMG_Load("loading_512.jpg");
+  loading_256  = IMG_Load("loading_256.jpg");
+  loading_128  = IMG_Load("loading_128.jpg");
+  loading_64   = IMG_Load("loading_64.jpg");
+  loading_32   = IMG_Load("loading_32.jpg");
+  loading_16   = IMG_Load("loading_16.jpg");
+}
+
+/* EOF */


Property changes on: trunk/griv/image.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/image.hpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -33,6 +33,16 @@
 class Image
 {
 public:
+  static SDL_Surface* loading_16;
+  static SDL_Surface* loading_32;
+  static SDL_Surface* loading_64;
+  static SDL_Surface* loading_128;
+  static SDL_Surface* loading_256;
+  static SDL_Surface* loading_512;
+  static SDL_Surface* loading_1024;
+
+  static void init();
+
   std::string uid;
   SDL_Surface* surface;
   int res;

Added: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-12 20:25:52 UTC (rev 1528)
+++ trunk/griv/workspace.hpp	2007-11-12 20:44:11 UTC (rev 1529)
@@ -0,0 +1,109 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_WORKSPACE_HPP
+#define HEADER_WORKSPACE_HPP
+
+#include <vector>
+#include "filesystem.hpp"
+#include "griv.hpp"
+#include "image.hpp"
+
+class Workspace
+{
+public:
+  std::vector<Image> images;
+  int res;
+  
+public:
+  Workspace()
+  {
+    res = 16;
+  }
+
+  void draw()
+  {
+    int w = int(sqrt(4 * images.size() / 3));
+    for(int i = 0; i < int(images.size()); ++i)
+      {
+        images[i].draw((i % w) * res + x_offset + screen->w/2,
+                       (i / w) * res + y_offset + screen->h/2,
+                       res);
+      }
+  }
+
+  void add(const std::string& filename)
+  {
+    // if directory, do recursion
+    if (is_directory(filename))
+      {
+        std::vector<std::string> dir_list = open_directory(filename);
+        for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+          {
+            add(*i);
+          }
+      }
+    else
+      {
+        std::string md5 = getxattr(filename);
+        if (!md5.empty())
+          {
+            images.push_back(Image(md5));
+          }
+        else
+          {
+            std::cout << "Ignoring: " << filename << std::endl;
+          }
+      }
+  }
+
+  void zoom_in()
+  {
+    res *= 2;
+    if (res > 1024)
+      res = 1024;
+    else
+      { //300,200 ~ 212, 134 ~ 64, 0
+        x_offset *= 2;
+        y_offset *= 2;
+      }
+  }
+
+  void zoom_out()
+  {
+    res /= 2;
+    if (res < 16)
+      res = 16;
+    else
+      {
+        x_offset /= 2;
+        y_offset /= 2;
+      }
+  }
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/workspace.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Mon Nov 12 23:09:08 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 23:09:08 +0100
Subject: [Windstille-commit] r1530 - trunk/griv
Message-ID: <200711122209.lACM98Yu007333@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 23:09:07 +0100 (Mon, 12 Nov 2007)
New Revision: 1530

Modified:
   trunk/griv/SConstruct
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/loading_128.jpg
   trunk/griv/workspace.hpp
Log:
- added multithread support

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/SConstruct	2007-11-12 22:09:07 UTC (rev 1530)
@@ -1,6 +1,6 @@
 # -*- python -*-
 
-env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0"], LIBS=['SDL_image'])
+env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image'])
 env.ParseConfig("sdl-config --libs --cflags")
 
 env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp'])

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/griv.cpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -15,7 +15,7 @@
 int x_offset = 0;
 int y_offset = 0;
 std::string config_home;
-bool force_redraw = false;
+bool force_redraw = true;
 
 int main(int argc, char** argv)
 {
@@ -72,6 +72,8 @@
   int old_res = -1;
   int old_x_offset = -1;
   int old_y_offset = -1;
+  Uint32 next_redraw = 0;
+  loader.launch_thread();
   while(true)
     {
       SDL_Event event;
@@ -93,6 +95,10 @@
                   {
                     exit(1);
                   }
+                else if (event.key.keysym.sym == SDLK_RETURN)
+                  {
+                    loader.process_job();
+                  }
                 else if (event.key.keysym.sym == SDLK_F11)
                   {
                     if (flags & SDL_FULLSCREEN)
@@ -131,8 +137,9 @@
                   {
                     if (event.button.state == SDL_PRESSED)
                       {
-                        std::cout << "zoom out" << std::endl;
+                        //std::cout << "zoom out" << std::endl;
                         workspace.zoom_out();
+                        loader.clear();
                       }
                   }
                 else if (event.button.button == 1 ||
@@ -140,8 +147,9 @@
                   {
                     if (event.button.state == SDL_PRESSED)
                       {
-                        std::cout << "zoom in" << std::endl;
+                        //std::cout << "zoom in" << std::endl;
                         workspace.zoom_in();
+                        loader.clear();
                       }
                   }
                 else if (event.button.button == 2)
@@ -155,8 +163,9 @@
       if (workspace.res != old_res ||
           old_x_offset != x_offset ||
           old_y_offset != y_offset ||
-          force_redraw)
+          (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())))
         {
+          force_redraw = false;
           SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));
           workspace.draw();
           SDL_Flip(screen);
@@ -164,7 +173,7 @@
           old_res = workspace.res;
           old_x_offset = x_offset;
           old_y_offset = y_offset;
-          force_redraw = false;
+          next_redraw = SDL_GetTicks() + 500;
         }
       else
         {

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/griv.hpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -33,6 +33,7 @@
 extern int y_offset;
 extern SDL_Surface* screen;
 extern std::string config_home;
+extern bool force_redraw;
 
 #endif
 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/image.cpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include "SDL_image.h"
 #include "image.hpp"
 
@@ -37,6 +38,8 @@
 void 
 Image::init()
 {
+  std::cout << "Image" << std::endl;
+
   loading_1024 = IMG_Load("loading_1024.jpg");
   loading_512  = IMG_Load("loading_512.jpg");
   loading_256  = IMG_Load("loading_256.jpg");

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/image.hpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -43,23 +43,51 @@
 
   static void init();
 
+  static SDL_Surface* placeholder(int res)
+  {
+    if (res == 16)
+      return loading_16;
+    else if (res == 32)
+      return loading_32;
+    else if (res == 64)
+      return loading_64;
+    else if (res == 128)
+      return loading_128;
+    else if (res == 256)
+      return loading_256;
+    else if (res == 512)
+      return loading_512;
+    else if (res == 1024)
+      return loading_1024;
+    else 
+      return loading_1024;
+  }
+
   std::string uid;
   SDL_Surface* surface;
   int res;
+  bool image_requested;
   
   Image(const std::string& uid) 
     : uid(uid),
       surface(0),
-      res(0)
+      res(0),
+      image_requested(false)
   {
   }
 
   void receive(SDL_Surface* new_surface)
   {
-    if (surface)
-      SDL_FreeSurface(surface);    
+    if (new_surface)
+      {
+        if (surface)
+          SDL_FreeSurface(surface);    
     
-    surface = new_surface;
+        //std::cout << "Image recieved: " << new_surface << std::endl;
+        surface = new_surface;
+        force_redraw = true;
+      }
+    image_requested = false;
   }
 
   void draw(int x, int y, int res)
@@ -68,8 +96,8 @@
         y > screen->h ||
         x < -res || 
         y < -res)
-      {
-        if (0)
+      { // Image out of screen
+        if (res >= 512)
           if (surface)
             {
               SDL_FreeSurface(surface);
@@ -77,26 +105,23 @@
             }
       }
     else
-      {
-        if (surface == 0 || res != this->res)
-          {
-            std::ostringstream out;
-            out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
-            loader.request(out.str(), this);
-            //surface = IMG_Load(out.str().c_str());
-            //std::cout << "Loading: " << out.str() << std::endl;
-            this->res = res;
-          }
+      { // image on screen
+        if (!image_requested)
+          if (surface == 0 || res != this->res)
+            {
+              //std::cout << "Requesting" << std::endl;
+              loader.request(uid, res, this);
+              image_requested = true;
+              this->res = res;
+            }
 
-        if (surface != 0)
-          {
-            SDL_Rect dstrect;
-
-            dstrect.x = x;
-            dstrect.y = y;
-
-            SDL_BlitSurface(surface, NULL, screen, &dstrect);
-          }
+        SDL_Rect dstrect;
+        dstrect.x = x;
+        dstrect.y = y;
+        if (surface)
+          SDL_BlitSurface(surface, NULL, screen, &dstrect);
+        else if (image_requested)
+          SDL_BlitSurface(placeholder(res), NULL, screen, &dstrect);        
       }
   }
 };

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/loader.cpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include "SDL_image.h"
 #include "image.hpp"
 #include "loader.hpp"
@@ -31,17 +32,78 @@
 
 Loader::Loader()
 {
+  mutex  = SDL_CreateMutex();
+  thread = 0;
 }
 
 Loader::~Loader()
 {
+  SDL_DestroyMutex(mutex);
 }
 
+int
+Loader::thread_func(void*)
+{
+  while(1)
+    {
+      loader.process_job();
+
+      if (loader.empty())
+        SDL_Delay(100);
+    }
+  return 0;
+}
+
 void
-Loader::request(const std::string& filename, Image* receiver)
+Loader::launch_thread()
 {
-  SDL_Surface* surface = IMG_Load(filename.c_str());
-  receiver->receive(surface);
+  thread = SDL_CreateThread(&Loader::thread_func, 0);
 }
 
+void
+Loader::request(const std::string& uid, int res, Image* receiver)
+{
+  std::ostringstream out;
+  out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
+
+  SDL_LockMutex(mutex);
+  jobs.push_back(Job(out.str(), receiver));
+  SDL_UnlockMutex(mutex);
+}
+
+void
+Loader::process_job()
+{ // Thread this
+  SDL_LockMutex(mutex);
+  if (!jobs.empty())
+    {
+      // Lock
+      Job job = jobs.back();
+      jobs.pop_back();
+      // Unlock
+
+      //std::cout << "Loading: " << job.filename << std::endl;
+      SDL_Surface* img = IMG_Load(job.filename.c_str());
+      job.image->receive(img);
+    }
+  SDL_UnlockMutex(mutex);
+}
+
+void
+Loader::clear()
+{
+  SDL_LockMutex(mutex);
+  for(Jobs::iterator i = jobs.begin(); i != jobs.end(); ++i)
+      (*i).image->receive(0);
+
+  jobs.clear();
+  SDL_UnlockMutex(mutex);
+}
+
+bool
+Loader::empty()
+{
+  return jobs.empty();
+}
+
 /* EOF */

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/loader.hpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -26,19 +26,44 @@
 #ifndef HEADER_LOADER_HPP
 #define HEADER_LOADER_HPP
 
+#include "SDL.h"
+#include "SDL_thread.h"
+
 #include <string>
+#include <vector>
 
 class Image;
 
+struct Job
+{
+  std::string filename;
+  Image* image;
+
+  Job(const std::string& filename, Image* image)
+    : filename(filename), image(image)
+  {}
+};
+
 /** */
 class Loader
 {
 private:
+  typedef std::vector<Job> Jobs;
+  Jobs jobs;
+  SDL_mutex* mutex;
+  SDL_Thread* thread;
 public:
+  static int thread_func(void*);
+
   Loader();
   ~Loader();
 
-  void request(const std::string& filename, Image* receiver);
+  void launch_thread();
+
+  void request(const std::string& uid, int res, Image* receiver);
+  void process_job();
+  void clear();
+  bool empty();
 private:
   Loader (const Loader&);
   Loader& operator= (const Loader&);

Modified: trunk/griv/loading_128.jpg
===================================================================
(Binary files differ)

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-12 20:44:11 UTC (rev 1529)
+++ trunk/griv/workspace.hpp	2007-11-12 22:09:07 UTC (rev 1530)
@@ -31,6 +31,15 @@
 #include "griv.hpp"
 #include "image.hpp"
 
+inline bool has_suffix(const std::string& str, const std::string& suffix)
+{
+  if (str.length() >= suffix.length())
+    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
+  else
+    return false;
+}
+
+
 class Workspace
 {
 public:
@@ -59,13 +68,14 @@
     // if directory, do recursion
     if (is_directory(filename))
       {
+        std::cout << '.' << std::flush;
         std::vector<std::string> dir_list = open_directory(filename);
         for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
           {
             add(*i);
           }
       }
-    else
+    else if (has_suffix(filename, ".jpg"))
       {
         std::string md5 = getxattr(filename);
         if (!md5.empty())



From grumbel at mail.berlios.de  Mon Nov 12 23:54:14 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 23:54:14 +0100
Subject: [Windstille-commit] r1531 - trunk/griv
Message-ID: <200711122254.lACMsEkf009859@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 23:54:14 +0100 (Mon, 12 Nov 2007)
New Revision: 1531

Modified:
   trunk/griv/image.hpp
   trunk/griv/workspace.hpp
Log:
- fixed race condition

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-12 22:09:07 UTC (rev 1530)
+++ trunk/griv/image.hpp	2007-11-12 22:54:14 UTC (rev 1531)
@@ -67,31 +67,48 @@
   SDL_Surface* surface;
   int res;
   bool image_requested;
-  
+
+  SDL_mutex* mutex;
+
+
   Image(const std::string& uid) 
     : uid(uid),
       surface(0),
       res(0),
       image_requested(false)
   {
+    mutex = SDL_CreateMutex();
   }
 
+  ~Image()
+  {
+    SDL_DestroyMutex(mutex);
+  }
+
   void receive(SDL_Surface* new_surface)
-  {
+  { 
+    SDL_LockMutex(mutex);
     if (new_surface)
       {
         if (surface)
-          SDL_FreeSurface(surface);    
-    
-        //std::cout << "Image recieved: " << new_surface << std::endl;
-        surface = new_surface;
+          {
+            SDL_Surface* old_surface = surface;
+            surface = new_surface;
+            SDL_FreeSurface(old_surface); 
+          }
+        else
+          {
+            surface = new_surface;
+          }
         force_redraw = true;
       }
     image_requested = false;
+    SDL_UnlockMutex(mutex);
   }
 
   void draw(int x, int y, int res)
   {
+    SDL_LockMutex(mutex);
     if (x > screen->w ||
         y > screen->h ||
         x < -res || 
@@ -123,6 +140,7 @@
         else if (image_requested)
           SDL_BlitSurface(placeholder(res), NULL, screen, &dstrect);        
       }
+    SDL_UnlockMutex(mutex);
   }
 };
 

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-12 22:09:07 UTC (rev 1530)
+++ trunk/griv/workspace.hpp	2007-11-12 22:54:14 UTC (rev 1531)
@@ -43,7 +43,7 @@
 class Workspace
 {
 public:
-  std::vector<Image> images;
+  std::vector<Image*> images;
   int res;
   
 public:
@@ -57,9 +57,9 @@
     int w = int(sqrt(4 * images.size() / 3));
     for(int i = 0; i < int(images.size()); ++i)
       {
-        images[i].draw((i % w) * res + x_offset + screen->w/2,
-                       (i / w) * res + y_offset + screen->h/2,
-                       res);
+        images[i]->draw((i % w) * res + x_offset + screen->w/2,
+                        (i / w) * res + y_offset + screen->h/2,
+                        res);
       }
   }
 
@@ -75,12 +75,14 @@
             add(*i);
           }
       }
-    else if (has_suffix(filename, ".jpg"))
+    else if (has_suffix(filename, ".jpg") ||
+             has_suffix(filename, ".JPG")
+             )
       {
         std::string md5 = getxattr(filename);
         if (!md5.empty())
           {
-            images.push_back(Image(md5));
+            images.push_back(new Image(md5));
           }
         else
           {



From grumbel at mail.berlios.de  Tue Nov 13 10:31:37 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 13 Nov 2007 10:31:37 +0100
Subject: [Windstille-commit] r1532 - trunk/griv
Message-ID: <200711130931.lAD9VbAH027099@sheep.berlios.de>

Author: grumbel
Date: 2007-11-13 10:31:36 +0100 (Tue, 13 Nov 2007)
New Revision: 1532

Added:
   trunk/griv/display.cpp
   trunk/griv/display.hpp
Modified:
   trunk/griv/
   trunk/griv/SConstruct
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/thumbnail.py
   trunk/griv/workspace.hpp
Log:
- some more source code splitting


Property changes on: trunk/griv
___________________________________________________________________
Name: svn:ignore
   + griv
.sconsign.dblite


Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/SConstruct	2007-11-13 09:31:36 UTC (rev 1532)
@@ -3,6 +3,6 @@
 env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image'])
 env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp'])
+env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp', 'display.cpp'])
 
 # EOF #

Added: trunk/griv/display.cpp
===================================================================
--- trunk/griv/display.cpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/display.cpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -0,0 +1,86 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include "display.hpp"
+
+SDL_Surface* Display::screen = 0;
+Uint32 Display::flags = 0;
+
+void
+Display::init()
+{
+  if (SDL_Init(SDL_INIT_VIDEO) != 0)
+    {
+      std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
+  atexit(SDL_Quit); 
+ 
+  flags = SDL_RESIZABLE;
+  screen = SDL_SetVideoMode(1024, 768, 0, flags);
+    
+  if (screen == NULL) 
+    {
+      std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
+      exit(1);
+    }
+
+  SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
+
+  SDL_EnableUNICODE(1);
+}
+
+void
+Display::toggle_fullscreen()
+{
+  if (flags & SDL_FULLSCREEN)
+    flags = SDL_RESIZABLE;
+  else
+    flags |= SDL_FULLSCREEN;
+ 
+  // Should use desktop resolution for this instead, but how?
+  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+}
+
+void
+Display::resize(int w, int h)
+{
+  screen = SDL_SetVideoMode(w, h, 0, SDL_RESIZABLE);
+}
+
+void
+Display::flip()
+{
+  SDL_Flip(screen);  
+}
+
+void
+Display::clear()
+{
+  SDL_FillRect(Display::get_screen(), NULL, SDL_MapRGB(Display::get_screen()->format, 0, 0, 0));
+}
+
+/* EOF */


Property changes on: trunk/griv/display.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/display.hpp
===================================================================
--- trunk/griv/display.hpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/display.hpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -0,0 +1,57 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_DISPLAY_HPP
+#define HEADER_DISPLAY_HPP
+
+#include "SDL.h"
+
+/** */
+class Display
+{
+private:
+  static SDL_Surface* screen;
+  static Uint32 flags;
+
+public:
+  static void init();
+  static void deinit();
+
+  static void toggle_fullscreen();
+
+  static int get_width()  { return screen->w; }
+  static int get_height() { return screen->h; }
+  static SDL_Surface* get_screen() { return screen; }
+  static void resize(int w, int h);
+  static void flip();
+  static void clear();
+private:
+  Display (const Display&);
+  Display& operator= (const Display&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/display.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/filesystem.cpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -33,7 +33,10 @@
 
 #include "filesystem.hpp"
 
-bool is_directory(const std::string& pathname)
+std::string Filesystem::home_directory;
+
+bool
+Filesystem::is_directory(const std::string& pathname)
 {
   struct stat buf;
   stat(pathname.c_str(), &buf);
@@ -41,7 +44,7 @@
 }
 
 std::vector<std::string>
-open_directory(const std::string& pathname)
+Filesystem::open_directory(const std::string& pathname)
 {
   std::vector<std::string> dir_list;
 
@@ -69,11 +72,12 @@
   return dir_list;
 }
 
-std::string getxattr(const std::string& pathname)
+std::string
+Filesystem::getxattr(const std::string& pathname)
 {
   char buf[2048];
   int len;
-  if ((len = getxattr (pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
+  if ((len = ::getxattr(pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
     {
       if (errno == ENOATTR)
         return "";
@@ -84,4 +88,23 @@
   return std::string(buf, len);
 }
 
+void
+Filesystem::init()
+{
+  char* home;
+  if ((home = getenv("HOME")))
+    {
+      home_directory = home;
+    }
+  else
+    {
+      throw std::runtime_error("Couldn't get HOME environment variable");
+    }
+}
+
+void
+Filesystem::deinit()
+{
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/filesystem.hpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -29,10 +29,20 @@
 #include <string>
 #include <vector>
 
-bool is_directory(const std::string& pathname);
-std::vector<std::string> open_directory(const std::string& pathname);
-std::string getxattr(const std::string& pathname);
+class Filesystem
+{
+private:
+  static std::string home_directory;
 
+public:
+  static bool is_directory(const std::string& pathname);
+  static std::vector<std::string> open_directory(const std::string& pathname);
+  static std::string getxattr(const std::string& pathname);
+  static std::string get_home() { return home_directory; }
+  static void init();
+  static void deinit();
+};
+
 #endif
 
 /* EOF */

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/griv.cpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -7,170 +7,145 @@
 #include "SDL.h"
 #include "SDL_image.h"
 
+#include "display.hpp"
 #include "workspace.hpp"
 #include "loader.hpp"
 #include "image.hpp"
 
-SDL_Surface* screen = 0;
 int x_offset = 0;
 int y_offset = 0;
 std::string config_home;
 bool force_redraw = true;
 
-int main(int argc, char** argv)
+Griv::Griv()
 {
-  char* home;
-  if ((home = getenv("HOME")))
-    {
-      config_home = home;
-    }
-  else
-    {
-      std::cout << "Couldn't get HOME environment variable" << std::endl;
-      return 0;
-    }
+}
 
-  if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK) != 0) {
-    std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
-    exit(1);
-  }
-  atexit(SDL_Quit); 
-  
-  Uint32 flags = 0;
-  
-  if (0)
-    {
-      //flags |= SDL_FULLSCREEN;
-      screen = SDL_SetVideoMode(1152, 864, 0, flags);
-    }
-  else
-    {
-      flags |= SDL_RESIZABLE;
-      screen = SDL_SetVideoMode(800, 600, 0, flags);
-    }
-    
-  if (screen == NULL) 
-    {
-      std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
-      exit(1);
-    }
+Griv::~Griv()
+{
+}
 
-  SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
-
-  SDL_EnableUNICODE(1);
-
-  Image::init();
-
-  Workspace workspace;
-
-  for(int i = 1; i < argc; ++i)
+void
+Griv::process_events()
+{
+  SDL_Event event;
+  while (SDL_PollEvent(&event))
     {
-      workspace.add(argv[i]);
-    }
-
-  bool drag_n_drop = false;
-  int old_res = -1;
-  int old_x_offset = -1;
-  int old_y_offset = -1;
-  Uint32 next_redraw = 0;
-  loader.launch_thread();
-  while(true)
-    {
-      SDL_Event event;
-      while (SDL_PollEvent(&event))
+      switch(event.type)
         {
-          switch(event.type)
-            {
-              case SDL_QUIT: // FIXME: make this into a GameEvent
-                exit(1);
-                break;
+          case SDL_QUIT: // FIXME: make this into a GameEvent
+            exit(1);
+            break;
 
-              case SDL_VIDEORESIZE:
-                screen = SDL_SetVideoMode(event.resize.w, event.resize.h, 0, SDL_RESIZABLE);
+          case SDL_VIDEORESIZE:
+            Display::resize(event.resize.w, event.resize.h);
+            force_redraw = true;
+            break;
+
+          case SDL_KEYDOWN:
+            if (event.key.keysym.sym == SDLK_ESCAPE)
+              {
+                exit(1);
+              }
+            else if (event.key.keysym.sym == SDLK_RETURN)
+              {
+                loader.process_job();
+              }
+            else if (event.key.keysym.sym == SDLK_F11)
+              {
+                Display::toggle_fullscreen();
                 force_redraw = true;
-                break;
+              }
+            else if (event.key.keysym.sym == SDLK_SPACE)
+              {
+                x_offset = 0;
+                y_offset = 0;
+              }
+            else if (event.key.keysym.sym == SDLK_b)
+              {
+                std::cout << x_offset << ", " << y_offset << std::endl;
+              }
+            break;
 
-              case SDL_KEYDOWN:
-                if (event.key.keysym.sym == SDLK_ESCAPE)
-                  {
-                    exit(1);
-                  }
-                else if (event.key.keysym.sym == SDLK_RETURN)
-                  {
-                    loader.process_job();
-                  }
-                else if (event.key.keysym.sym == SDLK_F11)
-                  {
-                    if (flags & SDL_FULLSCREEN)
-                      flags = 0;
-                    else
-                      flags |= SDL_FULLSCREEN;
-                    
-                    screen = SDL_SetVideoMode(1152, 864, 0, flags);
-                    force_redraw = true;
-                  }
-                else if (event.key.keysym.sym == SDLK_SPACE)
-                  {
-                    x_offset = 0;
-                    y_offset = 0;
-                  }
-                else if (event.key.keysym.sym == SDLK_b)
-                  {
-                    std::cout << x_offset << ", " << y_offset << std::endl;
-                  }
-                break;
 
+          case SDL_MOUSEMOTION:
+            if (drag_n_drop)
+              {
+                x_offset += event.motion.xrel*4;
+                y_offset += event.motion.yrel*4;
+              }
+            break;
 
-              case SDL_MOUSEMOTION:
-                if (drag_n_drop)
-                  {
-                    x_offset += event.motion.xrel*4;
-                    y_offset += event.motion.yrel*4;
-                  }
-                break;
-
-              case SDL_MOUSEBUTTONDOWN:
-              case SDL_MOUSEBUTTONUP:
+          case SDL_MOUSEBUTTONDOWN:
+          case SDL_MOUSEBUTTONUP:
                 
-                if (event.button.button == 3 ||
-                    event.button.button == 5)
+            if (event.button.button == 3 ||
+                event.button.button == 5)
+              {
+                if (event.button.state == SDL_PRESSED)
                   {
-                    if (event.button.state == SDL_PRESSED)
-                      {
-                        //std::cout << "zoom out" << std::endl;
-                        workspace.zoom_out();
-                        loader.clear();
-                      }
+                    //std::cout << "zoom out" << std::endl;
+                    workspace->zoom_out();
+                    loader.clear();
                   }
-                else if (event.button.button == 1 ||
-                         event.button.button == 4)
+              }
+            else if (event.button.button == 1 ||
+                     event.button.button == 4)
+              {
+                if (event.button.state == SDL_PRESSED)
                   {
-                    if (event.button.state == SDL_PRESSED)
-                      {
-                        //std::cout << "zoom in" << std::endl;
-                        workspace.zoom_in();
-                        loader.clear();
-                      }
+                    //std::cout << "zoom in" << std::endl;
+                    workspace->zoom_in();
+                    loader.clear();
                   }
-                else if (event.button.button == 2)
-                  {
-                    drag_n_drop = event.button.state;
-                  }
-                break;
-            }
+              }
+            else if (event.button.button == 2)
+              {
+                drag_n_drop = event.button.state;
+              }
+            break;
         }
+    } 
+}
 
-      if (workspace.res != old_res ||
+int
+Griv::main(int argc, char** argv)
+{
+  Filesystem::init();
+  Display::init();
+  Image::init();
+
+  workspace = new Workspace();
+
+  for(int i = 1; i < argc; ++i)
+    {
+      workspace->add(argv[i]);
+    }
+
+  drag_n_drop = false;
+  old_res = -1;
+  old_x_offset = -1;
+  old_y_offset = -1;
+  next_redraw = 0;
+
+  loader.launch_thread();
+
+  while(true)
+    {
+      process_events();
+
+      if (workspace->res != old_res ||
           old_x_offset != x_offset ||
           old_y_offset != y_offset ||
           (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())))
         {
           force_redraw = false;
-          SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));
-          workspace.draw();
-          SDL_Flip(screen);
 
-          old_res = workspace.res;
+          Display::clear();
+          workspace->draw();
+          Display::flip();
+
+          old_res = workspace->res;
           old_x_offset = x_offset;
           old_y_offset = y_offset;
           next_redraw = SDL_GetTicks() + 500;
@@ -181,7 +156,19 @@
         }
     }
 
+  delete workspace;
+
+  Image::deinit();
+  Display::deinit();
+  Filesystem::deinit();
+
   return 0;
 }
 
+int main(int argc, char** argv)
+{
+  Griv griv;
+  return griv.main(argc, argv);
+}
+
 /* EOF */

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/griv.hpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -31,10 +31,28 @@
 
 extern int x_offset;
 extern int y_offset;
-extern SDL_Surface* screen;
-extern std::string config_home;
 extern bool force_redraw;
 
+class Workspace;
+
+class Griv
+{
+private:
+  bool drag_n_drop;
+  int old_res;
+  int old_x_offset;
+  int old_y_offset;
+  Uint32 next_redraw;
+  Workspace* workspace;
+
+public:
+  Griv();
+  ~Griv();
+  
+  void process_events();
+  int main(int argc, char** argv);
+};
+
 #endif
 
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/image.hpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -27,6 +27,7 @@
 #define HEADER_IMAGE_HPP
 
 #include <sstream>
+#include "display.hpp"
 #include "loader.hpp"
 #include "griv.hpp"
 
@@ -42,6 +43,7 @@
   static SDL_Surface* loading_1024;
 
   static void init();
+  static void deinit() {}
 
   static SDL_Surface* placeholder(int res)
   {
@@ -109,8 +111,8 @@
   void draw(int x, int y, int res)
   {
     SDL_LockMutex(mutex);
-    if (x > screen->w ||
-        y > screen->h ||
+    if (x > Display::get_width() ||
+        y > Display::get_height() ||
         x < -res || 
         y < -res)
       { // Image out of screen
@@ -136,9 +138,9 @@
         dstrect.x = x;
         dstrect.y = y;
         if (surface)
-          SDL_BlitSurface(surface, NULL, screen, &dstrect);
+          SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
         else if (image_requested)
-          SDL_BlitSurface(placeholder(res), NULL, screen, &dstrect);        
+          SDL_BlitSurface(placeholder(res), NULL, Display::get_screen(), &dstrect);        
       }
     SDL_UnlockMutex(mutex);
   }

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/loader.cpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -24,6 +24,7 @@
 */
 
 #include <iostream>
+#include "filesystem.hpp"
 #include "SDL_image.h"
 #include "image.hpp"
 #include "loader.hpp"
@@ -64,7 +65,7 @@
 Loader::request(const std::string& uid, int res, Image* receiver)
 {
   std::ostringstream out;
-  out << config_home << "/.griv/" << res << "/" << uid << ".jpg";
+  out << Filesystem::get_home() << "/.griv/" << res << "/" << uid << ".jpg";
 
   SDL_LockMutex(mutex);
   jobs.push_back(Job(out.str(), receiver));

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/thumbnail.py	2007-11-13 09:31:36 UTC (rev 1532)
@@ -45,7 +45,7 @@
         mtime = os.stat(filename)[ST_MTIME]
         xattr.setxattr(filename, "user.griv.md5", md5)
         xattr.setxattr(filename, "user.griv.mtime", "%d" % mtime)
-        xattr.setxattr(filename, "user.griv.filter", "repeated-antialias")
+        xattr.setxattr(filename, "user.griv.filter", "repeated-bicibic")
         
     return md5
 
@@ -60,7 +60,7 @@
                 else:
                     size = (res * img.size[0] / img.size[1], res)
 
-                img = img.resize(size, Image.ANTIALIAS) # BICUBIC) #
+                img = img.resize(size, Image.BICUBIC) #
                 img.save(filename, "JPEG", quality = 75)
 
                 print "%s %4d %s => %s" % (guid, res, orig_filename, filename)

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-12 22:54:14 UTC (rev 1531)
+++ trunk/griv/workspace.hpp	2007-11-13 09:31:36 UTC (rev 1532)
@@ -57,8 +57,8 @@
     int w = int(sqrt(4 * images.size() / 3));
     for(int i = 0; i < int(images.size()); ++i)
       {
-        images[i]->draw((i % w) * res + x_offset + screen->w/2,
-                        (i / w) * res + y_offset + screen->h/2,
+        images[i]->draw((i % w) * res + x_offset + Display::get_width()/2,
+                        (i / w) * res + y_offset + Display::get_height()/2,
                         res);
       }
   }
@@ -66,10 +66,10 @@
   void add(const std::string& filename)
   {
     // if directory, do recursion
-    if (is_directory(filename))
+    if (Filesystem::is_directory(filename))
       {
         std::cout << '.' << std::flush;
-        std::vector<std::string> dir_list = open_directory(filename);
+        std::vector<std::string> dir_list = Filesystem::open_directory(filename);
         for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
           {
             add(*i);
@@ -79,7 +79,7 @@
              has_suffix(filename, ".JPG")
              )
       {
-        std::string md5 = getxattr(filename);
+        std::string md5 = Filesystem::getxattr(filename);
         if (!md5.empty())
           {
             images.push_back(new Image(md5));
@@ -94,8 +94,8 @@
   void zoom_in()
   {
     res *= 2;
-    if (res > 1024)
-      res = 1024;
+    if (res > 2048)
+      res = 2048;
     else
       { //300,200 ~ 212, 134 ~ 64, 0
         x_offset *= 2;



From grumbel at mail.berlios.de  Tue Nov 13 10:56:38 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 13 Nov 2007 10:56:38 +0100
Subject: [Windstille-commit] r1533 - trunk/griv
Message-ID: <200711130956.lAD9uccU001614@sheep.berlios.de>

Author: grumbel
Date: 2007-11-13 10:56:37 +0100 (Tue, 13 Nov 2007)
New Revision: 1533

Added:
   trunk/griv/workspace.cpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/workspace.hpp
Log:
- some more source code splitting

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-13 09:31:36 UTC (rev 1532)
+++ trunk/griv/SConstruct	2007-11-13 09:56:37 UTC (rev 1533)
@@ -3,6 +3,6 @@
 env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image'])
 env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp', 'display.cpp'])
+env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp', 'display.cpp', 'texture.cpp', 'workspace.cpp'])
 
 # EOF #

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 09:31:36 UTC (rev 1532)
+++ trunk/griv/image.cpp	2007-11-13 09:56:37 UTC (rev 1533)
@@ -49,4 +49,78 @@
   loading_16   = IMG_Load("loading_16.jpg");
 }
 
+Image::Image(const std::string& uid) 
+  : uid(uid),
+    surface(0),
+    res(0),
+    image_requested(false)
+{
+  mutex = SDL_CreateMutex();
+}
+
+Image::~Image()
+{
+  SDL_DestroyMutex(mutex);
+}
+
+void
+Image::receive(SDL_Surface* new_surface)
+{ 
+  SDL_LockMutex(mutex);
+  if (new_surface)
+    {
+      if (surface)
+        {
+          SDL_Surface* old_surface = surface;
+          surface = new_surface;
+          SDL_FreeSurface(old_surface); 
+        }
+      else
+        {
+          surface = new_surface;
+        }
+      force_redraw = true;
+    }
+  image_requested = false;
+  SDL_UnlockMutex(mutex);
+}
+
+void
+Image::draw(int x, int y, int res)
+{
+  SDL_LockMutex(mutex);
+  if (x > Display::get_width() ||
+      y > Display::get_height() ||
+      x < -res || 
+      y < -res)
+    { // Image out of screen
+      if (res >= 512)
+        if (surface)
+          {
+            SDL_FreeSurface(surface);
+            surface = 0;
+          }
+    }
+  else
+    { // image on screen
+      if (!image_requested)
+        if (surface == 0 || res != this->res)
+          {
+            //std::cout << "Requesting" << std::endl;
+            loader.request(uid, res, this);
+            image_requested = true;
+            this->res = res;
+          }
+
+      SDL_Rect dstrect;
+      dstrect.x = x;
+      dstrect.y = y;
+      if (surface)
+        SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
+      else if (image_requested)
+        SDL_BlitSurface(placeholder(res), NULL, Display::get_screen(), &dstrect);        
+    }
+  SDL_UnlockMutex(mutex);
+}
+
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 09:31:36 UTC (rev 1532)
+++ trunk/griv/image.hpp	2007-11-13 09:56:37 UTC (rev 1533)
@@ -34,6 +34,7 @@
 class Image
 {
 public:
+  // Place holder images when no other is available
   static SDL_Surface* loading_16;
   static SDL_Surface* loading_32;
   static SDL_Surface* loading_64;
@@ -64,7 +65,7 @@
     else 
       return loading_1024;
   }
-
+
   std::string uid;
   SDL_Surface* surface;
   int res;
@@ -72,78 +73,11 @@
 
   SDL_mutex* mutex;
 
+  Image(const std::string& uid);
+  ~Image();
 
-  Image(const std::string& uid) 
-    : uid(uid),
-      surface(0),
-      res(0),
-      image_requested(false)
-  {
-    mutex = SDL_CreateMutex();
-  }
-
-  ~Image()
-  {
-    SDL_DestroyMutex(mutex);
-  }
-
-  void receive(SDL_Surface* new_surface)
-  { 
-    SDL_LockMutex(mutex);
-    if (new_surface)
-      {
-        if (surface)
-          {
-            SDL_Surface* old_surface = surface;
-            surface = new_surface;
-            SDL_FreeSurface(old_surface); 
-          }
-        else
-          {
-            surface = new_surface;
-          }
-        force_redraw = true;
-      }
-    image_requested = false;
-    SDL_UnlockMutex(mutex);
-  }
-
-  void draw(int x, int y, int res)
-  {
-    SDL_LockMutex(mutex);
-    if (x > Display::get_width() ||
-        y > Display::get_height() ||
-        x < -res || 
-        y < -res)
-      { // Image out of screen
-        if (res >= 512)
-          if (surface)
-            {
-              SDL_FreeSurface(surface);
-              surface = 0;
-            }
-      }
-    else
-      { // image on screen
-        if (!image_requested)
-          if (surface == 0 || res != this->res)
-            {
-              //std::cout << "Requesting" << std::endl;
-              loader.request(uid, res, this);
-              image_requested = true;
-              this->res = res;
-            }
-
-        SDL_Rect dstrect;
-        dstrect.x = x;
-        dstrect.y = y;
-        if (surface)
-          SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
-        else if (image_requested)
-          SDL_BlitSurface(placeholder(res), NULL, Display::get_screen(), &dstrect);        
-      }
-    SDL_UnlockMutex(mutex);
-  }
+  void receive(SDL_Surface* new_surface);
+  void draw(int x, int y, int res);
 };
 
 #endif

Added: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-13 09:31:36 UTC (rev 1532)
+++ trunk/griv/workspace.cpp	2007-11-13 09:56:37 UTC (rev 1533)
@@ -0,0 +1,110 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <iostream>
+#include <math.h>
+#include "workspace.hpp"
+
+inline bool has_suffix(const std::string& str, const std::string& suffix)
+{
+  if (str.length() >= suffix.length())
+    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
+  else
+    return false;
+}
+
+Workspace::Workspace()
+{
+  res = 16;
+}
+
+void
+Workspace::draw()
+{
+  int w = int(sqrt(4 * images.size() / 3));
+  for(int i = 0; i < int(images.size()); ++i)
+    {
+      images[i]->draw((i % w) * res + x_offset + Display::get_width()/2,
+                      (i / w) * res + y_offset + Display::get_height()/2,
+                      res);
+    }
+}
+
+void
+Workspace::add(const std::string& filename)
+{
+  // if directory, do recursion
+  if (Filesystem::is_directory(filename))
+    {
+      std::cout << '.' << std::flush;
+      std::vector<std::string> dir_list = Filesystem::open_directory(filename);
+      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+        {
+          add(*i);
+        }
+    }
+  else if (has_suffix(filename, ".jpg") ||
+           has_suffix(filename, ".JPG")
+           )
+    {
+      std::string md5 = Filesystem::getxattr(filename);
+      if (!md5.empty())
+        {
+          images.push_back(new Image(md5));
+        }
+      else
+        {
+          std::cout << "Ignoring: " << filename << std::endl;
+        }
+    }
+}
+
+void
+Workspace::zoom_in()
+{
+  res *= 2;
+  if (res > 2048)
+    res = 2048;
+  else
+    { //300,200 ~ 212, 134 ~ 64, 0
+      x_offset *= 2;
+      y_offset *= 2;
+    }
+}
+
+void
+Workspace::zoom_out()
+{
+  res /= 2;
+  if (res < 16)
+    res = 16;
+  else
+    {
+      x_offset /= 2;
+      y_offset /= 2;
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/workspace.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-13 09:31:36 UTC (rev 1532)
+++ trunk/griv/workspace.hpp	2007-11-13 09:56:37 UTC (rev 1533)
@@ -31,15 +31,6 @@
 #include "griv.hpp"
 #include "image.hpp"
 
-inline bool has_suffix(const std::string& str, const std::string& suffix)
-{
-  if (str.length() >= suffix.length())
-    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
-  else
-    return false;
-}
-
-
 class Workspace
 {
 public:
@@ -47,73 +38,12 @@
   int res;
   
 public:
-  Workspace()
-  {
-    res = 16;
-  }
+  Workspace();
 
-  void draw()
-  {
-    int w = int(sqrt(4 * images.size() / 3));
-    for(int i = 0; i < int(images.size()); ++i)
-      {
-        images[i]->draw((i % w) * res + x_offset + Display::get_width()/2,
-                        (i / w) * res + y_offset + Display::get_height()/2,
-                        res);
-      }
-  }
-
-  void add(const std::string& filename)
-  {
-    // if directory, do recursion
-    if (Filesystem::is_directory(filename))
-      {
-        std::cout << '.' << std::flush;
-        std::vector<std::string> dir_list = Filesystem::open_directory(filename);
-        for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
-          {
-            add(*i);
-          }
-      }
-    else if (has_suffix(filename, ".jpg") ||
-             has_suffix(filename, ".JPG")
-             )
-      {
-        std::string md5 = Filesystem::getxattr(filename);
-        if (!md5.empty())
-          {
-            images.push_back(new Image(md5));
-          }
-        else
-          {
-            std::cout << "Ignoring: " << filename << std::endl;
-          }
-      }
-  }
-
-  void zoom_in()
-  {
-    res *= 2;
-    if (res > 2048)
-      res = 2048;
-    else
-      { //300,200 ~ 212, 134 ~ 64, 0
-        x_offset *= 2;
-        y_offset *= 2;
-      }
-  }
-
-  void zoom_out()
-  {
-    res /= 2;
-    if (res < 16)
-      res = 16;
-    else
-      {
-        x_offset /= 2;
-        y_offset /= 2;
-      }
-  }
+  void draw();
+  void add(const std::string& filename);
+  void zoom_in();
+  void zoom_out();
 };
 
 #endif



From grumbel at mail.berlios.de  Tue Nov 13 17:21:12 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 13 Nov 2007 17:21:12 +0100
Subject: [Windstille-commit] r1534 - trunk/griv
Message-ID: <200711131621.lADGLCtk017062@sheep.berlios.de>

Author: grumbel
Date: 2007-11-13 17:21:11 +0100 (Tue, 13 Nov 2007)
New Revision: 1534

Added:
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/thumbnail.py
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- changed thumbnaile caching organisation

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/SConstruct	2007-11-13 16:21:11 UTC (rev 1534)
@@ -1,8 +1,14 @@
 # -*- python -*-
 
-env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image'])
+env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash'])
 env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', ['griv.cpp', 'loader.cpp', 'image.cpp', 'filesystem.cpp', 'display.cpp', 'texture.cpp', 'workspace.cpp'])
+env.Program('griv', ['griv.cpp',
+                     'loader.cpp',
+                     'image.cpp',
+                     'filesystem.cpp',
+                     'display.cpp', 
+                     'texture.cpp', 
+                     'workspace.cpp'])
 
 # EOF #

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/filesystem.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -36,6 +36,12 @@
 std::string Filesystem::home_directory;
 
 bool
+Filesystem::exist(const std::string& pathname)
+{
+  return access(pathname.c_str(), F_OK) == 0;
+}
+
+bool
 Filesystem::is_directory(const std::string& pathname)
 {
   struct stat buf;
@@ -107,4 +113,14 @@
 {
 }
 
+std::string
+Filesystem::realpath(const std::string& pathname)
+{
+  char* result = ::realpath(pathname.c_str(), NULL);
+  std::string res = result;
+  free(result);
+  
+  return res;
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/filesystem.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -36,9 +36,12 @@
 
 public:
   static bool is_directory(const std::string& pathname);
+  static bool exist(const std::string& pathname);
   static std::vector<std::string> open_directory(const std::string& pathname);
   static std::string getxattr(const std::string& pathname);
   static std::string get_home() { return home_directory; }
+  static std::string realpath(const std::string& pathname);
+  
   static void init();
   static void deinit();
 };

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/griv.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -85,7 +85,8 @@
                 if (event.button.state == SDL_PRESSED)
                   {
                     //std::cout << "zoom out" << std::endl;
-                    workspace->zoom_out();
+                    workspace->zoom_out(event.button.x - Display::get_width()/2,
+                                        event.button.y - Display::get_height()/2);
                     loader.clear();
                   }
               }
@@ -95,7 +96,8 @@
                 if (event.button.state == SDL_PRESSED)
                   {
                     //std::cout << "zoom in" << std::endl;
-                    workspace->zoom_in();
+                    workspace->zoom_in(event.button.x - Display::get_width()/2,
+                                       event.button.y - Display::get_height()/2);
                     loader.clear();
                   }
               }

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/image.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -49,8 +49,9 @@
   loading_16   = IMG_Load("loading_16.jpg");
 }
 
-Image::Image(const std::string& uid) 
-  : uid(uid),
+Image::Image(const std::string& url, const std::string& md5)
+  : url(url), 
+    md5(md5),
     surface(0),
     res(0),
     image_requested(false)
@@ -107,7 +108,7 @@
         if (surface == 0 || res != this->res)
           {
             //std::cout << "Requesting" << std::endl;
-            loader.request(uid, res, this);
+            loader.request(url, md5, res, this);
             image_requested = true;
             this->res = res;
           }

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/image.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -66,14 +66,16 @@
       return loading_1024;
   }
 
-  std::string uid;
+  std::string url;
+  std::string md5;
+
   SDL_Surface* surface;
   int res;
   bool image_requested;
 
   SDL_mutex* mutex;
 
-  Image(const std::string& uid);
+  Image(const std::string& url, const std::string& md5);
   ~Image();
 
   void receive(SDL_Surface* new_surface);

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/loader.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -24,6 +24,8 @@
 */
 
 #include <iostream>
+#include <iomanip>
+#include <stdexcept>
 #include "filesystem.hpp"
 #include "SDL_image.h"
 #include "image.hpp"
@@ -62,11 +64,24 @@
 }
 
 void
-Loader::request(const std::string& uid, int res, Image* receiver)
+Loader::request(const std::string& url, const std::string& md5, int res, Image* receiver)
 {
   std::ostringstream out;
-  out << Filesystem::get_home() << "/.griv/" << res << "/" << uid << ".jpg";
 
+  if (0)
+    {
+      out << Filesystem::get_home() << "/.griv/cache/by_md5/"
+          << res << "/" << md5.substr(0, 2) << "/" << md5.substr(2)
+          << ".jpg";
+    }
+  else
+    {
+      std::string m = this->md5(url);
+      out << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+      std::cout << "Debug: " << url << " " << this->md5(url) << std::endl;
+    }
+
   SDL_LockMutex(mutex);
   jobs.push_back(Job(out.str(), receiver));
   SDL_UnlockMutex(mutex);
@@ -107,4 +122,23 @@
   return jobs.empty();
 }
 
+std::string
+Loader::md5(const std::string& str)
+{
+  unsigned char hash[16]; /* enough size for MD5 */
+  MHASH td = mhash_init(MHASH_MD5);
+  if (td == MHASH_FAILED) 
+    throw std::runtime_error("Failed to init MHash");
+  
+  mhash(td, str.c_str(), str.length());
+  
+  mhash_deinit(td, hash);
+
+  std::ostringstream out;
+  for (int i = 0; i < 16; i++) 
+    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
+
+  return out.str();
+}
+
 /* EOF */

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/loader.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -32,6 +32,8 @@
 #include <string>
 #include <vector>
 
+#include <mhash.h>
+
 class Image;
 
 struct Job
@@ -52,6 +54,7 @@
   Jobs jobs;
   SDL_mutex* mutex;
   SDL_Thread* thread;
+
 public:
   static int thread_func(void*);
 
@@ -60,10 +63,11 @@
 
   void launch_thread();
 
-  void request(const std::string& uid, int res, Image* receiver);
+  void request(const std::string& url, const std::string& uid, int res, Image* receiver);
   void process_job();
   void clear();
   bool empty();
+  std::string md5(const std::string& str);
 private:
   Loader (const Loader&);
   Loader& operator= (const Loader&);

Added: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/surface.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -0,0 +1,51 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "display.hpp"
+#include "surface.hpp"
+
+Surface::Surface()
+  : surface(0)
+{
+}
+
+Surface::~Surface()
+{
+}
+
+void
+Surface::draw(int x, int y)
+{
+  if (surface)
+    {
+      SDL_Rect dstrect;
+      dstrect.x = x;
+      dstrect.y = y;
+      
+      SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/surface.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/surface.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -0,0 +1,47 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_SURFACE_HPP
+#define HEADER_SURFACE_HPP
+
+/** */
+class Surface
+{
+private:
+  SDL_Surface* surface;
+
+public:
+  Surface();
+  ~Surface();
+
+  void draw(int x, int y);
+private:
+  Surface (const Surface&);
+  Surface& operator= (const Surface&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/surface.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/texture.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -0,0 +1,36 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "texture.hpp"
+
+Texture::Texture(SDL_Surface* surface)
+{
+}
+
+Texture::~Texture()
+{
+}
+
+/* EOF */


Property changes on: trunk/griv/texture.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/texture.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -0,0 +1,48 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_TEXTURE_HPP
+#define HEADER_TEXTURE_HPP
+
+#include "SDL.h"
+
+/** */
+class Texture
+{
+private:
+public:
+  Texture(SDL_Surface* surface);
+  ~Texture();
+
+  int get_width() const;
+  int get_height() const;
+private:
+  Texture (const Texture&);
+  Texture& operator= (const Texture&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/texture.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/thumbnail.py	2007-11-13 16:21:11 UTC (rev 1534)
@@ -17,11 +17,14 @@
     print "Couldn't find $HOME environment variable"
     exit()
 else:
-    for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
-        dir = config_home + "/.griv/%d" % res
-        if not os.access(dir, os.F_OK):
-            os.mkdir(dir)
-            print "Created", dir
+    # FIXME: mkdir also 00-ff
+    for hex in [a+b for a in "0123456789abcdef" for b in "0123456789abcdef"]:
+        for org in ["by_url", "by_md5"]:
+            for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
+                dir = config_home + "/.griv/cache/%s/%d/%s" % (org, res, hex)
+                if not os.access(dir, os.F_OK):
+                    os.mkdir(dir)
+                    print "Created", dir
 
 def has_extension(filename, extensions):
     for ext in extensions:
@@ -52,7 +55,8 @@
 def genthumb(orig_filename, guid, img):
     global config_home
     for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
-        filename = config_home + "/.griv/%d/%s.jpg" % (res, guid)
+        filename = config_home + "/.griv/cache/by_md5/%d/%s/%s.jpg" % (res, guid[0:2], guid[2:])
+
         if not os.path.exists(filename):
             if res < img.size[0] or res < img.size[1]:
                 if (img.size[0] > img.size[1]):
@@ -65,6 +69,21 @@
 
                 print "%s %4d %s => %s" % (guid, res, orig_filename, filename)
 
+        if os.path.exists(filename):
+            url = "file://" + os.path.abspath(orig_filename)
+            m = md5.new()
+            m.update(url)
+            url_md5 = m.hexdigest()
+            dirs = config_home + "/.griv/cache/by_url/%d/%s" % (res, url_md5[0:2])
+            if not os.access(dirs, os.F_OK):
+                os.makedirs(dirs)
+            url_filename = config_home + "/.griv/cache/by_url/%d/%s/%s.jpg" % (res, url_md5[0:2], url_md5[2:])
+
+            if not os.access(url_filename, os.F_OK):
+                #print "linking: ", filename, url_filename
+                os.link(filename, url_filename)
+                xattr.setxattr(url_filename, "user.griv.url", url)
+
 def process_file(pathname):
     if os.path.isdir(pathname): 
         for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/workspace.cpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -69,20 +69,25 @@
            has_suffix(filename, ".JPG")
            )
     {
-      std::string md5 = Filesystem::getxattr(filename);
-      if (!md5.empty())
-        {
-          images.push_back(new Image(md5));
+      std::string url = "file://" + Filesystem::realpath(filename);
+      images.push_back(new Image(url, ""));
+      if (0)
+        { // old xattr support
+          std::string md5 = Filesystem::getxattr(filename);
+          if (!md5.empty())
+            {
+              images.push_back(new Image(url, md5));
+            }
+          else
+            {
+              std::cout << "Ignoring: " << filename << std::endl;
+            }
         }
-      else
-        {
-          std::cout << "Ignoring: " << filename << std::endl;
-        }
     }
 }
 
 void
-Workspace::zoom_in()
+Workspace::zoom_in(int x, int y)
 {
   res *= 2;
   if (res > 2048)
@@ -91,17 +96,25 @@
     { //300,200 ~ 212, 134 ~ 64, 0
       x_offset *= 2;
       y_offset *= 2;
+
+      // FIXME: only works for 2x zoom
+      x_offset -= x;
+      y_offset -= y;
     }
 }
 
 void
-Workspace::zoom_out()
+Workspace::zoom_out(int x, int y)
 {
   res /= 2;
   if (res < 16)
     res = 16;
   else
     {
+      // FIXME: only works for 2x zoom: generic: (-offset*zoom + offset)
+      x_offset += x;
+      y_offset += y;
+
       x_offset /= 2;
       y_offset /= 2;
     }

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-13 09:56:37 UTC (rev 1533)
+++ trunk/griv/workspace.hpp	2007-11-13 16:21:11 UTC (rev 1534)
@@ -42,8 +42,9 @@
 
   void draw();
   void add(const std::string& filename);
-  void zoom_in();
-  void zoom_out();
+
+  void zoom_in(int x, int y);
+  void zoom_out(int x, int y);
 };
 
 #endif



From grumbel at mail.berlios.de  Tue Nov 13 17:50:53 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 13 Nov 2007 17:50:53 +0100
Subject: [Windstille-commit] r1535 - trunk/griv
Message-ID: <200711131650.lADGorRm020224@sheep.berlios.de>

Author: grumbel
Date: 2007-11-13 17:50:52 +0100 (Tue, 13 Nov 2007)
New Revision: 1535

Modified:
   trunk/griv/griv.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/workspace.hpp
Log:
- center viewport on startup

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-13 16:21:11 UTC (rev 1534)
+++ trunk/griv/griv.cpp	2007-11-13 16:50:52 UTC (rev 1535)
@@ -124,6 +124,12 @@
       workspace->add(argv[i]);
     }
 
+  {
+    int w = int(sqrt(4 * workspace->size() / 3));
+    x_offset = (-w/2) * 16;
+    y_offset = (-(w*3/4)/2) * 16;
+  }
+  
   drag_n_drop = false;
   old_res = -1;
   old_x_offset = -1;

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 16:21:11 UTC (rev 1534)
+++ trunk/griv/image.hpp	2007-11-13 16:50:52 UTC (rev 1535)
@@ -69,6 +69,7 @@
   std::string url;
   std::string md5;
 
+  SDL_Surface* surface_16x16;
   SDL_Surface* surface;
   int res;
   bool image_requested;

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-13 16:21:11 UTC (rev 1534)
+++ trunk/griv/loader.cpp	2007-11-13 16:50:52 UTC (rev 1535)
@@ -79,7 +79,7 @@
       std::string m = this->md5(url);
       out << Filesystem::get_home() << "/.griv/cache/by_url/"
           << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
-      std::cout << "Debug: " << url << " " << this->md5(url) << std::endl;
+      //std::cout << "Debug: " << url << " " << this->md5(url) << std::endl;
     }
 
   SDL_LockMutex(mutex);

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-13 16:21:11 UTC (rev 1534)
+++ trunk/griv/workspace.hpp	2007-11-13 16:50:52 UTC (rev 1535)
@@ -45,6 +45,8 @@
 
   void zoom_in(int x, int y);
   void zoom_out(int x, int y);
+
+  int size() { return images.size(); }
 };
 
 #endif



From grumbel at mail.berlios.de  Tue Nov 13 19:15:59 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 13 Nov 2007 19:15:59 +0100
Subject: [Windstille-commit] r1536 - trunk/griv
Message-ID: <200711131815.lADIFxx3028941@sheep.berlios.de>

Author: grumbel
Date: 2007-11-13 19:15:58 +0100 (Tue, 13 Nov 2007)
New Revision: 1536

Modified:
   trunk/griv/filesystem.cpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/workspace.cpp
Log:
- removed md5/xattr handling

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/filesystem.cpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -29,7 +29,7 @@
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
-#include <attr/xattr.h>
+//#include <attr/xattr.h>
 
 #include "filesystem.hpp"
 
@@ -77,7 +77,7 @@
 
   return dir_list;
 }
-
+#if 0
 std::string
 Filesystem::getxattr(const std::string& pathname)
 {
@@ -93,7 +93,7 @@
 
   return std::string(buf, len);
 }
-
+#endif
 void
 Filesystem::init()
 {

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/griv.cpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -156,7 +156,7 @@
           old_res = workspace->res;
           old_x_offset = x_offset;
           old_y_offset = y_offset;
-          next_redraw = SDL_GetTicks() + 500;
+          next_redraw = SDL_GetTicks() + 1000;
         }
       else
         {

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/image.cpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -49,9 +49,8 @@
   loading_16   = IMG_Load("loading_16.jpg");
 }
 
-Image::Image(const std::string& url, const std::string& md5)
+Image::Image(const std::string& url)
   : url(url), 
-    md5(md5),
     surface(0),
     res(0),
     image_requested(false)
@@ -108,7 +107,7 @@
         if (surface == 0 || res != this->res)
           {
             //std::cout << "Requesting" << std::endl;
-            loader.request(url, md5, res, this);
+            loader.request(url, res, this);
             image_requested = true;
             this->res = res;
           }

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/image.hpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -67,7 +67,6 @@
   }
 
   std::string url;
-  std::string md5;
 
   SDL_Surface* surface_16x16;
   SDL_Surface* surface;
@@ -76,7 +75,7 @@
 
   SDL_mutex* mutex;
 
-  Image(const std::string& url, const std::string& md5);
+  Image(const std::string& url);
   ~Image();
 
   void receive(SDL_Surface* new_surface);

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/loader.cpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -64,26 +64,10 @@
 }
 
 void
-Loader::request(const std::string& url, const std::string& md5, int res, Image* receiver)
+Loader::request(const std::string& url, int res, Image* receiver)
 {
-  std::ostringstream out;
-
-  if (0)
-    {
-      out << Filesystem::get_home() << "/.griv/cache/by_md5/"
-          << res << "/" << md5.substr(0, 2) << "/" << md5.substr(2)
-          << ".jpg";
-    }
-  else
-    {
-      std::string m = this->md5(url);
-      out << Filesystem::get_home() << "/.griv/cache/by_url/"
-          << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
-      //std::cout << "Debug: " << url << " " << this->md5(url) << std::endl;
-    }
-
   SDL_LockMutex(mutex);
-  jobs.push_back(Job(out.str(), receiver));
+  jobs.push_back(Job(url, res, receiver));
   SDL_UnlockMutex(mutex);
 }
 
@@ -98,9 +82,26 @@
       jobs.pop_back();
       // Unlock
 
+      std::string m = this->md5(job.url);
+      std::ostringstream out;
+      out << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << job.res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+
       //std::cout << "Loading: " << job.filename << std::endl;
-      SDL_Surface* img = IMG_Load(job.filename.c_str());
-      job.image->receive(img);
+      SDL_Surface* img = IMG_Load(out.str().c_str());
+      if (img)
+        {
+          job.image->receive(img);
+        }
+      else
+        {
+          // No thumbnail, assuming we need the original
+          if (job.res > 1024)
+            {
+              img = IMG_Load(job.url.substr(7).c_str()); // cut file:// part
+              job.image->receive(img);
+            }
+        }
     }
   SDL_UnlockMutex(mutex);
 }

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/loader.hpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -38,11 +38,12 @@
 
 struct Job
 {
-  std::string filename;
+  std::string url;
+  int res;
   Image* image;
 
-  Job(const std::string& filename, Image* image)
-    : filename(filename), image(image)
+  Job(const std::string& url, int res, Image* image)
+    : url(url), res(res), image(image)
   {}
 };
 
@@ -63,7 +64,7 @@
 
   void launch_thread();
 
-  void request(const std::string& url, const std::string& uid, int res, Image* receiver);
+  void request(const std::string& url, int res, Image* receiver);
   void process_job();
   void clear();
   bool empty();

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-13 16:50:52 UTC (rev 1535)
+++ trunk/griv/workspace.cpp	2007-11-13 18:15:58 UTC (rev 1536)
@@ -70,19 +70,7 @@
            )
     {
       std::string url = "file://" + Filesystem::realpath(filename);
-      images.push_back(new Image(url, ""));
-      if (0)
-        { // old xattr support
-          std::string md5 = Filesystem::getxattr(filename);
-          if (!md5.empty())
-            {
-              images.push_back(new Image(url, md5));
-            }
-          else
-            {
-              std::cout << "Ignoring: " << filename << std::endl;
-            }
-        }
+      images.push_back(new Image(url));
     }
 }
 



From grumbel at mail.berlios.de  Wed Nov 14 00:17:40 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 00:17:40 +0100
Subject: [Windstille-commit] r1537 - trunk/griv
Message-ID: <200711132317.lADNHegd027122@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 00:17:39 +0100 (Wed, 14 Nov 2007)
New Revision: 1537

Added:
   trunk/griv/TODO
Modified:
   trunk/griv/SConstruct
   trunk/griv/display.cpp
   trunk/griv/display.hpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
   trunk/griv/workspace.cpp
Log:
- trying to get OpenGL to work

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/SConstruct	2007-11-13 23:17:39 UTC (rev 1537)
@@ -1,6 +1,6 @@
 # -*- python -*-
 
-env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash'])
+env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash', 'GL', 'GLU'])
 env.ParseConfig("sdl-config --libs --cflags")
 
 env.Program('griv', ['griv.cpp',

Added: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/TODO	2007-11-13 23:17:39 UTC (rev 1537)
@@ -0,0 +1,6 @@
+- move position into Image
+- handle object placement elsewhere
+
+1532 - software rendering revision
+
+# EOF #

Modified: trunk/griv/display.cpp
===================================================================
--- trunk/griv/display.cpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/display.cpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -24,14 +24,19 @@
 */
 
 #include <iostream>
+#include <X11/Xlib.h>
+#include <GL/gl.h>
+#include "SDL_syswm.h"
 #include "display.hpp"
 
-SDL_Surface* Display::screen = 0;
-Uint32 Display::flags = 0;
+SDL_SysWMinfo syswm;
+SDL_Surface* Framebuffer::screen = 0;
+Uint32 Framebuffer::flags = 0;
 
 void
-Display::init()
+Framebuffer::init()
 {
+  std::cout << "Framebuffer::init()" << std::endl;
   if (SDL_Init(SDL_INIT_VIDEO) != 0)
     {
       std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
@@ -39,9 +44,14 @@
     }
   atexit(SDL_Quit); 
  
-  flags = SDL_RESIZABLE;
-  screen = SDL_SetVideoMode(1024, 768, 0, flags);
-    
+  //SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); 
+  //SDL_GL_SetAttribute(SDL_GL_RED_SIZE,   5);
+  //SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 5);
+  //SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,  5);
+  
+  flags = SDL_RESIZABLE | SDL_OPENGL;
+  screen = SDL_SetVideoMode(800, 600, 0, flags);
+
   if (screen == NULL) 
     {
       std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
@@ -49,38 +59,76 @@
     }
 
   SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
+  SDL_EnableUNICODE(1);
 
-  SDL_EnableUNICODE(1);
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
+  glMatrixMode(GL_MODELVIEW);
+  glLoadIdentity();
+  //static const float cl_pixelcenter_constant = 0.375;
+  //glTranslated(cl_pixelcenter_constant, cl_pixelcenter_constant, 0.0);
+  
+  SDL_VERSION(&syswm.version); // this is important!
+  if (SDL_GetWMInfo(&syswm) == -1)
+    {
+      std::cout << "Couldn't get WM info " << std::endl;
+    }
+
+  //XInitThreads();
 }
 
 void
-Display::toggle_fullscreen()
+Framebuffer::toggle_fullscreen()
 {
-  if (flags & SDL_FULLSCREEN)
-    flags = SDL_RESIZABLE;
-  else
-    flags |= SDL_FULLSCREEN;
+  if (0)
+    {
+      if (flags & SDL_FULLSCREEN)
+        flags = SDL_RESIZABLE;
+      else
+        flags |= SDL_FULLSCREEN;
  
-  // Should use desktop resolution for this instead, but how?
-  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+      // Should use desktop resolution for this instead, but how?
+      screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+    }
 }
 
 void
-Display::resize(int w, int h)
+Framebuffer::resize(int w, int h)
 {
-  screen = SDL_SetVideoMode(w, h, 0, SDL_RESIZABLE);
+  //screen = SDL_SetVideoMode(w, h, 0, SDL_RESIZABLE);
 }
 
 void
-Display::flip()
+Framebuffer::flip()
 {
-  SDL_Flip(screen);  
+  //SDL_Flip(screen);
+  SDL_GL_SwapBuffers();
 }
 
 void
-Display::clear()
+Framebuffer::clear()
 {
-  SDL_FillRect(Display::get_screen(), NULL, SDL_MapRGB(Display::get_screen()->format, 0, 0, 0));
+  glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
+  glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
+  //SDL_FillRect(Framebuffer::get_screen(), NULL, SDL_MapRGB(Framebuffer::get_screen()->format, 0, 0, 0));
 }
 
+void
+Framebuffer::lock()
+{
+  syswm.info.x11.lock_func();
+  XLockDisplay(syswm.info.x11.display);
+  syswm.info.x11.unlock_func();
+}
+
+void
+Framebuffer::unlock()
+{
+  syswm.info.x11.lock_func();
+  XUnlockDisplay(syswm.info.x11.display);
+  syswm.info.x11.unlock_func();
+}
+
 /* EOF */

Modified: trunk/griv/display.hpp
===================================================================
--- trunk/griv/display.hpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/display.hpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -26,10 +26,25 @@
 #ifndef HEADER_DISPLAY_HPP
 #define HEADER_DISPLAY_HPP
 
+#include <GL/gl.h>
+#include <GL/glu.h>
+#include <sstream>
+#include <stdexcept>
 #include "SDL.h"
 
+static inline void assert_gl(const char* message)
+{
+  GLenum error = glGetError();
+  if(error != GL_NO_ERROR) {
+    std::ostringstream msg;
+    msg << "OpenGLError while '" << message << "': "
+        << gluErrorString(error);
+    throw std::runtime_error(msg.str());
+  }
+}
+
 /** */
-class Display
+class Framebuffer
 {
 private:
   static SDL_Surface* screen;
@@ -47,9 +62,9 @@
   static void resize(int w, int h);
   static void flip();
   static void clear();
-private:
-  Display (const Display&);
-  Display& operator= (const Display&);
+
+  static void lock();
+  static void unlock();
 };
 
 #endif

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/griv.cpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -38,7 +38,7 @@
             break;
 
           case SDL_VIDEORESIZE:
-            Display::resize(event.resize.w, event.resize.h);
+            Framebuffer::resize(event.resize.w, event.resize.h);
             force_redraw = true;
             break;
 
@@ -53,7 +53,7 @@
               }
             else if (event.key.keysym.sym == SDLK_F11)
               {
-                Display::toggle_fullscreen();
+                Framebuffer::toggle_fullscreen();
                 force_redraw = true;
               }
             else if (event.key.keysym.sym == SDLK_SPACE)
@@ -85,8 +85,8 @@
                 if (event.button.state == SDL_PRESSED)
                   {
                     //std::cout << "zoom out" << std::endl;
-                    workspace->zoom_out(event.button.x - Display::get_width()/2,
-                                        event.button.y - Display::get_height()/2);
+                    workspace->zoom_out(event.button.x - Framebuffer::get_width()/2,
+                                        event.button.y - Framebuffer::get_height()/2);
                     loader.clear();
                   }
               }
@@ -96,8 +96,8 @@
                 if (event.button.state == SDL_PRESSED)
                   {
                     //std::cout << "zoom in" << std::endl;
-                    workspace->zoom_in(event.button.x - Display::get_width()/2,
-                                       event.button.y - Display::get_height()/2);
+                    workspace->zoom_in(event.button.x - Framebuffer::get_width()/2,
+                                       event.button.y - Framebuffer::get_height()/2);
                     loader.clear();
                   }
               }
@@ -114,7 +114,7 @@
 Griv::main(int argc, char** argv)
 {
   Filesystem::init();
-  Display::init();
+  Framebuffer::init();
   Image::init();
 
   workspace = new Workspace();
@@ -149,9 +149,9 @@
         {
           force_redraw = false;
 
-          Display::clear();
+          Framebuffer::clear();
           workspace->draw();
-          Display::flip();
+          Framebuffer::flip();
 
           old_res = workspace->res;
           old_x_offset = x_offset;
@@ -167,7 +167,7 @@
   delete workspace;
 
   Image::deinit();
-  Display::deinit();
+  Framebuffer::deinit();
   Filesystem::deinit();
 
   return 0;

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/image.cpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -24,7 +24,9 @@
 */
 
 #include <iostream>
+#include <GL/gl.h>
 #include "SDL_image.h"
+#include "texture.hpp"
 #include "image.hpp"
 
 SDL_Surface* Image::loading_16;
@@ -52,6 +54,7 @@
 Image::Image(const std::string& url)
   : url(url), 
     surface(0),
+    texture(0),
     res(0),
     image_requested(false)
 {
@@ -67,6 +70,7 @@
 Image::receive(SDL_Surface* new_surface)
 { 
   SDL_LockMutex(mutex);
+  //Framebuffer::lock();
   if (new_surface)
     {
       if (surface)
@@ -74,14 +78,21 @@
           SDL_Surface* old_surface = surface;
           surface = new_surface;
           SDL_FreeSurface(old_surface); 
+
+          delete texture;
+          texture = 0;
+
+          //texture = new Texture(surface);
         }
       else
         {
           surface = new_surface;
+          //texture = new Texture(surface);
         }
       force_redraw = true;
     }
   image_requested = false;
+  //Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 
@@ -89,8 +100,9 @@
 Image::draw(int x, int y, int res)
 {
   SDL_LockMutex(mutex);
-  if (x > Display::get_width() ||
-      y > Display::get_height() ||
+  //Framebuffer::lock();
+  if (x > Framebuffer::get_width() ||
+      y > Framebuffer::get_height() ||
       x < -res || 
       y < -res)
     { // Image out of screen
@@ -115,11 +127,29 @@
       SDL_Rect dstrect;
       dstrect.x = x;
       dstrect.y = y;
-      if (surface)
-        SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
-      else if (image_requested)
-        SDL_BlitSurface(placeholder(res), NULL, Display::get_screen(), &dstrect);        
+      
+      if (0)
+        {
+          if (surface)
+            SDL_BlitSurface(surface, NULL, Framebuffer::get_screen(), &dstrect);
+          else if (image_requested)
+            SDL_BlitSurface(placeholder(res), NULL, Framebuffer::get_screen(), &dstrect);        
+        }
+      else
+        {
+          if (surface)
+            {
+              glColor3f(1.0f, 1.0f, 1.0f);
+              glBegin(GL_QUADS);
+              glVertex2i(x, y);
+              glVertex2i(x + surface->w, y);
+              glVertex2i(x + surface->w, y + surface->h);
+              glVertex2i(x, y + surface->h);
+              glEnd();
+            }
+        }
     }
+  //Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/image.hpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -31,6 +31,8 @@
 #include "loader.hpp"
 #include "griv.hpp"
 
+class Texture;
+
 class Image
 {
 public:
@@ -70,6 +72,7 @@
 
   SDL_Surface* surface_16x16;
   SDL_Surface* surface;
+  Texture*     texture;
   int res;
   bool image_requested;
 

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/texture.cpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -23,14 +23,74 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
+#include <stdexcept>
+#include "display.hpp"
 #include "texture.hpp"
 
 Texture::Texture(SDL_Surface* surface)
 {
+  std::cout << "Creating Texture" << std::endl;
+  glGenTextures(1, &handle);
+
+  width  = surface->w;
+  height = surface->h;
+
+  const SDL_PixelFormat* format = surface->format;
+
+  if(format->BitsPerPixel != 24 && format->BitsPerPixel != 32)
+    throw std::runtime_error("image has not 24 or 32 bit color depth");
+  
+  GLint maxt;
+  glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxt);
+  if(surface->w > maxt || surface->h > maxt)
+    {
+      throw std::runtime_error("Texture size not supported");
+    }
+
+  GLint sdl_format;
+  if (format->BytesPerPixel == 3)
+    {
+      sdl_format = GL_RGB;
+    }
+  else if (format->BytesPerPixel == 4)
+    {
+      sdl_format = GL_RGBA;
+    }
+  else
+    {
+      throw std::runtime_error("Texture: Image format not supported");
+    }
+
+  glBindTexture(GL_TEXTURE_2D, handle);
+  glEnable(GL_TEXTURE_2D);
+
+  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
+  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
+               surface->w, surface->h, 0, sdl_format,
+               GL_UNSIGNED_BYTE, surface->pixels);
+
+  assert_gl("creating texture");
+
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP);
+  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_CLAMP);
+
+  assert_gl("setting texture parameters");
 }
 
 Texture::~Texture()
 {
+  glDeleteTextures(1, &handle);
 }
 
+void
+Texture::bind()
+{
+  glBindTexture(GL_TEXTURE_2D, handle);
+}
+
 /* EOF */

Modified: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/texture.hpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -26,18 +26,27 @@
 #ifndef HEADER_TEXTURE_HPP
 #define HEADER_TEXTURE_HPP
 
+#include <GL/gl.h>
+#include <GL/glu.h>
 #include "SDL.h"
 
 /** */
 class Texture
 {
 private:
+  GLuint handle;
+
+  int width;
+  int height;
+
 public:
   Texture(SDL_Surface* surface);
   ~Texture();
 
   int get_width() const;
   int get_height() const;
+  
+  void bind();
 private:
   Texture (const Texture&);
   Texture& operator= (const Texture&);

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-13 18:15:58 UTC (rev 1536)
+++ trunk/griv/workspace.cpp	2007-11-13 23:17:39 UTC (rev 1537)
@@ -46,8 +46,8 @@
   int w = int(sqrt(4 * images.size() / 3));
   for(int i = 0; i < int(images.size()); ++i)
     {
-      images[i]->draw((i % w) * res + x_offset + Display::get_width()/2,
-                      (i / w) * res + y_offset + Display::get_height()/2,
+      images[i]->draw((i % w) * (res+res/32) + x_offset + Framebuffer::get_width()/2,
+                      (i / w) * (res+res/32) + y_offset + Framebuffer::get_height()/2,
                       res);
     }
 }
@@ -62,7 +62,8 @@
       std::vector<std::string> dir_list = Filesystem::open_directory(filename);
       for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
         {
-          add(*i);
+          if (*i != ".xvpics")
+            add(*i);
         }
     }
   else if (has_suffix(filename, ".jpg") ||
@@ -78,8 +79,8 @@
 Workspace::zoom_in(int x, int y)
 {
   res *= 2;
-  if (res > 2048)
-    res = 2048;
+  if (res > 8192)
+    res = 8192;
   else
     { //300,200 ~ 212, 134 ~ 64, 0
       x_offset *= 2;



From grumbel at mail.berlios.de  Wed Nov 14 00:36:22 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 00:36:22 +0100
Subject: [Windstille-commit] r1538 - trunk/griv
Message-ID: <200711132336.lADNaMtj012844@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 00:36:20 +0100 (Wed, 14 Nov 2007)
New Revision: 1538

Modified:
   trunk/griv/TODO
   trunk/griv/display.cpp
   trunk/griv/image.cpp
   trunk/griv/texture.cpp
Log:
- trying to get OpenGL to work

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-13 23:17:39 UTC (rev 1537)
+++ trunk/griv/TODO	2007-11-13 23:36:20 UTC (rev 1538)
@@ -1,6 +1,6 @@
 - move position into Image
 - handle object placement elsewhere
 
-1532 - software rendering revision
+1536 - software rendering revision
 
 # EOF #

Modified: trunk/griv/display.cpp
===================================================================
--- trunk/griv/display.cpp	2007-11-13 23:17:39 UTC (rev 1537)
+++ trunk/griv/display.cpp	2007-11-13 23:36:20 UTC (rev 1538)
@@ -36,6 +36,8 @@
 void
 Framebuffer::init()
 {
+  XInitThreads();
+ 
   std::cout << "Framebuffer::init()" << std::endl;
   if (SDL_Init(SDL_INIT_VIDEO) != 0)
     {
@@ -75,8 +77,6 @@
     {
       std::cout << "Couldn't get WM info " << std::endl;
     }
-
-  //XInitThreads();
 }
 
 void

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 23:17:39 UTC (rev 1537)
+++ trunk/griv/image.cpp	2007-11-13 23:36:20 UTC (rev 1538)
@@ -70,7 +70,7 @@
 Image::receive(SDL_Surface* new_surface)
 { 
   SDL_LockMutex(mutex);
-  //Framebuffer::lock();
+  Framebuffer::lock();
   if (new_surface)
     {
       if (surface)
@@ -78,21 +78,15 @@
           SDL_Surface* old_surface = surface;
           surface = new_surface;
           SDL_FreeSurface(old_surface); 
-
-          delete texture;
-          texture = 0;
-
-          //texture = new Texture(surface);
         }
       else
         {
           surface = new_surface;
-          //texture = new Texture(surface);
         }
       force_redraw = true;
     }
   image_requested = false;
-  //Framebuffer::unlock();
+  Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 
@@ -100,7 +94,7 @@
 Image::draw(int x, int y, int res)
 {
   SDL_LockMutex(mutex);
-  //Framebuffer::lock();
+  Framebuffer::lock();
   if (x > Framebuffer::get_width() ||
       y > Framebuffer::get_height() ||
       x < -res || 
@@ -111,6 +105,9 @@
           {
             SDL_FreeSurface(surface);
             surface = 0;
+
+            delete texture;
+            texture = 0;
           }
     }
   else
@@ -139,17 +136,33 @@
         {
           if (surface)
             {
+              if (!texture)
+                {
+                  texture = new Texture(surface);
+                }
+
+              if (texture)
+                {
+                  texture->bind();
+                }
               glColor3f(1.0f, 1.0f, 1.0f);
               glBegin(GL_QUADS);
+              glTexCoord2f(0,0);
               glVertex2i(x, y);
+
+              glTexCoord2f(1,0);
               glVertex2i(x + surface->w, y);
+
+              glTexCoord2f(1,1);
               glVertex2i(x + surface->w, y + surface->h);
+
+              glTexCoord2f(0,1);
               glVertex2i(x, y + surface->h);
               glEnd();
             }
         }
     }
-  //Framebuffer::unlock();
+  Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-13 23:17:39 UTC (rev 1537)
+++ trunk/griv/texture.cpp	2007-11-13 23:36:20 UTC (rev 1538)
@@ -29,8 +29,8 @@
 #include "texture.hpp"
 
 Texture::Texture(SDL_Surface* surface)
+  : handle(0)
 {
-  std::cout << "Creating Texture" << std::endl;
   glGenTextures(1, &handle);
 
   width  = surface->w;
@@ -67,10 +67,24 @@
 
   glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
   glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
-  glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
-               surface->w, surface->h, 0, sdl_format,
-               GL_UNSIGNED_BYTE, surface->pixels);
 
+  {
+    int res = std::max(surface->w, surface->h);
+    std::cout << "Res: " << res << std::endl;
+    unsigned char dummy[res*res*3];
+    glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
+                 res,
+                 res,
+                 0,
+                 GL_RGB,
+                 GL_UNSIGNED_BYTE,
+                 dummy);
+  }
+  
+  glTexSubImage2D(GL_TEXTURE_2D, 0, 
+                  0, 0, surface->w, surface->h, sdl_format,
+                  GL_UNSIGNED_BYTE, surface->pixels);
+
   assert_gl("creating texture");
 
   glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);



From grumbel at mail.berlios.de  Wed Nov 14 00:37:35 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 00:37:35 +0100
Subject: [Windstille-commit] r1539 - branches
Message-ID: <200711132337.lADNbZnI015421@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 00:37:35 +0100 (Wed, 14 Nov 2007)
New Revision: 1539

Added:
   branches/griv-sdl/
Log:
Griv Software Render


Copied: branches/griv-sdl (from rev 1536, trunk/griv)



From grumbel at mail.berlios.de  Wed Nov 14 01:01:30 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 01:01:30 +0100
Subject: [Windstille-commit] r1540 - trunk/griv
Message-ID: <200711140001.lAE01UuJ013103@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 01:01:30 +0100 (Wed, 14 Nov 2007)
New Revision: 1540

Modified:
   trunk/griv/display.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
Log:
OpenGL support now somewhat working, but still rather buggy

Modified: trunk/griv/display.cpp
===================================================================
--- trunk/griv/display.cpp	2007-11-13 23:37:35 UTC (rev 1539)
+++ trunk/griv/display.cpp	2007-11-14 00:01:30 UTC (rev 1540)
@@ -36,7 +36,7 @@
 void
 Framebuffer::init()
 {
-  XInitThreads();
+  //XInitThreads();
  
   std::cout << "Framebuffer::init()" << std::endl;
   if (SDL_Init(SDL_INIT_VIDEO) != 0)

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-13 23:37:35 UTC (rev 1539)
+++ trunk/griv/image.cpp	2007-11-14 00:01:30 UTC (rev 1540)
@@ -55,6 +55,7 @@
   : url(url), 
     surface(0),
     texture(0),
+    texture_16x16(0),
     res(0),
     image_requested(false)
 {
@@ -70,7 +71,6 @@
 Image::receive(SDL_Surface* new_surface)
 { 
   SDL_LockMutex(mutex);
-  Framebuffer::lock();
   if (new_surface)
     {
       if (surface)
@@ -86,7 +86,6 @@
       force_redraw = true;
     }
   image_requested = false;
-  Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 
@@ -94,7 +93,6 @@
 Image::draw(int x, int y, int res)
 {
   SDL_LockMutex(mutex);
-  Framebuffer::lock();
   if (x > Framebuffer::get_width() ||
       y > Framebuffer::get_height() ||
       x < -res || 
@@ -136,33 +134,42 @@
         {
           if (surface)
             {
-              if (!texture)
+              if (!texture || texture->surface != surface)
                 {
+                  delete texture;
                   texture = new Texture(surface);
-                }
 
-              if (texture)
-                {
-                  texture->bind();
+                  if (!texture_16x16)
+                    texture_16x16 = new Texture(surface);
                 }
-              glColor3f(1.0f, 1.0f, 1.0f);
-              glBegin(GL_QUADS);
-              glTexCoord2f(0,0);
-              glVertex2i(x, y);
+            }
 
-              glTexCoord2f(1,0);
-              glVertex2i(x + surface->w, y);
+          if (texture)
+            {
+              texture->bind();
+            }
+          else if (texture_16x16)
+            {
+              texture_16x16->bind();
+            }
 
-              glTexCoord2f(1,1);
-              glVertex2i(x + surface->w, y + surface->h);
+          glColor3f(1.0f, 1.0f, 1.0f);
+          glBegin(GL_QUADS);
+          glTexCoord2f(0,0);
+          glVertex2i(x, y);
 
-              glTexCoord2f(0,1);
-              glVertex2i(x, y + surface->h);
-              glEnd();
-            }
+          glTexCoord2f(1,0);
+          glVertex2i(x + res, y);
+
+          glTexCoord2f(1,1);
+          glVertex2i(x + res, y + res);
+
+          glTexCoord2f(0,1);
+          glVertex2i(x, y + res);
+          glEnd();
+            
         }
     }
-  Framebuffer::unlock();
   SDL_UnlockMutex(mutex);
 }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-13 23:37:35 UTC (rev 1539)
+++ trunk/griv/image.hpp	2007-11-14 00:01:30 UTC (rev 1540)
@@ -70,9 +70,9 @@
 
   std::string url;
 
-  SDL_Surface* surface_16x16;
   SDL_Surface* surface;
   Texture*     texture;
+  Texture*     texture_16x16;
   int res;
   bool image_requested;
 

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-13 23:37:35 UTC (rev 1539)
+++ trunk/griv/texture.cpp	2007-11-14 00:01:30 UTC (rev 1540)
@@ -25,11 +25,13 @@
 
 #include <iostream>
 #include <stdexcept>
+#include <string.h>
 #include "display.hpp"
 #include "texture.hpp"
 
 Texture::Texture(SDL_Surface* surface)
-  : handle(0)
+  : surface(surface),
+    handle(0)
 {
   glGenTextures(1, &handle);
 
@@ -70,8 +72,9 @@
 
   {
     int res = std::max(surface->w, surface->h);
-    std::cout << "Res: " << res << std::endl;
+    //std::cout << "Res: " << res << std::endl;
     unsigned char dummy[res*res*3];
+    memset(dummy, 0, res*res*3);
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
                  res,
                  res,

Modified: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2007-11-13 23:37:35 UTC (rev 1539)
+++ trunk/griv/texture.hpp	2007-11-14 00:01:30 UTC (rev 1540)
@@ -33,6 +33,8 @@
 /** */
 class Texture
 {
+public:
+  SDL_Surface* surface;
 private:
   GLuint handle;
 



From grumbel at mail.berlios.de  Wed Nov 14 13:50:07 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 13:50:07 +0100
Subject: [Windstille-commit] r1541 - trunk/griv
Message-ID: <200711141250.lAECo770006478@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 13:50:07 +0100 (Wed, 14 Nov 2007)
New Revision: 1541

Modified:
   trunk/griv/TODO
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- added variable zoom rates

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/TODO	2007-11-14 12:50:07 UTC (rev 1541)
@@ -1,6 +1,12 @@
+Short Term:
+===========
+- turn zoom into a float
+- allow smooth zooming
+- add broken-image image or kick them out of the Workspace
+
+Long Term:
+==========
 - move position into Image
 - handle object placement elsewhere
 
-1536 - software rendering revision
-
 # EOF #

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/griv.cpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -12,8 +12,8 @@
 #include "loader.hpp"
 #include "image.hpp"
 
-int x_offset = 0;
-int y_offset = 0;
+float x_offset = 0.0f;
+float y_offset = 0.0f;
 std::string config_home;
 bool force_redraw = true;
 
@@ -37,6 +37,10 @@
             exit(1);
             break;
 
+          case SDL_VIDEOEXPOSE: // FIXME: make this into a GameEvent
+            force_redraw = true;
+            break;
+
           case SDL_VIDEORESIZE:
             Framebuffer::resize(event.resize.w, event.resize.h);
             force_redraw = true;
@@ -86,7 +90,8 @@
                   {
                     //std::cout << "zoom out" << std::endl;
                     workspace->zoom_out(event.button.x - Framebuffer::get_width()/2,
-                                        event.button.y - Framebuffer::get_height()/2);
+                                        event.button.y - Framebuffer::get_height()/2,
+                                        1.1f);
                     loader.clear();
                   }
               }
@@ -97,7 +102,8 @@
                   {
                     //std::cout << "zoom in" << std::endl;
                     workspace->zoom_in(event.button.x - Framebuffer::get_width()/2,
-                                       event.button.y - Framebuffer::get_height()/2);
+                                       event.button.y - Framebuffer::get_height()/2,
+                                       1.1f);
                     loader.clear();
                   }
               }

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/griv.hpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -29,8 +29,8 @@
 #include <SDL.h>
 #include <string>
 
-extern int x_offset;
-extern int y_offset;
+extern float x_offset;
+extern float y_offset;
 extern bool force_redraw;
 
 class Workspace;
@@ -38,13 +38,13 @@
 class Griv
 {
 private:
-  bool drag_n_drop;
-  int old_res;
-  int old_x_offset;
-  int old_y_offset;
+  bool  drag_n_drop;
+  float old_res;
+  float old_x_offset;
+  float old_y_offset;
   Uint32 next_redraw;
   Workspace* workspace;
-
+  int zoom_mode;
 public:
   Griv();
   ~Griv();

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/image.cpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -57,6 +57,7 @@
     texture(0),
     texture_16x16(0),
     res(0),
+    want_res(0),
     image_requested(false)
 {
   mutex = SDL_CreateMutex();
@@ -83,6 +84,9 @@
         {
           surface = new_surface;
         }
+      
+      res = std::max(surface->w, surface->h);
+
       force_redraw = true;
     }
   image_requested = false;
@@ -106,17 +110,21 @@
 
             delete texture;
             texture = 0;
+
+            want_res  = 0;
+            this->res = 0;
           }
     }
   else
     { // image on screen
+      //std::cout << round_res(res) << " " << this->res << std::endl;
+
       if (!image_requested)
-        if (surface == 0 || res != this->res)
+        if (surface == 0 || round_res(res) != this->res)
           {
-            //std::cout << "Requesting" << std::endl;
-            loader.request(url, res, this);
+            loader.request(this);
+            want_res = round_res(res);
             image_requested = true;
-            this->res = res;
           }
 
       SDL_Rect dstrect;
@@ -144,33 +152,50 @@
                 }
             }
 
-          if (texture)
+          if (texture || texture_16x16)
             {
-              texture->bind();
-            }
-          else if (texture_16x16)
-            {
-              texture_16x16->bind();
-            }
+              if (texture)
+                texture->bind();
+              else if (texture_16x16)
+                texture_16x16->bind();
 
-          glColor3f(1.0f, 1.0f, 1.0f);
-          glBegin(GL_QUADS);
-          glTexCoord2f(0,0);
-          glVertex2i(x, y);
+              glColor3f(1.0f, 1.0f, 1.0f);
+              glBegin(GL_QUADS);
+              glTexCoord2f(0,0);
+              glVertex2i(x, y);
 
-          glTexCoord2f(1,0);
-          glVertex2i(x + res, y);
+              glTexCoord2f(1,0);
+              glVertex2i(x + res, y);
 
-          glTexCoord2f(1,1);
-          glVertex2i(x + res, y + res);
+              glTexCoord2f(1,1);
+              glVertex2i(x + res, y + res);
 
-          glTexCoord2f(0,1);
-          glVertex2i(x, y + res);
-          glEnd();
-            
+              glTexCoord2f(0,1);
+              glVertex2i(x, y + res);
+              glEnd();
+            }
         }
     }
   SDL_UnlockMutex(mutex);
 }
 
+int
+Image::round_res(int r)
+{
+  if (r <= 16)
+    return 16;
+  else if (r <= 32)
+    return 32;
+  else if (r <= 64)
+    return 64;
+  else if (r <= 128)
+    return 128;
+  else if (r <= 256)
+    return 256;
+  else if (r <= 512)
+    return 512;
+  else // if (r <= 1024)
+    return 1024;
+}
+
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/image.hpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -50,30 +50,32 @@
 
   static SDL_Surface* placeholder(int res)
   {
-    if (res == 16)
+    if (res < 16)
       return loading_16;
-    else if (res == 32)
+    else if (res < 32)
       return loading_32;
-    else if (res == 64)
+    else if (res < 64)
       return loading_64;
-    else if (res == 128)
+    else if (res < 128)
       return loading_128;
-    else if (res == 256)
+    else if (res < 256)
       return loading_256;
-    else if (res == 512)
+    else if (res < 512)
       return loading_512;
-    else if (res == 1024)
+    else if (res < 1024)
       return loading_1024;
     else 
       return loading_1024;
   }
 
+public:
   std::string url;
-
+  
   SDL_Surface* surface;
   Texture*     texture;
   Texture*     texture_16x16;
   int res;
+  int want_res;
   bool image_requested;
 
   SDL_mutex* mutex;
@@ -83,6 +85,8 @@
 
   void receive(SDL_Surface* new_surface);
   void draw(int x, int y, int res);
+
+  int round_res(int res);
 };
 
 #endif

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/loader.cpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -64,10 +64,10 @@
 }
 
 void
-Loader::request(const std::string& url, int res, Image* receiver)
+Loader::request(Image* receiver)
 {
   SDL_LockMutex(mutex);
-  jobs.push_back(Job(url, res, receiver));
+  jobs.push_back(Job(receiver));
   SDL_UnlockMutex(mutex);
 }
 
@@ -80,27 +80,34 @@
       // Lock
       Job job = jobs.back();
       jobs.pop_back();
-      // Unlock
 
-      std::string m = this->md5(job.url);
-      std::ostringstream out;
-      out << Filesystem::get_home() << "/.griv/cache/by_url/"
-          << job.res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+      int res = job.image->want_res;
 
-      //std::cout << "Loading: " << job.filename << std::endl;
-      SDL_Surface* img = IMG_Load(out.str().c_str());
-      if (img)
+      if (job.image->res != res && res != 0)
         {
-          job.image->receive(img);
-        }
-      else
-        {
-          // No thumbnail, assuming we need the original
-          if (job.res > 1024)
+          // Unlock
+      
+          std::string m = this->md5(job.image->url);
+          std::ostringstream out;
+          out << Filesystem::get_home() << "/.griv/cache/by_url/"
+              << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+
+          //std::cout << "Loading: " << job.filename << std::endl;
+          //std::cout << out.str() << std::endl;
+          SDL_Surface* img = IMG_Load(out.str().c_str());
+          if (img)
             {
-              img = IMG_Load(job.url.substr(7).c_str()); // cut file:// part
               job.image->receive(img);
             }
+          else
+            {
+              // No thumbnail, assuming we need the original
+              if (res > 1024)
+                {
+                  img = IMG_Load(job.image->url.substr(7).c_str()); // cut file:// part
+                  job.image->receive(img);
+                }
+            }
         }
     }
   SDL_UnlockMutex(mutex);

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/loader.hpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -38,12 +38,10 @@
 
 struct Job
 {
-  std::string url;
-  int res;
   Image* image;
 
-  Job(const std::string& url, int res, Image* image)
-    : url(url), res(res), image(image)
+  Job(Image* image)
+    : image(image)
   {}
 };
 
@@ -64,11 +62,12 @@
 
   void launch_thread();
 
-  void request(const std::string& url, int res, Image* receiver);
+  void request(Image* receiver);
   void process_job();
   void clear();
   bool empty();
   std::string md5(const std::string& str);
+
 private:
   Loader (const Loader&);
   Loader& operator= (const Loader&);

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/workspace.cpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -46,9 +46,9 @@
   int w = int(sqrt(4 * images.size() / 3));
   for(int i = 0; i < int(images.size()); ++i)
     {
-      images[i]->draw((i % w) * (res+res/32) + x_offset + Framebuffer::get_width()/2,
-                      (i / w) * (res+res/32) + y_offset + Framebuffer::get_height()/2,
-                      res);
+      images[i]->draw(int((i % w) * (res+res/32) + x_offset + Framebuffer::get_width()/2),
+                      int((i / w) * (res+res/32) + y_offset + Framebuffer::get_height()/2),
+                      int(res));
     }
 }
 
@@ -76,37 +76,41 @@
 }
 
 void
-Workspace::zoom_in(int x, int y)
+Workspace::zoom_in(int x, int y, float zoom)
 {
-  res *= 2;
-  if (res > 8192)
-    res = 8192;
-  else
-    { //300,200 ~ 212, 134 ~ 64, 0
-      x_offset *= 2;
-      y_offset *= 2;
+  float old_res = res;
+  res *= zoom;
+  
+  if (res > 1024) // zoom limit, 2048 textures make the thing crash
+    {
+      res = 1024;
+      zoom = res / old_res;
+    }
 
-      // FIXME: only works for 2x zoom
-      x_offset -= x;
-      y_offset -= y;
-    }
+  x_offset *= zoom;
+  y_offset *= zoom;
+
+  x_offset += x - x*zoom;
+  y_offset += y - y*zoom;
 }
 
 void
-Workspace::zoom_out(int x, int y)
+Workspace::zoom_out(int x, int y, float zoom)
 {
-  res /= 2;
+  float old_res = res;
+  res /= zoom;
+
   if (res < 16)
-    res = 16;
-  else
     {
-      // FIXME: only works for 2x zoom: generic: (-offset*zoom + offset)
-      x_offset += x;
-      y_offset += y;
+      res = 16;
+      zoom = old_res / res;
+    }
 
-      x_offset /= 2;
-      y_offset /= 2;
-    }
+  x_offset += x * zoom - x;
+  y_offset += y * zoom - y;
+
+  x_offset /= zoom;
+  y_offset /= zoom;
 }
 
 /* EOF */

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-14 00:01:30 UTC (rev 1540)
+++ trunk/griv/workspace.hpp	2007-11-14 12:50:07 UTC (rev 1541)
@@ -35,7 +35,7 @@
 {
 public:
   std::vector<Image*> images;
-  int res;
+  float res;
   
 public:
   Workspace();
@@ -43,8 +43,8 @@
   void draw();
   void add(const std::string& filename);
 
-  void zoom_in(int x, int y);
-  void zoom_out(int x, int y);
+  void zoom_in(int mouse_x, int mouse_y, float zoom);
+  void zoom_out(int mouse_x, int mouse_y, float zoom);
 
   int size() { return images.size(); }
 };



From grumbel at mail.berlios.de  Wed Nov 14 14:15:01 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 14:15:01 +0100
Subject: [Windstille-commit] r1542 - trunk/griv
Message-ID: <200711141315.lAEDF1H7011078@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 14:15:01 +0100 (Wed, 14 Nov 2007)
New Revision: 1542

Modified:
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/workspace.cpp
Log:
- some opimizations

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-14 12:50:07 UTC (rev 1541)
+++ trunk/griv/griv.cpp	2007-11-14 13:15:01 UTC (rev 1542)
@@ -129,11 +129,12 @@
     {
       workspace->add(argv[i]);
     }
+  std::cout << " done" << std::endl;
 
   {
     int w = int(sqrt(4 * workspace->size() / 3));
-    x_offset = (-w/2) * 16;
-    y_offset = (-(w*3/4)/2) * 16;
+    x_offset = (-w/2) * 4;
+    y_offset = (-(w*3/4)/2) * 4;
   }
   
   drag_n_drop = false;

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-14 12:50:07 UTC (rev 1541)
+++ trunk/griv/image.cpp	2007-11-14 13:15:01 UTC (rev 1542)
@@ -144,11 +144,15 @@
             {
               if (!texture || texture->surface != surface)
                 {
-                  delete texture;
-                  texture = new Texture(surface);
-
                   if (!texture_16x16)
-                    texture_16x16 = new Texture(surface);
+                    {
+                      texture_16x16 = new Texture(surface);
+                    }
+                  else
+                    {
+                      delete texture;
+                      texture = new Texture(surface);
+                    }
                 }
             }
 
@@ -182,19 +186,19 @@
 int
 Image::round_res(int r)
 {
-  if (r <= 16)
+  if (r <= 32)
     return 16;
-  else if (r <= 32)
+  else if (r <= 64)
     return 32;
-  else if (r <= 64)
+  else if (r <= 128)
     return 64;
-  else if (r <= 128)
+  else if (r <= 256)
     return 128;
-  else if (r <= 256)
+  else if (r <= 512)
     return 256;
-  else if (r <= 512)
+  else if (r < 1024)
     return 512;
-  else // if (r <= 1024)
+  else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
     return 1024;
 }
 

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-14 12:50:07 UTC (rev 1541)
+++ trunk/griv/workspace.cpp	2007-11-14 13:15:01 UTC (rev 1542)
@@ -37,7 +37,7 @@
 
 Workspace::Workspace()
 {
-  res = 16;
+  res = 4;
 }
 
 void
@@ -81,9 +81,9 @@
   float old_res = res;
   res *= zoom;
   
-  if (res > 1024) // zoom limit, 2048 textures make the thing crash
+  if (res > 8192) 
     {
-      res = 1024;
+      res = 8192;
       zoom = res / old_res;
     }
 
@@ -100,9 +100,9 @@
   float old_res = res;
   res /= zoom;
 
-  if (res < 16)
+  if (res < 4)
     {
-      res = 16;
+      res = 4;
       zoom = old_res / res;
     }
 



From grumbel at mail.berlios.de  Wed Nov 14 15:05:26 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 15:05:26 +0100
Subject: [Windstille-commit] r1543 - trunk/griv
Message-ID: <200711141405.lAEE5Qj8017858@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 15:05:25 +0100 (Wed, 14 Nov 2007)
New Revision: 1543

Modified:
   trunk/griv/TODO
   trunk/griv/thumbnail.py
Log:
- removed xattr handling

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-14 13:15:01 UTC (rev 1542)
+++ trunk/griv/TODO	2007-11-14 14:05:25 UTC (rev 1543)
@@ -3,6 +3,7 @@
 - turn zoom into a float
 - allow smooth zooming
 - add broken-image image or kick them out of the Workspace
+- use epeg for thumb generation
 
 Long Term:
 ==========

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-14 13:15:01 UTC (rev 1542)
+++ trunk/griv/thumbnail.py	2007-11-14 14:05:25 UTC (rev 1543)
@@ -1,6 +1,6 @@
 #!/usr/bin/python
 
-import xattr
+# import xattr
 import sys
 import os
 import md5
@@ -39,60 +39,36 @@
     f.close()
     return m.hexdigest()
 
-def get_md5(filename):
-    try:
-        md5 = xattr.getxattr(filename, "user.griv.md5")
-        
-    except IOError, (errno, strerror):
-        md5 = md5sum(filename)
-        mtime = os.stat(filename)[ST_MTIME]
-        xattr.setxattr(filename, "user.griv.md5", md5)
-        xattr.setxattr(filename, "user.griv.mtime", "%d" % mtime)
-        xattr.setxattr(filename, "user.griv.filter", "repeated-bicibic")
-        
-    return md5
-
-def genthumb(orig_filename, guid, img):
+def genthumb(orig_filename, img):
     global config_home
     for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
-        filename = config_home + "/.griv/cache/by_md5/%d/%s/%s.jpg" % (res, guid[0:2], guid[2:])
+        url = "file://" + os.path.abspath(orig_filename)
+        m = md5.new()
+        m.update(url)
+        url_md5 = m.hexdigest()
 
-        if not os.path.exists(filename):
-            if res < img.size[0] or res < img.size[1]:
-                if (img.size[0] > img.size[1]):
+        url_filename = config_home + "/.griv/cache/by_url/%d/%s/%s.jpg" % (res, url_md5[0:2], url_md5[2:])
+
+        if not os.path.exists(url_filename):
+            if res < img.size[0] or res < img.size[1]: # don't thumbnail if orig is smaller
+                if (img.size[0] > img.size[1]): # preserve aspect ratio
                     size = (res, res * img.size[1] / img.size[0])
                 else:
                     size = (res * img.size[0] / img.size[1], res)
 
                 img = img.resize(size, Image.BICUBIC) #
-                img.save(filename, "JPEG", quality = 75)
+                img.save(url_filename, "JPEG", quality = 75)
 
-                print "%s %4d %s => %s" % (guid, res, orig_filename, filename)
+                print "%4d %s => %s" % (res, orig_filename, url_filename)
 
-        if os.path.exists(filename):
-            url = "file://" + os.path.abspath(orig_filename)
-            m = md5.new()
-            m.update(url)
-            url_md5 = m.hexdigest()
-            dirs = config_home + "/.griv/cache/by_url/%d/%s" % (res, url_md5[0:2])
-            if not os.access(dirs, os.F_OK):
-                os.makedirs(dirs)
-            url_filename = config_home + "/.griv/cache/by_url/%d/%s/%s.jpg" % (res, url_md5[0:2], url_md5[2:])
-
-            if not os.access(url_filename, os.F_OK):
-                #print "linking: ", filename, url_filename
-                os.link(filename, url_filename)
-                xattr.setxattr(url_filename, "user.griv.url", url)
-
 def process_file(pathname):
     if os.path.isdir(pathname): 
         for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
             process_file(i)        
     elif has_extension(pathname, image_exts):
         try:
-            md5 = get_md5(pathname)
             orig_img = Image.open(pathname)
-            genthumb(pathname, md5, orig_img)
+            genthumb(pathname, orig_img)
 
         except IOError, err:
             print "Image Error:", pathname, err



From grumbel at mail.berlios.de  Wed Nov 14 15:16:18 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 15:16:18 +0100
Subject: [Windstille-commit] r1544 - trunk/griv
Message-ID: <200711141416.lAEEGIec019866@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 15:16:17 +0100 (Wed, 14 Nov 2007)
New Revision: 1544

Modified:
   trunk/griv/TODO
Log:
- updates

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-14 14:05:25 UTC (rev 1543)
+++ trunk/griv/TODO	2007-11-14 14:16:17 UTC (rev 1544)
@@ -1,7 +1,5 @@
 Short Term:
 ===========
-- turn zoom into a float
-- allow smooth zooming
 - add broken-image image or kick them out of the Workspace
 - use epeg for thumb generation
 
@@ -9,5 +7,6 @@
 ==========
 - move position into Image
 - handle object placement elsewhere
+- added support for ~/.thumbnails/ to get the smaller mipmaps faster
 
 # EOF #



From grumbel at mail.berlios.de  Wed Nov 14 15:35:57 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 15:35:57 +0100
Subject: [Windstille-commit] r1545 - trunk/griv
Message-ID: <200711141435.lAEEZv72026166@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 15:35:57 +0100 (Wed, 14 Nov 2007)
New Revision: 1545

Modified:
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
Log:
- added smooth zoom with mouse buttons

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-14 14:16:17 UTC (rev 1544)
+++ trunk/griv/griv.cpp	2007-11-14 14:35:57 UTC (rev 1545)
@@ -19,6 +19,8 @@
 
 Griv::Griv()
 {
+  zoom_in_pressed = false;
+  zoom_out_pressed = false;
 }
 
 Griv::~Griv()
@@ -26,7 +28,7 @@
 }
 
 void
-Griv::process_events()
+Griv::process_events(float delta)
 {
   SDL_Event event;
   while (SDL_PollEvent(&event))
@@ -73,6 +75,8 @@
 
 
           case SDL_MOUSEMOTION:
+            mouse_x = event.motion.x;
+            mouse_y = event.motion.y;
             if (drag_n_drop)
               {
                 x_offset += event.motion.xrel*4;
@@ -83,30 +87,34 @@
           case SDL_MOUSEBUTTONDOWN:
           case SDL_MOUSEBUTTONUP:
                 
-            if (event.button.button == 3 ||
-                event.button.button == 5)
+            if (event.button.button == 5)
               {
                 if (event.button.state == SDL_PRESSED)
                   {
-                    //std::cout << "zoom out" << std::endl;
                     workspace->zoom_out(event.button.x - Framebuffer::get_width()/2,
                                         event.button.y - Framebuffer::get_height()/2,
                                         1.1f);
                     loader.clear();
                   }
               }
-            else if (event.button.button == 1 ||
-                     event.button.button == 4)
+            else if (event.button.button == 4)
               {
                 if (event.button.state == SDL_PRESSED)
                   {
-                    //std::cout << "zoom in" << std::endl;
                     workspace->zoom_in(event.button.x - Framebuffer::get_width()/2,
                                        event.button.y - Framebuffer::get_height()/2,
                                        1.1f);
                     loader.clear();
                   }
               }
+            else if (event.button.button == 1)
+              {
+                zoom_in_pressed = (event.button.state == SDL_PRESSED);
+              }
+            else if (event.button.button == 3)
+              {
+                zoom_out_pressed = (event.button.state == SDL_PRESSED);
+              }
             else if (event.button.button == 2)
               {
                 drag_n_drop = event.button.state;
@@ -114,6 +122,23 @@
             break;
         }
     } 
+
+  float zoom_speed = 3.0f;
+
+  if (zoom_out_pressed && !zoom_in_pressed)
+    {
+      workspace->zoom_out(mouse_x - Framebuffer::get_width()/2,
+                          mouse_y - Framebuffer::get_height()/2,
+                          1.0f + zoom_speed * delta);
+      loader.clear();
+    }
+  else if (!zoom_out_pressed && zoom_in_pressed)
+    {
+      workspace->zoom_in(mouse_x - Framebuffer::get_width()/2,
+                         mouse_y - Framebuffer::get_height()/2,
+                         1.0f + zoom_speed * delta);    
+      loader.clear();
+    }
 }
 
 int
@@ -145,30 +170,37 @@
 
   loader.launch_thread();
 
+  Uint32 ticks = SDL_GetTicks();
   while(true)
     {
-      process_events();
-
-      if (workspace->res != old_res ||
-          old_x_offset != x_offset ||
-          old_y_offset != y_offset ||
-          (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())))
+      Uint32 cticks = SDL_GetTicks();
+      int delta = cticks - ticks;
+      if (delta > 0)
         {
-          force_redraw = false;
+          ticks = cticks;
+          process_events(delta / 1000.0f);
 
-          Framebuffer::clear();
-          workspace->draw();
-          Framebuffer::flip();
+          if (workspace->res != old_res ||
+              old_x_offset != x_offset ||
+              old_y_offset != y_offset ||
+              (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())))
+            {
+              force_redraw = false;
 
-          old_res = workspace->res;
-          old_x_offset = x_offset;
-          old_y_offset = y_offset;
-          next_redraw = SDL_GetTicks() + 1000;
+              Framebuffer::clear();
+              workspace->draw();
+              Framebuffer::flip();
+
+              old_res = workspace->res;
+              old_x_offset = x_offset;
+              old_y_offset = y_offset;
+              next_redraw = SDL_GetTicks() + 1000;
+            }
+          else
+            {
+              SDL_Delay(5);
+            }
         }
-      else
-        {
-          SDL_Delay(5);
-        }
     }
 
   delete workspace;

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-14 14:16:17 UTC (rev 1544)
+++ trunk/griv/griv.hpp	2007-11-14 14:35:57 UTC (rev 1545)
@@ -45,11 +45,16 @@
   Uint32 next_redraw;
   Workspace* workspace;
   int zoom_mode;
+
+  bool zoom_in_pressed;
+  bool zoom_out_pressed;
+  int  mouse_x;
+  int  mouse_y;
 public:
   Griv();
   ~Griv();
   
-  void process_events();
+  void process_events(float delta);
   int main(int argc, char** argv);
 };
 



From grumbel at mail.berlios.de  Wed Nov 14 22:21:02 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 14 Nov 2007 22:21:02 +0100
Subject: [Windstille-commit] r1546 - trunk/griv
Message-ID: <200711142121.lAELL2C1004005@sheep.berlios.de>

Author: grumbel
Date: 2007-11-14 22:21:02 +0100 (Wed, 14 Nov 2007)
New Revision: 1546

Modified:
   trunk/griv/TODO
   trunk/griv/display.cpp
   trunk/griv/griv.cpp
Log:
- added window resize and fullscreen back

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-14 14:35:57 UTC (rev 1545)
+++ trunk/griv/TODO	2007-11-14 21:21:02 UTC (rev 1546)
@@ -3,6 +3,20 @@
 - add broken-image image or kick them out of the Workspace
 - use epeg for thumb generation
 
+cvs -z3 -d :pserver:anonymous at anoncvs.enlightenment.org:/var/cvs/e export e17/libs/epeg
+# Flickr Download:
+
+# Download index files
+FUSER=henry-gail; for i in $(seq 1 67); do wget -c http://flickr.com/photos/${FUSER}/page${i}/ -O index-${FUSER}-${i}.html; done
+
+# Get photo id's
+ grep -i "farm[0-9]" * | sed "s/.*http:/http:/" | cut -c 37-46 | sort -n | uniq > /tmp/ids
+
+# download photos
+ (for i in $(cat ../ids); do wget -U mozilla -e robots=off -c -p -H --exclude-domain yahoo.com,yimg.com -p "http://flickr.com/photo_zoom.gne?id=${i}&size=o" --load-cookies /tmp/cookies.txt; done )
+
+- store by md5 and use hardlinks, thus avoid duplicates when files are moved
+
 Long Term:
 ==========
 - move position into Image

Modified: trunk/griv/display.cpp
===================================================================
--- trunk/griv/display.cpp	2007-11-14 14:35:57 UTC (rev 1545)
+++ trunk/griv/display.cpp	2007-11-14 21:21:02 UTC (rev 1546)
@@ -82,22 +82,28 @@
 void
 Framebuffer::toggle_fullscreen()
 {
-  if (0)
-    {
-      if (flags & SDL_FULLSCREEN)
-        flags = SDL_RESIZABLE;
-      else
-        flags |= SDL_FULLSCREEN;
+  flags |= SDL_OPENGL;
+  if (flags & SDL_FULLSCREEN)
+    flags &= ~SDL_FULLSCREEN;
+  else
+    flags |= SDL_FULLSCREEN;
  
-      // Should use desktop resolution for this instead, but how?
-      screen = SDL_SetVideoMode(1152, 864, 0, flags); 
-    }
+  // Should use desktop resolution for this instead, but how?
+  screen = SDL_SetVideoMode(1152, 864, 0, flags); 
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
 }
 
 void
 Framebuffer::resize(int w, int h)
 {
-  //screen = SDL_SetVideoMode(w, h, 0, SDL_RESIZABLE);
+  screen = SDL_SetVideoMode(w, h, 0, SDL_OPENGL | SDL_RESIZABLE);
+  glViewport(0, 0, screen->w, screen->h);
+  glMatrixMode(GL_PROJECTION);
+  glLoadIdentity();
+  glOrtho(0.0, screen->w, screen->h, 0.0, 1000.0, -1000.0);
 }
 
 void

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-14 14:35:57 UTC (rev 1545)
+++ trunk/griv/griv.cpp	2007-11-14 21:21:02 UTC (rev 1546)
@@ -156,6 +156,8 @@
     }
   std::cout << " done" << std::endl;
 
+  std::cout << workspace->size() << " images scanned" << std::endl;
+
   {
     int w = int(sqrt(4 * workspace->size() / 3));
     x_offset = (-w/2) * 4;



From grumbel at mail.berlios.de  Thu Nov 15 01:32:54 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 15 Nov 2007 01:32:54 +0100
Subject: [Windstille-commit] r1547 - trunk/griv
Message-ID: <200711150032.lAF0WsbX009612@sheep.berlios.de>

Author: grumbel
Date: 2007-11-15 01:32:53 +0100 (Thu, 15 Nov 2007)
New Revision: 1547

Modified:
   trunk/griv/TODO
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/thumbnail.py
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- moved image position into image

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/TODO	2007-11-15 00:32:53 UTC (rev 1547)
@@ -12,6 +12,10 @@
 # Get photo id's
  grep -i "farm[0-9]" * | sed "s/.*http:/http:/" | cut -c 37-46 | sort -n | uniq > /tmp/ids
 
+ or 
+
+ grep -i "farm[0-9]" * | sed "s/.*http:/http:/" | cut -c 37- | sed "s/_.*//" | grep -v dyic | sort -n | uniq
+
 # download photos
  (for i in $(cat ../ids); do wget -U mozilla -e robots=off -c -p -H --exclude-domain yahoo.com,yimg.com -p "http://flickr.com/photo_zoom.gne?id=${i}&size=o" --load-cookies /tmp/cookies.txt; done )
 

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/griv.cpp	2007-11-15 00:32:53 UTC (rev 1547)
@@ -67,6 +67,21 @@
                 x_offset = 0;
                 y_offset = 0;
               }
+            else if (event.key.keysym.sym == SDLK_1)
+              {
+                workspace->layout(4,3);
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_2)
+              {
+                workspace->layout(8,3);
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_3)
+              {
+                workspace->layout(16,3);
+                force_redraw = true;
+              }
             else if (event.key.keysym.sym == SDLK_b)
               {
                 std::cout << x_offset << ", " << y_offset << std::endl;
@@ -154,6 +169,7 @@
     {
       workspace->add(argv[i]);
     }
+  workspace->layout(4,3);
   std::cout << " done" << std::endl;
 
   std::cout << workspace->size() << " images scanned" << std::endl;

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/image.cpp	2007-11-15 00:32:53 UTC (rev 1547)
@@ -58,7 +58,9 @@
     texture_16x16(0),
     res(0),
     want_res(0),
-    image_requested(false)
+    image_requested(false),
+    x_pos(0),
+    y_pos(0)
 {
   mutex = SDL_CreateMutex();
 }
@@ -94,8 +96,11 @@
 }
 
 void
-Image::draw(int x, int y, int res)
+Image::draw(float x_offset, float y_offset, float res)
 {
+  float x = x_pos * res + x_offset;
+  float y = y_pos * res + y_offset;
+
   SDL_LockMutex(mutex);
   if (x > Framebuffer::get_width() ||
       y > Framebuffer::get_height() ||
@@ -120,64 +125,50 @@
       //std::cout << round_res(res) << " " << this->res << std::endl;
 
       if (!image_requested)
-        if (surface == 0 || round_res(res) != this->res)
+        if (surface == 0 || round_res(int(res)) != int(this->res))
           {
             loader.request(this);
-            want_res = round_res(res);
+            want_res = round_res(int(res));
             image_requested = true;
           }
 
-      SDL_Rect dstrect;
-      dstrect.x = x;
-      dstrect.y = y;
-      
-      if (0)
+      if (surface)
         {
-          if (surface)
-            SDL_BlitSurface(surface, NULL, Framebuffer::get_screen(), &dstrect);
-          else if (image_requested)
-            SDL_BlitSurface(placeholder(res), NULL, Framebuffer::get_screen(), &dstrect);        
-        }
-      else
-        {
-          if (surface)
+          if (!texture || texture->surface != surface)
             {
-              if (!texture || texture->surface != surface)
+              if (!texture_16x16)
                 {
-                  if (!texture_16x16)
-                    {
-                      texture_16x16 = new Texture(surface);
-                    }
-                  else
-                    {
-                      delete texture;
-                      texture = new Texture(surface);
-                    }
+                  texture_16x16 = new Texture(surface);
                 }
+              else
+                {
+                  delete texture;
+                  texture = new Texture(surface);
+                }
             }
+        }
 
-          if (texture || texture_16x16)
-            {
-              if (texture)
-                texture->bind();
-              else if (texture_16x16)
-                texture_16x16->bind();
+      if (texture || texture_16x16)
+        {
+          if (texture)
+            texture->bind();
+          else if (texture_16x16)
+            texture_16x16->bind();
 
-              glColor3f(1.0f, 1.0f, 1.0f);
-              glBegin(GL_QUADS);
-              glTexCoord2f(0,0);
-              glVertex2i(x, y);
+          glColor3f(1.0f, 1.0f, 1.0f);
+          glBegin(GL_QUADS);
+          glTexCoord2f(0,0);
+          glVertex2f(x, y);
 
-              glTexCoord2f(1,0);
-              glVertex2i(x + res, y);
+          glTexCoord2f(1,0);
+          glVertex2f(x + res, y);
 
-              glTexCoord2f(1,1);
-              glVertex2i(x + res, y + res);
+          glTexCoord2f(1,1);
+          glVertex2f(x + res, y + res);
 
-              glTexCoord2f(0,1);
-              glVertex2i(x, y + res);
-              glEnd();
-            }
+          glTexCoord2f(0,1);
+          glVertex2f(x, y + res);
+          glEnd();
         }
     }
   SDL_UnlockMutex(mutex);

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/image.hpp	2007-11-15 00:32:53 UTC (rev 1547)
@@ -80,11 +80,14 @@
 
   SDL_mutex* mutex;
 
+  float x_pos;
+  float y_pos;
+
   Image(const std::string& url);
   ~Image();
 
   void receive(SDL_Surface* new_surface);
-  void draw(int x, int y, int res);
+  void draw(float x_offset, float y_offset, float res);
 
   int round_res(int res);
 };

Modified: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/thumbnail.py	2007-11-15 00:32:53 UTC (rev 1547)
@@ -23,7 +23,7 @@
             for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
                 dir = config_home + "/.griv/cache/%s/%d/%s" % (org, res, hex)
                 if not os.access(dir, os.F_OK):
-                    os.mkdir(dir)
+                    os.makedirs(dir)
                     print "Created", dir
 
 def has_extension(filename, extensions):

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/workspace.cpp	2007-11-15 00:32:53 UTC (rev 1547)
@@ -43,16 +43,27 @@
 void
 Workspace::draw()
 {
-  int w = int(sqrt(4 * images.size() / 3));
   for(int i = 0; i < int(images.size()); ++i)
     {
-      images[i]->draw(int((i % w) * (res+res/32) + x_offset + Framebuffer::get_width()/2),
-                      int((i / w) * (res+res/32) + y_offset + Framebuffer::get_height()/2),
-                      int(res));
+      images[i]->draw(x_offset + Framebuffer::get_width()/2,
+                      y_offset + Framebuffer::get_height()/2,
+                      res);
     }
 }
 
 void
+Workspace::layout(int aspect_w, int aspect_h)
+{
+  int w = int(sqrt(aspect_w * images.size() / aspect_h));
+
+  for(int i = 0; i < int(images.size()); ++i)
+    {
+      images[i]->x_pos = (i % w) * 1.1f;
+      images[i]->y_pos = (i / w) * 1.1f;
+    }
+}
+
+void
 Workspace::add(const std::string& filename)
 {
   // if directory, do recursion
@@ -67,8 +78,7 @@
         }
     }
   else if (has_suffix(filename, ".jpg") ||
-           has_suffix(filename, ".JPG")
-           )
+           has_suffix(filename, ".JPG"))
     {
       std::string url = "file://" + Filesystem::realpath(filename);
       images.push_back(new Image(url));

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-14 21:21:02 UTC (rev 1546)
+++ trunk/griv/workspace.hpp	2007-11-15 00:32:53 UTC (rev 1547)
@@ -47,6 +47,7 @@
   void zoom_out(int mouse_x, int mouse_y, float zoom);
 
   int size() { return images.size(); }
+  void layout(int w, int h);
 };
 
 #endif



From grumbel at mail.berlios.de  Thu Nov 15 01:47:34 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 15 Nov 2007 01:47:34 +0100
Subject: [Windstille-commit] r1548 - trunk/griv
Message-ID: <200711150047.lAF0lYrm010111@sheep.berlios.de>

Author: grumbel
Date: 2007-11-15 01:47:33 +0100 (Thu, 15 Nov 2007)
New Revision: 1548

Modified:
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- added dynamic reorganisation

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-15 00:32:53 UTC (rev 1547)
+++ trunk/griv/griv.cpp	2007-11-15 00:47:33 UTC (rev 1548)
@@ -191,6 +191,8 @@
   Uint32 ticks = SDL_GetTicks();
   while(true)
     {
+      force_redraw = true;
+
       Uint32 cticks = SDL_GetTicks();
       int delta = cticks - ticks;
       if (delta > 0)
@@ -206,6 +208,7 @@
               force_redraw = false;
 
               Framebuffer::clear();
+              workspace->update(delta / 1000.0f);
               workspace->draw();
               Framebuffer::flip();
 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-15 00:32:53 UTC (rev 1547)
+++ trunk/griv/image.cpp	2007-11-15 00:47:33 UTC (rev 1548)
@@ -193,4 +193,22 @@
     return 1024;
 }
 
+void
+Image::set_pos(float x, float y)
+{
+  target_x_pos = x;
+  target_y_pos = y;
+}
+
+void
+Image::update(float delta)
+{
+  delta *= 16.0f;
+  if (delta > 1.0f)
+    delta = 1.0f;
+
+  x_pos = (1.0f - delta) * x_pos + delta * target_x_pos;
+  y_pos = (1.0f - delta) * y_pos + delta * target_y_pos;
+}
+
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-15 00:32:53 UTC (rev 1547)
+++ trunk/griv/image.hpp	2007-11-15 00:47:33 UTC (rev 1548)
@@ -80,16 +80,23 @@
 
   SDL_mutex* mutex;
 
+private:
   float x_pos;
   float y_pos;
 
+  float target_x_pos;
+  float target_y_pos;
+
+public:
   Image(const std::string& url);
   ~Image();
 
   void receive(SDL_Surface* new_surface);
   void draw(float x_offset, float y_offset, float res);
+  void update(float delta);
 
   int round_res(int res);
+  void set_pos(float x, float y);
 };
 
 #endif

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-15 00:32:53 UTC (rev 1547)
+++ trunk/griv/workspace.cpp	2007-11-15 00:47:33 UTC (rev 1548)
@@ -52,14 +52,23 @@
 }
 
 void
+Workspace::update(float delta)
+{
+  for(int i = 0; i < int(images.size()); ++i)
+    {
+      images[i]->update(delta);
+    }  
+}
+
+void
 Workspace::layout(int aspect_w, int aspect_h)
 {
   int w = int(sqrt(aspect_w * images.size() / aspect_h));
 
   for(int i = 0; i < int(images.size()); ++i)
     {
-      images[i]->x_pos = (i % w) * 1.1f;
-      images[i]->y_pos = (i / w) * 1.1f;
+      images[i]->set_pos((i % w) * 1.15f,
+                         (i / w) * 1.15f);
     }
 }
 

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-15 00:32:53 UTC (rev 1547)
+++ trunk/griv/workspace.hpp	2007-11-15 00:47:33 UTC (rev 1548)
@@ -41,6 +41,7 @@
   Workspace();
 
   void draw();
+  void update(float delta);
   void add(const std::string& filename);
 
   void zoom_in(int mouse_x, int mouse_y, float zoom);



From grumbel at mail.berlios.de  Thu Nov 15 19:05:53 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 15 Nov 2007 19:05:53 +0100
Subject: [Windstille-commit] r1549 - trunk/griv
Message-ID: <200711151805.lAFI5rgA030611@sheep.berlios.de>

Author: grumbel
Date: 2007-11-15 19:05:52 +0100 (Thu, 15 Nov 2007)
New Revision: 1549

Added:
   trunk/griv/imagepack.py
Log:
- added test application for packed jpegs

Added: trunk/griv/imagepack.py
===================================================================
--- trunk/griv/imagepack.py	2007-11-15 00:47:33 UTC (rev 1548)
+++ trunk/griv/imagepack.py	2007-11-15 18:05:52 UTC (rev 1549)
@@ -0,0 +1,68 @@
+#!/usr/bin/python
+
+import struct
+import sys
+import os
+import Image
+import md5
+
+scale = 16/16 # 1 == 16x16
+
+def process_files(args):
+    global scale 
+
+    args.sort()
+
+    if len(args) > 4096:
+        print "Error: More then 4096 images given,", len(args)
+        exit(0)
+
+    print "."
+    img = Image.new("RGB", (1024*scale, 1024*scale))
+    print "."
+    x = 0
+    y = 0
+    for pathname in args:
+        try:
+            # print "Processing: ", pathname
+            source = Image.open(pathname)
+            img.paste(source, (x,y))
+            del source
+
+            x += 16*scale
+            if x >= 1024*scale:
+                x = 0
+                y += 16*scale
+        except IOError, err:
+            print pathname, err
+
+    img.save("/tmp/out-%d.jpg" % (scale*16), "JPEG", quality = 75)
+
+    # Generate index file
+    f = open("/tmp/out-%d.idx" % (scale*16), "wb")
+    f.write(struct.pack("I", len(args))) # FIXME: endianess
+
+    for i in args: 
+        f.write(os.path.basename(i))
+        f.write("\0")
+    f.close()
+
+    print len(args), "images processed"
+
+
+def gen_file_list(lst, pathname):
+    if os.path.isdir(pathname): 
+        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
+            gen_file_list(lst, i)
+    else:
+        lst.append(pathname)
+            
+def main(args):
+    lst = []
+    for i in args:
+        gen_file_list(lst, i)
+    process_files(lst)
+
+main(sys.argv[1:])
+
+# EOF #


Property changes on: trunk/griv/imagepack.py
___________________________________________________________________
Name: svn:executable
   + *



From grumbel at mail.berlios.de  Thu Nov 15 19:06:47 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 15 Nov 2007 19:06:47 +0100
Subject: [Windstille-commit] r1550 - trunk/griv
Message-ID: <200711151806.lAFI6lVo031818@sheep.berlios.de>

Author: grumbel
Date: 2007-11-15 19:06:46 +0100 (Thu, 15 Nov 2007)
New Revision: 1550

Modified:
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/get_thumbnails.py
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- added smooth movement and some more stuff

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/SConstruct	2007-11-15 18:06:46 UTC (rev 1550)
@@ -1,14 +1,17 @@
 # -*- python -*-
 
-env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash', 'GL', 'GLU'])
-env.ParseConfig("sdl-config --libs --cflags")
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash', 'GL', 'GLU'])
+griv_env.ParseConfig("sdl-config --libs --cflags")
 
-env.Program('griv', ['griv.cpp',
-                     'loader.cpp',
-                     'image.cpp',
-                     'filesystem.cpp',
-                     'display.cpp', 
-                     'texture.cpp', 
-                     'workspace.cpp'])
+griv_env.Program('griv', ['griv.cpp',
+                          'loader.cpp',
+                          'image.cpp',
+                          'filesystem.cpp',
+                          'display.cpp', 
+                          'texture.cpp', 
+                          'workspace.cpp'])
 
+thumbget_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O0', '-g'], LIBS=['epeg'])
+thumbget_env.Program('thumbget', ['thumbget.cpp'])
+
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/TODO	2007-11-15 18:06:46 UTC (rev 1550)
@@ -1,3 +1,41 @@
+1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
+~100MB for fullscreen 16x16 Thumbs
+4096 images on 1024x1024 texture at 16x16
+~32 textures for 129600 thumbs
+
+Ideas:
+======
+- store 16x16 thumbnails in a single 1024x1024 jpeg image (easy to use as texture)
+- store filenames in a simple linear list, stuff them into a map/hash on load
+- maybe do the same for 32x32, but that needs benchmarking first
+
+Problems:
+=========
+- initial load is very slow
+- initial thumbnailing is *extremly* slow
+- (!!!!) Fix color format issues
+
+4096 pictures packed in a single JPEG:
+
+  400   /tmp/out-16.jpg
+ 1161   /tmp/out-32.jpg
+ 3704   /tmp/out-64.jpg
+11776   /tmp/out-128.jpg
+37485   /tmp/out-256.jpg
+
+/tmp/out-16.jpg  JPEG   1024x1024 DirectClass  397kb 
+/tmp/out-32.jpg  JPEG   2048x2048 DirectClass  1.1mb
+/tmp/out-64.jpg  JPEG   4096x4096 DirectClass  3.6mb <- use this as pack format, to slow it seems
+/tmp/out-128.jpg JPEG   8192x8192 DirectClass 11.5mb
+/tmp/out-256.jpg JPEG 16384x16384 DirectClass 36.6mb
+
+$ time ./thumbget /tmp/out-64.jpg 128 128 64 64 /tmp/test.jpg
+/tmp/out-64.jpg 128, 128 - 64x64
+
+real    0m1.022s
+user    0m0.876s
+sys     0m0.128s
+
 Short Term:
 ===========
 - add broken-image image or kick them out of the Workspace

Modified: trunk/griv/get_thumbnails.py
===================================================================
--- trunk/griv/get_thumbnails.py	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/get_thumbnails.py	2007-11-15 18:06:46 UTC (rev 1550)
@@ -21,7 +21,12 @@
 
 def main(args):
     for pathname in args:
-        process_file(pathname)
+        print pathname
+        if os.path.isdir(pathname): 
+            for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
+                main(i)
+        else:
+            process_file(pathname)
 
 res = int(sys.argv[1])
 main(sys.argv[2:])

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/griv.cpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -67,21 +67,45 @@
                 x_offset = 0;
                 y_offset = 0;
               }
-            else if (event.key.keysym.sym == SDLK_1)
+            else if (event.key.keysym.sym == SDLK_9)
               {
                 workspace->layout(4,3);
                 force_redraw = true;
               }
-            else if (event.key.keysym.sym == SDLK_2)
+            else if (event.key.keysym.sym == SDLK_8)
               {
                 workspace->layout(8,3);
                 force_redraw = true;
               }
-            else if (event.key.keysym.sym == SDLK_3)
+            else if (event.key.keysym.sym == SDLK_7)
               {
                 workspace->layout(16,3);
                 force_redraw = true;
               }
+            else if (event.key.keysym.sym == SDLK_1)
+              {
+                workspace->set_zoom(4.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_2)
+              {
+                workspace->set_zoom(8.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_3)
+              {
+                workspace->set_zoom(16.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_4)
+              {
+                workspace->set_zoom(32.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_5)
+              {
+                workspace->set_zoom(64.0f);
+              }
+            else if (event.key.keysym.sym == SDLK_6)
+              {
+                workspace->set_zoom(128.0f);
+              }
             else if (event.key.keysym.sym == SDLK_b)
               {
                 std::cout << x_offset << ", " << y_offset << std::endl;
@@ -191,8 +215,6 @@
   Uint32 ticks = SDL_GetTicks();
   while(true)
     {
-      force_redraw = true;
-
       Uint32 cticks = SDL_GetTicks();
       int delta = cticks - ticks;
       if (delta > 0)
@@ -203,7 +225,8 @@
           if (workspace->res != old_res ||
               old_x_offset != x_offset ||
               old_y_offset != y_offset ||
-              (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())))
+              (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())) ||
+              workspace->reorganize)
             {
               force_redraw = false;
 

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/griv.hpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -50,6 +50,7 @@
   bool zoom_out_pressed;
   int  mouse_x;
   int  mouse_y;
+
 public:
   Griv();
   ~Griv();

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/image.cpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -60,7 +60,9 @@
     want_res(0),
     image_requested(false),
     x_pos(0),
-    y_pos(0)
+    y_pos(0),
+    last_x_pos(0),
+    last_y_pos(0)
 {
   mutex = SDL_CreateMutex();
 }
@@ -71,7 +73,7 @@
 }
 
 void
-Image::receive(SDL_Surface* new_surface)
+Image::receive(SDL_Surface* new_surface, int r)
 { 
   SDL_LockMutex(mutex);
   if (new_surface)
@@ -87,7 +89,7 @@
           surface = new_surface;
         }
       
-      res = std::max(surface->w, surface->h);
+      res = r;
 
       force_redraw = true;
     }
@@ -198,17 +200,25 @@
 {
   target_x_pos = x;
   target_y_pos = y;
+  last_x_pos = x_pos;
+  last_y_pos = y_pos;
 }
 
 void
-Image::update(float delta)
+Image::update(float alpha)
 {
-  delta *= 16.0f;
-  if (delta > 1.0f)
-    delta = 1.0f;
-
-  x_pos = (1.0f - delta) * x_pos + delta * target_x_pos;
-  y_pos = (1.0f - delta) * y_pos + delta * target_y_pos;
+  if (alpha == 1.0f)
+    {
+      x_pos = target_x_pos; 
+      y_pos = target_y_pos;
+      last_x_pos = target_x_pos; 
+      last_y_pos = target_y_pos; 
+    }
+  else
+    {
+      x_pos = (alpha) * target_x_pos + (1.0f - alpha) * last_x_pos;
+      y_pos = (alpha) * target_y_pos + (1.0f - alpha) * last_y_pos;
+    }
 }
 
 /* EOF */

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/image.hpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -84,6 +84,9 @@
   float x_pos;
   float y_pos;
 
+  float last_x_pos;
+  float last_y_pos;
+
   float target_x_pos;
   float target_y_pos;
 
@@ -91,7 +94,7 @@
   Image(const std::string& url);
   ~Image();
 
-  void receive(SDL_Surface* new_surface);
+  void receive(SDL_Surface* new_surface, int r);
   void draw(float x_offset, float y_offset, float res);
   void update(float delta);
 

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/loader.cpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -97,15 +97,18 @@
           SDL_Surface* img = IMG_Load(out.str().c_str());
           if (img)
             {
-              job.image->receive(img);
+              job.image->receive(img, res);
             }
           else
             {
               // No thumbnail, assuming we need the original
-              if (res > 1024)
-                {
+              if (0)
+                { // FIXME: Wonky, gets super slow for some reason
                   img = IMG_Load(job.image->url.substr(7).c_str()); // cut file:// part
-                  job.image->receive(img);
+                  std::cout << "Loading: " << res << " " << img << " " 
+                            << img->w << "x" << img->h << " "
+                            << job.image->url.substr(7) << std::endl;
+                  job.image->receive(img, res);
                 }
             }
         }
@@ -118,7 +121,7 @@
 {
   SDL_LockMutex(mutex);
   for(Jobs::iterator i = jobs.begin(); i != jobs.end(); ++i)
-      (*i).image->receive(0);
+    (*i).image->receive(0, 0);
 
   jobs.clear();
   SDL_UnlockMutex(mutex);

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/workspace.cpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -43,21 +43,40 @@
 void
 Workspace::draw()
 {
+  glPushMatrix();
+  glRotatef(0.0f, 0.0f, 1.0f, 45.0f);
+
   for(int i = 0; i < int(images.size()); ++i)
     {
       images[i]->draw(x_offset + Framebuffer::get_width()/2,
                       y_offset + Framebuffer::get_height()/2,
                       res);
     }
+  glPopMatrix();
 }
 
 void
 Workspace::update(float delta)
 {
-  for(int i = 0; i < int(images.size()); ++i)
+  if (reorganize)
     {
-      images[i]->update(delta);
-    }  
+      float alpha = (SDL_GetTicks() - reorganize_start) / 500.0f;
+
+      if (alpha < 0)
+        alpha = 0;
+      else if (alpha > 1.0f)
+        {
+          alpha = 1.0f;
+          reorganize = false;
+        }
+
+      //std::cout << alpha << std::endl;
+
+      for(int i = 0; i < int(images.size()); ++i)
+        {
+          images[i]->update(alpha);
+        }
+    }
 }
 
 void
@@ -70,6 +89,9 @@
       images[i]->set_pos((i % w) * 1.15f,
                          (i / w) * 1.15f);
     }
+
+  reorganize = true;
+  reorganize_start = SDL_GetTicks();
 }
 
 void
@@ -132,4 +154,10 @@
   y_offset /= zoom;
 }
 
+void
+Workspace::set_zoom(float zoom)
+{
+  res = zoom;
+}
+
 /* EOF */

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-15 18:05:52 UTC (rev 1549)
+++ trunk/griv/workspace.hpp	2007-11-15 18:06:46 UTC (rev 1550)
@@ -36,6 +36,8 @@
 public:
   std::vector<Image*> images;
   float res;
+  bool   reorganize;
+  Uint32 reorganize_start;
   
 public:
   Workspace();
@@ -46,6 +48,8 @@
 
   void zoom_in(int mouse_x, int mouse_y, float zoom);
   void zoom_out(int mouse_x, int mouse_y, float zoom);
+  
+  void set_zoom(float zoom);
 
   int size() { return images.size(); }
   void layout(int w, int h);



From grumbel at mail.berlios.de  Fri Nov 16 00:12:16 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 16 Nov 2007 00:12:16 +0100
Subject: [Windstille-commit] r1551 - trunk/griv
Message-ID: <200711152312.lAFNCGmM022069@sheep.berlios.de>

Author: grumbel
Date: 2007-11-16 00:12:15 +0100 (Fri, 16 Nov 2007)
New Revision: 1551

Modified:
   trunk/griv/display.hpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/texture.cpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- added a little bit rotation support
- fixed pitch issue

Modified: trunk/griv/display.hpp
===================================================================
--- trunk/griv/display.hpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/display.hpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -30,6 +30,7 @@
 #include <GL/glu.h>
 #include <sstream>
 #include <stdexcept>
+#include <math.h>
 #include "SDL.h"
 
 static inline void assert_gl(const char* message)
@@ -58,6 +59,7 @@
 
   static int get_width()  { return screen->w; }
   static int get_height() { return screen->h; }
+  static float get_diagonal() { return sqrt(screen->w*screen->w + screen->h*screen->h); }
   static SDL_Surface* get_screen() { return screen; }
   static void resize(int w, int h);
   static void flip();

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/griv.cpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -106,6 +106,16 @@
               {
                 workspace->set_zoom(128.0f);
               }
+            else if (event.key.keysym.sym == SDLK_UP)
+              {
+                workspace->rotation = 0.0f;
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_DOWN)
+              {
+                workspace->rotation += 90.0f;
+                force_redraw = true;
+              }
             else if (event.key.keysym.sym == SDLK_b)
               {
                 std::cout << x_offset << ", " << y_offset << std::endl;
@@ -161,7 +171,22 @@
             break;
         }
     } 
+  
+  int numkeys;
+  Uint8* keys = SDL_GetKeyState(&numkeys);
 
+  if (keys[SDLK_LEFT])
+    {
+      workspace->rotation -= 200.0f * delta;
+      force_redraw = true;
+    }
+  
+  if (keys[SDLK_RIGHT])
+    {
+      workspace->rotation += 200.0f * delta;
+      force_redraw = true;
+    }
+
   float zoom_speed = 3.0f;
 
   if (zoom_out_pressed && !zoom_in_pressed)

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/image.cpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -179,20 +179,40 @@
 int
 Image::round_res(int r)
 {
-  if (r <= 32)
-    return 16;
-  else if (r <= 64)
-    return 32;
-  else if (r <= 128)
-    return 64;
-  else if (r <= 256)
-    return 128;
-  else if (r <= 512)
-    return 256;
-  else if (r < 1024)
-    return 512;
-  else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
-    return 1024;
+  if (0)
+    { // low quality
+      if (r <= 32)
+        return 16;
+      else if (r <= 64)
+        return 32;
+      else if (r <= 128)
+        return 64;
+      else if (r <= 256)
+        return 128;
+      else if (r <= 512)
+        return 256;
+      else if (r < 1024)
+        return 512;
+      else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
+        return 1024;
+    }
+  else
+    { // high quality
+      if (r <= 16)
+        return 16;
+      else if (r <= 32)
+        return 32;
+      else if (r <= 64)
+        return 64;
+      else if (r <= 128)
+        return 128;
+      else if (r <= 256)
+        return 256;
+      else if (r < 512)
+        return 512;
+      else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
+        return 1024;      
+    }
 }
 
 void

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/texture.cpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -25,6 +25,7 @@
 
 #include <iostream>
 #include <stdexcept>
+#include <boost/format.hpp>
 #include <string.h>
 #include "display.hpp"
 #include "texture.hpp"
@@ -33,6 +34,37 @@
   : surface(surface),
     handle(0)
 {
+  if (0)
+  std::cout << boost::format(",----------------------------\n"
+                             "| Pointer: 0x%p\n"
+                             "| Size:    %dx%d\n"
+                             "| Pitch:   %d vs %d\n"
+                             "| Rmask:   0x%08x\n"
+                             "| Gmask:   0x%08x\n"
+                             "| Bmask:   0x%08x\n"
+                             "| Amask:   0x%08x\n"
+                             "| Flags:   0x%08x -> %s%s%s%s\n"
+                             "| Palette: 0x%08x\n"
+                             "| BitsPerPixel: %d\n"
+                             "`----------------------------\n"
+                             )
+    % surface
+    % surface->w
+    % surface->h
+    % surface->pitch
+    % (surface->w*3)
+    % surface->format->Rmask
+    % surface->format->Gmask
+    % surface->format->Bmask
+    % surface->format->Amask
+    % surface->flags
+    % ((surface->flags & SDL_HWSURFACE) ? "HWSURFACE " : "")
+    % ((surface->flags & SDL_SWSURFACE) ? "SWSURFACE " : "")
+    % ((surface->flags & SDL_SRCCOLORKEY) ? "SRCCOLORKEY " : "")
+    % ((surface->flags & SDL_SRCALPHA) ? "SRCALPHA " : "")
+    % surface->format->palette
+    % static_cast<int>(surface->format->BitsPerPixel);
+
   glGenTextures(1, &handle);
 
   width  = surface->w;
@@ -67,8 +99,7 @@
   glBindTexture(GL_TEXTURE_2D, handle);
   glEnable(GL_TEXTURE_2D);
 
-  glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
-  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
+  glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
 
   {
     int res = std::max(surface->w, surface->h);
@@ -84,6 +115,7 @@
                  dummy);
   }
   
+  glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch);
   glTexSubImage2D(GL_TEXTURE_2D, 0, 
                   0, 0, surface->w, surface->h, sdl_format,
                   GL_UNSIGNED_BYTE, surface->pixels);

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/workspace.cpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -38,13 +38,23 @@
 Workspace::Workspace()
 {
   res = 4;
+  rotation = 0.0f;
 }
 
 void
 Workspace::draw()
 {
   glPushMatrix();
-  glRotatef(0.0f, 0.0f, 1.0f, 45.0f);
+  if (rotation != 0.0f)
+    {
+      glTranslatef(Framebuffer::get_width()/2, 
+                   Framebuffer::get_height()/2, 
+                   0.0f);
+      glRotatef(rotation, 0.0f, 0.0f, 1.0f);
+      glTranslatef(-Framebuffer::get_width()/2, 
+                   -Framebuffer::get_height()/2,
+                   0.0f);
+    }
 
   for(int i = 0; i < int(images.size()); ++i)
     {

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-15 18:06:46 UTC (rev 1550)
+++ trunk/griv/workspace.hpp	2007-11-15 23:12:15 UTC (rev 1551)
@@ -38,7 +38,8 @@
   float res;
   bool   reorganize;
   Uint32 reorganize_start;
-  
+  float rotation;
+
 public:
   Workspace();
 
@@ -53,6 +54,7 @@
 
   int size() { return images.size(); }
   void layout(int w, int h);
+
 };
 
 #endif



From grumbel at mail.berlios.de  Mon Nov 12 03:29:03 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 12 Nov 2007 03:29:03 +0100
Subject: [Windstille-commit] r1524 - in trunk: . griv media/images/gui
	media/images/tiles media/models/objects/barrobot
	media/models/vehicles/jsf test windstille
	windstille/data/armature windstille/data/levels
	windstille/data/scripts windstille/data/scripts/apartment
	windstille/lib windstille/src windstille/src/input windstille/tools
Message-ID: <200711120229.lAC2T3hM000332@sheep.berlios.de>

Author: grumbel
Date: 2007-11-12 03:28:15 +0100 (Mon, 12 Nov 2007)
New Revision: 1524

Added:
   trunk/griv/
   trunk/griv/SConstruct
   trunk/griv/get_thumbnails.py
   trunk/griv/griv.cpp
   trunk/griv/thumbnail.py
Modified:
   trunk/media/images/gui/wii.xcf
   trunk/media/images/tiles/baroutside.xcf
   trunk/media/models/objects/barrobot/barrobot.blend
   trunk/media/models/vehicles/jsf/jsf.blend
   trunk/test/classtest.nut
   trunk/windstille/NEWS
   trunk/windstille/SConstruct
   trunk/windstille/data/armature/armature.arm
   trunk/windstille/data/armature/mesh.mesh
   trunk/windstille/data/levels/apartment.wst
   trunk/windstille/data/scripts/apartment/barrobot.nut
   trunk/windstille/data/scripts/windstille.nut
   trunk/windstille/lib/SConscript
   trunk/windstille/src/SConscript
   trunk/windstille/src/input/controller.cpp
   trunk/windstille/src/windstille_main.cpp
   trunk/windstille/tools/SConscript
   trunk/windstille/tools/mesh_export.py
   trunk/windstille/tools/model_test.blend
Log:
- added a zoomable-interface like image viewer

Added: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/griv/SConstruct	2007-11-12 02:28:15 UTC (rev 1524)
@@ -0,0 +1,8 @@
+# -*- python -*-
+
+env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0"], LIBS=['SDL_image'])
+env.ParseConfig("sdl-config --libs --cflags")
+
+env.Program('griv', 'griv.cpp')
+
+# EOF #

Added: trunk/griv/get_thumbnails.py
===================================================================
--- trunk/griv/get_thumbnails.py	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/griv/get_thumbnails.py	2007-11-12 02:28:15 UTC (rev 1524)
@@ -0,0 +1,29 @@
+#!/usr/bin/python
+
+import xattr
+import sys
+import os
+import md5
+import Image
+from stat import *
+
+def process_file(pathname):
+    global res
+    if os.path.isdir(pathname): 
+        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
+            process_file(i)        
+    else:
+        try:
+            md5 = xattr.getxattr(pathname, "user.griv.md5")
+            print "/home/ingo/.griv/%d/%s.jpg" % (res, md5)
+        except IOError, (errno, stderr):
+            pass
+
+def main(args):
+    for pathname in args:
+        process_file(pathname)
+
+res = int(sys.argv[1])
+main(sys.argv[2:])
+
+# EOF #


Property changes on: trunk/griv/get_thumbnails.py
___________________________________________________________________
Name: svn:executable
   + *

Added: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/griv/griv.cpp	2007-11-12 02:28:15 UTC (rev 1524)
@@ -0,0 +1,275 @@
+#include <vector>
+#include <math.h>
+#include <sstream>
+#include <sys/types.h>
+#include <attr/xattr.h>
+#include <stdexcept>
+#include <iostream>
+#include "SDL.h"
+#include "SDL_image.h"
+
+SDL_Surface* screen = 0;
+int x_offset = 0;
+int y_offset = 0;
+
+std::string getxattr(const std::string& pathname)
+{
+  char buf[2048];
+  int len;
+  if ((len = getxattr (pathname.c_str(), "user.griv.md5", buf, 2048)) < 0)
+    {
+      if (errno == ENOATTR)
+        return "";
+      else
+        throw std::runtime_error("Couldn't get xattr for " + pathname);
+    }
+
+  return std::string(buf, len);
+}
+
+struct Image
+{
+  std::string uid;
+  SDL_Surface* surface;
+  int res;
+  
+  Image(const std::string& uid) 
+    : uid(uid),
+      surface(0),
+      res(0)
+  {
+  }
+
+  void draw(int x, int y, int res)
+  {
+    if (x > screen->w ||
+        y > screen->h ||
+        x < -res || 
+        y < -res)
+      {
+        if (0)
+          if (surface)
+            {
+              SDL_FreeSurface(surface);
+              surface = 0;
+            }
+      }
+    else
+      {
+        if (surface == 0 || res != this->res)
+          {
+            std::ostringstream out;
+            out << "/home/ingo/.griv/" << res << "/" << uid << ".jpg";
+            surface = IMG_Load(out.str().c_str());
+            //std::cout << "Loading: " << out.str() << std::endl;
+            this->res = res;
+          }
+
+        if (surface != 0)
+          {
+            SDL_Rect dstrect;
+
+            dstrect.x = x;
+            dstrect.y = y;
+
+            SDL_BlitSurface(surface, NULL, screen, &dstrect);
+          }
+      }
+  }
+};
+
+class Workspace
+{
+public:
+  std::vector<Image> images;
+  int res;
+  
+public:
+  Workspace()
+  {
+    res = 16;
+  }
+
+  void draw()
+  {
+    int w = int(sqrt(4 * images.size() / 3));
+    for(int i = 0; i < int(images.size()); ++i)
+      {
+        images[i].draw((i % w) * res + x_offset + screen->w/2,
+                       (i / w) * res + y_offset + screen->h/2,
+                       res);
+      }
+  }
+
+  void add(const std::string& filename)
+  {
+    std::string md5 = getxattr(filename);
+    if (!md5.empty())
+      {
+        images.push_back(Image(md5));
+      }
+    else
+      {
+        std::cout << "Ignoring: " << filename << std::endl;
+      }
+  }
+
+  void zoom_in()
+  {
+    res *= 2;
+    if (res > 1024)
+      res = 1024;
+    else
+      { //300,200 ~ 212, 134 ~ 64, 0
+        x_offset *= 2;
+        y_offset *= 2;
+      }
+  }
+
+  void zoom_out()
+  {
+    res /= 2;
+    if (res < 16)
+      res = 16;
+    else
+      {
+        x_offset /= 2;
+        y_offset /= 2;
+      }
+  }
+};
+
+int main(int argc, char** argv)
+{
+  if (SDL_Init(SDL_INIT_VIDEO | SDL_INIT_JOYSTICK) != 0) {
+    std::cout << "Unable to initialize SDL: " << SDL_GetError() << std::endl;
+    exit(1);
+  }
+  atexit(SDL_Quit); 
+  
+    Uint32 flags = 0;
+  
+    if (1)
+      {
+        flags |= SDL_FULLSCREEN;
+        screen = SDL_SetVideoMode(1152, 864, 0, flags);
+      }
+    else
+      {
+        flags |= SDL_RESIZABLE;
+        screen = SDL_SetVideoMode(800, 600, 0, flags);
+      }
+    
+    if (screen == NULL) 
+      {
+        std::cout << "Unable to set video mode: " << SDL_GetError() << std::endl;
+        exit(1);
+      }
+
+  SDL_WM_SetCaption("Griv 0.0.1", 0 /* icon */);
+
+  SDL_EnableUNICODE(1);
+
+  Workspace workspace;
+
+  for(int i = 1; i < argc; ++i)
+    workspace.add(argv[i]);
+
+  bool drag_n_drop = false;
+  int old_res = -1;
+  int old_x_offset = -1;
+  int old_y_offset = -1;
+  while(true)
+    {
+      SDL_Event event;
+      while (SDL_PollEvent(&event))
+        {
+          switch(event.type)
+            {
+              case SDL_QUIT: // FIXME: make this into a GameEvent
+                exit(1);
+                break;
+
+              case SDL_KEYDOWN:
+                if (event.key.keysym.sym == SDLK_ESCAPE)
+                  {
+                    exit(1);
+                  }
+                else if (event.key.keysym.sym == SDLK_F11)
+                  {
+                    if (flags & SDL_FULLSCREEN)
+                      flags = 0;
+                    else
+                      flags |= SDL_FULLSCREEN;
+                    
+                    screen = SDL_SetVideoMode(1152, 864, 0, flags);
+                  }
+                else if (event.key.keysym.sym == SDLK_SPACE)
+                  {
+                    x_offset = 0;
+                    y_offset = 0;
+                  }
+                else if (event.key.keysym.sym == SDLK_b)
+                  {
+                    std::cout << x_offset << ", " << y_offset << std::endl;
+                  }
+                break;
+
+
+              case SDL_MOUSEMOTION:
+                if (drag_n_drop)
+                  {
+                    x_offset += event.motion.xrel*4;
+                    y_offset += event.motion.yrel*4;
+                  }
+                break;
+
+              case SDL_MOUSEBUTTONDOWN:
+              case SDL_MOUSEBUTTONUP:
+                
+                if (event.button.button == 3)
+                  {
+                    if (event.button.state == SDL_PRESSED)
+                      {
+                        std::cout << "zoom out" << std::endl;
+                        workspace.zoom_out();
+                      }
+                  }
+                else if (event.button.button == 1)
+                  {
+                    if (event.button.state == SDL_PRESSED)
+                      {
+                        std::cout << "zoom in" << std::endl;
+                        workspace.zoom_in();
+                      }
+                  }
+                else if (event.button.button == 2)
+                  {
+                    drag_n_drop = event.button.state;
+                  }
+                break;
+            }
+        }
+
+      if (workspace.res != old_res ||
+          old_x_offset != x_offset ||
+          old_y_offset != y_offset)
+        {
+          SDL_FillRect(screen, NULL, SDL_MapRGB(screen->format, 0, 0, 0));
+          workspace.draw();
+          SDL_Flip(screen);
+
+          old_res = workspace.res;
+          old_x_offset = x_offset;
+          old_y_offset = y_offset;
+        }
+      else
+        {
+          SDL_Delay(20);
+        }
+    }
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/griv/griv.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/griv/thumbnail.py	2007-11-12 02:28:15 UTC (rev 1524)
@@ -0,0 +1,66 @@
+#!/usr/bin/python
+
+import xattr
+import sys
+import os
+import md5
+import Image
+from stat import *
+import dircache
+
+def md5sum(filename):
+    f = open(filename)
+    m = md5.new()
+    m.update(f.read())
+    f.close()
+    return m.hexdigest()
+
+def get_md5(filename):
+    try:
+        md5 = xattr.getxattr(filename, "user.griv.md5")
+        
+    except IOError, (errno, strerror):
+        md5 = md5sum(filename)
+        mtime = os.stat(filename)[ST_MTIME]
+        xattr.setxattr(filename, "user.griv.md5", md5)
+        xattr.setxattr(filename, "user.griv.mtime", "%d" % mtime)
+        xattr.setxattr(filename, "user.griv.filter", "BICUBIC")
+        
+    return md5
+
+def genthumb(orig_filename, guid, img, res):
+    filename = "/home/ingo/.griv/%d/%s.jpg" % (res, guid)
+    if not os.path.exists(filename):
+        if res < img.size[0] or res < img.size[1]:
+            if (img.size[0] > img.size[1]):
+                size = (res, res * img.size[1] / img.size[0])
+            else:
+                size = (res * img.size[0] / img.size[1], res)
+
+            new_img = img.resize(size, Image.BICUBIC) #ANTIALIAS)
+            new_img.save(filename, "JPEG", quality = 75)
+
+            print "%s %4d %s => %s" % (guid, res, orig_filename, filename)
+
+def process_file(pathname):
+    if os.path.isdir(pathname): 
+        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
+            process_file(i)        
+    else:
+        try:
+            md5 = get_md5(pathname)
+
+            orig_img = Image.open(pathname)
+            for res in [16, 32, 64, 128, 256, 512, 1024]:
+                genthumb(pathname, md5, orig_img, res)
+
+        except IOError, err:
+            print "Image Error:", err
+
+def main(args):
+    for pathname in args:
+        process_file(pathname)
+
+main(sys.argv[1:])
+
+# EOF #


Property changes on: trunk/griv/thumbnail.py
___________________________________________________________________
Name: svn:executable
   + *

Modified: trunk/media/images/gui/wii.xcf
===================================================================
(Binary files differ)

Modified: trunk/media/images/tiles/baroutside.xcf
===================================================================
(Binary files differ)

Modified: trunk/media/models/objects/barrobot/barrobot.blend
===================================================================
(Binary files differ)

Modified: trunk/media/models/vehicles/jsf/jsf.blend
===================================================================
(Binary files differ)

Modified: trunk/test/classtest.nut
===================================================================
--- trunk/test/classtest.nut	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/test/classtest.nut	2007-11-12 02:28:15 UTC (rev 1524)
@@ -11,6 +11,7 @@
 
 print("--------------------");
 a <- HelloWorld();
+a.foo <- "Test"
 a.print();
 
 /* EOF */

Modified: trunk/windstille/NEWS
===================================================================
--- trunk/windstille/NEWS	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/NEWS	2007-11-12 02:28:15 UTC (rev 1524)
@@ -1,8 +1,8 @@
 Windstille 0.3.1
 ================
  - fixed crash when sound is disabled
- - more solid input configuration support (xbox360, dvorak settings
-   provided)
+ - more solid input configuration support (xbox360, wiimote, dvorak
+   settings provided)
  - added volume control
  - added arc drawing
  - added navigation graph
@@ -10,8 +10,8 @@
  - added sdl-jstest application
  - added armature test
  - added skeletal animations along with blender export scripts
+ - Wiimote support
 
-
 Windstille 0.3.0
 ================
  - near complete rewrite of the engine

Modified: trunk/windstille/SConstruct
===================================================================
--- trunk/windstille/SConstruct	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/SConstruct	2007-11-12 02:28:15 UTC (rev 1524)
@@ -182,12 +182,21 @@
 # FIXME: Giving multiple CCFLAGS doesn't work since they have to be
 # broken down to a list
 
+features = {
+    "64bit" : 0,
+    "cwiid" : 0
+    }
+
 conf = Configure(conf_env, custom_tests = { 'Check32bit' : Check32bit,
                                             'CheckYacc'  : CheckYacc,
                                             'CheckLex'   : CheckLex})
 if conf.Check32bit() == "64bit":
-  conf.env.Append(CXXFLAGS="-D_SQ64")
+    # conf.env.Append(CXXFLAGS="-D_SQ64")
+    features["64bit"] = 1
 
+if conf.CheckLib('cwiid'):
+    features["cwiid"] = 1
+    
 if not conf.CheckLex():
     print "lex or flex not found, aborting."
     Exit(1)
@@ -198,7 +207,7 @@
     
 conf_env = conf.Finish()
 
-Export('conf_env')
+Export('conf_env', 'features')
 
 # SConscript('build/tools/SConscript')
 # SConscript('build/lib/SConscript')

Modified: trunk/windstille/data/armature/armature.arm
===================================================================
--- trunk/windstille/data/armature/armature.arm	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/data/armature/armature.arm	2007-11-12 02:28:15 UTC (rev 1524)
@@ -1,370 +1,322 @@
 ;; -*- scheme -*-
 (armature
-  (name "Armature.001")
+  (name "Armature.002")
   (bones
     (bone
-      (name      "Bone.007")
-      (children )
-      (parent    "Bone.002")
+      (name      "Foot.L")
+      (children  "Toes.L")
+      (parent    "Lower Leg.L")
       (head      0.000000 0.000000 0.000000)
-      (length    1.41421341896)
-      (matrix    0.707107 -0.000000 -0.707107  0.000000
-                -0.707107 -0.000000 -0.707107  0.000000
-                -0.000000  1.000000 -0.000000  0.000000
+      (length    0.395793169737)
+      (matrix    0.995549  0.094240  0.000001  0.000000
+                -0.036263  0.383091 -0.922998  0.000000
+                -0.086984  0.918891  0.384804  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653281 -0.653282 0.270598 0.270598)
-      (euler     -90.000023 45.000000 -0.000012)
+      (quat      0.831181 -0.553998 -0.026163 0.039252)
+      (euler     -67.368454 -0.000070 5.407605)
      )
 
     (bone
-      (name      "Bone.019")
-      (children )
-      (parent    "Bone.010")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421365738)
-      (matrix    0.000000 -1.000000  0.000000  0.000000
-                -0.707107  0.000000  0.707107  0.000000
-                -0.707107 -0.000000 -0.707107  0.000000
+      (name      "Upper Arm.L")
+      (children  "Forearm.L")
+      (parent    "Shoulder.L")
+      (head      0.000000 -0.000000 -0.000000)
+      (length    0.668369412422)
+      (matrix    0.087390  0.139957  0.986294  0.000000
+                -0.517030  0.852659 -0.075183  0.000000
+                -0.851495 -0.503373  0.146876  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.270598 0.653281 -0.653282 -0.270598)
-      (euler     135.000015 -0.000008 -90.000000)
+      (quat      0.722310 0.148202 -0.636081 0.227391)
+      (euler     -27.107162 -80.502777 58.019215)
      )
 
-    (bone
-      (name      "Bone.018")
-      (children )
-      (parent    "Bone.010")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421365738)
-      (matrix    0.000000 -1.000000 -0.000000  0.000000
-                 0.707107  0.000000 -0.707107  0.000000
-                 0.707107  0.000000  0.707107  0.000000
-                 0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653282 -0.270598 0.270598 -0.653281)
-      (euler     -44.999996 0.000002 -90.000000)
-     )
+    ;; ignoring bone: IK_Lower Leg.R
 
-    (bone
-      (name      "Bone.012")
-      (children )
-      (parent    "Bone.011")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.000000  1.000000  0.000000  0.000000
-                -0.707107  0.000000  0.707107  0.000000
-                 0.707107 -0.000000  0.707107  0.000000
-                 0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653282 0.270598 0.270598 0.653281)
-      (euler     45.000008 -0.000000 89.999992)
-     )
+    ;; ignoring bone: IK_Lower Leg.L
 
     (bone
-      (name      "Bone.011")
-      (children  "Bone.012" "Bone.014" "Bone.015" "Bone.016")
-      (parent    "Bone")
+      (name      "Upper Arm.R")
+      (children  "Forearm.R")
+      (parent    "Shoulder.R")
       (head      0.000000 0.000000 0.000000)
-      (length    2.0)
-      (matrix    0.000000 -1.000000  0.000000  0.000000
-                 1.000000  0.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
+      (length    0.668369591236)
+      (matrix    0.087403 -0.139970 -0.986291  0.000000
+                 0.517036  0.852655 -0.075186  0.000000
+                 0.851489 -0.503377  0.146894  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 0.000000 0.000000 -0.707107)
-      (euler     0.000000 -0.000000 -90.000000)
+      (quat      0.722314 0.148201 0.636073 -0.227396)
+      (euler     -27.105177 80.501732 -58.017651)
      )
 
     (bone
-      (name      "Bone.010")
-      (children  "Bone.017" "Bone.018" "Bone.019" "Bone.020" "Bone.021")
-      (parent    "Bone")
-      (head      0.000000 0.000000 0.000000)
-      (length    2.0)
-      (matrix    0.000000  1.000000  0.000000  0.000000
-                -1.000000  0.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
+      (name      "Foot.R")
+      (children  "Toes.R")
+      (parent    "Lower Leg.R")
+      (head      0.000000 -0.000000 -0.000000)
+      (length    0.39579051733)
+      (matrix    0.995549 -0.094241 -0.000012  0.000000
+                 0.036253  0.383094 -0.922998  0.000000
+                 0.086989  0.918889  0.384805  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 0.000000 0.000000 0.707107)
-      (euler     0.000000 -0.000000 90.000000)
+      (quat      0.831181 -0.553997 0.026168 -0.039249)
+      (euler     -67.368340 0.000708 -5.407614)
      )
 
     (bone
-      (name      "Bone.017")
-      (children )
-      (parent    "Bone.010")
+      (name      "Forearm.L")
+      (children  "Hand.L")
+      (parent    "Upper Arm.L")
       (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.000000 -1.000000 -0.000000  0.000000
-                 0.707107  0.000000  0.707107  0.000000
-                -0.707107 -0.000000  0.707107  0.000000
+      (length    0.403206884861)
+      (matrix    0.652006 -0.181745 -0.736109  0.000000
+                 0.163274  0.981725 -0.097768  0.000000
+                 0.740426 -0.056442  0.669764  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653282 0.270598 -0.270598 -0.653281)
-      (euler     45.000008 0.000000 -89.999992)
+      (quat      0.908776 -0.011369 0.406188 -0.094913)
+      (euler     -8.305038 47.401035 -15.575667)
      )
 
     (bone
-      (name      "Bone.016")
+      (name      "Toes.R")
       (children )
-      (parent    "Bone.011")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.000000  1.000000  0.000000  0.000000
-                 0.707107  0.000000 -0.707107  0.000000
-                -0.707107  0.000000 -0.707107  0.000000
+      (parent    "Foot.R")
+      (head      0.000000 -0.000000 0.000000)
+      (length    0.242309808731)
+      (matrix   -1.000000  0.000004  0.000006  0.000000
+                -0.000000  0.838955 -0.544201  0.000000
+                -0.000007 -0.544201 -0.838955  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.270598 -0.653282 -0.653281 0.270598)
-      (euler     -135.000000 -0.000013 89.999992)
+      (quat      0.000000 0.000000 0.958894 -0.283765)
+      (euler     32.970074 -179.999634 -0.000215)
      )
 
-    (bone
-      (name      "Bone.015")
-      (children )
-      (parent    "Bone.011")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.000000  1.000000 -0.000000  0.000000
-                 0.707107  0.000000  0.707107  0.000000
-                 0.707107 -0.000000 -0.707107  0.000000
+    (bone ;; a root bone
+      (name      "Hip")
+      (children  "Rower Back" "Upper Leg.R" "Upper Leg.L")
+      (parent )
+      (head      -0.000000 -0.919886 -1.144248)
+      (length    0.373413532972)
+      (matrix    1.000000 -0.000000  0.000000  0.000000
+                -0.000000 -0.072101  0.997397  0.000000
+                -0.000000 -0.997397 -0.072101  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.270598 0.653282 0.653282 0.270598)
-      (euler     135.000015 0.000006 90.000000)
+      (quat      0.681138 0.732155 -0.000000 0.000000)
+      (euler     94.134697 -0.000000 -0.000000)
      )
 
     (bone
-      (name      "Bone.014")
+      (name      "Head")
       (children )
-      (parent    "Bone.011")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421365738)
-      (matrix    0.000000  1.000000  0.000000  0.000000
-                -0.707107  0.000000 -0.707107  0.000000
-                -0.707107  0.000000  0.707107  0.000000
+      (parent    "Neck")
+      (head      0.000000 0.000000 -0.000000)
+      (length    0.235751986504)
+      (matrix   -1.000000 -0.000000  0.000000  0.000000
+                -0.000000  0.513807  0.857906  0.000000
+                -0.000000  0.857906 -0.513807  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653282 -0.270598 -0.270598 0.653281)
-      (euler     -44.999996 -0.000002 90.000000)
+      (quat      0.000000 0.000000 0.870002 0.493048)
+      (euler     -59.082279 -180.000000 0.000006)
      )
 
     (bone
-      (name      "Bone.024")
-      (children )
-      (parent    "Bone.022")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.0)
-      (matrix    0.000000 -1.000000  0.000000  0.000000
-                 1.000000  0.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
+      (name      "Shoulder.L")
+      (children  "Upper Arm.L")
+      (parent    "Upper Back")
+      (head      0.129844 -0.045085 -0.049148)
+      (length    0.529447615147)
+      (matrix   -0.508897 -0.595045  0.622049  0.000000
+                 0.860828 -0.351774  0.367738  0.000000
+                 0.000000  0.722618  0.691248  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 0.000000 0.000000 -0.707107)
-      (euler     0.000000 -0.000000 -90.000000)
+      (quat      0.455680 -0.194698 -0.341275 -0.798736)
+      (euler     28.012566 -38.465931 -130.537842)
      )
 
-    (bone ;; a root bone
-      (name      "Bone")
-      (children  "Bone.001" "Bone.002" "Bone.010" "Bone.011" "Bone.022")
-      (parent )
-      (head      0.000000 -1.000000 -0.000000)
-      (length    1.00000011921)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000  1.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
-                 0.000000  0.000000  0.000000  1.000000)
-      (quat      1.000000 0.000000 0.000000 0.000000)
-      (euler     0.000000 -0.000000 0.000000)
-     )
+    ;; ignoring bone: IK_Forearm.R
 
     (bone
-      (name      "Bone.025")
-      (children  "Bone.026")
-      (parent    "Bone.023")
-      (head      0.000000 0.000000 0.000000)
-      (length    2.23606824875)
-      (matrix   -0.894427 -0.447214 -0.000000  0.000000
-                 0.447214 -0.894427  0.000000  0.000000
-                -0.000000  0.000000  1.000000  0.000000
+      (name      "Rower Back")
+      (children  "Upper Back")
+      (parent    "Hip")
+      (head      0.000000 0.000000 -0.000000)
+      (length    0.532472133636)
+      (matrix    1.000000  0.000000 -0.000000  0.000000
+                -0.000000  0.959821 -0.280614  0.000000
+                 0.000000  0.280614  0.959821  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.229753 0.000000 -0.000000 -0.973249)
-      (euler     0.000002 0.000001 -153.434952)
+      (quat      0.989904 -0.141738 0.000000 0.000000)
+      (euler     -16.296881 0.000000 0.000000)
      )
 
     (bone
-      (name      "Bone.004")
-      (children )
-      (parent    "Bone.001")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.707107 -0.000000 -0.707107  0.000000
-                 0.707107 -0.000000  0.707107  0.000000
-                -0.000000 -1.000000 -0.000000  0.000000
+      (name      "Shoulder.R")
+      (children  "Upper Arm.R")
+      (parent    "Upper Back")
+      (head      -0.131627 -0.045085 -0.049148)
+      (length    0.52944880724)
+      (matrix   -0.508896  0.595047 -0.622048  0.000000
+                -0.860828 -0.351774  0.367736  0.000000
+                 0.000000  0.722616  0.691250  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653281 0.653282 0.270598 -0.270598)
-      (euler     90.000008 45.000015 -0.000006)
+      (quat      0.455681 -0.194698 0.341274 0.798736)
+      (euler     28.012424 38.465862 130.537704)
      )
 
-    (bone
-      (name      "Bone.023")
-      (children  "Bone.025")
-      (parent    "Bone.022")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.0)
-      (matrix    0.000000  1.000000  0.000000  0.000000
-                -1.000000  0.000000  0.000000  0.000000
+    ;; ignoring bone: IK_Forearm.L
+
+    (bone ;; a root bone
+      (name      "HeadIK")
+      (children )
+      (parent )
+      (head      0.000000 -1.207386 0.301999)
+      (length    0.145349025726)
+      (matrix   -1.000000  0.000000  0.000000  0.000000
+                 0.000000 -1.000000  0.000000  0.000000
                  0.000000  0.000000  1.000000  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 0.000000 0.000000 0.707107)
-      (euler     0.000000 -0.000000 90.000000)
+      (quat      0.000000 0.000000 0.000000 1.000000)
+      (euler     0.000000 -0.000000 180.000000)
      )
 
     (bone
-      (name      "Bone.008")
-      (children )
-      (parent    "Bone.002")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421341896)
-      (matrix    0.707107  0.000000  0.707107  0.000000
-                 0.707107 -0.000000 -0.707107  0.000000
-                 0.000000  1.000000 -0.000000  0.000000
+      (name      "Neck")
+      (children  "Head")
+      (parent    "Upper Back")
+      (head      -0.000000 -0.000000 -0.000000)
+      (length    0.194393187761)
+      (matrix    1.000000 -0.000000 -0.000000  0.000000
+                 0.000000  0.851875  0.523745  0.000000
+                -0.000000 -0.523745  0.851875  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653281 -0.653282 -0.270598 -0.270598)
-      (euler     -90.000023 -45.000000 0.000012)
+      (quat      0.962256 0.272144 0.000000 -0.000000)
+      (euler     31.583826 0.000002 -0.000003)
      )
 
     (bone
-      (name      "Bone.009")
+      (name      "Hand.L")
       (children )
-      (parent    "Bone.002")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.00000011921)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000  1.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
+      (parent    "Forearm.L")
+      (head      -0.000000 0.000000 0.000000)
+      (length    0.257442265749)
+      (matrix    0.977106 -0.028053 -0.210894  0.000000
+                 0.021477  0.999211 -0.033410  0.000000
+                 0.211665  0.028115  0.976938  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      1.000000 0.000000 0.000000 0.000000)
-      (euler     0.000000 -0.000000 0.000000)
+      (quat      0.994140 -0.015472 0.106262 -0.012456)
+      (euler     -1.958656 12.174728 -1.644552)
      )
 
     (bone
-      (name      "Bone.006")
+      (name      "Hand.R")
       (children )
-      (parent    "Bone.002")
-      (head      0.000000 0.000000 0.000000)
-      (length    0.980814993382)
-      (matrix   -1.000000  0.000000 -0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
-                 0.000000  1.000000 -0.000000  0.000000
+      (parent    "Forearm.R")
+      (head      0.000000 -0.000000 0.000000)
+      (length    0.257442861795)
+      (matrix    0.977105  0.028053  0.210899  0.000000
+                -0.021477  0.999211 -0.033410  0.000000
+                -0.211670  0.028115  0.976937  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.000000 0.000000 0.707107 0.707107)
-      (euler     -89.999985 180.000000 -0.000009)
+      (quat      0.994139 -0.015472 -0.106265 0.012456)
+      (euler     -1.958666 -12.175045 1.644552)
      )
 
     (bone
-      (name      "Bone.026")
+      (name      "Toes.L")
       (children )
-      (parent    "Bone.025")
+      (parent    "Foot.L")
       (head      0.000000 0.000000 0.000000)
-      (length    1.99999988079)
-      (matrix   -0.894427  0.447214 -0.000000  0.000000
-                -0.447214 -0.894427  0.000000  0.000000
-                -0.000000  0.000000  1.000000  0.000000
+      (length    0.242312073708)
+      (matrix   -1.000000 -0.000000 -0.000001  0.000000
+                 0.000000  0.838960 -0.544193  0.000000
+                 0.000001 -0.544193 -0.838960  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.229753 -0.000000 0.000000 0.973249)
-      (euler     0.000001 0.000002 153.434952)
+      (quat      0.000000 0.000000 0.958895 -0.283760)
+      (euler     32.969524 179.999969 0.000024)
      )
 
     (bone
-      (name      "Bone.001")
-      (children  "Bone.003" "Bone.004" "Bone.005")
-      (parent    "Bone")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.99999988079)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000  0.000000 -1.000000  0.000000
-                 0.000000  1.000000  0.000000  0.000000
+      (name      "Lower Leg.L")
+      (children  "Foot.L")
+      (parent    "Upper Leg.L")
+      (head      0.000000 -0.000000 -0.000000)
+      (length    1.09502696991)
+      (matrix    0.994156  0.104599 -0.026701  0.000000
+                -0.092891  0.954889  0.282061  0.000000
+                 0.055000 -0.277933  0.959025  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 -0.707107 0.000000 0.000000)
-      (euler     -90.000000 -0.000000 0.000000)
+      (quat      0.988442 0.141635 0.020664 0.049950)
+      (euler     16.389271 1.530055 6.006186)
      )
 
     (bone
-      (name      "Bone.002")
-      (children  "Bone.006" "Bone.007" "Bone.008" "Bone.009")
-      (parent    "Bone")
-      (head      0.000000 0.000000 0.000000)
-      (length    2.0)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000 -0.000000  1.000000  0.000000
-                 0.000000 -1.000000 -0.000000  0.000000
+      (name      "Upper Leg.R")
+      (children  "Lower Leg.R")
+      (parent    "Hip")
+      (head      -0.206413 -0.429881 0.139951)
+      (length    1.13264071941)
+      (matrix    0.980977 -0.191024  0.034561  0.000000
+                -0.194126 -0.965305  0.174645  0.000000
+                 0.000000 -0.178031 -0.984025  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.707107 0.707107 0.000000 0.000000)
-      (euler     90.000015 -0.000000 0.000000)
+      (quat      0.088947 0.991250 -0.097138 0.008717)
+      (euler     169.935944 -1.980579 -11.019246)
      )
 
     (bone
-      (name      "Bone.003")
-      (children )
-      (parent    "Bone.001")
+      (name      "Upper Back")
+      (children  "Neck" "Shoulder.R" "Shoulder.L")
+      (parent    "Rower Back")
       (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.707107  0.000000  0.707107  0.000000
-                -0.707107 -0.000000  0.707107  0.000000
-                 0.000000 -1.000000 -0.000000  0.000000
+      (length    0.385930389166)
+      (matrix    1.000000 -0.000000  0.000000  0.000000
+                 0.000000  0.979939  0.199300  0.000000
+                -0.000000 -0.199300  0.979939  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.653281 0.653282 -0.270598 0.270598)
-      (euler     90.000008 -45.000015 0.000006)
+      (quat      0.994972 0.100153 -0.000000 -0.000000)
+      (euler     11.496016 -0.000000 -0.000000)
      )
 
     (bone
-      (name      "Bone.022")
-      (children  "Bone.023" "Bone.024")
-      (parent    "Bone")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.99999988079)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000  1.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
+      (name      "Forearm.R")
+      (children  "Hand.R")
+      (parent    "Upper Arm.R")
+      (head      -0.000000 0.000000 0.000000)
+      (length    0.40320533514)
+      (matrix    0.652022  0.181745  0.736095  0.000000
+                -0.163276  0.981724 -0.097765  0.000000
+                -0.740410 -0.056442  0.669781  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      1.000000 0.000000 0.000000 0.000000)
-      (euler     0.000000 -0.000000 0.000000)
+      (quat      0.908781 -0.011368 -0.406178 0.094913)
+      (euler     -8.304544 -47.399796 15.575343)
      )
 
     (bone
-      (name      "Bone.005")
-      (children )
-      (parent    "Bone.001")
-      (head      0.000000 0.000000 0.000000)
-      (length    0.980814993382)
-      (matrix   -1.000000  0.000000  0.000000  0.000000
-                 0.000000  0.000000 -1.000000  0.000000
-                -0.000000 -1.000000 -0.000000  0.000000
+      (name      "Lower Leg.R")
+      (children  "Foot.R")
+      (parent    "Upper Leg.R")
+      (head      0.000000 0.000000 -0.000000)
+      (length    1.09502851963)
+      (matrix    0.994156 -0.104597  0.026702  0.000000
+                 0.092890  0.954888  0.282064  0.000000
+                -0.055001 -0.277936  0.959024  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.000000 0.000000 0.707107 -0.707107)
-      (euler     -90.000008 -0.000000 180.000000)
+      (quat      0.988442 0.141637 -0.020665 -0.049949)
+      (euler     16.389462 -1.530112 -6.006112)
      )
 
     (bone
-      (name      "Bone.020")
-      (children )
-      (parent    "Bone.010")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.41421353817)
-      (matrix    0.000000 -1.000000 -0.000000  0.000000
-                -0.707107  0.000000 -0.707107  0.000000
-                 0.707107  0.000000 -0.707107  0.000000
+      (name      "Upper Leg.L")
+      (children  "Lower Leg.L")
+      (parent    "Hip")
+      (head      0.204631 -0.429881 0.139951)
+      (length    1.1326406002)
+      (matrix    0.980977  0.191021 -0.034561  0.000000
+                 0.194122 -0.965306  0.174648  0.000000
+                -0.000000 -0.178035 -0.984024  0.000000
                  0.000000  0.000000  0.000000  1.000000)
-      (quat      0.270598 -0.653282 0.653281 -0.270598)
-      (euler     -135.000000 0.000013 -89.999992)
+      (quat      0.088949 0.991250 0.097136 -0.008717)
+      (euler     169.935745 1.980592 11.019031)
      )
 
-    (bone
-      (name      "Bone.021")
-      (children )
-      (parent    "Bone.010")
-      (head      0.000000 0.000000 0.000000)
-      (length    1.0)
-      (matrix    1.000000  0.000000  0.000000  0.000000
-                 0.000000  1.000000  0.000000  0.000000
-                 0.000000  0.000000  1.000000  0.000000
-                 0.000000  0.000000  0.000000  1.000000)
-      (quat      1.000000 0.000000 0.000000 0.000000)
-      (euler     0.000000 -0.000000 0.000000)
-     )
-
   ) ;; bones
  ) ;; armature

Modified: trunk/windstille/data/armature/mesh.mesh
===================================================================
--- trunk/windstille/data/armature/mesh.mesh	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/data/armature/mesh.mesh	2007-11-12 02:28:15 UTC (rev 1524)
@@ -3,2190 +3,6360 @@
   (name "")
   (mesh
     (name "")
-    (texture "404.png")
+    (texture "textures/suit2-texture.png")
 
     (vertices
-        1.021424   1.851356   0.150937 ;; 0
-        1.780537  -0.150937  -0.000000 ;; 1
-        0.150267  -0.150937   0.150937 ;; 2
-        2.090936  -1.050938   1.031500 ;; 3
-       -0.000670   0.150937  -1.846240 ;; 4
-       -0.000670   0.150936   1.841506 ;; 5
-       -1.781207   1.050936   0.900000 ;; 6
-        1.780537   0.150936  -0.150937 ;; 7
-        0.150267  -0.150937   1.841506 ;; 8
-       -0.151607   1.851356  -0.150936 ;; 9
-        0.150267  -0.150936  -2.132085 ;; 10
-       -3.091192  -0.090096  -0.093536 ;; 11
-       -0.068439  -0.051136   3.091057 ;; 12
-        1.021424   1.851356  -0.150936 ;; 13
-        1.780536  -1.050937  -1.050937 ;; 14
-       -0.151607   0.150937  -2.132085 ;; 15
-       -0.900670   1.050937  -1.846240 ;; 16
-       -0.151606  -0.150937   2.127351 ;; 17
-       -0.068439   0.084402   3.091057 ;; 18
-        1.050267   1.050937  -1.846240 ;; 19
-       -0.750527   1.851356  -0.150937 ;; 20
-       -0.151606  -1.057474  -1.846240 ;; 21
-        1.780536  -1.050938   1.031500 ;; 22
-       -1.781207   0.150936   0.150936 ;; 23
-       -0.480033   2.103175  -0.150937 ;; 24
-       -2.091607   1.050936   0.900000 ;; 25
-        0.150267  -0.150937  -0.155671 ;; 26
-        0.937339   2.879049   0.150937 ;; 27
-       -0.151606  -1.057474   2.127351 ;; 28
-        1.780537   1.050936   0.900000 ;; 29
-       -1.051607   1.050937  -2.132085 ;; 30
-        0.150267   1.851356  -0.150936 ;; 31
-        0.150267  -0.150937   1.841506 ;; 32
-        2.090937  -0.150937  -0.156701 ;; 33
-        0.150267   2.103175   0.150937 ;; 34
-       -2.091606  -1.050937  -0.861211 ;; 35
-        0.150267   0.150937  -0.155671 ;; 36
-       -0.151607   1.851356  -0.150936 ;; 37
-       -3.091192   0.090094  -0.000000 ;; 38
-        1.050267   1.050937   1.841506 ;; 39
-       -0.151606  -0.150937   0.150937 ;; 40
-        1.780536  -1.050937  -0.861211 ;; 41
-        1.780537  -0.150937   0.156700 ;; 42
-       -0.151606  -0.150937   0.150937 ;; 43
-        0.937339   3.110451   0.150937 ;; 44
-       -1.781207   1.050936   1.050937 ;; 45
-        0.150267   0.150937  -1.846240 ;; 46
-       -1.781207   1.050936   0.900000 ;; 47
-       -1.781206  -1.050937  -0.861211 ;; 48
-       -1.781207   0.150936  -0.150937 ;; 49
-       -0.151606  -1.057474  -2.132085 ;; 50
-       -0.900670   1.050937   1.841506 ;; 51
-        2.090937   0.150936  -0.150937 ;; 52
-        1.021424   2.103175   0.150937 ;; 53
-        0.150268  -1.057474  -1.846240 ;; 54
-       -0.151607   0.150937   0.150937 ;; 55
-        2.090937   0.150936  -0.150937 ;; 56
-        1.021424   2.103175  -0.150936 ;; 57
-       -2.091606  -1.050937  -1.050937 ;; 58
-       -1.077211   3.110451   0.150936 ;; 59
-       -3.091192   0.090094  -0.090095 ;; 60
-       -0.000670   0.150936   1.841506 ;; 61
-       -0.900670   1.050937  -2.132085 ;; 62
-        1.780536  -1.050938   1.031500 ;; 63
-       -0.151606  -0.150937   1.841506 ;; 64
-       -2.091606  -0.150937   0.156700 ;; 65
-       -1.781206  -0.150937   0.156700 ;; 66
-        0.150267  -0.150936  -2.132085 ;; 67
-       -2.091607   1.050936  -0.900000 ;; 68
-       -0.151607   2.103175   0.150937 ;; 69
-       -1.781206  -1.050937   0.874799 ;; 70
-       -0.068439  -0.051136   3.091057 ;; 71
-       -1.781207   1.050936  -0.900000 ;; 72
-       -1.781207  -0.150937  -0.156701 ;; 73
-        1.050267   1.050937   2.127351 ;; 74
-        0.150267   1.851356  -0.150936 ;; 75
-        2.090937  -1.050937  -1.050937 ;; 76
-        0.150268  -1.057474   2.127351 ;; 77
-       -0.900670   1.050937   1.841506 ;; 78
-       -0.151606  -1.057474   1.841506 ;; 79
-        0.150267  -0.150936  -2.132085 ;; 80
-       -1.051607   1.050937  -2.132085 ;; 81
-        0.067099   0.084402   3.091057 ;; 82
-        1.021424   2.103175  -0.150936 ;; 83
-       -1.077211   2.879049  -0.150937 ;; 84
-       -0.151607   1.851356  -0.150936 ;; 85
-       -2.091606  -0.150937  -0.000000 ;; 86
-        0.150267   0.150937   1.841506 ;; 87
-        0.150267  -0.150936  -1.846240 ;; 88
-       -2.091606  -1.050937  -1.050937 ;; 89
-       -0.151607   0.150937  -1.846240 ;; 90
-        2.090937  -0.150937   0.156700 ;; 91
-        0.150267   0.150937   0.150937 ;; 92
-        0.150268  -1.057474   1.841506 ;; 93
-        0.346967   2.879049  -0.150937 ;; 94
-        1.780537   1.050936  -1.050937 ;; 95
-        0.150267   1.851356   0.150937 ;; 96
-        0.150267  -0.150937  -0.155671 ;; 97
-        0.150267  -0.150936  -1.846240 ;; 98
-        1.780537   1.050936   0.900000 ;; 99
-       -3.091192  -0.090096  -0.000000 ;; 100
-       -1.781207   1.050936   1.050937 ;; 101
-        0.150267  -0.150937   0.150937 ;; 102
-        1.780537   0.150936   0.150936 ;; 103
-       -1.070405   1.851356  -0.150937 ;; 104
-       -0.151606  -0.150937   0.150937 ;; 105
-        0.937339   3.110451   0.150937 ;; 106
-       -1.781207   0.150936  -0.000000 ;; 107
-       -1.781206  -1.050937  -0.861211 ;; 108
-        1.050267   1.050937   2.127351 ;; 109
-        0.150267   2.103175  -0.150936 ;; 110
-       -0.151607   1.851356   0.150937 ;; 111
-       -2.091607   1.050936  -1.050937 ;; 112
-        0.150268  -1.057474  -1.846240 ;; 113
-       -1.781206  -0.150937  -0.000000 ;; 114
-       -0.151607   2.103175   0.150937 ;; 115
-       -2.091606  -1.050938   0.874799 ;; 116
-        0.150267  -0.150937   2.127351 ;; 117
-        1.780537   1.050936   1.050937 ;; 118
-       -0.151607   0.150937  -0.155671 ;; 119
-       -0.000670   0.150936   1.841506 ;; 120
-       -3.091192   0.090094  -0.090095 ;; 121
-        0.150267   0.150937  -1.846240 ;; 122
-       -1.070405   2.103175  -0.150937 ;; 123
-        0.150268  -1.057474   1.841506 ;; 124
-        0.346967   2.879049   0.150936 ;; 125
-        0.150267   0.150937  -0.155671 ;; 126
-       -0.151606  -0.150937  -2.132085 ;; 127
-        0.899330   1.050937   1.841506 ;; 128
-       -0.151607   1.851356  -0.150936 ;; 129
-       -2.091606  -1.050938   1.031500 ;; 130
-       -1.781206  -1.050937   0.874799 ;; 131
-       -1.781207   1.050936  -1.050937 ;; 132
-       -0.151606  -1.057474   2.127351 ;; 133
-        1.780536  -1.050937   0.874799 ;; 134
-       -2.091606  -1.050937  -0.861211 ;; 135
-       -1.781207  -0.150937  -0.156701 ;; 136
-        1.050267   1.050937   2.127351 ;; 137
-        0.150268  -1.057474   2.127351 ;; 138
-       -1.781206  -1.050937  -0.861211 ;; 139
-        0.150267   1.851356   0.150937 ;; 140
-       -1.070406   2.103175   0.150936 ;; 141
-        0.150267  -0.150936  -2.132085 ;; 142
-       -0.750527   1.851356  -0.150937 ;; 143
-        0.067099   0.084402   3.091057 ;; 144
-       -0.151607   1.851356   0.150937 ;; 145
-       -0.151607   0.150937   0.150937 ;; 146
-        0.150267   0.150937   2.127351 ;; 147
-       -1.781206  -0.150937   0.156700 ;; 148
-        1.021424   1.851356   0.150937 ;; 149
-       -0.151606  -0.150937  -2.132085 ;; 150
-        2.090937   1.050936   1.050937 ;; 151
-       -0.068439   0.084402   3.091057 ;; 152
-        0.937339   2.879049   0.150937 ;; 153
-       -0.480033   2.103175  -0.150937 ;; 154
-        0.150267   1.851356   0.150937 ;; 155
-        2.090936  -1.050937  -0.861211 ;; 156
-       -1.781206  -1.050937  -1.050937 ;; 157
-       -2.091607   1.050936  -1.050937 ;; 158
-       -0.151606  -0.150937   2.127351 ;; 159
-       -1.781207   1.050936  -0.900000 ;; 160
-        0.346967   2.879049   0.150936 ;; 161
-       -0.151607   0.150936   1.841506 ;; 162
-        1.021424   1.851356  -0.150936 ;; 163
-        0.150268  -1.057474  -2.132085 ;; 164
-        0.899330   1.050937   1.841506 ;; 165
-       -2.091606  -1.050937  -0.861211 ;; 166
-        0.937339   2.879049   0.150937 ;; 167
-       -1.077211   3.110451  -0.150937 ;; 168
-        0.899330   1.050937  -2.132085 ;; 169
-        1.780537   1.050936  -0.900000 ;; 170
-       -3.091192  -0.090096   0.093535 ;; 171
-       -0.000670   0.150937  -2.132085 ;; 172
-       -1.051607   1.050937  -1.846240 ;; 173
-        0.067099  -0.051136   3.091057 ;; 174
-       -2.091606  -1.050938   0.874799 ;; 175
-        0.937340   3.110451  -0.150937 ;; 176
-       -0.151606  -0.150937   0.150937 ;; 177
-        1.021424   1.851356   0.150937 ;; 178
-        1.780537   1.050936   1.050937 ;; 179
-       -0.750527   1.851356  -0.150937 ;; 180
-       -0.000670   0.150937  -1.846240 ;; 181
-        2.090937  -0.150937  -0.000000 ;; 182
-        1.050267   1.050937   1.841506 ;; 183
-       -1.781207   0.150936  -0.000000 ;; 184
-       -1.051607   1.050936   2.127351 ;; 185
-       -0.151607   0.150937  -0.155671 ;; 186
-        2.090937   1.050936  -1.050937 ;; 187
-        0.346967   2.879049   0.150936 ;; 188
-        0.899330   1.050937   1.841506 ;; 189
-        1.780537   0.150936   0.150936 ;; 190
-        2.090937   1.050936   0.900000 ;; 191
-       -2.091607   0.150936   0.150936 ;; 192
-       -2.091607   1.050936  -0.900000 ;; 193
-       -2.091607   1.050936   1.050937 ;; 194
-        1.050267   1.050937  -1.846240 ;; 195
-        1.021424   1.851356  -0.150936 ;; 196
-        1.780536  -1.050937   0.874799 ;; 197
-        2.090937   0.150936  -0.000000 ;; 198
-        0.150267   1.851356   0.150937 ;; 199
-       -0.750528   1.851356   0.150937 ;; 200
-        0.150267   0.150937  -1.846240 ;; 201
-       -0.151606  -1.057474   1.841506 ;; 202
-        2.090936  -1.050938   0.874799 ;; 203
-        1.780536  -1.050938   1.031500 ;; 204
-        1.021424   1.851356   0.150937 ;; 205
-       -1.781206  -1.050937   0.874799 ;; 206
-       -0.480033   2.103175  -0.150937 ;; 207
-        2.090937   1.050936   1.050937 ;; 208
-        2.090937   0.150936  -0.000000 ;; 209
-        0.150267  -0.150936  -1.846240 ;; 210
-        0.937339   2.879049   0.150937 ;; 211
-       -0.900670   1.050937  -1.846240 ;; 212
-       -1.781207   1.050936  -1.050937 ;; 213
-        0.150267   0.150937  -0.155671 ;; 214
-        0.617462   3.110451  -0.150937 ;; 215
-        0.150268  -1.057474   1.841506 ;; 216
-       -0.900670   1.050937   2.127351 ;; 217
-        1.780537   0.150936   0.150936 ;; 218
-       -3.091192  -0.090096   0.093535 ;; 219
-        0.150267   0.150937   2.127351 ;; 220
-       -0.151607   0.150936   2.127351 ;; 221
-       -1.781206  -1.050937  -1.050937 ;; 222
-        2.090937   1.050936  -0.900000 ;; 223
-       -0.151607   0.150937  -0.155671 ;; 224
-       -0.151607   0.150936   2.127351 ;; 225
-       -0.151606  -0.150937  -1.846240 ;; 226
-       -0.151606  -0.150937  -1.846240 ;; 227
-       -2.091606  -1.050938   1.031500 ;; 228
-        2.090937   0.150936  -0.150937 ;; 229
-       -0.151606  -0.150937   1.841506 ;; 230
-        0.937339   2.879049   0.150937 ;; 231
-       -2.091607   1.050936  -1.050937 ;; 232
-        2.090937   1.050936  -1.050937 ;; 233
-       -0.151607   1.851356  -0.150936 ;; 234
-        0.067099  -0.051136   3.091057 ;; 235
-       -0.068439   0.084402   3.091057 ;; 236
-        0.937340   3.110451  -0.150937 ;; 237
-       -3.091192   0.090094  -0.090095 ;; 238
-        0.150267   0.150937  -2.132085 ;; 239
-        2.090937  -1.050937  -1.050937 ;; 240
-        1.050267   1.050937   1.841506 ;; 241
-        1.050267   1.050937   1.841506 ;; 242
-        0.150267   0.150937  -0.155671 ;; 243
-       -0.151606  -0.150937  -2.132085 ;; 244
-       -0.000670   0.150936   2.127351 ;; 245
-       -1.781206  -0.150937   0.156700 ;; 246
-        1.780537   0.150936  -0.150937 ;; 247
-        0.150267   0.150937  -2.132085 ;; 248
-        0.937340   2.879049  -0.150937 ;; 249
-       -0.750528   1.851356   0.150937 ;; 250
-       -0.750528   1.851356   0.150937 ;; 251
-       -0.151607   0.150937  -2.132085 ;; 252
-       -1.070406   2.103175   0.150936 ;; 253
-        1.780537  -0.150937  -0.156701 ;; 254
-        0.150267   0.150937   0.150937 ;; 255
-       -2.091607  -0.150937  -0.156701 ;; 256
-       -1.781207   1.050936   0.900000 ;; 257
-       -1.781206  -1.050938   1.031500 ;; 258
-        2.090937  -0.150937  -0.000000 ;; 259
-        2.090937   0.150936   0.150936 ;; 260
-        2.090937  -0.150937  -0.000000 ;; 261
-       -1.781207   0.150936   0.150936 ;; 262
-        2.090937   1.050936  -0.900000 ;; 263
-        0.150267  -0.150937  -0.155671 ;; 264
-       -3.091192   0.090094  -0.000000 ;; 265
-       -0.900670   1.050937  -1.846240 ;; 266
-       -3.091192   0.090094   0.090095 ;; 267
-       -3.091192  -0.090096  -0.093536 ;; 268
-        2.090937  -0.150937   0.156700 ;; 269
-        0.150267   0.150937   2.127351 ;; 270
-       -0.900670   1.050937   2.127351 ;; 271
-       -0.151606  -0.150937  -0.155671 ;; 272
-       -3.091192  -0.090096   0.093535 ;; 273
-        2.090937  -0.150937  -0.156701 ;; 274
-       -1.781206  -1.050937  -1.050937 ;; 275
-       -0.151606  -0.150937   2.127351 ;; 276
-       -0.151607   0.150936   2.127351 ;; 277
-        0.150267   0.150937   1.841506 ;; 278
-        0.617461   3.110451   0.150936 ;; 279
-        0.346967   2.879049   0.150936 ;; 280
-        0.150267  -0.150937  -0.155671 ;; 281
-       -0.151607   0.150937  -2.132085 ;; 282
-        0.150267  -0.150936  -1.846240 ;; 283
-       -2.091607   1.050936   1.050937 ;; 284
-        0.899330   1.050937   1.841506 ;; 285
-       -2.091606  -1.050937  -1.050937 ;; 286
-        0.150268  -1.057474  -1.846240 ;; 287
-        0.937339   3.110451   0.150937 ;; 288
-       -1.781207   0.150936  -0.000000 ;; 289
-        0.937340   2.879049  -0.150937 ;; 290
-       -1.781207   0.150936  -0.150937 ;; 291
-       -0.151606  -0.150937   1.841506 ;; 292
-       -1.781207   0.150936  -0.000000 ;; 293
-        2.090937   0.150936   0.150936 ;; 294
-        1.780537   0.150936  -0.000000 ;; 295
-       -1.781207   1.050936  -0.900000 ;; 296
-       -0.480033   2.103175   0.150937 ;; 297
-       -0.750528   1.851356   0.150937 ;; 298
-       -1.781207  -0.150937  -0.156701 ;; 299
-       -1.051607   1.050937  -1.846240 ;; 300
-       -2.091607   1.050936  -0.900000 ;; 301
-        2.090937   1.050936  -1.050937 ;; 302
-       -0.151607   0.150937  -2.132085 ;; 303
-        2.090937   0.150936   0.150936 ;; 304
-        1.780537   1.050936  -1.050937 ;; 305
-        0.150267   0.150937  -2.132085 ;; 306
-        0.899330   1.050937  -1.846240 ;; 307
-       -0.900670   1.050937  -2.132085 ;; 308
-        0.899330   1.050937   2.127351 ;; 309
-       -0.151606  -0.150937  -0.155671 ;; 310
-       -3.091192   0.090094  -0.090095 ;; 311
-        0.899330   1.050937  -2.132085 ;; 312
-        0.150268  -1.057474   2.127351 ;; 313
-       -0.151606  -0.150937   0.150937 ;; 314
-        1.050267   1.050937  -1.846240 ;; 315
-       -0.151606  -0.150937  -2.132085 ;; 316
-        0.150267  -0.150937   2.127351 ;; 317
-       -2.091606  -1.050938   1.031500 ;; 318
-       -1.781207   0.150936  -0.150937 ;; 319
-        0.150267   0.150937  -2.132085 ;; 320
-       -1.077211   3.110451  -0.150937 ;; 321
-       -0.480033   2.103175  -0.150937 ;; 322
-       -1.070406   2.103175   0.150936 ;; 323
-        1.050267   1.050937  -2.132085 ;; 324
-        0.150267  -0.150936  -2.132085 ;; 325
-       -1.051607   1.050936   1.841506 ;; 326
-       -0.151607   0.150937   0.150937 ;; 327
-        0.067099   0.084402   3.091057 ;; 328
-        2.090937  -0.150937  -0.156701 ;; 329
-        0.150267   0.150937   2.127351 ;; 330
-       -2.091606  -0.150937   0.156700 ;; 331
-       -1.781206  -1.050937   0.874799 ;; 332
-       -1.051607   1.050937  -1.846240 ;; 333
-       -3.091192  -0.090096  -0.093536 ;; 334
-       -2.091606  -0.150937  -0.000000 ;; 335
-       -0.068439  -0.051136   3.091057 ;; 336
-        2.090937   1.050936  -0.900000 ;; 337
-       -3.091192   0.090094  -0.000000 ;; 338
-       -1.070405   2.103175  -0.150937 ;; 339
-        2.090937  -0.150937  -0.000000 ;; 340
-        0.617462   3.110451  -0.150937 ;; 341
-       -1.077211   3.110451   0.150936 ;; 342
-        0.150267   0.150937  -2.132085 ;; 343
-        0.617462   3.110451  -0.150937 ;; 344
-       -1.051607   1.050937  -2.132085 ;; 345
-        0.150268  -1.057474   1.841506 ;; 346
-        1.780537   1.050936  -0.900000 ;; 347
-       -2.091607   0.150936  -0.150937 ;; 348
-       -0.151606  -0.150937   2.127351 ;; 349
-       -3.091192  -0.090096  -0.000000 ;; 350
-        2.090937  -1.050937  -1.050937 ;; 351
-        0.346967   2.879049   0.150936 ;; 352
-       -0.750527   1.851356  -0.150937 ;; 353
-        1.780536  -1.050937  -0.861211 ;; 354
-       -0.151606  -0.150937  -1.846240 ;; 355
-       -0.151606  -0.150937   1.841506 ;; 356
-       -1.070405   2.103175  -0.150937 ;; 357
-        0.150267   2.103175   0.150937 ;; 358
-        0.150267   0.150937   0.150937 ;; 359
-       -1.781207   0.150936  -0.150937 ;; 360
-        2.090937  -0.150937   0.156700 ;; 361
-        0.150267   2.103175  -0.150936 ;; 362
-       -1.781207   1.050936  -0.900000 ;; 363
-       -0.000670   0.150937  -2.132085 ;; 364
-        0.937340   3.110451  -0.150937 ;; 365
-       -2.091607   1.050936   0.900000 ;; 366
-       -1.070406   2.103175   0.150936 ;; 367
-        0.899330   1.050937  -1.846240 ;; 368
-        0.899330   1.050937   2.127351 ;; 369
-        1.780537  -0.150937  -0.156701 ;; 370
-       -0.000670   0.150936   2.127351 ;; 371
-       -2.091607   1.050936   1.050937 ;; 372
-       -0.151607   2.103175  -0.150936 ;; 373
-       -2.091607  -0.150937  -0.156701 ;; 374
-       -2.091607   0.150936   0.150936 ;; 375
-        1.780537   0.150936  -0.000000 ;; 376
-       -2.091607   0.150936  -0.000000 ;; 377
-       -1.070406   1.851356   0.150936 ;; 378
-        0.150268  -1.057474  -2.132085 ;; 379
-       -2.091607   0.150936  -0.150937 ;; 380
-        0.150267  -0.150937   2.127351 ;; 381
-        1.780537   1.050936   1.050937 ;; 382
-       -0.480033   2.103175   0.150937 ;; 383
-        0.150267   0.150937  -1.846240 ;; 384
-        1.780536  -1.050937  -0.861211 ;; 385
-        0.346967   2.879049  -0.150937 ;; 386
-        1.780537  -0.150937   0.156700 ;; 387
-       -0.900670   1.050937   2.127351 ;; 388
-       -0.151607   0.150937  -1.846240 ;; 389
-        0.150267  -0.150936  -1.846240 ;; 390
-        0.150267   1.851356   0.150937 ;; 391
-        1.050267   1.050937  -2.132085 ;; 392
-       -0.900670   1.050937   1.841506 ;; 393
-        2.090937  -0.150937  -0.156701 ;; 394
-       -1.781206  -1.050938   1.031500 ;; 395
-       -0.068439   0.084402   3.091057 ;; 396
-        1.021424   1.851356   0.150937 ;; 397
-        0.899330   1.050937  -1.846240 ;; 398
-       -1.051607   1.050937  -1.846240 ;; 399
-        2.090936  -1.050938   1.031500 ;; 400
-        0.150267  -0.150937   1.841506 ;; 401
-       -1.781206  -0.150937  -0.000000 ;; 402
-        2.090937   1.050936   0.900000 ;; 403
-        0.617462   3.110451  -0.150937 ;; 404
-       -1.077211   2.879049   0.150936 ;; 405
-        0.150267   0.150937   2.127351 ;; 406
-        0.937340   2.879049  -0.150937 ;; 407
-       -0.068439   0.084402   3.091057 ;; 408
-        2.090937   0.150936  -0.150937 ;; 409
-       -1.781206  -1.050937  -1.050937 ;; 410
-       -1.781206  -0.150937  -0.000000 ;; 411
-        0.150267   1.851356  -0.150936 ;; 412
-        1.780537  -0.150937   0.156700 ;; 413
-        0.150267   0.150937   1.841506 ;; 414
-       -0.068439  -0.051136   3.091057 ;; 415
-       -0.750527   1.851356  -0.150937 ;; 416
-        1.780536  -1.050937  -0.861211 ;; 417
-        1.780537   1.050936  -1.050937 ;; 418
-       -0.151606  -0.150937  -1.846240 ;; 419
-        2.090937  -0.150937  -0.000000 ;; 420
-       -0.480033   2.103175  -0.150937 ;; 421
-        0.899330   1.050937  -2.132085 ;; 422
-       -0.151606  -0.150937   1.841506 ;; 423
-        1.780536  -1.050937  -1.050937 ;; 424
-        0.937339   2.879049   0.150937 ;; 425
-        0.937340   2.879049  -0.150937 ;; 426
-        1.780536  -1.050937   0.874799 ;; 427
-        0.150267   0.150937   0.150937 ;; 428
-       -0.151607   1.851356  -0.150936 ;; 429
-       -1.781206  -1.050938   1.031500 ;; 430
-       -0.480033   2.103175  -0.150937 ;; 431
-        0.150267   1.851356  -0.150936 ;; 432
-        0.899330   1.050937   2.127351 ;; 433
-        0.150267  -0.150937   0.150937 ;; 434
-       -0.000670   0.150937  -1.846240 ;; 435
-       -3.091192   0.090094  -0.090095 ;; 436
-       -0.900670   1.050937  -2.132085 ;; 437
-       -1.781207   0.150936   0.150936 ;; 438
-        1.780537   0.150936  -0.150937 ;; 439
-       -0.480033   2.103175   0.150937 ;; 440
-        0.150267   0.150937  -1.846240 ;; 441
-        2.090937   1.050936   0.900000 ;; 442
-        0.150267  -0.150937   1.841506 ;; 443
-        1.050267   1.050937   1.841506 ;; 444
-       -2.091607   1.050936   0.900000 ;; 445
-        1.780537   0.150936  -0.000000 ;; 446
-        1.050267   1.050937  -1.846240 ;; 447
-       -0.151607   2.103175   0.150937 ;; 448
-        0.150267   2.103175  -0.150936 ;; 449
-       -0.151606  -0.150937   2.127351 ;; 450
-       -2.091607   0.150936  -0.150937 ;; 451
-        0.150267  -0.150936  -1.846240 ;; 452
-       -0.151607   2.103175   0.150937 ;; 453
-       -0.900670   1.050937  -1.846240 ;; 454
-       -0.151606  -1.057474   1.841506 ;; 455
-       -1.781207   1.050936   0.900000 ;; 456
-        0.067099  -0.051136   3.091057 ;; 457
-       -1.077211   2.879049  -0.150937 ;; 458
-        1.780536  -1.050938   1.031500 ;; 459
-       -0.151606  -1.057474  -1.846240 ;; 460
-        2.090937   0.150936   0.150936 ;; 461
-       -1.077211   3.110451  -0.150937 ;; 462
-       -1.051607   1.050936   1.841506 ;; 463
-        2.090937   0.150936  -0.150937 ;; 464
-       -2.091607   0.150936  -0.000000 ;; 465
-       -1.781206  -1.050938   1.031500 ;; 466
-       -2.091606  -0.150937   0.156700 ;; 467
-       -1.070406   2.103175   0.150936 ;; 468
-        1.050267   1.050937  -2.132085 ;; 469
-        1.021424   1.851356  -0.150936 ;; 470
-        2.090936  -1.050938   1.031500 ;; 471
-        1.780536  -1.050938   1.031500 ;; 472
-        0.150267  -0.150937   1.841506 ;; 473
-       -2.091606  -0.150937  -0.000000 ;; 474
-       -1.051607   1.050936   1.841506 ;; 475
-       -0.151607   2.103175  -0.150936 ;; 476
-       -0.151606  -0.150937  -1.846240 ;; 477
-       -1.077211   2.879049   0.150936 ;; 478
-       -0.151607   0.150936   2.127351 ;; 479
-        1.780537  -0.150937  -0.000000 ;; 480
-       -2.091607   0.150936  -0.150937 ;; 481
-       -3.091192  -0.090096  -0.000000 ;; 482
-        0.150267   0.150937   1.841506 ;; 483
-       -0.000670   0.150937  -2.132085 ;; 484
-       -1.051607   1.050936   2.127351 ;; 485
-        1.780537   1.050936   0.900000 ;; 486
-        0.150267   2.103175   0.150937 ;; 487
-       -0.151607   1.851356   0.150937 ;; 488
-        1.780537   1.050936  -0.900000 ;; 489
-        0.346967   2.879049  -0.150937 ;; 490
-        0.937340   2.879049  -0.150937 ;; 491
-       -1.781207   1.050936  -1.050937 ;; 492
-       -0.750528   1.851356   0.150937 ;; 493
-       -0.151607   0.150937  -1.846240 ;; 494
-        1.780536  -1.050937   0.874799 ;; 495
-        1.780537   0.150936  -0.150937 ;; 496
-       -0.151607   0.150937   0.150937 ;; 497
-        0.150267  -0.150937   2.127351 ;; 498
-       -3.091192   0.090094   0.090095 ;; 499
-       -0.151607   0.150937  -2.132085 ;; 500
-       -0.151607   0.150937  -0.155671 ;; 501
-        0.150267  -0.150937   0.150937 ;; 502
-       -0.151607   0.150936   1.841506 ;; 503
-       -0.151607   1.851356   0.150937 ;; 504
-       -1.077211   3.110451   0.150936 ;; 505
-        1.780537   1.050936   0.900000 ;; 506
-        0.150267   0.150937  -0.155671 ;; 507
-       -3.091192  -0.090096  -0.093536 ;; 508
-       -0.151607   2.103175  -0.150936 ;; 509
-       -2.091606  -0.150937   0.156700 ;; 510
-       -0.480033   2.103175   0.150937 ;; 511
-        0.150267  -0.150936  -2.132085 ;; 512
-        1.050267   1.050937  -1.846240 ;; 513
-        0.150268  -1.057474  -2.132085 ;; 514
-        2.090936  -1.050937  -0.861211 ;; 515
-       -1.781207   1.050936   0.900000 ;; 516
-       -2.091607   0.150936   0.150936 ;; 517
-        1.780537   1.050936  -1.050937 ;; 518
-        1.780537   1.050936   1.050937 ;; 519
-       -0.900670   1.050937  -1.846240 ;; 520
-        2.090936  -1.050938   0.874799 ;; 521
-        0.346967   2.879049  -0.150937 ;; 522
-        2.090937   1.050936   1.050937 ;; 523
-        0.150267   1.851356   0.150937 ;; 524
-       -1.077211   2.879049  -0.150937 ;; 525
-        2.090937  -0.150937  -0.000000 ;; 526
-        1.780537  -0.150937  -0.156701 ;; 527
-       -0.151606  -0.150937  -2.132085 ;; 528
-        0.150267   0.150937   1.841506 ;; 529
-       -1.781207   1.050936   1.050937 ;; 530
-        0.617461   3.110451   0.150936 ;; 531
-        0.899330   1.050937  -1.846240 ;; 532
-       -0.480033   2.103175   0.150937 ;; 533
-        0.150267   0.150937  -2.132085 ;; 534
-        1.780537   0.150936  -0.150937 ;; 535
-       -3.091192   0.090094  -0.000000 ;; 536
-       -2.091606  -0.150937  -0.000000 ;; 537
-       -1.051607   1.050936   1.841506 ;; 538
-        1.780537   1.050936  -1.050937 ;; 539
-        0.150267   0.150937   0.150937 ;; 540
-        0.150268  -1.057474  -1.846240 ;; 541
-        0.346967   2.879049  -0.150937 ;; 542
-        0.617462   3.110451  -0.150937 ;; 543
-       -2.091607   0.150936  -0.150937 ;; 544
-       -0.151607   0.150936   1.841506 ;; 545
-       -2.091607   0.150936  -0.150937 ;; 546
-        0.150267   1.851356  -0.150936 ;; 547
-        1.780537   1.050936   0.900000 ;; 548
-        0.617461   3.110451   0.150936 ;; 549
-       -1.070406   1.851356   0.150936 ;; 550
-        0.150267   2.103175  -0.150936 ;; 551
-        2.090937   0.150936  -0.000000 ;; 552
-        1.780536  -1.050937  -0.861211 ;; 553
-       -1.070405   1.851356  -0.150937 ;; 554
-       -0.151607   0.150937  -0.155671 ;; 555
-       -0.151606  -0.150937  -0.155671 ;; 556
-       -0.151607   0.150937  -1.846240 ;; 557
-       -1.051607   1.050936   2.127351 ;; 558
-        1.780536  -1.050937  -1.050937 ;; 559
-        0.150267   2.103175   0.150937 ;; 560
-       -1.781206  -1.050937  -0.861211 ;; 561
-       -0.151606  -0.150937   0.150937 ;; 562
-       -0.151606  -1.057474  -2.132085 ;; 563
-       -1.781207   0.150936  -0.150937 ;; 564
-        2.090937  -0.150937   0.156700 ;; 565
-       -2.091607  -0.150937  -0.156701 ;; 566
-       -0.480033   2.103175   0.150937 ;; 567
-        1.780537  -0.150937  -0.000000 ;; 568
-       -1.781207  -0.150937  -0.156701 ;; 569
-       -0.151606  -0.150937   1.841506 ;; 570
-        0.150267  -0.150937   0.150937 ;; 571
-       -0.151607   0.150936   1.841506 ;; 572
-       -1.781206  -0.150937   0.156700 ;; 573
-       -1.781206  -0.150937   0.156700 ;; 574
-        1.780537  -0.150937  -0.156701 ;; 575
-       -0.151607   2.103175  -0.150936 ;; 576
-        0.150267  -0.150937   1.841506 ;; 577
-        0.067099   0.084402   3.091057 ;; 578
-       -0.000670   0.150936   2.127351 ;; 579
-       -1.781207   1.050936  -1.050937 ;; 580
-       -0.000670   0.150937  -1.846240 ;; 581
-        1.780537   1.050936  -0.900000 ;; 582
-       -2.091607  -0.150937  -0.156701 ;; 583
-       -1.781206  -1.050937  -0.861211 ;; 584
-        1.780536  -1.050937  -1.050937 ;; 585
-        0.346967   2.879049   0.150936 ;; 586
-        2.090936  -1.050938   0.874799 ;; 587
-        0.346967   2.879049  -0.150937 ;; 588
-        0.150267   2.103175   0.150937 ;; 589
-       -0.750527   1.851356  -0.150937 ;; 590
-       -0.151606  -1.057474  -1.846240 ;; 591
-        2.090936  -1.050937  -0.861211 ;; 592
-       -0.900670   1.050937   1.841506 ;; 593
-       -0.151606  -0.150937  -2.132085 ;; 594
-        2.090937  -0.150937   0.156700 ;; 595
-       -2.091606  -0.150937   0.156700 ;; 596
-        0.617461   3.110451   0.150936 ;; 597
-       -2.091607   0.150936  -0.000000 ;; 598
-       -2.091607   0.150936   0.150936 ;; 599
-       -0.151607   2.103175  -0.150936 ;; 600
-       -1.077211   2.879049   0.150936 ;; 601
-       -0.151606  -0.150937  -1.846240 ;; 602
-        0.937340   2.879049  -0.150937 ;; 603
-       -3.091192   0.090094   0.090095 ;; 604
-        0.150267   1.851356  -0.150936 ;; 605
-       -1.070405   2.103175  -0.150937 ;; 606
-       -1.070406   1.851356   0.150936 ;; 607
-       -1.781207   0.150936   0.150936 ;; 608
-       -1.781206  -0.150937  -0.000000 ;; 609
-       -1.070405   1.851356  -0.150937 ;; 610
-       -2.091607   0.150936  -0.000000 ;; 611
-       -0.151606  -0.150937  -0.155671 ;; 612
-       -1.781207   1.050936   1.050937 ;; 613
-       -2.091606  -0.150937   0.156700 ;; 614
-       -3.091192  -0.090096  -0.000000 ;; 615
-       -0.750528   1.851356   0.150937 ;; 616
-       -0.900670   1.050937   1.841506 ;; 617
-       -1.781207   1.050936  -1.050937 ;; 618
-       -3.091192   0.090094  -0.000000 ;; 619
-        1.021424   2.103175   0.150937 ;; 620
-       -2.091606  -1.050938   0.874799 ;; 621
-       -1.781206  -1.050938   1.031500 ;; 622
+       -0.361190  -0.058661  -1.533715 ;; 0 was 416
+       -0.326875  -0.263845   0.835073 ;; 1 was 388
+       -0.468133   0.350531  -2.020604 ;; 2 was 451
+        1.653042   0.153591   1.646807 ;; 3 was 208
+        2.013681   0.049172   1.469454 ;; 4 was 32
+       -0.000518  -0.444253   1.296030 ;; 5 was 275
+       -1.409138   0.312565   1.414233 ;; 6 was 337
+       -0.130181   0.252320  -0.298265 ;; 7 was 267
+        0.343675  -0.245141   0.695372 ;; 8 was 127
+        0.417425   0.131268   0.535163 ;; 9 was 2
+       -0.589462   0.106603  -1.522433 ;; 10 was 418
+        0.117134   0.240026  -0.252685 ;; 11 was 164
+       -1.645480   0.255788   1.494610 ;; 12 was 73
+        1.260506   0.281315   1.735411 ;; 13 was 189
+        0.333434  -0.248713  -2.020568 ;; 14 was 105
+        0.463042   0.307836  -1.523471 ;; 15 was 122
+        1.646449   0.039276   1.618564 ;; 16 was 209
+       -0.570424   0.178587   1.397292 ;; 17 was 371
+       -0.222942   0.095336  -0.951103 ;; 18 was 296
+       -0.184067   0.302754   1.050680 ;; 19 was 400
+       -1.709814   0.280197   1.585624 ;; 20 was 75
+        1.646449   0.039276   1.618564 ;; 21 was 209
+       -1.053208   0.363239   1.593980 ;; 22 was 357
+        1.630041   0.081443   1.583870 ;; 23 was 40
+       -0.602156  -0.038784  -2.020581 ;; 24 was 443
+       -0.394543  -0.081201   0.615870 ;; 25 was 406
+        0.406280  -0.236490   1.329064 ;; 26 was 141
+       -1.649057   0.254983   1.628124 ;; 27 was 326
+        1.693180   0.280190   1.470396 ;; 28 was 46
+        0.467727  -0.471927  -2.020555 ;; 29 was 90
+        0.576498   0.350531  -2.020604 ;; 30 was 77
+        0.405049   0.118919   0.751410 ;; 31 was 3
+        1.412003  -0.007008   1.422739 ;; 32 was 198
+        1.035394   0.170999   1.427230 ;; 33 was 181
+       -0.195761   0.239794   0.714033 ;; 34 was 405
+       -0.536837   0.355492   1.429775 ;; 35 was 369
+        1.419141  -0.076214   1.558946 ;; 36 was 196
+       -0.200946   0.213520  -0.247202 ;; 37 was 187
+        0.601066  -0.051388   1.761528 ;; 38 was 161
+       -0.388510  -0.170252  -0.892532 ;; 39 was 295
+       -0.359237  -0.033027  -1.711148 ;; 40 was 441
+        0.201566   0.237048  -0.065417 ;; 41 was 161
+        1.408155   0.312565   1.414232 ;; 42 was 199
+       -1.631924   0.292533   1.528958 ;; 43 was 325
+        0.515228  -0.005470   0.179549 ;; 44 was 224
+       -0.405733  -0.006625   1.065828 ;; 45 was 399
+       -0.468133   0.350531  -2.020604 ;; 46 was 451
+        1.275003  -0.041794   1.562195 ;; 47 was 187
+       -0.272941   0.137265   1.916270 ;; 48 was 377
+       -0.199056  -0.197312  -0.610602 ;; 49 was 305
+        0.182752  -0.315334   0.588260 ;; 50 was 133
+       -0.000362  -0.208202   0.106836 ;; 51 was 285
+        0.467338  -0.471922  -1.944728 ;; 52 was 100
+       -0.174718   0.345456   2.003495 ;; 53 was 461
+        0.601481  -0.038784  -2.020581 ;; 54 was 93
+        2.192291   0.055583   1.510668 ;; 55 was 22
+       -0.354670   0.132092   0.612669 ;; 56 was 410
+        0.271958   0.137265   1.916270 ;; 57 was 159
+        2.022352   0.273261   1.555180 ;; 58 was 35
+       -1.415740   0.170699   1.390042 ;; 59 was 339
+        0.195983   0.239794   0.714033 ;; 60 was 131
+       -1.415740   0.170699   1.390042 ;; 61 was 339
+       -1.275986  -0.041794   1.562195 ;; 62 was 349
+       -2.208251   0.236026   1.510657 ;; 63 was 48
+       -0.272941   0.137265   1.916270 ;; 64 was 377
+        1.560546   0.164206   1.420411 ;; 65 was 202
+       -0.450801   0.084476   1.307467 ;; 66 was 394
+        1.560546   0.164206   1.420411 ;; 67 was 202
+       -0.463718  -0.096821  -1.530020 ;; 68 was 417
+        0.576005  -0.445626  -1.944730 ;; 69 was 91
+        0.529088  -0.069445  -0.888756 ;; 70 was 237
+       -0.182595  -0.345438   0.648331 ;; 71 was 404
+       -1.709814   0.023750   1.585639 ;; 72 was 71
+       -0.463718  -0.096821  -1.530020 ;; 73 was 417
+       -0.468133   0.319871  -1.698020 ;; 74 was 449
+        0.000057   0.254941   0.649506 ;; 75 was 268
+        1.031477  -0.009337   1.461187 ;; 76 was 182
+        1.608743   0.164205   1.407728 ;; 77 was 214
+       -0.268593  -0.109029  -0.948759 ;; 78 was 298
+       -0.468133   0.350531  -2.020604 ;; 79 was 451
+        0.594893  -0.062071  -1.420652 ;; 80 was 250
+        0.470194   0.180330   0.180744 ;; 81 was 222
+       -0.602156   0.116448  -1.698008 ;; 82 was 426
+        1.629520   0.066667   1.494802 ;; 83 was 41
+        1.581293  -0.003056   1.533361 ;; 84 was 203
+        0.228882   0.051551  -0.262312 ;; 85 was 166
+       -0.338218   0.106603  -1.527846 ;; 86 was 419
+        1.859221   0.300998   1.468956 ;; 87 was 37
+       -0.468133  -0.192240  -1.761309 ;; 88 was 432
+       -0.479919   0.148430  -0.434213 ;; 89 was 302
+        0.129505  -0.264103  -0.298234 ;; 90 was 254
+       -0.809626  -0.119779   1.595938 ;; 91 was 365
+       -0.468133   0.319871  -1.698020 ;; 92 was 449
+       -0.468133   0.164639  -2.020593 ;; 93 was 421
+       -0.000518   0.434162   1.503818 ;; 94 was 279
+       -1.057379   0.155096   1.753572 ;; 95 was 360
+        0.387835  -0.170252  -0.892532 ;; 96 was 242
+        1.414757   0.170699   1.390042 ;; 97 was 197
+       -1.866177  -0.061385   1.421479 ;; 98 was 57
+        0.467457   0.164639  -2.020593 ;; 99 was 115
+        2.022352   0.273261   1.555180 ;; 100 was 35
+        1.035394   0.170999   1.427230 ;; 101 was 181
+        0.471799  -0.191270   0.180613 ;; 102 was 223
+        0.333434   0.116448  -1.698008 ;; 103 was 111
+       -0.809701   0.400398   1.611766 ;; 104 was 364
+        0.355093  -0.391325  -1.825337 ;; 105 was 83
+       -0.585912  -0.391325  -1.825337 ;; 106 was 456
+        0.565494   0.270062  -1.522341 ;; 107 was 124
+        0.000259   0.094073   0.105748 ;; 108 was 147
+       -1.261462   0.011215   1.723222 ;; 109 was 346
+       -0.000361   0.275713   0.401982 ;; 110 was 283
+       -0.116514   0.240027  -0.252685 ;; 111 was 185
+        0.267917  -0.109029  -0.948759 ;; 112 was 239
+        0.540338   0.086288   0.763382 ;; 113 was 0
+       -0.232934   0.119390   1.993193 ;; 114 was 463
+        0.535854   0.355492   1.429775 ;; 115 was 167
+        0.467282  -0.213535   1.559457 ;; 116 was 152
+        0.331255   0.242840  -0.466474 ;; 117 was 228
+        0.583699   0.097028   0.575307 ;; 118 was 1
+       -0.331930   0.242841  -0.466474 ;; 119 was 309
+        0.182752  -0.315334   0.588260 ;; 120 was 133
+       -0.206065   0.437214   1.309867 ;; 121 was 393
+        0.467338  -0.471922  -1.944728 ;; 122 was 100
+       -0.120671   0.289101  -0.085442 ;; 123 was 182
+       -0.115045   0.179435   0.114550 ;; 124 was 173
+        0.364139   0.200670   1.060294 ;; 125 was 139
+       -1.583727   0.292534   1.541642 ;; 126 was 332
+        0.467457  -0.248712  -2.020568 ;; 127 was 108
+        1.598252   0.039276   1.631247 ;; 128 was 206
+       -0.354670   0.132092   0.612669 ;; 129 was 410
+       -0.359092   0.350531  -2.020604 ;; 130 was 458
+       -0.602448   0.345692   1.820646 ;; 131 was 374
+        1.979225  -0.010577   1.419693 ;; 132 was 25
+       -0.406155   0.371370   1.309405 ;; 133 was 396
+       -0.812211   0.155888   1.828188 ;; 134 was 361
+       -1.646002   0.081443   1.583870 ;; 135 was 68
+       -0.297867   0.100931  -1.440695 ;; 136 was 291
+        0.535854   0.355492   1.429775 ;; 137 was 167
+        0.118656   0.126515   0.129055 ;; 138 was 158
+        1.262879   0.154356   1.759703 ;; 139 was 191
+        0.198380   0.185490  -0.610625 ;; 140 was 233
+       -0.585912  -0.391325  -1.825337 ;; 141 was 456
+        0.601466   0.345692   1.820646 ;; 142 was 162
+        0.387835   0.360931  -0.892565 ;; 143 was 243
+        0.360514  -0.058661  -1.533715 ;; 144 was 120
+       -0.602156   0.164639  -2.020593 ;; 145 was 422
+       -0.200946   0.237048  -0.065417 ;; 146 was 188
+       -0.223284  -0.021749  -0.249975 ;; 147 was 186
+       -0.468014  -0.471922  -1.944728 ;; 148 was 436
+        0.601481  -0.063462  -1.711145 ;; 149 was 92
+        0.594893  -0.062071  -1.420652 ;; 150 was 250
+       -0.394543  -0.081201   0.615870 ;; 151 was 406
+       -0.000363  -0.350985   0.571034 ;; 152 was 271
+       -1.645481   0.066667   1.494801 ;; 153 was 69
+       -0.578661  -0.059047  -1.528896 ;; 154 was 415
+        1.274176   0.328333   1.574734 ;; 155 was 188
+       -0.223284   0.041158  -0.064880 ;; 156 was 189
+       -1.649057   0.254983   1.628124 ;; 157 was 326
+        0.360514  -0.058661  -1.533715 ;; 158 was 120
+       -0.334110  -0.248712  -2.020568 ;; 159 was 431
+        1.850216  -0.061385   1.421479 ;; 160 was 29
+        1.629490  -0.003057   1.520678 ;; 161 was 212
+        0.577985  -0.059047  -1.528896 ;; 162 was 121
+       -0.206477  -0.404198   1.316146 ;; 163 was 392
+       -0.602156   0.116448  -1.698008 ;; 164 was 426
+        0.417425   0.131268   0.535163 ;; 165 was 2
+       -1.053208   0.363239   1.593980 ;; 166 was 357
+        0.121291   0.289101  -0.085442 ;; 167 was 183
+        0.208833  -0.116297   1.822308 ;; 168 was 468
+       -0.361117   0.284893  -1.527162 ;; 169 was 413
+       -1.607770   0.260307   1.425071 ;; 170 was 320
+       -0.117035   0.197512  -0.365436 ;; 171 was 196
+        0.375314  -0.038784  -2.020581 ;; 172 was 94
+        0.577985  -0.059047  -1.528896 ;; 173 was 121
+       -2.038314   0.049177   1.555193 ;; 174 was 61
+        0.121291   0.289101  -0.085442 ;; 175 was 183
+       -0.382132  -0.081196   0.698551 ;; 176 was 407
+        1.859841   0.055343   1.575105 ;; 177 was 38
+       -0.001300   0.036299   0.031718 ;; 178 was 225
+       -0.190897   0.048393   0.257622 ;; 179 was 152
+       -1.420123  -0.076214   1.558946 ;; 180 was 340
+       -1.875904  -0.001329   1.430930 ;; 181 was 58
+        0.485076  -0.105692   1.762366 ;; 182 was 155
+       -1.412985  -0.007008   1.422739 ;; 183 was 338
+       -0.000363  -0.350985   0.571034 ;; 184 was 271
+        1.421169   0.155030   1.754564 ;; 185 was 192
+        1.604845   0.153591   1.659491 ;; 186 was 207
+       -0.578661  -0.059047  -1.528896 ;; 187 was 415
+       -0.228261   0.101597  -0.060476 ;; 188 was 170
+       -0.354670  -0.245146   0.612691 ;; 189 was 408
+        1.419141  -0.076214   1.558946 ;; 190 was 196
+       -0.195761   0.239794   0.714033 ;; 191 was 405
+       -0.263216   0.268217  -0.191923 ;; 192 was 264
+       -0.463718   0.307836  -1.523471 ;; 193 was 414
+        0.321628  -0.258243  -1.944741 ;; 194 was 106
+        0.427987   0.048185   0.794697 ;; 195 was 18
+       -0.359237  -0.033027  -1.711148 ;; 196 was 441
+        0.343674   0.139499   0.695349 ;; 197 was 125
+        0.470496  -0.165061   0.359245 ;; 198 was 8
+        0.485076  -0.105692   1.762366 ;; 199 was 155
+        0.479243  -0.160232  -0.434195 ;; 200 was 234
+       -0.808004   0.334317   1.793044 ;; 201 was 363
+        0.811229   0.155888   1.828188 ;; 202 was 175
+       -0.394543  -0.081201   0.615870 ;; 203 was 406
+        0.565494   0.270062  -1.522341 ;; 204 was 124
+        0.117655   0.197512  -0.365436 ;; 205 was 156
+        0.461591  -0.175950  -0.170507 ;; 206 was 257
+       -0.000362  -0.208202   0.106836 ;; 207 was 285
+       -0.467721   0.350537  -1.922173 ;; 208 was 435
+       -0.605537   0.159047   1.846762 ;; 209 was 376
+        0.000057  -0.337884   0.646224 ;; 210 was 270
+        0.467457  -0.406668  -1.801608 ;; 211 was 88
+        0.000256   0.192655  -0.388361 ;; 212 was 192
+        0.388162  -0.214594   0.705842 ;; 213 was 7
+        1.277374   0.167645   1.411053 ;; 214 was 186
+       -0.001300   0.036299   0.031718 ;; 215 was 225
+        0.343674   0.139499   0.695349 ;; 216 was 125
+       -1.875803   0.301004   1.575090 ;; 217 was 64
+       -0.200946   0.213520  -0.247202 ;; 218 was 187
+        0.244524   0.389194   1.900200 ;; 219 was 157
+        0.000256   0.260419   0.106032 ;; 220 was 190
+        0.362707  -0.061224   0.836839 ;; 221 was 147
+        1.629490  -0.003057   1.520678 ;; 222 was 212
+        0.610641   0.087009   0.452429 ;; 223 was 11
+        1.979596  -0.010573   1.483094 ;; 224 was 24
+        1.630941   0.292533   1.528958 ;; 225 was 211
+        1.653042   0.153591   1.646807 ;; 226 was 208
+        1.693180   0.023744   1.470411 ;; 227 was 42
+       -1.654024   0.153591   1.646808 ;; 228 was 328
+       -0.577174   0.350531  -2.020604 ;; 229 was 459
+        1.693180   0.023744   1.470411 ;; 230 was 42
+       -0.407262  -0.236490   1.329064 ;; 231 was 395
+        1.035394   0.170999   1.427230 ;; 232 was 181
+        0.467727  -0.471927  -2.020555 ;; 233 was 90
+        0.601481   0.116448  -1.698008 ;; 234 was 110
+        0.358562  -0.033027  -1.711147 ;; 235 was 95
+        0.467338  -0.471922  -1.944728 ;; 236 was 100
+       -0.468265  -0.213535   1.559457 ;; 237 was 384
+        1.608743   0.164205   1.407728 ;; 238 was 214
+        1.260480   0.011215   1.723221 ;; 239 was 190
+       -0.482246  -0.191270   0.180014 ;; 240 was 313
+        0.463042   0.307836  -1.523471 ;; 241 was 122
+       -0.263216   0.268217  -0.191923 ;; 242 was 264
+        0.228882   0.101597  -0.060476 ;; 243 was 169
+        1.629490  -0.003057   1.520678 ;; 244 was 212
+       -0.000361   0.275713   0.401982 ;; 245 was 283
+       -1.028364   0.314964   1.452780 ;; 246 was 353
+       -0.000362  -0.415288   0.784634 ;; 247 was 276
+       -0.487324   0.374247   1.856095 ;; 248 was 382
+        0.101325   0.289688  -0.004074 ;; 249 was 180
+       -0.118365  -0.044610  -0.370597 ;; 250 was 195
+       -0.541608   0.148477   1.874858 ;; 251 was 380
+        0.000256   0.181900   0.123411 ;; 252 was 172
+       -0.000518  -0.255698   1.707009 ;; 253 was 281
+        1.969499  -0.070632   1.410242 ;; 254 was 26
+        0.577985  -0.059047  -1.528896 ;; 255 was 121
+       -0.441343  -0.176596   0.431163 ;; 256 was 316
+       -0.529764  -0.069445  -0.888756 ;; 257 was 300
+       -0.602156  -0.192241  -1.788687 ;; 258 was 434
+       -0.355769  -0.391325  -1.825337 ;; 259 was 453
+        0.117655   0.197512  -0.365436 ;; 260 was 156
+       -1.654024   0.153591   1.646808 ;; 261 was 328
+        1.604845   0.153591   1.659491 ;; 262 was 207
+        0.462322  -0.026400   0.486888 ;; 263 was 219
+       -0.000058   0.412285   1.926570 ;; 264 was 280
+        1.860313  -0.001325   1.494331 ;; 265 was 31
+        0.267917  -0.109029  -0.948759 ;; 266 was 239
+       -0.223284   0.041158  -0.064880 ;; 267 was 189
+       -0.462932  -0.026400   0.486888 ;; 268 was 317
+       -0.463718  -0.096821  -1.530020 ;; 269 was 417
+        0.463042  -0.096821  -1.530020 ;; 270 was 119
+        1.979596  -0.010573   1.483094 ;; 271 was 24
+       -0.468014  -0.471922  -1.944728 ;; 272 was 436
+       -1.563161   0.043825   1.442750 ;; 273 was 335
+       -0.595569   0.263935  -1.420672 ;; 274 was 286
+       -0.338218   0.106603  -1.527846 ;; 275 was 419
+       -1.995557  -0.010573   1.483094 ;; 276 was 52
+       -1.605828   0.153591   1.659491 ;; 277 was 329
+        0.394786  -0.081201   0.620119 ;; 278 was 130
+       -0.785073  -0.037278   1.438707 ;; 279 was 367
+       -0.463718  -0.096821  -1.530020 ;; 280 was 417
+        0.223904   0.041158  -0.064880 ;; 281 was 160
+       -0.780483   0.343687   1.428592 ;; 282 was 368
+       -1.271749   0.287979   1.432050 ;; 283 was 352
+        0.000256  -0.044779  -0.393986 ;; 284 was 191
+        0.503475   0.029399   0.788196 ;; 285 was 19
+       -0.000362   0.275406   0.726385 ;; 286 was 269
+       -0.602156  -0.063462  -1.711145 ;; 287 was 444
+        0.183083   0.302754   1.050679 ;; 288 was 136
+       -0.541608   0.148477   1.874858 ;; 289 was 380
+        0.174062   0.345456   2.003495 ;; 290 was 469
+       -1.709141   0.280190   1.470396 ;; 291 was 74
+       -0.263216  -0.279989  -0.191890 ;; 292 was 263
+       -0.000518  -0.423021   1.504032 ;; 293 was 278
+        0.230271  -0.282976   0.355143 ;; 294 was 218
+        1.270766   0.287980   1.432049 ;; 295 was 184
+       -0.322304   0.164645  -1.922162 ;; 296 was 423
+        0.504074   0.081261   0.299468 ;; 297 was 13
+       -0.407262  -0.236490   1.329064 ;; 298 was 395
+        0.417994  -0.149178   0.767731 ;; 299 was 16
+       -0.586032   0.350537  -1.922173 ;; 300 was 452
+       -0.602048  -0.051388   1.761528 ;; 301 was 375
+        0.000256   0.260419   0.106032 ;; 302 was 190
+       -1.876274  -0.001325   1.494331 ;; 303 was 59
+        0.360514  -0.058661  -1.533715 ;; 304 was 120
+       -0.200946   0.237048  -0.065417 ;; 305 was 188
+       -0.602048  -0.051388   1.761528 ;; 306 was 375
+       -1.053727  -0.016153   1.709245 ;; 307 was 359
+        0.222266   0.095336  -0.951103 ;; 308 was 241
+       -0.349410   0.350537  -1.922173 ;; 309 was 450
+       -0.468403  -0.471927  -2.020555 ;; 310 was 446
+        0.297191   0.100931  -1.440695 ;; 311 was 246
+        0.569441   0.178587   1.397292 ;; 312 was 165
+       -1.032460  -0.009337   1.461188 ;; 313 was 354
+        0.354913  -0.245146   0.616940 ;; 314 was 128
+        0.626462   0.053536   0.370319 ;; 315 was 12
+       -0.199056   0.185490  -0.610625 ;; 316 was 304
+       -1.607770   0.260307   1.425071 ;; 317 was 320
+        0.463042  -0.096821  -1.530020 ;; 318 was 119
+        0.577985  -0.059047  -1.528896 ;; 319 was 121
+       -1.057379   0.155096   1.753572 ;; 320 was 360
+       -0.117035   0.197512  -0.365436 ;; 321 was 196
+       -1.630473  -0.003057   1.520678 ;; 322 was 324
+        0.000259   0.126524   0.129055 ;; 323 was 149
+       -0.407262  -0.236490   1.329064 ;; 324 was 395
+        0.435500  -0.212673   0.496983 ;; 325 was 6
+       -1.866177  -0.061385   1.421479 ;; 326 was 57
+       -0.000513  -0.379123   1.029121 ;; 327 was 272
+       -0.244798   0.471927   1.519938 ;; 328 was 385
+       -0.182595  -0.345438   0.648331 ;; 329 was 404
+        0.082408   0.229365  -0.323984 ;; 330 was 165
+       -1.036376   0.170999   1.427230 ;; 331 was 355
+        0.601481  -0.192241  -1.788687 ;; 332 was 102
+       -0.000350   0.122121   1.857253 ;; 333 was 464
+        0.569441   0.178587   1.397292 ;; 334 was 165
+       -0.453694   0.198850   0.412246 ;; 335 was 315
+       -0.268593  -0.109029  -0.948759 ;; 336 was 298
+        0.243816   0.471927   1.519938 ;; 337 was 151
+       -0.297867   0.100931  -1.440695 ;; 338 was 291
+        0.337542   0.106603  -1.527846 ;; 339 was 117
+        0.463042   0.307836  -1.523471 ;; 340 was 122
+       -0.245359  -0.391607   1.524553 ;; 341 was 386
+        0.597296   0.414814   1.602119 ;; 342 was 163
+        0.604555   0.159047   1.846762 ;; 343 was 160
+       -0.182595   0.232387   0.631353 ;; 344 was 402
+        0.205495  -0.404198   1.316146 ;; 345 was 144
+       -1.649057   0.254983   1.628124 ;; 346 was 326
+       -0.568556  -0.445631  -2.020557 ;; 347 was 455
+        0.417994  -0.149178   0.767731 ;; 348 was 16
+        0.364139   0.200670   1.060294 ;; 349 was 139
+       -0.000518  -0.444253   1.296030 ;; 350 was 275
+       -0.468014  -0.471922  -1.944728 ;; 351 was 436
+        0.360442   0.284893  -1.527162 ;; 352 was 123
+        0.360514  -0.058661  -1.533715 ;; 353 was 120
+        0.525651  -0.203775   0.723750 ;; 354 was 4
+       -1.709141   0.280190   1.470396 ;; 355 was 74
+        0.333434  -0.248713  -2.020568 ;; 356 was 105
+        0.467338  -0.471922  -1.944728 ;; 357 was 100
+       -0.780483   0.343687   1.428592 ;; 358 was 368
+       -0.450801   0.084476   1.307467 ;; 359 was 394
+       -0.232934   0.119390   1.993193 ;; 360 was 463
+        0.597258  -0.160695   0.422309 ;; 361 was 9
+       -0.595569   0.263935  -1.420672 ;; 362 was 286
+        0.597258  -0.160695   0.422309 ;; 363 was 9
+       -0.245480  -0.119509   1.760669 ;; 364 was 378
+        0.405049   0.118919   0.751410 ;; 365 was 3
+        1.633830   0.149500   1.532855 ;; 366 was 213
+        1.418770   0.304706   1.727401 ;; 367 was 194
+       -1.275199   0.016908   1.438919 ;; 368 was 351
+       -0.375990  -0.038784  -2.020581 ;; 369 was 442
+       -0.807393  -0.045283   1.775331 ;; 370 was 362
+       -1.409138   0.312565   1.414233 ;; 371 was 337
+        1.693853   0.280197   1.585624 ;; 372 was 47
+       -0.605537   0.159047   1.846762 ;; 373 was 376
+       -0.326795   0.175436   0.805090 ;; 374 was 387
+       -1.561528   0.164206   1.420411 ;; 375 was 334
+       -0.597768  -0.129313   1.586458 ;; 376 was 372
+        0.116925   0.081261   0.278537 ;; 377 was 155
+       -0.598278   0.414814   1.602119 ;; 378 was 373
+        0.222266   0.095336  -0.951103 ;; 379 was 241
+       -1.985460  -0.070632   1.410242 ;; 380 was 54
+       -1.422152   0.155030   1.754565 ;; 381 was 344
+        0.405173   0.371370   1.309405 ;; 382 was 140
+       -0.406155   0.371370   1.309405 ;; 383 was 396
+       -0.000361  -0.299005   0.326020 ;; 384 was 282
+        0.567880  -0.445631  -2.020557 ;; 385 was 81
+       -0.245506   0.389194   1.900201 ;; 386 was 379
+        0.504074   0.081261   0.299468 ;; 387 was 13
+       -0.120671   0.289101  -0.085442 ;; 388 was 182
+        0.388162  -0.214594   0.705842 ;; 389 was 7
+        0.601481  -0.063462  -1.711145 ;; 390 was 92
+       -0.184067  -0.349908   1.053625 ;; 391 was 401
+        1.418770   0.304706   1.727401 ;; 392 was 194
+       -0.570424   0.178587   1.397292 ;; 393 was 371
+       -0.406155   0.371370   1.309405 ;; 394 was 396
+       -2.208251   0.236026   1.510657 ;; 395 was 48
+       -0.406155   0.371370   1.309405 ;; 396 was 396
+       -1.630473  -0.003057   1.520678 ;; 397 was 324
+        0.807022   0.334317   1.793044 ;; 398 was 173
+        0.115666   0.181612   0.117362 ;; 399 was 168
+       -0.595568  -0.062071  -1.420651 ;; 400 was 287
+       -0.468133  -0.406668  -1.801609 ;; 401 was 448
+       -0.081787   0.229365  -0.323984 ;; 402 was 178
+        0.000057   0.254941   0.649506 ;; 403 was 268
+        0.112676   0.260370   0.097782 ;; 404 was 157
+       -0.263216  -0.279989  -0.191890 ;; 405 was 263
+        0.612462   0.164645  -1.922162 ;; 406 was 116
+       -0.372854  -0.445631  -2.020557 ;; 407 was 454
+        0.000259   0.043821  -0.253403 ;; 408 was 145
+        0.463042   0.307836  -1.523471 ;; 409 was 122
+        2.022352   0.049177   1.555193 ;; 410 was 33
+       -0.487324   0.374247   1.856095 ;; 411 was 382
+       -0.000361  -0.299005   0.326020 ;; 412 was 282
+       -0.361190  -0.058661  -1.533715 ;; 413 was 416
+        0.262541   0.268217  -0.191923 ;; 414 was 255
+       -0.576681  -0.445626  -1.944730 ;; 415 was 445
+       -0.359237  -0.033027  -1.711148 ;; 416 was 441
+       -0.364343  -0.445626  -1.944730 ;; 417 was 447
+       -0.388510  -0.170252  -0.892532 ;; 418 was 295
+       -1.985952  -0.070628   1.494373 ;; 419 was 55
+       -0.245359  -0.391607   1.524553 ;; 420 was 386
+       -1.422152   0.155030   1.754565 ;; 421 was 344
+       -0.354670  -0.245146   0.612691 ;; 422 was 408
+        0.467457   0.319871  -1.698020 ;; 423 was 87
+       -0.000362   0.268091   0.168828 ;; 424 was 284
+        0.360442   0.284893  -1.527162 ;; 425 was 123
+        0.497641  -0.091390   0.268673 ;; 426 was 15
+        1.599877   0.254983   1.640807 ;; 427 was 205
+       -0.576681  -0.445626  -1.944730 ;; 428 was 445
+       -0.334110  -0.192241  -1.788687 ;; 429 was 433
+        1.859221   0.300998   1.468956 ;; 430 was 37
+       -0.000363  -0.350985   0.571034 ;; 431 was 271
+       -0.000361  -0.299005   0.326020 ;; 432 was 282
+        0.807022   0.334317   1.793044 ;; 433 was 173
+       -0.354670   0.132092   0.612669 ;; 434 was 410
+        0.596786  -0.129313   1.586458 ;; 435 was 164
+        0.601481  -0.192241  -1.788687 ;; 436 was 102
+       -0.341549  -0.101224  -1.438278 ;; 437 was 289
+        0.594893   0.263935  -1.420671 ;; 438 was 251
+       -0.112055   0.256058   0.087831 ;; 439 was 193
+       -0.116304   0.092808   0.105990 ;; 440 was 151
+       -0.450801   0.084476   1.307467 ;; 441 was 394
+       -0.486058  -0.105692   1.762366 ;; 442 was 381
+        1.610375   0.043824   1.430066 ;; 443 was 215
+       -0.602156  -0.192241  -1.788687 ;; 444 was 434
+        0.201566   0.213520  -0.247202 ;; 445 was 162
+        1.646449   0.039276   1.618564 ;; 446 was 209
+       -0.407262  -0.236490   1.329064 ;; 447 was 395
+        2.185308   0.055579   1.441627 ;; 448 was 23
+        0.000057   0.254941   0.649506 ;; 449 was 268
+       -0.453694   0.198850   0.412246 ;; 450 was 315
+        0.461591   0.164181  -0.170528 ;; 451 was 259
+        0.321628   0.164645  -1.922162 ;; 452 was 113
+        0.000057   0.254941   0.649506 ;; 453 was 268
+       -0.602156  -0.192241  -1.788687 ;; 454 was 434
+        0.223904   0.041158  -0.064880 ;; 455 was 160
+       -0.341549  -0.101224  -1.438278 ;; 456 was 289
+       -0.230944  -0.282976   0.355143 ;; 457 was 318
+        0.230009  -0.304934   0.157833 ;; 458 was 226
+        0.000256   0.288634  -0.079281 ;; 459 was 181
+       -0.199056  -0.197312  -0.610602 ;; 460 was 305
+        0.612462   0.164645  -1.922162 ;; 461 was 116
+        1.606788   0.260307   1.425071 ;; 462 was 216
+        0.118986  -0.044610  -0.370597 ;; 463 was 159
+        0.208833  -0.116297   1.822308 ;; 464 was 468
+        0.467457  -0.038784  -2.020581 ;; 465 was 98
+       -0.000058   0.412285   1.926570 ;; 466 was 280
+        1.693180   0.280190   1.470396 ;; 467 was 46
+       -0.189123  -0.387753   0.813849 ;; 468 was 391
+        0.405049   0.118919   0.751410 ;; 469 was 3
+       -0.450801   0.084476   1.307467 ;; 470 was 394
+        0.337542   0.106603  -1.527846 ;; 471 was 117
+        0.223904  -0.021749  -0.249975 ;; 472 was 163
+        0.466368   0.455754   1.549889 ;; 473 was 153
+        0.467045   0.350537  -1.922173 ;; 474 was 101
+        0.601481   0.164639  -2.020593 ;; 475 was 114
+       -0.349410   0.350537  -1.922173 ;; 476 was 450
+       -0.467721   0.350537  -1.922173 ;; 477 was 435
+       -0.000362   0.268091   0.168828 ;; 478 was 284
+        0.182752  -0.345438   0.648331 ;; 479 was 132
+       -0.372854  -0.445631  -2.020557 ;; 480 was 454
+       -0.200946   0.213520  -0.247202 ;; 481 was 187
+       -0.223284  -0.021749  -0.249975 ;; 482 was 186
+       -0.361190  -0.058661  -1.533715 ;; 483 was 416
+        0.624288  -0.258243  -1.944741 ;; 484 was 109
+       -1.420054   0.360138   1.572181 ;; 485 was 341
+       -0.326875  -0.263845   0.835073 ;; 486 was 388
+       -1.420123  -0.076214   1.558946 ;; 487 was 340
+        0.223904  -0.021749  -0.249975 ;; 488 was 163
+        0.569441   0.178587   1.397292 ;; 489 was 165
+        0.000057   0.254941   0.649506 ;; 490 was 268
+        0.486341   0.374247   1.856095 ;; 491 was 154
+        0.360442   0.284893  -1.527162 ;; 492 was 123
+       -1.599235   0.039276   1.631248 ;; 493 was 330
+        0.191517   0.048393   0.257621 ;; 494 was 154
+       -0.359092   0.350531  -2.020604 ;; 495 was 458
+       -0.468133   0.350531  -2.020604 ;; 496 was 451
+        1.031477  -0.009337   1.461187 ;; 497 was 182
+        0.228882   0.101597  -0.060476 ;; 498 was 169
+       -0.354670   0.132092   0.612669 ;; 499 was 410
+        0.223904   0.041158  -0.064880 ;; 500 was 160
+       -1.028364   0.314964   1.452780 ;; 501 was 353
+        1.052141  -0.079568   1.582348 ;; 502 was 180
+       -1.654024   0.153591   1.646808 ;; 503 was 328
+        0.000259   0.097146  -0.123751 ;; 504 was 146
+        0.405173   0.371370   1.309405 ;; 505 was 140
+       -0.343518   0.139499   0.695349 ;; 506 was 411
+        0.000256   0.192655  -0.388361 ;; 507 was 192
+        0.465305   0.363653  -1.403273 ;; 508 was 244
+        0.127275   0.042875  -0.395374 ;; 509 was 167
+       -0.140158  -0.005912  -0.616702 ;; 510 was 307
+       -0.334110   0.164639  -2.020593 ;; 511 was 424
+       -1.563161   0.043825   1.442750 ;; 512 was 335
+       -1.582276  -0.003056   1.533362 ;; 513 was 333
+       -0.566170   0.270062  -1.522341 ;; 514 was 412
+       -0.230685  -0.304934   0.157833 ;; 515 was 311
+        0.510225  -0.005884  -0.172217 ;; 516 was 258
+        0.406280  -0.236490   1.329064 ;; 517 was 141
+       -0.297867   0.100931  -1.440695 ;; 518 was 291
+        0.127275   0.042875  -0.395374 ;; 519 was 167
+        0.354914   0.132092   0.616918 ;; 520 was 126
+        0.129505  -0.264103  -0.298234 ;; 521 was 254
+        0.354914   0.132092   0.616918 ;; 522 was 126
+       -0.209489  -0.116297   1.822308 ;; 523 was 462
+        0.503475   0.029399   0.788196 ;; 524 was 19
+       -0.465981   0.363653  -1.403274 ;; 525 was 293
+        0.183083  -0.349908   1.053625 ;; 526 was 135
+        0.435500  -0.212673   0.496983 ;; 527 was 6
+       -0.468265  -0.213535   1.559457 ;; 528 was 384
+       -0.602156  -0.248712  -2.020568 ;; 529 was 429
+        0.626462   0.053536   0.370319 ;; 530 was 12
+       -0.365123   0.200670   1.060293 ;; 531 was 397
+        0.585236  -0.391325  -1.825337 ;; 532 was 80
+       -0.116304   0.092808   0.105990 ;; 533 was 151
+       -0.130181  -0.264103  -0.298234 ;; 534 was 265
+       -2.208251   0.055583   1.510668 ;; 535 was 50
+       -0.189123   0.292864   0.829515 ;; 536 was 390
+        0.806410  -0.045283   1.775331 ;; 537 was 174
+       -0.000362   0.268091   0.168828 ;; 538 was 284
+        0.331254  -0.254646  -0.466444 ;; 539 was 229
+        0.223904   0.041158  -0.064880 ;; 540 was 160
+       -1.261489   0.281315   1.735412 ;; 541 was 347
+       -0.602156   0.164639  -2.020593 ;; 542 was 422
+       -0.359092   0.350531  -2.020604 ;; 543 was 458
+        0.588787   0.106603  -1.522433 ;; 544 was 118
+       -1.995186  -0.010577   1.419693 ;; 545 was 53
+        1.274176   0.328333   1.574734 ;; 546 was 188
+       -0.578661  -0.059047  -1.528896 ;; 547 was 415
+       -1.646001   0.241568   1.583740 ;; 548 was 72
+        1.562178   0.043825   1.442750 ;; 549 was 201
+        1.027382   0.314964   1.452780 ;; 550 was 183
+       -0.000361   0.275713   0.401982 ;; 551 was 283
+        1.850707  -0.061380   1.505610 ;; 552 was 28
+       -0.364343  -0.445626  -1.944730 ;; 553 was 447
+        0.567839   0.095340  -0.889104 ;; 554 was 240
+        0.494784  -0.142251   0.764743 ;; 555 was 17
+        0.470496  -0.165061   0.359245 ;; 556 was 8
+        0.333434  -0.192241  -1.788686 ;; 557 was 103
+       -0.585912  -0.391325  -1.825337 ;; 558 was 456
+        2.192290   0.236026   1.510657 ;; 559 was 20
+       -0.570424   0.178587   1.397292 ;; 560 was 371
+       -0.382132  -0.081196   0.698551 ;; 561 was 407
+        0.321628  -0.258243  -1.944741 ;; 562 was 106
+        0.182752   0.232387   0.635602 ;; 563 was 134
+        0.601066  -0.051388   1.761528 ;; 564 was 161
+       -1.559573   0.260308   1.437754 ;; 565 was 336
+        0.000256   0.215840  -0.324756 ;; 566 was 176
+        1.850216  -0.061385   1.421479 ;; 567 was 29
+       -1.630473  -0.003057   1.520678 ;; 568 was 324
+       -0.576681  -0.445626  -1.944730 ;; 569 was 445
+        0.104235  -0.005894  -0.336299 ;; 570 was 253
+        1.859841   0.301004   1.575090 ;; 571 was 36
+        0.129505   0.252320  -0.298266 ;; 572 was 252
+        0.262540  -0.279989  -0.191890 ;; 573 was 256
+        0.494784  -0.142251   0.764743 ;; 574 was 17
+       -0.354670  -0.245146   0.612691 ;; 575 was 408
+       -0.182595   0.232387   0.631353 ;; 576 was 402
+       -0.566170   0.270062  -1.522341 ;; 577 was 412
+        0.198380  -0.197312  -0.610602 ;; 578 was 232
+        0.467457  -0.192240  -1.761309 ;; 579 was 104
+       -0.118365  -0.044610  -0.370597 ;; 580 was 195
+       -0.598278   0.414814   1.602119 ;; 581 was 373
+        0.244524   0.389194   1.900200 ;; 582 was 157
+       -0.388511   0.360931  -0.892565 ;; 583 was 294
+        0.297191   0.100931  -1.440695 ;; 584 was 246
+        0.198380   0.185490  -0.610625 ;; 585 was 233
+        0.594893   0.263935  -1.420671 ;; 586 was 251
+       -1.053123  -0.079568   1.582348 ;; 587 was 356
+        1.419071   0.360138   1.572181 ;; 588 was 195
+        0.479243  -0.160232  -0.434195 ;; 589 was 234
+        1.274216   0.016908   1.438919 ;; 590 was 185
+       -0.001300   0.036299   0.031718 ;; 591 was 225
+        0.118986  -0.044610  -0.370597 ;; 592 was 159
+        0.438261   0.198850   0.412246 ;; 593 was 221
+        0.358416   0.281829  -1.698017 ;; 594 was 79
+        0.467457  -0.091357  -1.683765 ;; 595 was 96
+        1.969990  -0.070627   1.494372 ;; 596 was 27
+        1.262879   0.154356   1.759703 ;; 597 was 191
+        0.355093  -0.391325  -1.825337 ;; 598 was 83
+        0.115666   0.181612   0.117362 ;; 599 was 168
+        0.116925   0.095479   0.125486 ;; 600 was 150
+       -1.583727   0.292534   1.541642 ;; 601 was 332
+        0.585236  -0.391325  -1.825337 ;; 602 was 80
+        1.275003  -0.041794   1.562195 ;; 603 was 187
+       -0.000362   0.275406   0.726385 ;; 604 was 269
+        1.859841   0.055343   1.575105 ;; 605 was 38
+       -0.462281   0.164181  -0.170196 ;; 606 was 260
+        0.601481  -0.248712  -2.020568 ;; 607 was 107
+       -0.268593   0.299701  -0.948784 ;; 608 was 299
+        0.244524   0.389194   1.900200 ;; 609 was 157
+        0.504074   0.081261   0.299468 ;; 610 was 13
+        0.182752  -0.315334   0.588260 ;; 611 was 133
+        0.243816   0.471927   1.519938 ;; 612 was 151
+       -0.486058  -0.105692   1.762366 ;; 613 was 381
+       -0.463718   0.307836  -1.523471 ;; 614 was 414
+        0.601481  -0.063462  -1.711145 ;; 615 was 92
+        0.348734   0.350537  -1.922173 ;; 616 was 86
+       -1.600860   0.254983   1.640808 ;; 617 was 331
+        0.333434   0.164639  -2.020593 ;; 618 was 112
+        0.201566   0.237048  -0.065417 ;; 619 was 161
+       -0.479919   0.148430  -0.434213 ;; 620 was 302
+        0.000259   0.079997   0.278779 ;; 621 was 148
+       -0.223284  -0.021749  -0.249975 ;; 622 was 186
+       -0.555668  -0.043013   1.440089 ;; 623 was 370
+       -0.613138   0.164645  -1.922162 ;; 624 was 420
+        0.612462  -0.038778  -1.922150 ;; 625 was 99
+       -0.566170   0.270062  -1.522341 ;; 626 was 412
+       -1.645480   0.255788   1.494610 ;; 627 was 73
+       -0.000518  -0.255698   1.707009 ;; 628 was 281
+        0.405173   0.371370   1.309405 ;; 629 was 140
+        1.582744   0.292534   1.541641 ;; 630 was 204
+       -0.223284   0.041158  -0.064880 ;; 631 was 189
+       -0.001300   0.036299   0.031718 ;; 632 was 225
+        0.576498   0.281829  -1.698018 ;; 633 was 76
+        1.633830   0.149500   1.532855 ;; 634 was 213
+        0.271958   0.137265   1.916270 ;; 635 was 159
+       -0.168454   0.300472   0.396915 ;; 636 was 319
+       -0.468133  -0.248712  -2.020568 ;; 637 was 428
+       -2.029643   0.273256   1.469441 ;; 638 was 62
+       -0.541608   0.148477   1.874858 ;; 639 was 380
+        0.510225  -0.005884  -0.172217 ;; 640 was 258
+        0.358562  -0.033027  -1.711147 ;; 641 was 95
+        0.112676   0.260370   0.097782 ;; 642 was 157
+        0.467457  -0.406668  -1.801608 ;; 643 was 88
+       -0.222942   0.095336  -0.951103 ;; 644 was 296
+        0.337542   0.106603  -1.527846 ;; 645 was 117
+       -0.595568  -0.062071  -1.420651 ;; 646 was 287
+       -0.116304   0.078733   0.279020 ;; 647 was 153
+        0.358416   0.281829  -1.698017 ;; 648 was 79
+        1.412003  -0.007008   1.422739 ;; 649 was 198
+       -0.140158  -0.005912  -0.616702 ;; 650 was 307
+        0.467727  -0.471927  -2.020555 ;; 651 was 90
+       -2.038314   0.273261   1.555179 ;; 652 was 63
+       -0.228261   0.051551  -0.262312 ;; 653 was 174
+        0.808719   0.400398   1.611766 ;; 654 was 172
+        0.779501   0.343687   1.428592 ;; 655 was 168
+        0.470194   0.180330   0.180744 ;; 656 was 222
+       -0.000058   0.412285   1.926570 ;; 657 was 280
+       -0.334110  -0.192241  -1.788687 ;; 658 was 433
+       -0.118035   0.126534   0.129055 ;; 659 was 194
+       -0.361190  -0.058661  -1.533715 ;; 660 was 416
+        0.583699   0.097028   0.575307 ;; 661 was 1
+       -0.515689  -0.005470   0.179903 ;; 662 was 312
+        0.000256  -0.044779  -0.393986 ;; 663 was 191
+        0.364375  -0.218179   1.071612 ;; 664 was 138
+       -2.201268   0.055579   1.441627 ;; 665 was 51
+        1.558591   0.260308   1.437754 ;; 666 was 200
+        0.118656   0.126515   0.129055 ;; 667 was 158
+       -0.529764  -0.069445  -0.888756 ;; 668 was 300
+        0.340873   0.303086  -1.438303 ;; 669 was 249
+       -0.479919  -0.160232  -0.434195 ;; 670 was 303
+       -1.631924   0.292533   1.528958 ;; 671 was 325
+       -1.278356   0.167645   1.411054 ;; 672 was 350
+       -0.468133  -0.038784  -2.020581 ;; 673 was 438
+        0.382288  -0.081196   0.698551 ;; 674 was 129
+        0.367068  -0.038778  -1.922149 ;; 675 was 97
+        0.404749  -0.006625   1.065828 ;; 676 was 137
+       -0.343518  -0.245141   0.695372 ;; 677 was 409
+       -0.468133  -0.406668  -1.801609 ;; 678 was 448
+        0.601481  -0.248712  -2.020568 ;; 679 was 107
+       -0.463718   0.307836  -1.523471 ;; 680 was 414
+        0.363667  -0.445626  -1.944730 ;; 681 was 89
+        0.358416   0.350531  -2.020604 ;; 682 was 78
+        0.461591  -0.175950  -0.170507 ;; 683 was 257
+       -0.116304   0.078733   0.279020 ;; 684 was 153
+        1.859221   0.055336   1.468970 ;; 685 was 39
+       -0.365360  -0.218179   1.071612 ;; 686 was 398
+       -1.036376   0.170999   1.427230 ;; 687 was 355
+        1.414757   0.170699   1.390042 ;; 688 was 197
+       -0.597768  -0.129313   1.586458 ;; 689 was 372
+        0.360514  -0.058661  -1.533715 ;; 690 was 120
+        0.232278   0.119390   1.993193 ;; 691 was 467
+        1.408155   0.312565   1.414232 ;; 692 was 199
+        1.270766   0.287980   1.432049 ;; 693 was 184
+        0.566822  -0.202104   0.542102 ;; 694 was 5
+        1.419071   0.360138   1.572181 ;; 695 was 195
+        0.182752   0.232387   0.635602 ;; 696 was 134
+        0.466368   0.455754   1.549889 ;; 697 was 153
+        1.052744  -0.016153   1.709245 ;; 698 was 177
+        0.467457   0.350531  -2.020604 ;; 699 was 85
+        1.860313  -0.001325   1.494331 ;; 700 was 31
+        0.104235  -0.005894  -0.336299 ;; 701 was 253
+        0.462322  -0.026400   0.486888 ;; 702 was 219
+        0.467045   0.350537  -1.922173 ;; 703 was 101
+        1.653042   0.153591   1.646807 ;; 704 was 208
+        0.577985  -0.059047  -1.528896 ;; 705 was 121
+       -0.468133   0.319871  -1.698020 ;; 706 was 449
+       -0.785073  -0.037278   1.438707 ;; 707 was 367
+        0.188447   0.292864   0.829515 ;; 708 was 146
+        0.632273   0.100932  -1.421010 ;; 709 was 247
+        0.174062   0.345456   2.003495 ;; 710 was 469
+        0.167590   0.279739   0.154837 ;; 711 was 227
+        0.348734   0.350537  -1.922173 ;; 712 was 86
+        1.608743   0.164205   1.407728 ;; 713 was 214
+        0.000259   0.043821  -0.253403 ;; 714 was 145
+       -1.611358   0.043824   1.430066 ;; 715 was 321
+        0.358416   0.350531  -2.020604 ;; 716 was 78
+       -0.585912  -0.391325  -1.825337 ;; 717 was 456
+       -0.343518   0.139499   0.695349 ;; 718 was 411
+        0.601481  -0.038784  -2.020581 ;; 719 was 93
+       -1.036376   0.170999   1.427230 ;; 720 was 355
+        1.693853   0.023750   1.585639 ;; 721 was 43
+        0.467457  -0.192240  -1.761309 ;; 722 was 104
+        0.529088   0.260124  -0.888776 ;; 723 was 236
+        0.244497  -0.119509   1.760669 ;; 724 was 158
+        1.629520   0.066667   1.494802 ;; 725 was 41
+        0.343674   0.139499   0.695349 ;; 726 was 125
+        0.467282  -0.213535   1.559457 ;; 727 was 152
+       -0.112055   0.256058   0.087831 ;; 728 was 193
+       -0.462281  -0.175950  -0.170175 ;; 729 was 262
+        1.630941   0.292533   1.528958 ;; 730 was 211
+        0.485884   0.119748   0.393878 ;; 731 was 10
+        0.465305   0.363653  -1.403273 ;; 732 was 244
+       -0.468133  -0.091357  -1.683766 ;; 733 was 440
+        0.438261   0.198850   0.412246 ;; 734 was 221
+        0.565494   0.270062  -1.522341 ;; 735 was 124
+       -1.985952  -0.070628   1.494373 ;; 736 was 55
+       -0.789191   0.174568   1.397642 ;; 737 was 366
+        0.355093  -0.391325  -1.825337 ;; 738 was 83
+        0.601481  -0.192241  -1.788687 ;; 739 was 102
+       -1.419753   0.304706   1.727401 ;; 740 was 342
+        0.358562  -0.033027  -1.711147 ;; 741 was 95
+       -0.482246  -0.191270   0.180014 ;; 742 was 313
+        0.116925   0.095479   0.125486 ;; 743 was 150
+        0.479244   0.148430  -0.434213 ;; 744 was 235
+       -0.230685  -0.304934   0.157833 ;; 745 was 311
+       -2.208251   0.055583   1.510668 ;; 746 was 50
+        0.191517   0.048393   0.257621 ;; 747 was 154
+        1.414757   0.170699   1.390042 ;; 748 was 197
+        0.784090  -0.037278   1.438707 ;; 749 was 169
+       -0.000361   0.275713   0.401982 ;; 750 was 283
+        0.182752   0.232387   0.635602 ;; 751 was 134
+       -1.599235   0.039276   1.631248 ;; 752 was 330
+       -0.000513   0.318930   1.029099 ;; 753 was 273
+        0.364375  -0.218179   1.071612 ;; 754 was 138
+        0.232278   0.119390   1.993193 ;; 755 was 467
+        0.354913  -0.245146   0.616940 ;; 756 was 128
+        2.013681   0.273256   1.469441 ;; 757 was 34
+       -0.354670  -0.245146   0.612691 ;; 758 was 408
+        0.485884   0.119748   0.393878 ;; 759 was 10
+       -0.467721   0.350537  -1.922173 ;; 760 was 435
+        1.274216   0.016908   1.438919 ;; 761 was 185
+       -0.462281   0.164181  -0.170196 ;; 762 was 260
+       -0.468403  -0.471927  -2.020555 ;; 763 was 446
+       -0.487324   0.374247   1.856095 ;; 764 was 382
+       -1.419979  -0.013723   1.713391 ;; 765 was 343
+        0.201566   0.213520  -0.247202 ;; 766 was 162
+       -0.529764   0.260124  -0.888776 ;; 767 was 301
+       -0.100705   0.289689  -0.004074 ;; 768 was 179
+        0.367068  -0.038778  -1.922149 ;; 769 was 97
+        0.554686  -0.043013   1.440089 ;; 770 was 166
+       -1.275199   0.016908   1.438919 ;; 771 was 351
+       -1.875182   0.300997   1.468956 ;; 772 was 65
+       -0.174718   0.345456   2.003495 ;; 773 was 461
+       -1.647432   0.039275   1.618564 ;; 774 was 327
+        1.582744   0.292534   1.541641 ;; 775 was 204
+        0.000259   0.079997   0.278779 ;; 776 was 148
+       -2.201268   0.055579   1.441627 ;; 777 was 51
+       -1.709141   0.023744   1.470412 ;; 778 was 70
+        0.515228  -0.005470   0.179549 ;; 779 was 224
+       -1.866669  -0.061380   1.505610 ;; 780 was 56
+       -0.206065   0.437214   1.309867 ;; 781 was 393
+       -1.631924   0.292533   1.528958 ;; 782 was 325
+        1.693853   0.280197   1.585624 ;; 783 was 47
+       -0.140158  -0.005912  -0.616702 ;; 784 was 307
+       -0.589462   0.106603  -1.522433 ;; 785 was 418
+        0.333434   0.164639  -2.020593 ;; 786 was 112
+       -0.334110  -0.192241  -1.788687 ;; 787 was 433
+        0.000256   0.042733  -0.418785 ;; 788 was 171
+       -0.365123   0.200670   1.060293 ;; 789 was 397
+        1.859221   0.055336   1.468970 ;; 790 was 39
+        0.471799  -0.191270   0.180613 ;; 791 was 223
+        0.540626   0.148477   1.874858 ;; 792 was 156
+        0.612462  -0.038778  -1.922150 ;; 793 was 99
+       -0.541608   0.148477   1.874858 ;; 794 was 380
+        0.337542   0.106603  -1.527846 ;; 795 was 117
+       -1.263861   0.154356   1.759704 ;; 796 was 345
+        0.205083   0.437214   1.309867 ;; 797 was 143
+       -0.359092   0.350531  -2.020604 ;; 798 was 458
+        2.022352   0.049177   1.555193 ;; 799 was 33
+       -0.334110   0.164639  -2.020593 ;; 800 was 424
+       -1.634813   0.149500   1.532856 ;; 801 was 323
+        1.560546   0.164206   1.420411 ;; 802 was 202
+        0.117655   0.197512  -0.365436 ;; 803 was 156
+        1.969499  -0.070632   1.410242 ;; 804 was 26
+        0.585236  -0.391325  -1.825337 ;; 805 was 80
+        0.467457   0.319871  -1.698020 ;; 806 was 87
+       -0.000359   0.319470   0.815238 ;; 807 was 277
+        0.470496  -0.165061   0.359245 ;; 808 was 8
+       -0.568556  -0.445631  -2.020557 ;; 809 was 455
+       -1.600860   0.254983   1.640808 ;; 810 was 331
+       -1.985460  -0.070632   1.410242 ;; 811 was 54
+       -0.359092   0.281829  -1.698018 ;; 812 was 457
+        1.418996  -0.013723   1.713390 ;; 813 was 193
+       -1.875803   0.301004   1.575090 ;; 814 was 64
+        0.808719   0.400398   1.611766 ;; 815 was 172
+        0.523763  -0.005901  -0.431426 ;; 816 was 231
+       -0.200946   0.237048  -0.065417 ;; 817 was 188
+       -0.001300   0.036299   0.031718 ;; 818 was 225
+        1.056397   0.155096   1.753572 ;; 819 was 176
+       -0.000362  -0.415288   0.784634 ;; 820 was 276
+       -0.406155   0.371370   1.309405 ;; 821 was 396
+       -1.561528   0.164206   1.420411 ;; 822 was 334
+        1.053094   0.306986   1.724259 ;; 823 was 178
+        0.463042  -0.096821  -1.530020 ;; 824 was 119
+        0.808644  -0.119779   1.595937 ;; 825 was 171
+       -0.363384  -0.061224   0.836839 ;; 826 was 389
+       -0.577174   0.281829  -1.698018 ;; 827 was 460
+        0.601481  -0.248712  -2.020568 ;; 828 was 107
+        1.421169   0.155030   1.754564 ;; 829 was 192
+       -0.577174   0.350531  -2.020604 ;; 830 was 459
+        0.116925   0.081261   0.278537 ;; 831 was 155
+        0.632273   0.100932  -1.421010 ;; 832 was 247
+       -0.568556  -0.445631  -2.020557 ;; 833 was 455
+        0.326198  -0.263845   0.835073 ;; 834 was 148
+       -1.634813   0.149500   1.532856 ;; 835 was 323
+       -0.468133  -0.091357  -1.683766 ;; 836 was 440
+        1.850707  -0.061380   1.505610 ;; 837 was 28
+       -0.789191   0.174568   1.397642 ;; 838 was 366
+       -0.168454   0.300472   0.396915 ;; 839 was 319
+       -0.000362  -0.208202   0.106836 ;; 840 was 285
+       -1.645481   0.066667   1.494801 ;; 841 was 69
+        1.052226   0.363239   1.593979 ;; 842 was 179
+       -0.808004   0.334317   1.793044 ;; 843 was 363
+        0.375314  -0.038784  -2.020581 ;; 844 was 94
+       -0.191805  -0.327346   0.579809 ;; 845 was 403
+        0.567880  -0.445631  -2.020557 ;; 846 was 81
+        0.497641  -0.091390   0.268673 ;; 847 was 15
+        0.000256   0.042733  -0.418785 ;; 848 was 171
+        1.260506   0.281315   1.735411 ;; 849 was 189
+       -0.361117   0.284893  -1.527162 ;; 850 was 413
+        0.585356   0.350537  -1.922173 ;; 851 was 84
+       -0.184067  -0.349908   1.053625 ;; 852 was 401
+       -1.278356   0.167645   1.411054 ;; 853 was 350
+       -0.331930   0.242841  -0.466474 ;; 854 was 309
+        0.504074   0.081261   0.299468 ;; 855 was 13
+       -0.334110  -0.248712  -2.020568 ;; 856 was 431
+        1.277374   0.167645   1.411053 ;; 857 was 186
+        1.035394   0.170999   1.427230 ;; 858 was 181
+        0.467457   0.319871  -1.698020 ;; 859 was 87
+        0.195983   0.239794   0.714033 ;; 860 was 131
+       -0.375990  -0.038784  -2.020581 ;; 861 was 442
+        0.244497  -0.119509   1.760669 ;; 862 was 158
+        1.630941   0.292533   1.528958 ;; 863 was 211
+        1.260480   0.011215   1.723221 ;; 864 was 190
+        0.485884   0.119748   0.393878 ;; 865 was 10
+        1.629519   0.255788   1.494610 ;; 866 was 45
+        0.467045   0.350537  -1.922173 ;; 867 was 101
+       -0.343518  -0.245141   0.695372 ;; 868 was 409
+        0.497641  -0.091390   0.268673 ;; 869 was 15
+        0.394786  -0.081201   0.620119 ;; 870 was 130
+       -0.104911  -0.005894  -0.336299 ;; 871 was 266
+        0.201566   0.213520  -0.247202 ;; 872 was 162
+       -0.355769  -0.391325  -1.825337 ;; 873 was 453
+       -0.515689  -0.005470   0.179903 ;; 874 was 312
+        2.013681   0.049172   1.469454 ;; 875 was 32
+       -0.130181  -0.264103  -0.298234 ;; 876 was 265
+       -0.189123   0.292864   0.829515 ;; 877 was 390
+        0.406280  -0.236490   1.329064 ;; 878 was 141
+        1.859943  -0.001329   1.430930 ;; 879 was 30
+        0.417425   0.131268   0.535163 ;; 880 was 2
+        0.363667  -0.445626  -1.944730 ;; 881 was 89
+       -0.115045   0.179435   0.114550 ;; 882 was 173
+        1.414757   0.170699   1.390042 ;; 883 was 197
+       -1.631924   0.292533   1.528958 ;; 884 was 325
+       -0.000361  -0.299005   0.326020 ;; 885 was 282
+        0.540626   0.148477   1.874858 ;; 886 was 156
+        0.321628   0.164645  -1.922162 ;; 887 was 113
+       -0.297867   0.100931  -1.440695 ;; 888 was 291
+        0.576498   0.350531  -2.020604 ;; 889 was 77
+        0.223904  -0.021749  -0.249975 ;; 890 was 163
+        0.465305  -0.161787  -1.403241 ;; 891 was 245
+       -0.118365  -0.044610  -0.370597 ;; 892 was 195
+        0.387835   0.360931  -0.892565 ;; 893 was 243
+        0.355093  -0.391325  -1.825337 ;; 894 was 83
+       -0.465981   0.363653  -1.403274 ;; 895 was 293
+        0.461591   0.164181  -0.170528 ;; 896 was 259
+       -1.875803   0.055343   1.575105 ;; 897 was 66
+        0.000259   0.097146  -0.123751 ;; 898 was 146
+       -1.275986  -0.041794   1.562195 ;; 899 was 349
+        0.449818   0.084476   1.307467 ;; 900 was 142
+       -0.190897   0.048393   0.257622 ;; 901 was 152
+        0.326118   0.175436   0.805090 ;; 902 was 149
+       -0.468403  -0.471927  -2.020555 ;; 903 was 446
+       -1.559573   0.260308   1.437754 ;; 904 was 336
+        0.000256  -0.044779  -0.393986 ;; 905 was 191
+        0.244524   0.389194   1.900200 ;; 906 was 157
+       -0.463718   0.307836  -1.523471 ;; 907 was 414
+       -0.602156  -0.063462  -1.711145 ;; 908 was 444
+        1.056397   0.155096   1.753572 ;; 909 was 176
+       -0.624964  -0.258243  -1.944740 ;; 910 was 427
+       -0.228261   0.101597  -0.060476 ;; 911 was 170
+        0.808644  -0.119779   1.595937 ;; 912 was 171
+       -0.001300   0.036299   0.031718 ;; 913 was 225
+       -1.647432   0.039275   1.618564 ;; 914 was 327
+       -0.116304   0.078733   0.279020 ;; 915 was 153
+       -0.200946   0.213520  -0.247202 ;; 916 was 187
+       -0.602156  -0.038784  -2.020581 ;; 917 was 443
+        0.596786  -0.129313   1.586458 ;; 918 was 164
+       -0.602156  -0.038784  -2.020581 ;; 919 was 443
+       -0.486058  -0.105692   1.762366 ;; 920 was 381
+        0.201566   0.237048  -0.065417 ;; 921 was 161
+       -0.359092   0.281829  -1.698018 ;; 922 was 457
+        0.486341   0.374247   1.856095 ;; 923 was 154
+        0.198380  -0.197312  -0.610602 ;; 924 was 232
+        0.228882   0.051551  -0.262312 ;; 925 was 166
+       -0.524439  -0.005901  -0.431426 ;; 926 was 306
+        1.969990  -0.070627   1.494372 ;; 927 was 27
+       -0.000513   0.318930   1.029099 ;; 928 was 273
+       -0.363384  -0.061224   0.836839 ;; 929 was 389
+       -0.245506   0.389194   1.900201 ;; 930 was 379
+       -0.577174   0.350531  -2.020604 ;; 931 was 459
+        0.000256   0.215840  -0.324756 ;; 932 was 176
+        0.372179  -0.445631  -2.020557 ;; 933 was 82
+        0.360442   0.284893  -1.527162 ;; 934 was 123
+       -1.419753   0.304706   1.727401 ;; 935 was 342
+       -0.118035   0.126534   0.129055 ;; 936 was 194
+       -0.487324   0.374247   1.856095 ;; 937 was 382
+        0.620867  -0.089353   0.343537 ;; 938 was 14
+       -0.365360  -0.218179   1.071612 ;; 939 was 398
+       -0.375990  -0.038784  -2.020581 ;; 940 was 442
+       -0.406155   0.371370   1.309405 ;; 941 was 396
+        0.467282  -0.213535   1.559457 ;; 942 was 152
+       -0.000350  -0.236574   1.767597 ;; 943 was 465
+       -1.875904  -0.001329   1.430930 ;; 944 was 58
+        0.000256   0.181900   0.123411 ;; 945 was 172
+       -0.244798   0.471927   1.519938 ;; 946 was 385
+        0.354914   0.132092   0.616918 ;; 947 was 126
+        0.244377  -0.391607   1.524553 ;; 948 was 150
+       -0.206477  -0.404198   1.316146 ;; 949 was 392
+        0.466368   0.455754   1.549889 ;; 950 was 153
+        0.375314  -0.038784  -2.020581 ;; 951 was 94
+        0.354913  -0.245146   0.616940 ;; 952 was 128
+        1.053094   0.306986   1.724259 ;; 953 was 178
+        0.788209   0.174568   1.397642 ;; 954 was 170
+       -0.126654   0.042875  -0.395374 ;; 955 was 175
+        0.470496  -0.165061   0.359245 ;; 956 was 8
+        2.192291   0.055583   1.510668 ;; 957 was 22
+       -1.649057   0.254983   1.628124 ;; 958 was 326
+        0.467727  -0.471927  -2.020555 ;; 959 was 90
+       -1.654024   0.153591   1.646808 ;; 960 was 328
+        2.185308   0.236022   1.441617 ;; 961 was 21
+       -0.632949   0.100932  -1.421010 ;; 962 was 290
+        0.529088  -0.069445  -0.888756 ;; 963 was 237
+        0.779501   0.343687   1.428592 ;; 964 was 168
+       -0.268593   0.299701  -0.948784 ;; 965 was 299
+        2.185308   0.055579   1.441627 ;; 966 was 23
+       -0.555668  -0.043013   1.440089 ;; 967 was 370
+        0.104235  -0.005894  -0.336299 ;; 968 was 253
+        0.362707  -0.061224   0.836839 ;; 969 was 147
+       -0.450801   0.084476   1.307467 ;; 970 was 394
+       -1.275159   0.328333   1.574734 ;; 971 was 348
+        0.375314  -0.038784  -2.020581 ;; 972 was 94
+       -0.375990  -0.038784  -2.020581 ;; 973 was 442
+       -0.482247   0.180330   0.179992 ;; 974 was 314
+       -0.081787   0.229365  -0.323984 ;; 975 was 178
+       -0.245506   0.389194   1.900201 ;; 976 was 379
+        1.630041   0.081443   1.583870 ;; 977 was 40
+       -0.602448   0.345692   1.820646 ;; 978 was 374
+       -0.359237  -0.033027  -1.711148 ;; 979 was 441
+       -0.578661  -0.059047  -1.528896 ;; 980 was 415
+        0.326118   0.175436   0.805090 ;; 981 was 149
+       -1.261462   0.011215   1.723222 ;; 982 was 346
+        0.601481   0.116448  -1.698008 ;; 983 was 110
+        0.449818   0.084476   1.307467 ;; 984 was 142
+       -0.199056   0.185490  -0.610625 ;; 985 was 304
+        0.576498   0.350531  -2.020604 ;; 986 was 77
+        0.116925   0.081261   0.278537 ;; 987 was 155
+        0.465305  -0.161787  -1.403241 ;; 988 was 245
+       -2.201269   0.236022   1.441616 ;; 989 was 49
+       -0.000362   0.268091   0.168828 ;; 990 was 284
+        0.183083   0.302754   1.050679 ;; 991 was 136
+        1.653042   0.153591   1.646807 ;; 992 was 208
+       -0.200946   0.237048  -0.065417 ;; 993 was 188
+       -1.053123  -0.079568   1.582348 ;; 994 was 356
+        0.467457   0.350531  -2.020604 ;; 995 was 85
+       -0.117035   0.197512  -0.365436 ;; 996 was 196
+       -0.602156  -0.248712  -2.020568 ;; 997 was 429
+        0.326198  -0.263845   0.835073 ;; 998 was 148
+       -0.479919  -0.160232  -0.434195 ;; 999 was 303
+       -1.582276  -0.003056   1.533362 ;; 1000 was 333
+       -1.605828   0.153591   1.659491 ;; 1001 was 329
+       -1.611358   0.043824   1.430066 ;; 1002 was 321
+        0.182752  -0.315334   0.588260 ;; 1003 was 133
+        0.467457   0.319871  -1.698020 ;; 1004 was 87
+       -0.364343  -0.445626  -1.944730 ;; 1005 was 447
+       -0.334110   0.116448  -1.698008 ;; 1006 was 425
+       -0.000590   0.374975   2.020604 ;; 1007 was 466
+       -0.245506   0.389194   1.900201 ;; 1008 was 379
+        0.485076  -0.105692   1.762366 ;; 1009 was 155
+       -0.209489  -0.116297   1.822308 ;; 1010 was 462
+        0.267917   0.299701  -0.948784 ;; 1011 was 238
+       -0.566170   0.270062  -1.522341 ;; 1012 was 412
+        0.167590   0.279739   0.154837 ;; 1013 was 227
+        0.576005  -0.445626  -1.944730 ;; 1014 was 91
+       -0.361190  -0.058661  -1.533715 ;; 1015 was 416
+        0.358416   0.350531  -2.020604 ;; 1016 was 78
+        0.118656   0.126515   0.129055 ;; 1017 was 158
+       -0.807393  -0.045283   1.775331 ;; 1018 was 362
+        0.466368   0.455754   1.549889 ;; 1019 was 153
+        0.585236  -0.391325  -1.825337 ;; 1020 was 80
+       -0.000513  -0.379123   1.029121 ;; 1021 was 272
+       -0.624964  -0.258243  -1.944740 ;; 1022 was 427
+        1.630040   0.241568   1.583740 ;; 1023 was 44
+        0.467457  -0.091357  -1.683765 ;; 1024 was 96
+        0.000057   0.254941   0.649506 ;; 1025 was 268
+        0.388162  -0.214594   0.705842 ;; 1026 was 7
+       -0.468265  -0.213535   1.559457 ;; 1027 was 384
+       -0.334110  -0.248712  -2.020568 ;; 1028 was 431
+       -0.613138  -0.038778  -1.922150 ;; 1029 was 437
+       -1.032460  -0.009337   1.461188 ;; 1030 was 354
+       -0.465981  -0.161787  -1.403241 ;; 1031 was 292
+       -0.568515   0.095339  -0.889104 ;; 1032 was 297
+        0.340873  -0.101224  -1.438278 ;; 1033 was 248
+       -0.463718   0.307836  -1.523471 ;; 1034 was 414
+       -0.223284   0.041158  -0.064880 ;; 1035 was 189
+       -0.361117   0.284893  -1.527162 ;; 1036 was 413
+       -1.875182   0.300997   1.468956 ;; 1037 was 65
+        0.788209   0.174568   1.397642 ;; 1038 was 170
+        0.388162  -0.214594   0.705842 ;; 1039 was 7
+       -0.168266   0.279739   0.154837 ;; 1040 was 310
+        0.372179  -0.445631  -2.020557 ;; 1041 was 82
+        0.000259   0.079997   0.278779 ;; 1042 was 148
+        0.333434   0.116448  -1.698008 ;; 1043 was 111
+       -0.602156  -0.063462  -1.711145 ;; 1044 was 444
+       -0.632949   0.100932  -1.421010 ;; 1045 was 290
+       -0.602156   0.164639  -2.020593 ;; 1046 was 422
+       -0.322304  -0.258244  -1.944741 ;; 1047 was 430
+        1.606788   0.260307   1.425071 ;; 1048 was 216
+        0.000256   0.224929  -0.249939 ;; 1049 was 184
+       -0.341549   0.303086  -1.438303 ;; 1050 was 288
+        0.467457  -0.038784  -2.020581 ;; 1051 was 98
+       -0.000350  -0.236574   1.767597 ;; 1052 was 465
+        0.116925   0.081261   0.278537 ;; 1053 was 155
+        1.052226   0.363239   1.593979 ;; 1054 was 179
+        0.567839   0.095340  -0.889104 ;; 1055 was 240
+       -0.355769  -0.391325  -1.825337 ;; 1056 was 453
+        1.052744  -0.016153   1.709245 ;; 1057 was 177
+       -0.326795   0.175436   0.805090 ;; 1058 was 387
+       -0.570424   0.178587   1.397292 ;; 1059 was 371
+        0.449818   0.084476   1.307467 ;; 1060 was 142
+        0.333434  -0.192241  -1.788686 ;; 1061 was 103
+        0.529088   0.260124  -0.888776 ;; 1062 was 236
+        1.648074   0.254982   1.628124 ;; 1063 was 210
+       -0.130181   0.252320  -0.298265 ;; 1064 was 267
+        0.331255   0.242840  -0.466474 ;; 1065 was 228
+       -0.441343  -0.176596   0.431163 ;; 1066 was 316
+       -0.365123   0.200670   1.060293 ;; 1067 was 397
+        0.333434  -0.192241  -1.788686 ;; 1068 was 103
+       -1.036376   0.170999   1.427230 ;; 1069 was 355
+       -0.812211   0.155888   1.828188 ;; 1070 was 361
+       -0.322304   0.164645  -1.922162 ;; 1071 was 423
+        0.188447  -0.387753   0.813849 ;; 1072 was 145
+        0.567880  -0.445631  -2.020557 ;; 1073 was 81
+        0.000256   0.042733  -0.418785 ;; 1074 was 171
+        0.222266   0.095336  -0.951103 ;; 1075 was 241
+       -2.029643   0.049172   1.469454 ;; 1076 was 60
+       -0.510914  -0.005884  -0.171885 ;; 1077 was 261
+        0.588787   0.106603  -1.522433 ;; 1078 was 118
+        1.560546   0.164206   1.420411 ;; 1079 was 202
+       -2.029643   0.049172   1.469454 ;; 1080 was 60
+        1.630941   0.292533   1.528958 ;; 1081 was 211
+        0.601481   0.164639  -2.020593 ;; 1082 was 114
+        0.427987   0.048185   0.794697 ;; 1083 was 18
+        0.167781   0.300472   0.396915 ;; 1084 was 217
+       -1.866669  -0.061380   1.505610 ;; 1085 was 56
+       -0.191805  -0.327346   0.579809 ;; 1086 was 403
+        0.117134   0.240026  -0.252685 ;; 1087 was 164
+        0.588787   0.106603  -1.522433 ;; 1088 was 118
+        0.588787   0.106603  -1.522433 ;; 1089 was 118
+       -0.230944  -0.282976   0.355143 ;; 1090 was 318
+        0.262541   0.268217  -0.191923 ;; 1091 was 255
+       -1.609725   0.164205   1.407728 ;; 1092 was 322
+       -0.602156  -0.248712  -2.020568 ;; 1093 was 429
+        0.230271  -0.282976   0.355143 ;; 1094 was 218
+        0.297191   0.100931  -1.440695 ;; 1095 was 246
+       -0.372854  -0.445631  -2.020557 ;; 1096 was 454
+        1.418996  -0.013723   1.713390 ;; 1097 was 193
+       -0.168266   0.279739   0.154837 ;; 1098 was 310
+        0.463042  -0.096821  -1.530020 ;; 1099 was 119
+        0.182752  -0.345438   0.648331 ;; 1100 was 132
+       -0.338218   0.106603  -1.527846 ;; 1101 was 419
+        1.558591   0.260308   1.437754 ;; 1102 was 200
+       -1.420054   0.360138   1.572181 ;; 1103 was 341
+        0.440733  -0.176596   0.431163 ;; 1104 was 220
+        0.331254  -0.254646  -0.466444 ;; 1105 was 229
+       -0.468133   0.164639  -2.020593 ;; 1106 was 421
+        0.620867  -0.089353   0.343537 ;; 1107 was 14
+        0.244377  -0.391607   1.524553 ;; 1108 was 150
+       -1.415740   0.170699   1.390042 ;; 1109 was 339
+        1.648074   0.254982   1.628124 ;; 1110 was 210
+       -0.100705   0.289689  -0.004074 ;; 1111 was 179
+       -0.367744  -0.038778  -1.922150 ;; 1112 was 439
+        0.601481   0.164639  -2.020593 ;; 1113 was 114
+        0.101325   0.289688  -0.004074 ;; 1114 was 180
+        1.606788   0.260307   1.425071 ;; 1115 was 216
+        0.624288  -0.258243  -1.944741 ;; 1116 was 109
+        0.000259   0.126524   0.129055 ;; 1117 was 149
+        1.979225  -0.010577   1.419693 ;; 1118 was 25
+        0.784090  -0.037278   1.438707 ;; 1119 was 169
+        0.358562  -0.033027  -1.711147 ;; 1120 was 95
+       -1.607770   0.260307   1.425071 ;; 1121 was 320
+        0.576005  -0.445626  -1.944730 ;; 1122 was 91
+       -0.000518   0.418458   1.295720 ;; 1123 was 274
+       -0.602156  -0.038784  -2.020581 ;; 1124 was 443
+       -1.709814   0.280197   1.585624 ;; 1125 was 75
+        1.598252   0.039276   1.631247 ;; 1126 was 206
+        1.562178   0.043825   1.442750 ;; 1127 was 201
+        0.000256   0.224929  -0.249939 ;; 1128 was 184
+       -1.412985  -0.007008   1.422739 ;; 1129 was 338
+       -0.245480  -0.119509   1.760669 ;; 1130 was 378
+        1.052141  -0.079568   1.582348 ;; 1131 was 180
+       -0.613138   0.164645  -1.922162 ;; 1132 was 420
+       -0.468265  -0.213535   1.559457 ;; 1133 was 384
+        0.129505   0.252320  -0.298266 ;; 1134 was 252
+        0.333434  -0.248713  -2.020568 ;; 1135 was 105
+        0.340873  -0.101224  -1.438278 ;; 1136 was 248
+        0.467457   0.164639  -2.020593 ;; 1137 was 115
+       -0.482247   0.180330   0.179992 ;; 1138 was 314
+       -0.529764   0.260124  -0.888776 ;; 1139 was 301
+        1.629519   0.255788   1.494610 ;; 1140 was 45
+       -0.222942   0.095336  -0.951103 ;; 1141 was 296
+        0.497641  -0.091390   0.268673 ;; 1142 was 15
+       -1.875182   0.055336   1.468970 ;; 1143 was 67
+       -0.568515   0.095339  -0.889104 ;; 1144 was 297
+        0.340873   0.303086  -1.438303 ;; 1145 was 249
+        0.601481  -0.038784  -2.020581 ;; 1146 was 93
+        0.523763  -0.005901  -0.431426 ;; 1147 was 231
+        0.139482  -0.005912  -0.616702 ;; 1148 was 230
+       -0.367744  -0.038778  -1.922150 ;; 1149 was 439
+       -1.278356   0.167645   1.411054 ;; 1150 was 350
+       -0.467351   0.455754   1.549889 ;; 1151 was 383
+        0.467457   0.350531  -2.020604 ;; 1152 was 85
+       -0.000518  -0.423021   1.504032 ;; 1153 was 278
+        0.363667  -0.445626  -1.944730 ;; 1154 was 89
+        0.364139   0.200670   1.060294 ;; 1155 was 139
+        0.201566   0.237048  -0.065417 ;; 1156 was 161
+       -0.118035   0.126534   0.129055 ;; 1157 was 194
+       -1.054076   0.306986   1.724259 ;; 1158 was 358
+        0.139482  -0.005912  -0.616702 ;; 1159 was 230
+       -1.561528   0.164206   1.420411 ;; 1160 was 334
+        0.404749  -0.006625   1.065828 ;; 1161 was 137
+       -0.000590   0.374975   2.020604 ;; 1162 was 466
+       -1.278356   0.167645   1.411054 ;; 1163 was 350
+        0.449818   0.084476   1.307467 ;; 1164 was 142
+        0.417425   0.131268   0.535163 ;; 1165 was 2
+       -0.331930  -0.254646  -0.466443 ;; 1166 was 308
+       -1.709141   0.023744   1.470412 ;; 1167 was 70
+       -0.191805  -0.327346   0.579809 ;; 1168 was 403
+       -0.000518   0.418458   1.295720 ;; 1169 was 274
+       -0.586032   0.350537  -1.922173 ;; 1170 was 452
+        0.000256   0.042733  -0.418785 ;; 1171 was 171
+        0.354913  -0.245146   0.616940 ;; 1172 was 128
+        0.188447  -0.387753   0.813849 ;; 1173 was 145
+        1.599877   0.254983   1.640807 ;; 1174 was 205
+       -0.577174   0.281829  -1.698018 ;; 1175 was 460
+        1.581293  -0.003056   1.533361 ;; 1176 was 203
+        1.277374   0.167645   1.411053 ;; 1177 was 186
+       -0.000362  -0.208202   0.106836 ;; 1178 was 285
+        0.486341   0.374247   1.856095 ;; 1179 was 154
+        0.082408   0.229365  -0.323984 ;; 1180 was 165
+        0.467457   0.350531  -2.020604 ;; 1181 was 85
+        0.540626   0.148477   1.874858 ;; 1182 was 156
+        0.205495  -0.404198   1.316146 ;; 1183 was 144
+       -0.462281  -0.175950  -0.170175 ;; 1184 was 262
+       -0.578661  -0.059047  -1.528896 ;; 1185 was 415
+        1.859943  -0.001329   1.430930 ;; 1186 was 30
+        0.167781   0.300472   0.396915 ;; 1187 was 217
+        0.000256   0.288634  -0.079281 ;; 1188 was 181
+       -0.223284   0.041158  -0.064880 ;; 1189 was 189
+       -0.789191   0.174568   1.397642 ;; 1190 was 366
+        0.467045   0.350537  -1.922173 ;; 1191 was 101
+        0.463042   0.307836  -1.523471 ;; 1192 was 122
+        0.435500  -0.212673   0.496983 ;; 1193 was 6
+       -1.415740   0.170699   1.390042 ;; 1194 was 339
+        0.205083   0.437214   1.309867 ;; 1195 was 143
+        0.485076  -0.105692   1.762366 ;; 1196 was 155
+       -0.116514   0.240027  -0.252685 ;; 1197 was 185
+        0.788209   0.174568   1.397642 ;; 1198 was 170
+       -0.104911  -0.005894  -0.336299 ;; 1199 was 266
+        0.343674   0.139499   0.695349 ;; 1200 was 125
+        1.277374   0.167645   1.411053 ;; 1201 was 186
+        0.405173   0.371370   1.309405 ;; 1202 was 140
+       -1.561528   0.164206   1.420411 ;; 1203 was 334
+       -0.789191   0.174568   1.397642 ;; 1204 was 366
+        0.000057  -0.337884   0.646224 ;; 1205 was 270
+        0.405049   0.118919   0.751410 ;; 1206 was 3
+        0.449818   0.084476   1.307467 ;; 1207 was 142
+        0.566822  -0.202104   0.542102 ;; 1208 was 5
+       -0.326795   0.175436   0.805090 ;; 1209 was 387
+        0.201566   0.213520  -0.247202 ;; 1210 was 162
+       -1.275159   0.328333   1.574734 ;; 1211 was 348
+        0.372179  -0.445631  -2.020557 ;; 1212 was 82
+       -0.361117   0.284893  -1.527162 ;; 1213 was 413
+        0.388162  -0.214594   0.705842 ;; 1214 was 7
+       -1.271749   0.287979   1.432050 ;; 1215 was 352
+        0.567880  -0.445631  -2.020557 ;; 1216 was 81
+       -0.510914  -0.005884  -0.171885 ;; 1217 was 261
+       -0.338218   0.106603  -1.527846 ;; 1218 was 419
+       -0.394543  -0.081201   0.615870 ;; 1219 was 406
+        0.343675  -0.245141   0.695372 ;; 1220 was 127
+        0.604555   0.159047   1.846762 ;; 1221 was 160
+       -2.029643   0.273256   1.469441 ;; 1222 was 62
+        0.554686  -0.043013   1.440089 ;; 1223 was 166
+        0.435500  -0.212673   0.496983 ;; 1224 was 6
+        0.601466   0.345692   1.820646 ;; 1225 was 162
+       -0.524439  -0.005901  -0.431426 ;; 1226 was 306
+       -0.536837   0.355492   1.429775 ;; 1227 was 369
+       -0.343518   0.139499   0.695349 ;; 1228 was 411
+        1.648074   0.254982   1.628124 ;; 1229 was 210
+        0.525651  -0.203775   0.723750 ;; 1230 was 4
+        0.262540  -0.279989  -0.191890 ;; 1231 was 256
+        0.230009  -0.304934   0.157833 ;; 1232 was 226
+       -0.191805  -0.327346   0.579809 ;; 1233 was 403
+       -0.467351   0.455754   1.549889 ;; 1234 was 383
+       -1.995186  -0.010577   1.419693 ;; 1235 was 53
+        0.000259   0.079997   0.278779 ;; 1236 was 148
+        0.485884   0.119748   0.393878 ;; 1237 was 10
+       -1.709814   0.023750   1.585639 ;; 1238 was 71
+        0.479244   0.148430  -0.434213 ;; 1239 was 235
+       -1.995557  -0.010573   1.483094 ;; 1240 was 52
+        0.806410  -0.045283   1.775331 ;; 1241 was 174
+        0.183083  -0.349908   1.053625 ;; 1242 was 135
+        0.576498   0.350531  -2.020604 ;; 1243 was 77
+       -0.809626  -0.119779   1.595938 ;; 1244 was 365
+        0.597296   0.414814   1.602119 ;; 1245 was 163
+       -0.222942   0.095336  -0.951103 ;; 1246 was 296
+        0.486341   0.374247   1.856095 ;; 1247 was 154
+       -0.467351   0.455754   1.549889 ;; 1248 was 383
+       -0.228261   0.051551  -0.262312 ;; 1249 was 174
+        0.222266   0.095336  -0.951103 ;; 1250 was 241
+        0.610641   0.087009   0.452429 ;; 1251 was 11
+        1.859841   0.301004   1.575090 ;; 1252 was 36
+       -0.388511   0.360931  -0.892565 ;; 1253 was 294
+        0.394786  -0.081201   0.620119 ;; 1254 was 130
+       -0.465981  -0.161787  -1.403241 ;; 1255 was 292
+        0.223904   0.041158  -0.064880 ;; 1256 was 160
+       -0.000058   0.412285   1.926570 ;; 1257 was 280
+       -1.263861   0.154356   1.759704 ;; 1258 was 345
+       -2.201269   0.236022   1.441616 ;; 1259 was 49
+       -0.338218   0.106603  -1.527846 ;; 1260 was 419
+       -0.343518   0.139499   0.695349 ;; 1261 was 411
+        0.565494   0.270062  -1.522341 ;; 1262 was 124
+       -0.182595   0.232387   0.631353 ;; 1263 was 402
+       -0.334110   0.164639  -2.020593 ;; 1264 was 424
+        1.629490  -0.003057   1.520678 ;; 1265 was 212
+       -0.334110   0.116448  -1.698008 ;; 1266 was 425
+        0.000256   0.192655  -0.388361 ;; 1267 was 192
+       -0.372854  -0.445631  -2.020557 ;; 1268 was 454
+        1.027382   0.314964   1.452780 ;; 1269 was 183
+        0.406280  -0.236490   1.329064 ;; 1270 was 141
+        0.337542   0.106603  -1.527846 ;; 1271 was 117
+       -0.468133  -0.038784  -2.020581 ;; 1272 was 438
+        0.569441   0.178587   1.397292 ;; 1273 was 165
+       -1.419979  -0.013723   1.713391 ;; 1274 was 343
+       -1.261489   0.281315   1.735412 ;; 1275 was 347
+       -0.462932  -0.026400   0.486888 ;; 1276 was 317
+        2.013681   0.273256   1.469441 ;; 1277 was 34
+       -1.609725   0.164205   1.407728 ;; 1278 was 322
+       -0.486058  -0.105692   1.762366 ;; 1279 was 381
+       -2.038314   0.273261   1.555179 ;; 1280 was 63
+       -0.809701   0.400398   1.611766 ;; 1281 was 364
+        0.117655   0.197512  -0.365436 ;; 1282 was 156
+        0.354914   0.132092   0.616918 ;; 1283 was 126
+       -0.467721   0.350537  -1.922173 ;; 1284 was 435
+       -1.054076   0.306986   1.724259 ;; 1285 was 358
+       -0.118035   0.126534   0.129055 ;; 1286 was 194
+        0.000256   0.192655  -0.388361 ;; 1287 was 192
+       -0.589462   0.106603  -1.522433 ;; 1288 was 418
+        0.467457  -0.248712  -2.020568 ;; 1289 was 108
+        0.118986  -0.044610  -0.370597 ;; 1290 was 159
+        1.648074   0.254982   1.628124 ;; 1291 was 210
+        0.118656   0.126515   0.129055 ;; 1292 was 158
+       -0.613138  -0.038778  -1.922150 ;; 1293 was 437
+        2.185308   0.236022   1.441617 ;; 1294 was 21
+        0.182752   0.232387   0.635602 ;; 1295 was 134
+        0.440733  -0.176596   0.431163 ;; 1296 was 220
+        0.297191   0.100931  -1.440695 ;; 1297 was 246
+       -0.468014  -0.471922  -1.944728 ;; 1298 was 436
+       -2.038314   0.049177   1.555193 ;; 1299 was 61
+       -0.104911  -0.005894  -0.336299 ;; 1300 was 266
+       -0.468133   0.319871  -1.698020 ;; 1301 was 449
+       -0.467351   0.455754   1.549889 ;; 1302 was 383
+        1.630040   0.241568   1.583740 ;; 1303 was 44
+       -0.000518   0.434162   1.503818 ;; 1304 was 279
+        0.000256   0.289260   0.007533 ;; 1305 was 177
+       -0.468403  -0.471927  -2.020555 ;; 1306 was 446
+        0.000259   0.094073   0.105748 ;; 1307 was 147
+        0.497641  -0.091390   0.268673 ;; 1308 was 15
+        0.358416   0.350531  -2.020604 ;; 1309 was 78
+       -0.117035   0.197512  -0.365436 ;; 1310 was 196
+       -0.184067   0.302754   1.050680 ;; 1311 was 400
+       -1.647432   0.039275   1.618564 ;; 1312 was 327
+       -1.875803   0.055343   1.575105 ;; 1313 was 66
+        1.693853   0.023750   1.585639 ;; 1314 was 43
+       -0.341549   0.303086  -1.438303 ;; 1315 was 288
+        0.601481  -0.038784  -2.020581 ;; 1316 was 93
+        1.610375   0.043824   1.430066 ;; 1317 was 215
+       -0.355769  -0.391325  -1.825337 ;; 1318 was 453
+        0.394786  -0.081201   0.620119 ;; 1319 was 130
+       -0.468133  -0.248712  -2.020568 ;; 1320 was 428
+        0.372179  -0.445631  -2.020557 ;; 1321 was 82
+        0.788209   0.174568   1.397642 ;; 1322 was 170
+        0.188447   0.292864   0.829515 ;; 1323 was 146
+       -0.405733  -0.006625   1.065828 ;; 1324 was 399
+        0.387835  -0.170252  -0.892532 ;; 1325 was 242
+        0.000259   0.126524   0.129055 ;; 1326 was 149
+       -0.322304  -0.258244  -1.944741 ;; 1327 was 430
+       -1.875182   0.055336   1.468970 ;; 1328 was 67
+       -0.568556  -0.445631  -2.020557 ;; 1329 was 455
+       -1.609725   0.164205   1.407728 ;; 1330 was 322
+        0.333434   0.164639  -2.020593 ;; 1331 was 112
+       -0.331930  -0.254646  -0.466443 ;; 1332 was 308
+       -0.577174   0.350531  -2.020604 ;; 1333 was 459
+       -0.182595   0.232387   0.631353 ;; 1334 was 402
+        0.585356   0.350537  -1.922173 ;; 1335 was 84
+       -0.468133  -0.192240  -1.761309 ;; 1336 was 432
+       -0.000363  -0.350985   0.571034 ;; 1337 was 271
+       -0.000359   0.319470   0.815238 ;; 1338 was 277
+        0.326118   0.175436   0.805090 ;; 1339 was 149
+        0.540338   0.086288   0.763382 ;; 1340 was 0
+       -0.189123  -0.387753   0.813849 ;; 1341 was 391
+        2.192290   0.236026   1.510657 ;; 1342 was 20
+        0.405173   0.371370   1.309405 ;; 1343 was 140
+        0.382288  -0.081196   0.698551 ;; 1344 was 129
+       -1.053727  -0.016153   1.709245 ;; 1345 was 359
+       -0.126654   0.042875  -0.395374 ;; 1346 was 175
+        0.267917   0.299701  -0.948784 ;; 1347 was 238
+        0.576498   0.281829  -1.698018 ;; 1348 was 76
+        0.139482  -0.005912  -0.616702 ;; 1349 was 230
+        0.811229   0.155888   1.828188 ;; 1350 was 175
+       -0.589462   0.106603  -1.522433 ;; 1351 was 418
+        0.000256   0.289260   0.007533 ;; 1352 was 177
+       -1.646001   0.241568   1.583740 ;; 1353 was 72
+       -1.630473  -0.003057   1.520678 ;; 1354 was 324
+       -1.876274  -0.001325   1.494331 ;; 1355 was 59
+        0.540626   0.148477   1.874858 ;; 1356 was 156
      ) ;; vertices
 
     (normals
-      -0.577349 -0.577349  0.577349
-      -0.909940 -0.909940  0.001099
-      -0.942625 -0.942625  0.236213
-      -0.239082 -0.239082  0.565813
-       0.910855  0.910855  0.412671
-       0.910855  0.910855 -0.412671
-       0.812494  0.812494 -0.336528
-       0.110752  0.110752 -0.932371
-      -0.301492 -0.301492 -0.301492
-      -0.300729 -0.300729 -0.904752
-       0.000000  0.000000 -0.707083
-      -0.546068 -0.546068 -0.556536
-      -0.540635 -0.539781  0.645222
-       0.577349 -0.577349 -0.577349
-      -0.792962 -0.234046 -0.562487
-      -0.626942 -0.259682 -0.734489
-       0.336528  0.812494  0.475936
-      -0.888150 -0.294839  0.352428
-       0.633534  0.633534  0.706076
-       0.561510  0.232582  0.794092
-      -0.707083 -0.707083 -0.707083
-      -0.577349 -0.577349  0.577349
-      -0.239082 -0.239082  0.565813
-       0.344920  0.110691  0.932066
-       0.040376  0.040376 -0.986602
-       0.812494  0.812494 -0.336528
-       0.236427 -0.942473 -0.236152
-      -0.332469 -0.332469  0.758080
-      -0.577349 -0.577349  0.577349
-      -0.475936  0.812494 -0.336528
-       0.232582  0.232582 -0.794092
-       0.301584 -0.300729 -0.904752
-       0.904508 -0.301492 -0.301492
-       0.732963  0.265297 -0.626392
-       0.000000  0.707083  0.707083
-      -0.807886 -0.807886  0.345103
-       0.817255  0.817255 -0.407361
-      -0.301584 -0.300729 -0.904752
-       0.685263  0.685263  0.000000
-       0.561510  0.232582 -0.794092
-      -0.942625 -0.942625  0.236213
-      -0.477645 -0.807886  0.345103
-      -0.094302 -0.094302  0.934049
-      -0.942625 -0.942625  0.236213
-       0.577349  0.577349  0.577349
-       0.794092  0.232582  0.561510
-       0.933226  0.100955  0.344737
-       0.475936  0.812494 -0.336528
-      -0.807886 -0.807886  0.345103
-       0.110752  0.110752 -0.932371
-      -0.577349 -0.577349 -0.577349
-       0.336528  0.812494 -0.475936
-       0.735862 -0.253121 -0.628010
-       0.577349  0.577349  0.577349
-       0.577349 -0.577349  0.577349
-       0.817255  0.817255  0.407636
-      -0.253121 -0.253121 -0.628010
-       0.577349  0.577349 -0.577349
-      -0.234046 -0.234046 -0.562487
-       0.577349  0.577349  0.577349
-      -0.618854  0.560717 -0.550066
-       0.910855  0.910855 -0.412671
-       0.336528  0.812494 -0.475936
-      -0.789087 -0.239082  0.565813
-      -0.904508 -0.301492 -0.301492
-      -0.089145 -0.089145  0.920408
-      -0.094302 -0.094302  0.934049
-       0.000000  0.000000 -0.707083
-       0.812494  0.812494  0.336528
-       0.000000  0.707083  0.707083
-       0.477035 -0.809534 -0.342082
-      -0.540635 -0.539781  0.645222
-       0.812494  0.812494  0.336528
-      -0.091891 -0.091891 -0.934263
-       0.561510  0.232582  0.794092
-       0.301584 -0.300729 -0.904752
-      -0.234046 -0.234046 -0.562487
-       0.577349 -0.577349  0.577349
-       0.336528  0.812494 -0.475936
-      -0.577349 -0.577349 -0.577349
-       0.707083  0.000000 -0.707083
-      -0.561510  0.232582 -0.794092
-       0.546648  0.547380  0.633656
-       0.577349  0.577349 -0.577349
-      -0.577349 -0.577349 -0.577349
-      -0.300729 -0.300729 -0.904752
-      -0.531083 -0.847285  0.001343
-       0.933226  0.100955 -0.344737
-      -0.301492 -0.301492  0.301492
-      -0.792962 -0.234046 -0.562487
-      -0.933226  0.100955  0.344737
-       0.732200  0.262154  0.628559
-       0.407300  0.817255  0.407636
-      -0.577349 -0.577349 -0.577349
-      -0.157903 -0.040376 -0.986602
-      -0.794092  0.232582 -0.561510
-      -0.301492 -0.301492  0.904508
-      -0.942473 -0.942473 -0.236152
-       0.904508 -0.301492  0.301492
-      -0.475936  0.812494 -0.336528
-      -0.728263 -0.685263  0.000000
-       0.232582  0.232582  0.561510
-       0.235786 -0.942625  0.236213
-      -0.344920  0.110691  0.932066
-      -0.577349 -0.577349 -0.577349
-      -0.942625 -0.942625  0.236213
-       0.577349  0.577349  0.577349
-       0.910855  0.910855  0.000000
-      -0.807886 -0.807886  0.345103
-       0.232582  0.232582  0.794092
-       0.000000  0.707083 -0.707083
-      -0.301492 -0.301492  0.904508
-      -0.794092  0.232582 -0.561510
-       0.577349 -0.577349  0.577349
-       0.414686 -0.909940  0.001099
-       0.707083  0.707083  0.707083
-      -0.809534 -0.809534 -0.342082
-       0.888150 -0.294839  0.352428
-      -0.794092  0.232582  0.561510
-       0.817255  0.817255 -0.407361
-       0.000000  0.910855 -0.412671
-      -0.618854  0.560717 -0.550066
-       0.100955  0.100955  0.344737
-       0.332469  0.332469 -0.758080
-       0.577349 -0.577349 -0.577349
-      -0.157903 -0.040376  0.986602
-       0.407605  0.817255 -0.407361
-       0.000000  0.000000 -0.832026
-      -0.336528  0.812494 -0.475936
-      -0.300729 -0.300729 -0.904752
-      -0.239082 -0.239082  0.565813
-       0.477035 -0.809534 -0.342082
-       0.794092  0.232582 -0.561510
-      -0.577349 -0.577349  0.577349
-      -0.477035 -0.809534 -0.342082
-      -0.807886 -0.807886  0.345103
-      -0.091891 -0.091891 -0.934263
-       0.561510  0.232582  0.794092
-       0.577349 -0.577349  0.577349
-       0.477645 -0.807886  0.345103
-       0.301492 -0.301492  0.904508
-       0.332469  0.332469  0.758049
-       0.707083  0.000000 -0.707083
-      -0.707083 -0.707083 -0.707083
-       0.547380  0.547380  0.633656
-      -0.301492 -0.301492  0.904508
-      -0.407300  0.817255  0.407636
-       0.915128  0.098331  0.390912
-       0.344401 -0.094302  0.934049
-       0.577349 -0.577349  0.577349
-      -0.554674  0.000000 -0.832026
-       0.794092  0.232582  0.561510
-       0.633534  0.633534  0.706076
-      -0.332469 -0.332469  0.758080
-       0.040376  0.040376 -0.986602
-      -0.301492 -0.301492  0.904508
-      -0.807886 -0.807886  0.345103
-       0.792962 -0.234046 -0.562487
-       0.232582  0.232582 -0.561510
-      -0.294839 -0.294839  0.352428
-       0.475936  0.812494  0.336528
-      -0.040376 -0.040376  0.986602
-      -0.933226  0.100955 -0.344737
-      -0.577349 -0.577349 -0.577349
-       0.577349 -0.577349 -0.577349
-       0.812494  0.812494 -0.475936
-      -0.477645 -0.807886  0.345103
-       0.561022 -0.332469  0.758080
-       0.577349  0.577349 -0.577349
-       0.812494  0.812494 -0.475936
-       0.812494  0.812494  0.336528
-      -0.546068 -0.546068  0.556536
-       0.000000  0.333323 -0.942808
-       0.232582  0.232582  0.794092
-       0.382794 -0.382153  0.841060
-      -0.477035 -0.809534 -0.342082
-       0.577349  0.577349 -0.577349
-      -0.235786 -0.942625  0.236213
-      -0.577349 -0.577349  0.577349
-      -0.794092  0.232582  0.561510
-       0.000000 -0.707083 -0.707083
-       0.000000  0.910855  0.412671
-       0.944700 -0.327891  0.001282
-       0.561510  0.232582 -0.794092
-       0.412671  0.910855  0.000000
-       0.232582  0.232582  0.794092
-       0.817255  0.817255 -0.407361
-       0.232582  0.232582 -0.561510
-      -0.157903 -0.040376  0.986602
-      -0.336528  0.812494 -0.475936
-       0.110691  0.110691  0.932066
-       0.475936  0.812494 -0.336528
-      -0.380932  0.111698  0.917814
-       0.812494  0.812494  0.336528
-       0.232582  0.232582  0.561510
-       0.561510  0.232582  0.794092
-       0.577349 -0.577349 -0.577349
-      -0.477035 -0.809534 -0.342082
-       0.333323  0.333323  0.000000
-       0.301492 -0.301492  0.904508
-       0.000000 -0.707083  0.707083
-       0.933226  0.100955  0.344737
-      -0.577349 -0.577349 -0.577349
-      -0.809534 -0.809534 -0.342082
-      -0.239082 -0.239082  0.565813
-       0.577349 -0.577349  0.577349
-      -0.809534 -0.809534 -0.342082
-       0.040376  0.040376 -0.986602
-       0.794092  0.232582  0.561510
-       0.942808  0.333323  0.000000
-      -0.301492 -0.301492  0.301492
-      -0.332469 -0.332469  0.758080
-       0.812494  0.812494  0.475936
-       0.232582  0.232582 -0.561510
-       0.817255  0.817255 -0.407361
-       0.707083  0.707083 -0.707083
-      -0.577349 -0.577349 -0.577349
-       0.336528  0.812494  0.475936
-       0.110691  0.110691  0.932066
-      -0.626118 -0.546068  0.556536
-       0.098331  0.098331  0.390912
-      -0.915128  0.098331  0.390912
-       0.792962 -0.234046 -0.562487
-       0.812494  0.812494  0.336528
-      -0.407605  0.817255 -0.407361
-       0.098331  0.098331  0.390912
-      -0.904508 -0.301492  0.301492
-      -0.301492 -0.301492  0.301492
-      -0.239082 -0.239082  0.565813
-      -0.253121 -0.253121 -0.628010
-      -0.301492 -0.301492 -0.301492
-       0.561022 -0.332469  0.758080
-       0.232582  0.232582 -0.561510
-       0.794092  0.232582 -0.561510
-      -0.301584 -0.300729 -0.904752
-       0.382794 -0.382153  0.841060
-      -0.316324  0.633534  0.706076
-       0.577349  0.577349 -0.577349
-       0.560717  0.560717 -0.550066
-       0.626942 -0.259682 -0.734489
-       0.792962 -0.234046 -0.562487
-       0.561510  0.232582 -0.794092
-       0.232582  0.232582 -0.794092
-       0.817255  0.817255 -0.407361
-       0.000000  0.000000 -0.832026
-       0.847224  0.847224  0.531205
-      -0.094302 -0.094302  0.934049
-      -0.344035  0.110752 -0.932371
-      -0.259682 -0.259682 -0.734489
-       0.561022 -0.332469 -0.758049
-      -0.707083 -0.707083  0.707083
-      -0.707083 -0.707083  0.707083
-      -0.626942 -0.259682 -0.734489
-       0.332469  0.332469  0.758049
-      -0.344462 -0.091891 -0.934263
-       0.817255  0.817255  0.407636
-      -0.381603 -0.086734 -0.920225
-       0.812494  0.812494 -0.336528
-      -0.239082 -0.239082  0.565813
-      -0.327891 -0.327891  0.001282
-       0.735862 -0.253121  0.628010
-       0.944700 -0.327891  0.001282
-       0.344920  0.110691  0.932066
-       0.475936  0.812494  0.336528
-       0.236427 -0.942473 -0.236152
-      -0.728263  0.685263  0.000000
-       0.812494  0.812494  0.475936
-      -0.618854  0.560717  0.550066
-      -0.626118 -0.546068 -0.556536
-       0.732200  0.262154  0.628559
-       0.098331  0.098331  0.390912
-       0.336528  0.812494  0.475936
-      -0.236427 -0.942473 -0.236152
-      -0.626118 -0.546068  0.556536
-       0.732963  0.265297 -0.626392
-      -0.234046 -0.234046 -0.562487
-      -0.294839 -0.294839  0.352428
-       0.098331  0.098331  0.390912
-       0.100955  0.100955 -0.344737
-       0.000000  0.707083  0.707083
-      -0.040376 -0.040376  0.986602
-      -0.942473 -0.942473 -0.236152
-      -0.259682 -0.259682 -0.734489
-       0.904508 -0.301492  0.301492
-       0.232582  0.232582  0.561510
-       0.812494  0.812494 -0.475936
-      -0.234046 -0.234046 -0.562487
-      -0.577349 -0.577349  0.577349
-       0.577349  0.577349  0.577349
-       0.910855  0.910855  0.000000
-      -0.332469 -0.332469 -0.758049
-       0.344035  0.110752 -0.932371
-      -0.904508 -0.301492 -0.301492
-       0.412671  0.910855  0.000000
-      -0.253121 -0.253121  0.628010
-      -0.412671  0.910855  0.000000
-       0.812494  0.812494  0.336528
-       0.157903  0.040376  0.986602
-       0.000000 -0.707083  0.707083
-       0.344462 -0.091891 -0.934263
-       0.232582  0.232582  0.794092
-      -0.475936  0.812494  0.336528
-       0.794092  0.232582 -0.561510
-      -0.259682 -0.259682 -0.734489
-      -0.253121 -0.253121  0.628010
-       0.232582  0.232582 -0.561510
-       0.626942 -0.259682 -0.734489
-      -0.336528  0.812494  0.475936
-       0.812494  0.812494 -0.475936
-      -0.336528  0.812494  0.475936
-      -0.236427 -0.942473 -0.236152
-      -0.618854  0.560717 -0.550066
-       0.812494  0.812494 -0.475936
-      -0.577349 -0.577349  0.577349
-      -0.235786 -0.942625  0.236213
-       0.232582  0.232582  0.794092
-       0.000000  0.000000 -0.832026
-      -0.294839 -0.294839  0.352428
-      -0.789087 -0.239082  0.565813
-       0.110752  0.110752 -0.932371
-      -0.259682 -0.259682 -0.734489
-      -0.577349  0.577349 -0.577349
-       0.157903  0.040376 -0.986602
-       0.332469  0.332469  0.758049
-       0.232582  0.232582 -0.794092
-       0.707083  0.000000 -0.707083
-       0.232582  0.232582 -0.794092
-       0.817255  0.817255  0.407636
-       0.547380  0.547380  0.633656
-       0.265297  0.265297 -0.626392
-       0.915128  0.098331  0.390912
-      -0.089145 -0.089145  0.920408
-      -0.809534 -0.809534 -0.342082
-      -0.561510  0.232582  0.794092
-      -0.626118 -0.546068 -0.556536
-      -0.531083 -0.847285  0.001343
-      -0.539781 -0.539781  0.645222
-       0.475936  0.812494  0.336528
-      -0.728263  0.685263  0.000000
-      -0.561022  0.332469 -0.758080
-      -0.327891 -0.327891  0.001282
-       0.707083  0.707083 -0.707083
-      -0.577349  0.577349  0.577349
-       0.626942 -0.259682 -0.734489
-       0.000000  0.707083 -0.707083
-       0.232582  0.232582 -0.794092
-       0.577349 -0.577349 -0.577349
-      -0.475936  0.812494  0.336528
-       0.111698  0.111698 -0.917814
-      -0.294839 -0.294839  0.352428
-      -0.685263 -0.685263  0.000000
-       0.792962 -0.234046 -0.562487
-      -0.040376 -0.040376  0.986602
-       0.000000 -0.707083 -0.707083
-      -0.807886 -0.807886  0.345103
-      -0.301492 -0.301492  0.301492
-      -0.301492 -0.301492 -0.301492
-      -0.561022  0.332469 -0.758080
-       0.707083  0.707083  0.707083
-       0.817255  0.817255  0.407636
-       0.344035  0.110752 -0.932371
-       0.262154  0.262154  0.628559
-       0.000000  0.707083 -0.707083
-       0.475936  0.812494  0.336528
-       0.333323  0.333323 -0.942808
-       0.577349  0.577349 -0.577349
-       0.812494  0.812494 -0.336528
-      -0.561022  0.332469  0.758049
-      -0.336528  0.812494  0.475936
-      -0.336528  0.812494  0.475936
-      -0.091891 -0.091891 -0.934263
-       0.000000  0.847224  0.531205
-      -0.794092  0.232582  0.561510
-       0.707083  0.707083 -0.707083
-      -0.381603 -0.086734 -0.920225
-       0.111698  0.111698  0.917814
-       0.910855  0.910855  0.000000
-      -0.528184  0.849117  0.000000
-      -0.577349 -0.577349  0.577349
-      -0.577349 -0.577349 -0.577349
-      -0.380932  0.111698 -0.917814
-      -0.294839 -0.294839  0.352428
-       0.232582  0.232582  0.561510
-       0.040376  0.040376  0.986602
-       0.100955  0.100955  0.344737
-      -0.477645 -0.807886  0.345103
-      -0.040376 -0.040376 -0.986602
-      -0.344401 -0.094302  0.934049
-       0.812494  0.812494  0.475936
-       0.100955  0.100955  0.344737
-       0.904508 -0.301492  0.301492
-       0.301492 -0.301492  0.904508
-       0.232582  0.232582 -0.794092
-       0.812494  0.812494 -0.475936
-       0.265297  0.265297 -0.626392
-      -0.239082 -0.239082  0.565813
-      -0.316324  0.633534  0.706076
-       0.577349 -0.577349  0.577349
-       0.812494  0.812494  0.475936
-      -0.561510  0.232582  0.794092
-       0.789087 -0.239082  0.565813
-       0.904508 -0.301492 -0.301492
-      -0.909940 -0.909940  0.001099
-       0.475936  0.812494 -0.336528
-       0.707083  0.707083 -0.707083
-      -0.577349 -0.577349  0.577349
-       0.098331  0.098331  0.390912
-       0.561022 -0.332469 -0.758049
-       0.633534  0.633534  0.706076
-      -0.253121 -0.253121 -0.628010
-      -0.234046 -0.234046 -0.562487
-       0.414686 -0.909940  0.001099
-      -0.300729 -0.300729 -0.904752
-      -0.094302 -0.094302  0.934049
-       0.100955  0.100955 -0.344737
-      -0.539781 -0.539781  0.645222
-       0.000000 -0.707083 -0.707083
-      -0.477645 -0.807886  0.345103
-      -0.794092  0.232582 -0.561510
-      -0.301492 -0.301492  0.301492
-       0.944700 -0.327891  0.001282
-       0.157903  0.040376 -0.986602
-      -0.336528  0.812494 -0.475936
-      -0.301492 -0.301492 -0.301492
-      -0.234046 -0.234046 -0.562487
-       0.561022 -0.332469  0.758080
-      -0.332469 -0.332469 -0.758049
-      -0.809534 -0.809534 -0.342082
-       0.817255  0.817255  0.407636
-      -0.301584 -0.300729 -0.904752
-       0.789087 -0.239082  0.565813
-       0.157903  0.040376 -0.986602
-       0.301584 -0.300729 -0.904752
-       0.812494  0.812494  0.475936
-      -0.942625 -0.942625  0.236213
-       0.910855  0.910855  0.412671
-       0.560717  0.560717 -0.550066
-       0.812494  0.812494 -0.475936
-       0.110691  0.110691  0.932066
-       0.110752  0.110752 -0.932371
-       0.040376  0.040376  0.986602
-       0.933226  0.100955  0.344737
-       0.812494  0.812494 -0.336528
-      -0.301492 -0.301492 -0.301492
-       0.232582  0.232582 -0.794092
-      -0.475936  0.812494 -0.336528
-       0.910855  0.910855  0.000000
-       0.232582  0.232582  0.794092
-       0.000000  0.707083  0.707083
-       0.707083  0.707083 -0.707083
-      -0.888150 -0.294839  0.352428
-      -0.380932  0.111698 -0.917814
-      -0.301492 -0.301492  0.301492
-       0.707083  0.707083  0.707083
-       0.336528  0.812494  0.475936
-      -0.577349 -0.577349 -0.577349
-       0.475936  0.812494 -0.336528
-      -0.382153 -0.382153  0.841060
-      -0.577349 -0.577349 -0.577349
-      -0.789087 -0.239082  0.565813
-      -0.577349 -0.577349  0.577349
-       0.735862 -0.253121  0.628010
-      -0.577349  0.577349 -0.577349
-       0.232582  0.232582 -0.794092
-       0.735862 -0.253121 -0.628010
-      -0.528184  0.849117  0.000000
-      -0.239082 -0.239082  0.565813
-      -0.089145 -0.089145  0.920408
-      -0.561022  0.332469  0.758049
-       0.561510  0.232582 -0.794092
-      -0.577349 -0.577349 -0.577349
-       0.789087 -0.239082  0.565813
-      -0.789087 -0.239082  0.565813
-       0.904508 -0.301492 -0.301492
-      -0.847285 -0.847285  0.001343
-      -0.561510  0.232582 -0.794092
-       0.000000  0.707083 -0.707083
-      -0.904508 -0.301492  0.301492
-      -0.577349 -0.577349  0.577349
-      -0.915128  0.098331  0.390912
-      -0.414686 -0.909940  0.001099
-       0.111698  0.111698 -0.917814
-      -0.685263 -0.685263  0.000000
-       0.100955  0.100955 -0.344737
-       0.000000  0.333323 -0.942808
-      -0.561510  0.232582  0.794092
-       0.812494  0.812494 -0.336528
-       0.707083  0.707083  0.707083
-      -0.301492 -0.301492  0.904508
-       0.812494  0.812494  0.336528
-      -0.157903 -0.040376 -0.986602
-      -0.332469 -0.332469 -0.758049
-       0.232582  0.232582 -0.561510
-      -0.707083 -0.707083  0.707083
-      -0.933226  0.100955  0.344737
-      -0.809534 -0.809534 -0.342082
-      -0.344035  0.110752 -0.932371
-       0.817255  0.817255  0.407636
-       0.888150 -0.294839  0.352428
-      -0.618854  0.560717  0.550066
-      -0.259682 -0.259682 -0.734489
-      -0.407605  0.817255 -0.407361
-       0.235786 -0.942625  0.236213
-       0.100955  0.100955 -0.344737
-      -0.301492 -0.301492  0.904508
-      -0.577349  0.577349  0.577349
-       0.812494  0.812494 -0.336528
-       0.407605  0.817255 -0.407361
-      -0.546068 -0.546068 -0.556536
-       0.707083  0.707083 -0.707083
-      -0.380596 -0.089145  0.920408
-       0.157903  0.040376  0.986602
-       0.000000  0.000000 -0.707083
-       0.232582  0.232582  0.794092
-      -0.577349 -0.577349 -0.577349
-       0.477645 -0.807886  0.345103
-       0.812494  0.812494 -0.336528
-       0.111698  0.111698  0.917814
-       0.232582  0.232582 -0.561510
-       0.232582  0.232582  0.561510
-       0.812494  0.812494  0.475936
-       0.477035 -0.809534 -0.342082
-      -0.040376 -0.040376 -0.986602
-       0.232582  0.232582  0.561510
-      -0.301492 -0.301492  0.904508
-      -0.577349 -0.577349 -0.577349
-      -0.327891 -0.327891  0.001282
-      -0.344462 -0.091891 -0.934263
-      -0.554674  0.000000 -0.832026
-       0.933226  0.100955 -0.344737
-       0.232582  0.232582  0.561510
-       0.707083  0.707083  0.707083
-       0.812494  0.812494  0.475936
-       0.040376  0.040376  0.986602
-      -0.259682 -0.259682 -0.734489
-       0.110752  0.110752 -0.932371
-      -0.728263  0.685263  0.000000
-      -0.847285 -0.847285  0.001343
-      -0.561510  0.232582 -0.794092
-      -0.794092  0.232582 -0.561510
-       0.407300  0.817255  0.407636
-      -0.577349 -0.577349  0.577349
-      -0.157903 -0.040376 -0.986602
-       0.000000  0.707083 -0.707083
-      -0.380932  0.111698 -0.917814
-      -0.933226  0.100955 -0.344737
-       0.111698  0.111698 -0.917814
-      -0.300729 -0.300729 -0.904752
-      -0.475936  0.812494 -0.336528
-       0.000000  0.707083  0.707083
-      -0.577349 -0.577349  0.577349
-       0.707083  0.707083 -0.707083
-       0.333323  0.333323  0.000000
-      -0.807886 -0.807886  0.345103
-      -0.577349 -0.577349 -0.577349
-       0.817255  0.817255 -0.407361
-      -0.942473 -0.942473 -0.236152
-       0.100955  0.100955  0.344737
-      -0.561510  0.232582  0.794092
-      -0.234046 -0.234046 -0.562487
-       0.707083  0.707083  0.707083
-      -0.807886 -0.807886  0.345103
-      -0.235786 -0.942625  0.236213
-      -0.577349 -0.577349 -0.577349
-       0.344035  0.110752 -0.932371
-       0.262154  0.262154  0.628559
-      -0.086734 -0.086734 -0.920225
-       0.157903  0.040376  0.986602
-      -0.909940 -0.909940  0.001099
-       0.344462 -0.091891 -0.934263
-      -0.904508 -0.301492 -0.301492
-      -0.942625 -0.942625  0.236213
-       0.100955  0.100955 -0.344737
-       0.344401 -0.094302  0.934049
-       0.344401 -0.094302  0.934049
-      -0.091891 -0.091891 -0.934263
-       0.707083  0.707083 -0.707083
-      -0.301492 -0.301492 -0.301492
-       0.546648  0.547380  0.633656
-       0.847224  0.847224  0.531205
-       0.794092  0.232582 -0.561510
-       0.000000  0.910855  0.412671
-      -0.475936  0.812494  0.336528
-      -0.086734 -0.086734 -0.920225
-       0.477645 -0.807886  0.345103
-      -0.792962 -0.234046 -0.562487
-      -0.157903 -0.040376  0.986602
-       0.477035 -0.809534 -0.342082
-      -0.040376 -0.040376 -0.986602
-       0.000000  0.707083  0.707083
-      -0.707083 -0.707083 -0.707083
-      -0.577349 -0.577349  0.577349
-       0.477645 -0.807886  0.345103
-       0.812494  0.812494 -0.475936
-      -0.554674  0.000000 -0.832026
-       0.262154  0.262154  0.628559
-      -0.380596 -0.089145  0.920408
-       0.707083  0.707083  0.707083
-       0.849117  0.849117  0.000000
-      -0.380932  0.111698  0.917814
-       0.000000  0.707083 -0.707083
-      -0.577349 -0.577349  0.577349
-      -0.904508 -0.301492  0.301492
-       0.561022 -0.332469 -0.758049
-       0.560717  0.560717  0.550066
-      -0.300729 -0.300729 -0.904752
-       0.332469  0.332469 -0.758080
-      -0.577349 -0.577349  0.577349
-       0.110691  0.110691  0.932066
-      -0.909940 -0.909940  0.001099
-      -0.577349 -0.577349 -0.577349
-       0.849117  0.849117  0.000000
-      -0.942473 -0.942473 -0.236152
-       0.794092  0.232582  0.561510
-      -0.380596 -0.089145  0.920408
-      -0.728263 -0.685263  0.000000
-       0.000000 -0.707083  0.707083
-       0.336528  0.812494 -0.475936
-       0.232582  0.232582 -0.561510
-       0.685263  0.685263  0.000000
-       0.577349  0.577349  0.577349
-      -0.809534 -0.809534 -0.342082
-       0.789087 -0.239082  0.565813
+       0.757286 -0.602527 -0.251869
+      -0.521775 -0.521775 -0.012452
+       0.000000  0.707053 -0.707144
+      -0.019684 -0.019684  0.533250
+      -0.707724 -0.707724 -0.704215
+       0.000000 -0.996704 -0.080905
+       0.651204  0.651204 -0.756920
+       0.652974  0.725150 -0.218482
+       0.824183 -0.566301 -0.001465
+       0.789758  0.789758 -0.156621
+       0.037843  0.037843 -0.109989
+       0.949156  0.949156 -0.259163
+       0.607624  0.607624 -0.587756
+       0.653432  0.653432  0.756920
+      -0.654561 -0.000122 -0.755974
+       0.072115  0.988250 -0.134678
+       0.628376 -0.556597  0.543413
+      -0.001892 -0.001892 -0.935392
+       0.001282  0.001282 -0.182440
+      -0.279427  0.920530 -0.272958
+       0.664266  0.664266  0.724570
+       0.628376 -0.556597  0.543413
+      -0.146214  0.989074  0.017457
+      -0.536943 -0.536943  0.722129
+      -0.651601  0.012116 -0.758446
+      -0.956359 -0.029695  0.290628
+      -0.517014 -0.517014 -0.276345
+      -0.637715  0.548631  0.540635
+      -0.327952  0.671926 -0.664022
+      -0.690695 -0.690695 -0.723106
+       0.610492  0.610492 -0.589770
+      -0.638234  0.575671  0.511093
+      -0.588946 -0.588946 -0.806940
+      -0.004700 -0.004700 -0.999664
+      -0.352611  0.903958 -0.241798
+       0.657949  0.657949 -0.664418
+      -0.992615 -0.992615 -0.065676
+      -0.773278  0.555071 -0.306406
+      -0.675222 -0.675222  0.709555
+      -0.142064 -0.984680 -0.100864
+      -0.381298 -0.381298  0.175207
+       0.554399  0.554399  0.131840
+       0.054323  0.651204 -0.756920
+       0.695883  0.695883 -0.114170
+      -0.004089 -0.004089  0.063326
+      -0.007050 -0.007050 -0.182073
+       0.707053  0.707053 -0.707144
+      -0.997681 -0.997681 -0.052187
+      -0.550737 -0.168828  0.817377
+       0.661031 -0.701193 -0.266976
+      -0.948576 -0.948576 -0.129734
+       0.000214 -0.975646 -0.219245
+      -0.979156 -0.979156  0.202918
+      -0.033906 -0.033906  0.998016
+       0.012116  0.012116 -0.758446
+       0.697439 -0.542314  0.468398
+      -0.771081  0.585131  0.251045
+       0.552080 -0.168432  0.816553
+       0.264687  0.687551  0.676138
+      -0.026276 -0.005158 -0.999634
+       0.903623  0.903623 -0.242714
+      -0.005158 -0.005158 -0.999634
+       0.043550 -0.997681 -0.052187
+       0.501968  0.501968  0.434095
+      -0.168828 -0.168828  0.817377
+      -0.026185 -0.004273 -0.999634
+      -0.863979  0.000885 -0.503494
+      -0.004273 -0.004273 -0.999634
+      -0.976592 -0.976592 -0.214972
+       0.725333 -0.682119  0.092380
+      -0.560472 -0.560472  0.036622
+      -0.323679 -0.934294 -0.149297
+      -0.593890 -0.593890  0.781640
+      -0.003876 -0.976592 -0.214972
+      -0.015229  0.990234  0.138524
+       0.999969  0.999969 -0.001709
+       0.069002 -0.584307 -0.808557
+       0.530564  0.000488 -0.847621
+       0.724754 -0.654439 -0.215339
+       0.707053  0.707053 -0.707144
+       0.824549 -0.556078 -0.104221
+       0.658010  0.658010  0.023560
+       0.063356  0.063356  0.077090
+      -0.517655 -0.517655 -0.573046
+      -0.977813 -0.977813 -0.053987
+       0.010376  0.010376 -0.339030
+      -0.003113 -0.003113 -0.167913
+       0.014893  0.701590 -0.712394
+       0.021485 -0.363445  0.931333
+      -0.790948  0.597156  0.133274
+      -0.701071 -0.683523 -0.203101
+      -0.104312 -0.993164 -0.052217
+       0.990234  0.990234  0.138524
+       0.000000 -0.000031 -1.000000
+       0.999939  0.999939  0.010559
+      -0.030793 -0.030793  0.990875
+       0.142064 -0.984680 -0.100864
+      -0.005158 -0.005158 -0.999634
+      -0.543535 -0.543535 -0.774316
+       0.000000 -0.000031 -1.000000
+       0.687551  0.687551  0.676138
+       0.024628 -0.004700 -0.999664
+      -0.627400 -0.627400  0.050630
+      -0.015900 -0.015900  0.024323
+      -0.118503  0.992889  0.008026
+      -0.527024 -0.527024  0.608386
+      -0.581408 -0.525254  0.621296
+       0.787378  0.604053 -0.122776
+       0.002960 -0.999969 -0.000793
+       0.007813 -0.661214  0.750114
+       0.998108  0.998108  0.061251
+       0.949187  0.949187 -0.259163
+      -0.724754 -0.654439 -0.215339
+       0.410291  0.410291  0.636647
+      -0.467849 -0.267220  0.842402
+       0.657949  0.657949 -0.664418
+       0.604877 -0.794733  0.049898
+       0.990966  0.990966  0.078463
+       0.785577  0.593860  0.173711
+      -0.108463  0.990966  0.078433
+       0.288644 -0.948576 -0.129734
+       0.932279  0.932279 -0.340495
+      -0.005371 -0.979156  0.202918
+      -0.255043  0.962462 -0.092715
+      -0.526872  0.196478  0.826899
+       0.534898  0.534898 -0.293283
+       0.979858  0.979858  0.009644
+      -0.000031 -0.000031 -1.000000
+       0.340312 -0.626759  0.700949
+       0.585131  0.585131  0.251045
+       0.526963  0.608997 -0.592761
+      -0.228614  0.644826  0.729301
+       0.584521  0.584521 -0.574877
+       0.638752  0.638752 -0.503983
+      -0.054415 -0.054415  0.982208
+       0.436110 -0.536943  0.722129
+       0.000305  0.000305 -0.247719
+       0.354381  0.657949 -0.664418
+       0.547166  0.631306  0.549516
+      -0.030396 -0.030396  0.999512
+      -0.742912  0.662099 -0.098239
+      -0.581408 -0.525254  0.621296
+       0.644826  0.644826  0.729301
+       0.046663  0.989227  0.138707
+      -0.602527 -0.602527 -0.251869
+      -0.666372  0.046419 -0.744133
+       0.555742  0.555742  0.140843
+      -0.413587 -0.413587  0.434858
+       0.005371 -0.979156  0.202918
+      -0.391308 -0.391308  0.270699
+      -0.556078 -0.556078 -0.104221
+      -0.029695 -0.029695  0.290628
+       0.017518 -0.991699 -0.127293
+       0.635304 -0.517655 -0.573046
+      -0.592456 -0.592456 -0.132298
+      -0.034730  0.999237  0.016907
+       0.605274  0.605274  0.023469
+       0.548631  0.548631  0.540635
+      -0.757286 -0.602527 -0.251869
+      -0.000122 -0.000122 -0.755974
+      -0.543535 -0.543535 -0.774316
+       0.717429 -0.678610 -0.157262
+       0.794641 -0.592456 -0.132298
+      -0.415021 -0.903104 -0.109989
+      -0.994995  0.063356  0.077090
+       0.789758  0.789758 -0.156621
+       0.989074  0.989074  0.017457
+       0.251350  0.962706 -0.100009
+      -0.569262 -0.569262  0.822138
+       0.647206  0.647206 -0.187201
+       0.588977  0.588977 -0.736656
+       0.561449  0.561449 -0.712973
+      -0.662679 -0.001892 -0.748863
+       0.794641 -0.592456 -0.132298
+      -0.707968 -0.707968  0.693716
+       0.962706  0.962706 -0.100009
+      -0.991760 -0.022065  0.126164
+       0.431288 -0.424543  0.796075
+       0.002014  0.068331 -0.997650
+       0.860408  0.860408  0.118015
+      -0.992615 -0.992615 -0.065676
+       0.601550  0.601550 -0.730613
+      -0.637684 -0.637684  0.719016
+      -0.588946 -0.588946 -0.806940
+      -0.991699 -0.991699 -0.127293
+      -0.029237 -0.029237  0.966948
+      -0.028657 -0.028657  0.931608
+      -0.794641 -0.592456 -0.132298
+      -0.964019  0.086612  0.251259
+      -0.613453 -0.613453  0.098727
+       0.101871 -0.992615 -0.065676
+       0.903958  0.903958 -0.241798
+      -0.178686  0.982269 -0.056215
+       0.988250  0.988250 -0.134678
+      -0.998840  0.005158 -0.047609
+       0.125126  0.125126  0.943602
+      -0.381298 -0.381298  0.175207
+       0.546434  0.546434 -0.024171
+      -0.553117 -0.624866 -0.550981
+       0.276223 -0.637684  0.719016
+       0.802911 -0.596057  0.003662
+      -0.188940  0.637349  0.747032
+      -0.054415 -0.054415  0.982208
+      -0.029695 -0.029695  0.290628
+       0.604053  0.604053 -0.122776
+       0.419965  0.561449 -0.712973
+       0.781457 -0.623920 -0.000366
+      -0.975646 -0.975646 -0.219245
+       0.993957  0.993957  0.109714
+      -0.198553 -0.106937  0.974212
+      -0.974151 -0.974151 -0.225623
+      -0.003967 -0.622303  0.782739
+       0.566485  0.566485 -0.824061
+      -0.609912 -0.609912  0.410199
+      -0.007263 -0.007263 -0.993896
+       0.002014  0.068331 -0.997650
+       0.837123  0.546434 -0.024171
+       0.703696  0.703696  0.705618
+       0.555071  0.555071 -0.306406
+       0.766778  0.766778  0.571459
+      -0.027131  0.677633  0.734855
+      -0.015473 -0.015473 -0.019379
+      -0.678610 -0.678610 -0.157262
+       0.556047  0.556047  0.049471
+       0.641255  0.551073  0.533921
+       0.695883  0.695883 -0.114170
+       0.845698 -0.019684  0.533250
+      -0.465377 -0.371502 -0.803339
+      -0.845698 -0.019684  0.533250
+       0.610492  0.610492 -0.589770
+      -0.371502 -0.371502 -0.803339
+      -0.810114 -0.517014 -0.276345
+      -0.004700 -0.004700 -0.999664
+      -0.003906 -0.690695 -0.723106
+       0.994995  0.063356  0.077090
+      -0.907682 -0.381298  0.175207
+      -0.005371 -0.979156  0.202918
+      -0.794733 -0.794733  0.049898
+       0.000488  0.000488 -0.847621
+      -0.661214 -0.661214  0.750114
+      -0.620869 -0.620869  0.052919
+       0.988250  0.988250 -0.134678
+       0.982269  0.982269 -0.056215
+       0.078860  0.078860  0.249672
+      -0.678610 -0.678610 -0.157262
+      -0.000549  0.998108  0.061251
+      -0.082492  0.651234 -0.754357
+       0.000000 -0.993652 -0.112278
+       0.647542  0.647542  0.720237
+       0.247047  0.958556  0.141697
+       0.459639 -0.320627  0.828181
+      -0.232643 -0.165716  0.958312
+      -0.018616  0.211402  0.977203
+       0.000153 -0.846828  0.531846
+      -0.608051 -0.608051 -0.607685
+      -0.592456 -0.592456 -0.132298
+      -0.619465 -0.619465  0.147984
+      -0.827326 -0.560472  0.036622
+      -0.277535 -0.277535  0.611988
+       0.593341 -0.527024  0.608386
+       0.561449  0.561449 -0.712973
+      -0.019684 -0.019684  0.533250
+       0.362255 -0.028657  0.931608
+       0.958617 -0.014039  0.284310
+       0.000000  0.959685  0.280984
+       0.279885  0.279885  0.723014
+      -0.654439 -0.654439 -0.215339
+       0.605274  0.605274  0.023469
+      -0.029969 -0.029969  0.299387
+      -0.003876 -0.976592 -0.214972
+      -0.976592 -0.976592 -0.214972
+       0.551073  0.551073  0.533921
+       0.005371 -0.979156  0.202918
+      -0.041688 -0.593554 -0.803674
+      -0.820643  0.562029 -0.102939
+       0.985778 -0.003113 -0.167913
+      -0.641255  0.551073  0.533921
+      -0.028657 -0.028657  0.931608
+       0.959288 -0.023041  0.281411
+      -0.580828 -0.580828 -0.810389
+      -0.976592 -0.976592 -0.214972
+      -0.797937 -0.602344 -0.020936
+      -0.090457  0.649586 -0.754845
+       0.096316  0.656301 -0.748314
+       0.000061 -0.307230  0.951628
+       0.070162  0.070162  0.950194
+       0.000214  0.951476 -0.307657
+      -0.879513 -0.391278  0.270699
+       0.920591  0.920591 -0.272744
+      -0.165716 -0.165716  0.958312
+      -0.033967 -0.033967  0.998016
+       0.327952  0.671926 -0.664022
+      -0.144932 -0.987518 -0.061525
+       0.000000 -0.910276  0.413923
+       0.219947 -0.972503 -0.076357
+       0.656301  0.656301 -0.748314
+      -0.030641 -0.030641 -0.033815
+      -0.050264  0.627308 -0.777123
+      -0.517014 -0.517014 -0.276345
+      -0.313852 -0.313852  0.887020
+      -0.686911  0.723869  0.064028
+      -0.201392 -0.675222  0.709555
+       0.677633  0.677633  0.734855
+      -0.631550  0.279885  0.723014
+      -0.602527 -0.602527 -0.251869
+       0.555742  0.555742  0.140843
+      -0.675222 -0.675222  0.709555
+      -0.643971 -0.643971  0.747368
+       0.001282  0.001282 -0.182440
+       0.724082  0.724082  0.062777
+       0.003906 -0.690695 -0.723106
+      -0.968810  0.000305 -0.247719
+      -0.001892 -0.001892 -0.935392
+      -0.069002 -0.584307 -0.808557
+      -0.625141 -0.625141  0.073000
+       0.816614  0.413221 -0.402875
+       0.662099  0.662099 -0.098239
+      -0.332255  0.588977 -0.736656
+       0.003876 -0.976592 -0.214972
+       0.794641 -0.592456 -0.132298
+      -0.131046 -0.030793  0.990875
+      -0.419996  0.561449 -0.712973
+      -0.678610 -0.678610 -0.157262
+       0.659566  0.659566  0.751579
+      -0.517014 -0.517014 -0.276345
+      -0.636280 -0.716239 -0.286508
+       0.324015 -0.543535 -0.774316
+       0.000000 -0.999298 -0.037416
+      -0.033448  0.999359 -0.010529
+      -0.934294 -0.934294 -0.149297
+       0.053713  0.948943 -0.310800
+      -0.024628 -0.004700 -0.999664
+      -0.277535 -0.277535  0.611957
+      -0.393567 -0.393567  0.919279
+       0.353587 -0.001892 -0.935392
+       0.617481  0.617481  0.270943
+      -0.654439 -0.654439 -0.215339
+       0.033448  0.999359 -0.010498
+       0.968810  0.000305 -0.247719
+      -0.003113 -0.003113 -0.167913
+       0.072115  0.988250 -0.134678
+      -0.322398 -0.875515  0.359813
+       0.975463  0.975463 -0.046602
+       0.198553 -0.106937  0.974212
+      -0.273659  0.959441  0.067537
+      -0.903134 -0.903134 -0.109989
+       0.548631  0.548631  0.540635
+      -0.565355 -0.565355 -0.587909
+      -0.338572 -0.313852  0.887020
+       0.792352  0.534898 -0.293283
+      -0.996704 -0.996704 -0.080905
+      -0.979156 -0.979156  0.202918
+      -0.738945  0.647206 -0.187201
+      -0.757286 -0.602527 -0.251869
+       0.567156 -0.601337  0.562731
+       0.671926  0.671926 -0.664022
+      -0.000122 -0.000122 -0.755974
+      -0.979156 -0.979156  0.202918
+       0.649586  0.649586 -0.754845
+      -0.863979  0.000885 -0.503494
+      -0.267220 -0.267220  0.842402
+       0.788171 -0.601794 -0.128758
+       0.562029  0.562029 -0.102939
+      -0.601794 -0.601794 -0.128758
+      -0.680135 -0.680135  0.629475
+       0.575671  0.575671  0.511093
+       0.003815  0.003815 -0.187201
+       0.215155  0.647877  0.730705
+      -0.593158 -0.593158 -0.799127
+      -0.001892 -0.001892 -0.748863
+      -0.658467 -0.658467  0.739891
+      -0.054323  0.651204 -0.756920
+       0.664266  0.664266  0.724570
+      -0.106937 -0.106937  0.974212
+       0.528062  0.528062 -0.119602
+      -0.004273 -0.004273 -0.999634
+      -0.295144 -0.952513 -0.074618
+      -0.204871 -0.960204 -0.189673
+      -0.215094  0.975463 -0.046602
+      -0.983184  0.001282 -0.182440
+      -0.608051 -0.608051 -0.607685
+      -0.253273 -0.029237  0.966948
+       0.638752  0.638752 -0.503983
+      -0.581317  0.638752 -0.503983
+      -0.985473 -0.985473 -0.169591
+       0.578539 -0.565355 -0.587909
+      -0.291971  0.766686  0.571764
+       0.627308  0.627308 -0.777123
+       0.962462  0.962462 -0.092715
+      -0.677999 -0.609912  0.410199
+       0.879513 -0.391308  0.270699
+      -0.406964 -0.912442 -0.042329
+       0.647877  0.647877  0.730705
+      -0.353587 -0.001892 -0.935392
+       0.638752  0.638752 -0.503983
+      -0.748039  0.501968  0.434095
+       0.638752  0.638752 -0.503983
+      -0.717429 -0.678610 -0.157262
+       0.188940  0.637349  0.747032
+       0.517563  0.171117  0.838343
+      -0.824549 -0.556078 -0.104221
+      -0.622303 -0.622303  0.782739
+      -0.053652  0.948943 -0.310800
+       0.999969  0.999969 -0.001709
+       0.621174  0.621174  0.646290
+      -0.987518 -0.987518 -0.061525
+       0.997253  0.071078 -0.019684
+       0.596637 -0.570605 -0.564287
+      -0.913938 -0.913938  0.405774
+       0.988250  0.988250 -0.134678
+       0.132145 -0.707968  0.693716
+      -0.248817  0.647542  0.720237
+       0.007813 -0.985473 -0.169591
+       0.757286 -0.602527 -0.251869
+       0.180517  0.982055 -0.054445
+      -0.725333 -0.682119  0.092380
+       0.907682 -0.381298  0.175207
+      -0.674398 -0.674398  0.098880
+      -0.984680 -0.984680 -0.100864
+      -0.574755 -0.574755  0.566790
+      -0.875515 -0.875515  0.359813
+      -0.029237 -0.029237  0.966948
+      -0.783502 -0.613453  0.098727
+       0.990234  0.990234  0.138524
+       0.000305  0.983734 -0.179601
+      -0.738945  0.647206 -0.187201
+      -0.074984 -0.320139 -0.944365
+       0.342479  0.622028  0.704093
+      -0.682119 -0.682119  0.092380
+      -0.201758 -0.201758  0.586261
+       0.701590  0.701590 -0.712394
+      -0.991699 -0.991699 -0.127293
+       0.007813 -0.985473 -0.169591
+       0.637349  0.637349  0.747032
+       0.585131  0.585131  0.251045
+       0.295144 -0.952513 -0.074618
+       0.740562 -0.277535  0.611957
+       0.741386 -0.606647 -0.286843
+       0.562029  0.562029 -0.102939
+       0.620045  0.620045  0.629780
+       0.248817 -0.968444 -0.013215
+       0.000885  0.000885 -0.503494
+      -0.637684 -0.637684  0.719016
+      -0.537736 -0.537736 -0.786889
+      -0.277535 -0.277535  0.611988
+       0.555071  0.555071 -0.306406
+      -0.556597 -0.556597  0.543413
+      -0.810114 -0.517014 -0.276345
+       0.507492 -0.581896 -0.635456
+      -0.000244  0.999969 -0.001709
+      -0.738395  0.617481  0.270943
+       0.768700  0.639454  0.012879
+      -0.998932 -0.030641 -0.033815
+      -0.000244  0.999969 -0.001709
+      -0.740562 -0.277535  0.611988
+      -0.602344 -0.602344 -0.020936
+      -0.606647 -0.606647 -0.286843
+      -0.971526 -0.971526 -0.088198
+      -0.992828 -0.992828 -0.031495
+       0.000000  0.987304 -0.158727
+      -0.701193 -0.701193 -0.266976
+       0.071078  0.071078 -0.019684
+       0.332255  0.588977 -0.736656
+      -0.320658 -0.320658  0.828211
+       0.002777 -0.569262  0.822138
+       0.000000 -0.000031 -1.000000
+       0.959685  0.959685  0.280984
+       0.671926  0.671926 -0.664022
+      -0.921506 -0.921506 -0.068239
+      -0.638234  0.575671  0.511093
+       0.000885  0.000885 -0.503494
+      -0.003113 -0.003113 -0.167913
+      -0.413648 -0.413648  0.434889
+       0.298654  0.944945 -0.133488
+       0.993957  0.993957  0.109714
+       0.046419  0.046419 -0.744133
+       0.686819  0.724082  0.062777
+       0.000000  0.993957  0.109714
+       0.983734  0.983734 -0.179601
+       0.325663 -0.923978 -0.200476
+       0.596637 -0.570605 -0.564287
+       0.555071  0.555071 -0.306406
+      -0.413587 -0.413587  0.434858
+      -0.602527 -0.602527 -0.251869
+       0.995300 -0.085025 -0.046022
+      -0.098209  0.995148  0.002503
+      -0.852962 -0.521775 -0.012452
+      -0.101871 -0.992615 -0.065676
+      -0.413648 -0.413648  0.434889
+       0.353587 -0.001892 -0.935392
+       0.999969  0.999969 -0.001709
+       0.248817  0.647542  0.720237
+       0.647206  0.647206 -0.187201
+      -0.626759 -0.626759  0.700949
+      -0.856044 -0.856044 -0.124210
+       0.526963  0.608997 -0.592761
+       0.000000  0.707053 -0.707144
+      -0.584307 -0.584307 -0.808557
+       0.965087  0.078860  0.249672
+      -0.771081  0.585131  0.251045
+      -0.602344 -0.602344 -0.020936
+       0.651234  0.651234 -0.754357
+      -0.987213 -0.987213 -0.050813
+      -0.845698 -0.019684  0.533250
+       0.000671 -0.973540  0.228462
+       0.581317  0.638752 -0.503983
+       0.546098  0.546098 -0.028108
+      -0.000031  0.566485 -0.824061
+       0.106815  0.980926 -0.162358
+       0.512650 -0.030671 -0.858028
+       0.978698  0.001251 -0.205145
+       0.663411 -0.024049 -0.747826
+      -0.593554 -0.593554 -0.803674
+      -0.977813 -0.977813 -0.053987
+       0.604053  0.604053 -0.122776
+      -0.993378 -0.993378 -0.030976
+       0.999908  0.001038  0.012177
+      -0.517014 -0.517014 -0.276345
+       0.968810  0.000305 -0.247719
+      -0.030671 -0.030671 -0.858028
+       0.773766  0.588427  0.234535
+      -0.683523 -0.683523 -0.203101
+       0.773766  0.588427  0.234535
+      -0.002045 -0.568865  0.822382
+       0.303537  0.070162  0.950194
+      -0.106815  0.980926 -0.162358
+       0.406934 -0.912473 -0.042085
+      -0.636280 -0.716239 -0.286508
+      -0.604877 -0.794733  0.049898
+      -0.054109 -0.054109 -0.776360
+       0.413221  0.413221 -0.402875
+      -0.792230  0.534806 -0.293802
+       0.581408 -0.525254  0.621296
+      -0.968444 -0.968444 -0.013215
+      -0.682791 -0.682791 -0.202734
+      -0.542314 -0.542314  0.468398
+      -0.360668  0.909574 -0.206336
+      -0.658467 -0.658467  0.739891
+       0.983734  0.983734 -0.179601
+      -0.971435 -0.971435 -0.137608
+      -0.602344 -0.602344 -0.020936
+       0.007355  0.653432  0.756920
+       0.046419  0.046419 -0.744133
+       0.608997  0.608997 -0.592761
+       0.037843  0.037843 -0.109989
+       0.584521  0.584521 -0.574877
+       0.999237  0.999237  0.016907
+      -0.592456 -0.592456 -0.132298
+       0.314463  0.612568  0.725150
+       0.041688 -0.593554 -0.803674
+       0.082492  0.651234 -0.754357
+       0.998108  0.998108  0.061251
+      -0.779199 -0.779199  0.625935
+       0.731681 -0.674398  0.098880
+       0.993561 -0.000549  0.113163
+       0.268227 -0.328410  0.905637
+      -0.624866 -0.624866 -0.550981
+      -0.784570 -0.201758  0.586261
+      -0.525254 -0.525254  0.621296
+       0.748009  0.501968  0.434095
+      -0.001892 -0.001892 -0.935392
+      -0.022065 -0.022065  0.126164
+       0.005158  0.005158 -0.047609
+       0.959105  0.959105  0.060060
+       0.201392 -0.675222  0.709555
+       0.655690  0.655690 -0.752190
+       0.000031  0.954711 -0.297433
+      -0.324015 -0.543535 -0.774316
+      -0.717429 -0.678610 -0.157262
+      -0.682119 -0.682119  0.092380
+      -0.971252  0.009644 -0.237800
+       0.082736  0.703696  0.705618
+       0.725883  0.725883 -0.218970
+       0.147038 -0.987304 -0.059816
+      -0.328410 -0.328410  0.905637
+      -0.783502 -0.613453  0.098727
+       0.959441  0.959441  0.067537
+      -0.787378  0.604053 -0.122776
+      -0.701193 -0.701193 -0.266976
+      -0.021485 -0.363445  0.931333
+      -0.320627 -0.320627  0.828181
+       0.975463  0.975463 -0.046602
+       0.292337  0.766778  0.571459
+      -0.046663  0.989227  0.138707
+       0.000305  0.000305 -0.247719
+       0.662099  0.662099 -0.098239
+       0.820643  0.562029 -0.102939
+      -0.987213 -0.987213 -0.050813
+       0.995148  0.995148  0.002503
+      -0.596057 -0.596057  0.003662
+      -0.593158 -0.593158 -0.799127
+       0.068331  0.068331 -0.997650
+      -0.320658 -0.320658  0.828211
+       0.734214  0.630238  0.252358
+       0.671041  0.671041  0.105167
+      -0.067873 -0.876705  0.476180
+       0.590228 -0.574755  0.566790
+      -0.001495 -0.030396  0.999512
+      -0.593341 -0.527024  0.608386
+       0.171117  0.171117  0.838343
+      -0.251930 -0.967528 -0.018738
+      -0.199377  0.979858  0.009644
+      -0.525254 -0.525254  0.621296
+      -0.043550 -0.997681 -0.052187
+       0.951476  0.951476 -0.307657
+      -0.424543 -0.424543  0.796075
+       0.634999  0.634999  0.006867
+      -0.054109 -0.054109 -0.776360
+       0.608142  0.608142 -0.046937
+       0.292337  0.766778  0.571459
+      -0.050264  0.627308 -0.777123
+      -0.948576 -0.948576 -0.129734
+       0.999359  0.999359 -0.010498
+      -0.276223 -0.637684  0.719016
+      -0.072115  0.988250 -0.134678
+      -0.391308 -0.391308  0.270699
+       0.724082  0.724082  0.062777
+       0.622028  0.622028  0.704093
+      -0.663411 -0.024049 -0.747826
+       0.821711  0.554399  0.131840
+       0.597156  0.597156  0.133274
+      -0.009766  0.981445  0.191382
+       0.799860 -0.413587  0.434858
+      -0.560228 -0.560228 -0.669790
+      -0.997253  0.071078 -0.019684
+       0.999146  0.010773 -0.039796
+      -0.787378  0.604053 -0.122776
+       0.534104  0.607624 -0.587756
+      -0.846828 -0.846828  0.531846
+       0.638752  0.638752 -0.503983
+       0.199377  0.979858  0.009644
+      -0.795648  0.605274  0.023469
+       0.002014  0.068331 -0.997650
+       0.657735  0.657735  0.135685
+       0.982299  0.003815 -0.187201
+      -0.168432 -0.168432  0.816553
+      -0.155339  0.982238  0.104953
+       0.000000 -0.000031 -1.000000
+      -0.079226  0.695242 -0.714347
+      -0.232643 -0.165716  0.958312
+       0.001038  0.001038  0.012177
+      -0.381298 -0.381298  0.175207
+       0.443159  0.621174  0.646290
+      -0.622303 -0.622303  0.782739
+       0.001282  0.001282 -0.182440
+      -0.985778 -0.003113 -0.167913
+      -0.556078 -0.556078 -0.104221
+       0.958861  0.958861  0.184027
+      -0.733879  0.671041  0.105167
+       0.044282 -0.588946 -0.806940
+       0.001251  0.001251 -0.205145
+      -0.003906 -0.690695 -0.723106
+       0.687551  0.687551  0.676138
+       0.010376  0.010376 -0.339030
+       0.118503  0.992889  0.008026
+       0.090457  0.649586 -0.754845
+       0.752617  0.658010  0.023560
+       0.959685  0.959685  0.280984
+       0.784570 -0.201758  0.586261
+       0.640034  0.640034  0.544603
+      -0.602527 -0.602527 -0.251869
+       0.593860  0.593860  0.173711
+      -0.998138 -0.014496  0.058962
+      -0.307230 -0.307230  0.951628
+      -0.508774 -0.508774 -0.097751
+      -0.507492 -0.581896 -0.635456
+       0.065127  0.655690 -0.752190
+       0.631306  0.631306  0.549516
+      -0.560472 -0.560472  0.036622
+      -0.741569  0.622883 -0.249092
+      -0.802911 -0.596057  0.003632
+       0.695883  0.695883 -0.114170
+       0.109806 -0.007263 -0.993896
+       0.000000 -0.000031 -1.000000
+       0.990814 -0.021943  0.133427
+      -0.002716 -0.002716 -0.061281
+      -0.007019 -0.007019 -0.181463
+      -0.825861 -0.563311  0.024415
+       0.003967 -0.622303  0.782739
+       0.627918 -0.054109 -0.776360
+       0.988250  0.988250 -0.134678
+      -0.674398 -0.674398  0.098880
+       0.608997  0.608997 -0.592761
+      -0.623920 -0.623920 -0.000366
+       0.958861  0.958861  0.184027
+       0.258889 -0.194800 -0.946043
+      -0.855251 -0.508744 -0.098300
+      -0.004700 -0.004700 -0.999664
+       0.026276 -0.005158 -0.999634
+      -0.952513 -0.952513 -0.074618
+      -0.757286 -0.602527 -0.251869
+       0.470656 -0.266610  0.841060
+       0.651204  0.651204 -0.756920
+      -0.096316  0.656301 -0.748314
+       0.721641 -0.690115  0.054384
+       0.098209  0.995148  0.002503
+       0.276528  0.959105  0.060060
+       0.298654  0.944945 -0.133488
+       0.163335 -0.643971  0.747368
+       0.707053  0.707053 -0.707144
+       0.631550  0.279885  0.723014
+      -0.971252  0.009644 -0.237800
+      -0.014039 -0.014039  0.284310
+       0.993957  0.993957  0.109714
+      -0.019684 -0.019684  0.533250
+      -0.592456 -0.592456 -0.132298
+      -0.015229  0.990234  0.138524
+      -0.076540 -0.580828 -0.810389
+       0.909787  0.909787 -0.204871
+       0.995331  0.010163 -0.095737
+      -0.052461 -0.033967  0.998016
+       0.990051  0.990051 -0.040834
+      -0.686819  0.724082  0.062777
+       0.530564  0.000488 -0.847621
+       0.000061 -0.913938  0.405774
+      -0.302652 -0.537736 -0.786889
+      -0.526963  0.608997 -0.592761
+      -0.525254 -0.525254  0.621296
+      -0.837245  0.546098 -0.028108
+       0.651601  0.012116 -0.758446
+      -0.004700 -0.004700 -0.999664
+      -0.190497 -0.593890  0.781640
+      -0.363445 -0.363445  0.931333
+       0.558428  0.558428  0.170843
+      -0.680288 -0.680288  0.628834
+      -0.635304 -0.517655 -0.573046
+       0.837123  0.546434 -0.024171
+      -0.794733 -0.794733  0.049898
+      -0.467818  0.620045  0.629780
+      -0.784265 -0.620350 -0.005707
+       0.708975  0.695883 -0.114170
+       0.782128  0.782128 -0.338878
+       0.980926  0.980926 -0.162358
+       0.067873 -0.876705  0.476180
+       0.630238  0.630238  0.252358
+       0.787378  0.604053 -0.122776
+      -0.590228 -0.574755  0.566790
+      -0.003937 -0.003937 -0.998230
+      -0.527024 -0.527024  0.608386
+       0.740562 -0.277535  0.611957
+      -0.215155  0.647877  0.730705
+      -0.907682 -0.381298  0.175207
+      -0.782098 -0.620869  0.052919
+      -0.967528 -0.967528 -0.018738
+       0.790948  0.597125  0.133305
+      -0.110538 -0.993378 -0.030976
+      -0.697439 -0.542314  0.468398
+      -0.856044 -0.856044 -0.124210
+       0.026276 -0.005158 -0.999634
+       0.076540 -0.580828 -0.810389
+      -0.000549  0.998108  0.061251
+       0.959105  0.959105  0.060060
+      -0.340312 -0.626759  0.700949
+       0.975738  0.975738 -0.218818
+       0.855312 -0.508774 -0.097751
+      -0.266610 -0.266610  0.841060
+       0.777062 -0.625141  0.073000
+       0.079226  0.695242 -0.714347
+      -0.613453 -0.613453  0.098727
+       0.782128  0.782128 -0.338878
+       0.000000  0.993957  0.109714
+      -0.097385 -0.593158 -0.799127
+      -0.772454  0.634999  0.006867
+       0.003906 -0.690695 -0.723106
+      -0.248817  0.647542  0.720237
+      -0.654378 -0.654378  0.725669
+       0.773278  0.555071 -0.306406
+      -0.811731  0.558428  0.170843
+      -0.258766  0.952116  0.162664
+      -0.998108 -0.002716 -0.061281
+      -0.560228 -0.560228 -0.669790
+       0.097385 -0.593158 -0.799127
+      -0.014893  0.701590 -0.712394
+       0.052950 -0.033906  0.998016
+      -0.628376 -0.556597  0.543413
+       0.979858  0.979858  0.009644
+       0.981445  0.981445  0.191382
+      -0.581896 -0.581896 -0.635456
+      -0.371502 -0.371502 -0.803339
+       0.997955 -0.004089  0.063326
+       0.031648 -0.779199  0.625935
+      -0.121891  0.932279 -0.340495
+      -0.708975  0.695883 -0.114170
+      -0.183538  0.664266  0.724570
+       0.978698  0.001251 -0.205145
+       0.037843  0.037843 -0.109989
+      -0.024049 -0.024049 -0.747826
+      -0.201758 -0.201758  0.586261
+      -0.000061 -0.040590 -0.999146
+      -0.792230  0.534806 -0.293802
+      -0.194800 -0.194800 -0.946043
+       0.777032 -0.627400  0.050630
+      -0.165716 -0.165716  0.958312
+       0.010773  0.010773 -0.039796
+      -0.165716 -0.165716  0.958312
+      -0.985778 -0.003113 -0.167913
+      -0.030396 -0.030396  0.999512
+       0.932279  0.932279 -0.340495
+       0.608997  0.608997 -0.592761
+      -0.707968 -0.707968  0.693716
+      -0.024049 -0.024049 -0.747826
+       0.003815  0.003815 -0.187201
+      -0.004273 -0.004273 -0.999634
+       0.419965  0.561449 -0.712973
+       0.510819 -0.608051 -0.607685
+      -0.525254 -0.525254  0.621296
+       0.015229  0.990234  0.138524
+      -0.000092  0.973846 -0.227149
+      -0.553117 -0.624866 -0.550981
+      -0.578539 -0.565355 -0.587909
+      -0.342479  0.622028  0.704093
+      -0.510819 -0.608051 -0.607685
+       0.671041  0.671041  0.105167
+      -0.654378 -0.654378  0.725669
+      -0.082736  0.703696  0.705618
+       0.992889  0.992889  0.008026
+       0.996918 -0.000519  0.078127
+      -0.819300  0.555742  0.140843
+       0.068331  0.068331 -0.997650
+      -0.030793 -0.030793  0.990875
+      -0.993652 -0.993652 -0.112278
+      -0.581317  0.638752 -0.503983
+       0.026185 -0.004273 -0.999634
+       0.638539  0.638539  0.751457
+       0.003876 -0.976592 -0.214972
+      -0.993164 -0.993164 -0.052217
+      -0.999603 -0.015625 -0.023133
+       0.657735  0.657735  0.135685
+       0.627918 -0.054109 -0.776360
+       0.253273 -0.029237  0.966948
+       0.610492  0.610492 -0.589770
+      -0.960204 -0.960204 -0.189673
+       0.010163  0.010163 -0.095737
+      -0.578539 -0.565355 -0.587909
+       0.852870 -0.522019 -0.009491
+      -0.982299  0.003815 -0.187201
+      -0.876705 -0.876705  0.476180
+      -0.031648 -0.779199  0.625935
+      -0.059328 -0.003937 -0.998230
+       0.982238  0.982238  0.104953
+       0.000214 -0.975646 -0.219245
+      -0.517655 -0.517655 -0.573046
+       0.989074  0.989074  0.017457
+       0.637349  0.637349  0.747032
+      -0.001892 -0.001892 -0.748863
+      -0.953337 -0.953337 -0.091586
+      -0.565355 -0.565355 -0.587909
+      -0.074984 -0.320139 -0.944365
+      -0.000061 -0.040590 -0.999146
+      -0.007355  0.653432  0.756920
+       0.647206  0.647206 -0.187201
+       0.723869  0.723869  0.064028
+      -0.912442 -0.912442 -0.042329
+      -0.007263 -0.007263 -0.993896
+       0.990966  0.990966  0.078433
+      -0.050264  0.627308 -0.777123
+       0.654561 -0.000122 -0.755974
+      -0.007263 -0.007263 -0.993896
+       0.024628 -0.004700 -0.999664
+       0.015229  0.990234  0.138524
+       0.352886  0.903623 -0.242714
+       0.662679 -0.001892 -0.748863
+       0.376507 -0.680288  0.628834
+       0.708975  0.695883 -0.114170
+      -0.007813 -0.661214  0.750114
+      -0.522843  0.782128 -0.338878
+       0.607624  0.607624 -0.587756
+       0.000000  0.993957  0.109714
+      -0.563311 -0.563311  0.024415
+      -0.320139 -0.320139 -0.944365
+      -0.023041 -0.023041  0.281411
+       0.009522  0.009522 -0.236763
+       0.555071  0.555071 -0.306406
+      -0.527024 -0.527024  0.608386
+      -0.014496 -0.014496  0.058962
+      -0.056276 -0.707724 -0.704215
+       0.701865 -0.682791 -0.202734
+       0.909574  0.909574 -0.206336
+       0.810114 -0.517014 -0.276345
+       0.601550  0.601550 -0.730613
+      -0.593036  0.789758 -0.156621
+      -0.731681 -0.674398  0.098880
+       0.196478  0.196478  0.826899
+      -0.005158 -0.005158 -0.999634
+      -0.708975  0.695883 -0.114170
+      -0.985473 -0.985473 -0.169591
+       0.232643 -0.165716  0.958312
+      -0.030641 -0.030641 -0.033815
+       0.000305  0.000305 -0.247719
+       0.528642  0.610492 -0.589770
+      -0.799829 -0.413648  0.434889
+      -0.973510 -0.973510 -0.207526
+      -0.320627 -0.320627  0.828181
+       0.989227  0.989227  0.138707
+      -0.593341 -0.527024  0.608386
+       0.980926  0.980926 -0.162358
+       0.639454  0.639454  0.012879
+      -0.424543 -0.424543  0.796045
+      -0.973540 -0.973540  0.228462
+      -0.997681 -0.997681 -0.052187
+       0.000885  0.000885 -0.503494
+      -0.495712  0.860408  0.118015
+       0.840999  0.528398 -0.116184
+      -0.690695 -0.690695 -0.723106
+      -0.065127  0.655690 -0.752190
+      -0.307230 -0.307230  0.951628
+       0.766778  0.766778  0.571459
+      -0.072115  0.988250 -0.134678
+      -0.879513 -0.391278  0.270699
+       0.131046 -0.030793  0.990875
+      -0.085025 -0.085025 -0.046022
+       0.086612  0.086612  0.251259
+       0.104312 -0.993164 -0.052217
+       0.068331  0.068331 -0.997650
+      -0.556597 -0.556597  0.543413
+      -0.216041  0.958861  0.184027
+      -0.773278  0.555071 -0.306406
+      -0.651601  0.012116 -0.758446
+      -0.952513 -0.952513 -0.074618
+       0.012116  0.012116 -0.758446
+      -0.637684 -0.637684  0.719016
+       0.554399  0.554399  0.131840
+       0.733879  0.671041  0.105167
+       0.647542  0.647542  0.720237
+      -0.661031 -0.701193 -0.266976
+       0.940703  0.010376 -0.339030
+      -0.000519 -0.000519  0.078066
+      -0.574755 -0.574755  0.566790
+       0.000000  0.975738 -0.218818
+      -0.015625 -0.015625 -0.023133
+      -0.291971  0.766686  0.571764
+      -0.528642  0.610492 -0.589770
+       0.954711  0.954711 -0.297433
+      -0.570605 -0.570605 -0.564287
+       0.647206  0.647206 -0.187201
+       0.647877  0.647877  0.730705
+      -0.541978  0.640034  0.544603
+       0.647542  0.647542  0.720237
+       0.796258 -0.310892 -0.518906
+      -0.508744 -0.508744 -0.098300
+       0.662679 -0.001892 -0.748863
+      -0.581317  0.638752 -0.503983
+      -0.794733 -0.794733  0.049898
+       0.000183 -0.663442  0.748192
+      -0.322947  0.601550 -0.730613
+       0.211402  0.211402  0.977203
+       0.999359  0.999359 -0.010529
+       0.588427  0.588427  0.234535
+       0.322398 -0.875515  0.359813
+      -0.903104 -0.903104 -0.109989
+       0.944945  0.944945 -0.133488
+      -0.662679 -0.001892 -0.748863
+      -0.625141 -0.625141  0.073000
+       0.165929  0.638539  0.751457
+       0.059328 -0.003937 -0.998230
+      -0.030671 -0.030671 -0.857997
+      -0.624866 -0.624866 -0.550981
+      -0.542314 -0.542314  0.468398
+      -0.637715  0.548631  0.540635
+      -0.690695 -0.690695 -0.723106
+      -0.019684 -0.019684  0.533250
+       0.540269  0.540269 -0.612781
+      -0.995331  0.010163 -0.095737
+       0.827326 -0.560472  0.036622
+       0.649586  0.649586 -0.754845
+       0.792413  0.608142 -0.046937
+      -0.581896 -0.581896 -0.635456
+      -0.487320 -0.560228 -0.669790
+       0.009644  0.009644 -0.237800
+       0.999664 -0.015473 -0.019379
+      -0.863979  0.000885 -0.503494
+       0.999237  0.999237  0.016907
+      -0.001892 -0.001892 -0.748863
+      -0.001892 -0.001892 -0.748863
+      -0.764489  0.644398  0.015168
+       0.948943  0.948943 -0.310800
+       0.766686  0.766686  0.571764
+      -0.436110 -0.536943  0.722129
+       0.644826  0.644826  0.729301
+       0.907682 -0.381298  0.175207
+      -0.592456 -0.592456 -0.132298
+       0.528398  0.528398 -0.116184
+      -0.661214 -0.661214  0.750114
+       0.063356  0.063356  0.077090
+       0.863979  0.000885 -0.503494
+       0.742912  0.662099 -0.098239
+       0.528642  0.610492 -0.589770
+      -0.960204 -0.960204 -0.189673
+       0.095889 -0.973510 -0.207526
+       0.540269  0.540269 -0.612781
+       0.000305  0.983734 -0.179601
+       0.279458  0.920591 -0.272744
+       0.845698 -0.019684  0.533250
+      -0.819300  0.555742  0.140843
+      -0.150914 -0.987213 -0.050813
+       0.000000  0.707053 -0.707144
+      -0.419996  0.561449 -0.712973
+      -0.627918 -0.054109 -0.776360
+      -0.522019 -0.522019 -0.009491
+      -0.596057 -0.596057  0.003632
+      -0.202277 -0.977813 -0.053987
+      -0.362255 -0.028657  0.931608
+      -0.537736 -0.537736 -0.786889
+       0.288644 -0.948576 -0.129734
+       0.990234  0.990234  0.138524
+       0.731681 -0.674398  0.098880
+       0.999573 -0.015900  0.024323
+       0.000061  0.267342  0.963591
+       0.766686  0.766686  0.571764
+       0.276223 -0.637684  0.719016
+      -0.568865 -0.568865  0.822382
+       0.608142  0.608142 -0.046937
+       0.604053  0.604053 -0.122776
+       0.134465  0.990051 -0.040834
+       0.725333 -0.682119  0.092380
+      -0.602527 -0.602527 -0.251869
+      -0.526963  0.608997 -0.592761
+       0.547166  0.631306  0.549516
+      -0.137700 -0.658467  0.739891
+       0.944945  0.944945 -0.133488
+       0.581408 -0.525254  0.621296
+      -0.999298 -0.999298 -0.037416
+      -0.995300 -0.085025 -0.046022
+      -0.314463  0.612568  0.725150
+      -0.876705 -0.876705  0.476180
+      -0.000244  0.999969 -0.001709
+      -0.609912 -0.609912  0.410199
+      -0.794733 -0.794733  0.049898
+      -0.000122 -0.000122 -0.755974
+       0.010773  0.010773 -0.039796
+      -0.584307 -0.584307 -0.808557
+      -0.973510 -0.973510 -0.207526
+      -0.993561 -0.000549  0.113163
+      -0.606647 -0.606647 -0.286843
+       0.988250  0.988250 -0.134678
+      -0.795648  0.605274  0.023469
+       0.738945  0.647206 -0.187201
+       0.701590  0.701590 -0.712394
+      -0.003937 -0.003937 -0.998230
+      -0.609912 -0.609912  0.410199
+       0.990631  0.990631 -0.043428
+      -0.570605 -0.570605 -0.564287
+       0.981445  0.981445  0.191382
+      -0.999573 -0.015900  0.024323
+      -0.391278 -0.391278  0.270699
+       0.010163  0.010163 -0.095737
+       0.046419  0.046419 -0.744133
+       0.998840  0.005158 -0.047609
+       0.588977  0.588977 -0.736656
+       0.977874  0.977874 -0.209143
+       0.622883  0.622883 -0.249092
+      -0.000031 -0.000031 -1.000000
+      -0.663442 -0.663442  0.748192
+      -0.204871 -0.960204 -0.189673
+       0.146214  0.989074  0.017457
+      -0.000549 -0.000549  0.113163
+       0.593341 -0.527024  0.608386
+      -0.643971 -0.643971  0.747368
+      -0.840724  0.528062 -0.119602
+      -0.353587 -0.001892 -0.935392
+       0.000885  0.000885 -0.503494
+      -0.201758 -0.201758  0.586261
+       0.811731  0.558428  0.170843
+       0.548631  0.548631  0.540635
+       0.725150  0.725150 -0.218482
+       0.108493  0.990966  0.078463
+      -0.770928 -0.619465  0.147984
+       0.534806  0.534806 -0.293802
+      -0.784570 -0.201758  0.586261
+      -0.024628 -0.004700 -0.999664
+      -0.179601 -0.054415  0.982208
+       0.998932 -0.030641 -0.033815
+      -0.921659 -0.921659 -0.067049
+      -0.565355 -0.565355 -0.587909
+      -0.040590 -0.040590 -0.999146
+      -0.983184  0.001282 -0.182440
+       0.056276 -0.707724 -0.704215
+      -0.999969  0.000000  0.004883
+       0.037843  0.037843 -0.109989
+      -0.026185 -0.004273 -0.999634
+      -0.707724 -0.707724 -0.704215
+       0.695883  0.695883 -0.114170
+       0.666372  0.046419 -0.744133
+      -0.306497  0.125126  0.943602
+       0.981689  0.981689  0.100681
+      -0.779199 -0.779199  0.625935
+      -0.953337 -0.953337 -0.091586
+       0.178533  0.949156 -0.259163
+       0.993194  0.037843 -0.109989
+       0.993194  0.037843 -0.109989
+      -0.219886 -0.971526 -0.088198
+       0.982055  0.982055 -0.054445
+       0.000488  0.000488 -0.847621
+      -0.054109 -0.054109 -0.776360
+      -0.972503 -0.972503 -0.076357
+      -0.968810  0.000305 -0.247719
+      -0.570605 -0.570605 -0.564287
+       0.212531 -0.654378  0.725669
+      -0.129276  0.990631 -0.043428
+      -0.976592 -0.976592 -0.214972
+      -0.923978 -0.923978 -0.200476
+      -0.003113 -0.003113 -0.167913
+       0.655690  0.655690 -0.752190
+       0.995148  0.995148  0.002503
+      -0.630268 -0.630268  0.142979
+       0.193274 -0.971435 -0.137608
+      -0.000031 -0.000031 -1.000000
+      -0.310892 -0.310892 -0.518906
+      -0.875515 -0.875515  0.359813
+      -0.005158 -0.005158 -0.999634
+       0.548631  0.548631  0.540635
+       0.952116  0.952116  0.162664
+       0.998108 -0.002716 -0.061281
+       0.666372  0.046419 -0.744133
+       0.958556  0.958556  0.141697
+       0.588977  0.588977 -0.736656
+      -0.085025 -0.085025 -0.046022
+      -0.006745  0.659566  0.751579
+       0.572558  0.584521 -0.574877
+      -0.580828 -0.580828 -0.810389
+      -0.381298 -0.381298  0.175207
+      -0.332255  0.588977 -0.736656
+      -0.682119 -0.682119  0.092380
+       0.000000  0.965056 -0.261940
+       0.012116  0.012116 -0.758446
+       0.183538  0.664266  0.724570
+      -0.626759 -0.626759  0.700949
+      -0.593554 -0.593554 -0.803674
+       0.000031  0.977874 -0.209143
+      -0.044282 -0.588946 -0.806940
+      -0.375713 -0.680135  0.629475
+       0.150914 -0.987213 -0.050813
+       0.071078  0.071078 -0.019684
+      -0.604877 -0.794733  0.049898
+      -0.651997  0.725883 -0.218970
+      -0.654561 -0.000122 -0.755974
+      -0.741386 -0.606647 -0.286843
+      -0.000031 -0.000031 -1.000000
+       0.644398  0.644398  0.015168
+       0.558428  0.558428  0.170843
+      -0.534104  0.607624 -0.587756
+       0.983184  0.001282 -0.182440
+      -0.074984 -0.320139 -0.944365
+      -0.194800 -0.194800 -0.946043
+      -0.000549 -0.000549  0.113163
+       0.622883  0.622883 -0.249092
+       0.012116  0.012116 -0.758446
+      -0.000519 -0.000519  0.078127
+       0.001251  0.001251 -0.205145
+      -0.002716 -0.002716 -0.061281
+      -0.007263 -0.007263 -0.993896
+      -0.298654  0.944945 -0.133488
+       0.000000  0.707053 -0.707144
+      -0.910276 -0.910276  0.413923
+      -0.674398 -0.674398  0.098880
+       0.534898  0.534898 -0.293283
+       0.821711  0.554399  0.131840
+      -0.541978  0.640034  0.544603
+       0.638539  0.638539  0.751457
+      -0.978698  0.001251 -0.205145
+      -0.004273 -0.004273 -0.999634
+       0.983367 -0.007019 -0.181463
+       0.267342  0.267342  0.963591
+       0.109806 -0.007263 -0.993896
+       0.863979  0.000885 -0.503494
+      -0.593036  0.789758 -0.156621
+      -0.193274 -0.971435 -0.137638
+       0.465377 -0.371502 -0.803339
+      -0.287637 -0.953337 -0.091586
+       0.965056  0.965056 -0.261940
+       0.723869  0.723869  0.064028
+      -0.040590 -0.040590 -0.999146
+       0.777062 -0.625141  0.073000
+       0.382153 -0.921659 -0.067049
+       0.622028  0.622028  0.704093
+      -0.740898  0.657735  0.135685
+       0.202277 -0.977813 -0.053987
+      -0.109806 -0.007263 -0.993896
+      -0.975646 -0.975646 -0.219245
+       0.647542  0.647542  0.720237
+       0.948943  0.948943 -0.310800
+       0.707053  0.707053 -0.707144
+      -0.165716 -0.165716  0.958312
+       0.414991 -0.903134 -0.109989
+      -0.620350 -0.620350 -0.005707
+      -0.794641 -0.592456 -0.132298
+       0.322947  0.601550 -0.730613
+       0.161565  0.981689  0.100681
+       0.987304  0.987304 -0.158727
+       0.605274  0.605274  0.023469
+      -0.059328 -0.003937 -0.998230
+       0.000000  0.993957  0.109714
+       0.072115  0.988250 -0.134678
+      -0.716239 -0.716239 -0.286508
+      -0.026276 -0.005158 -0.999634
+       0.121891  0.932279 -0.340495
+      -0.637684 -0.637684  0.719016
+      -0.178503  0.949187 -0.259163
+      -0.003937 -0.003937 -0.998230
+       0.971496  0.009522 -0.236763
+       0.546434  0.546434 -0.024171
+      -0.109806 -0.007263 -0.993896
+       0.638752  0.638752 -0.503983
+       0.026185 -0.004273 -0.999634
+      -0.003937 -0.003937 -0.998230
+       0.009796 -0.974151 -0.225623
+      -0.638234  0.575671  0.511093
+       0.000885  0.000885 -0.503494
+      -0.690115 -0.690115  0.054384
+       0.528062  0.528062 -0.119602
+       0.773278  0.555071 -0.306406
+       0.034730  0.999237  0.016907
+      -0.596637 -0.570605 -0.564287
+       0.738945  0.647206 -0.187201
+      -0.677999 -0.609912  0.410199
+       0.656301  0.656301 -0.748314
+       0.578539 -0.565355 -0.587909
+       0.000000  0.000000  0.004883
+      -0.003113 -0.003113 -0.167913
+      -0.956359 -0.029695  0.290628
+      -0.566301 -0.566301 -0.001465
+      -0.106937 -0.106937  0.974212
+       0.695242  0.695242 -0.714347
+       0.487320 -0.560228 -0.669790
+      -0.716239 -0.716239 -0.286508
+       0.228614  0.644826  0.729301
+      -0.996918 -0.000519  0.078066
+      -0.354381  0.657949 -0.664418
+      -0.837245  0.546098 -0.028108
+       0.637715  0.548631  0.540635
+      -0.601337 -0.601337  0.562731
+      -0.987304 -0.987304 -0.059816
+       0.115055 -0.992828 -0.031495
+      -0.287637 -0.953337 -0.091586
+       0.944945  0.944945 -0.133488
+      -0.572558  0.584521 -0.574877
+      -0.009766  0.981445  0.191382
+      -0.522843  0.782128 -0.338878
+       0.190497 -0.593890  0.781640
+       0.597125  0.597125  0.133305
+       0.551073  0.551073  0.533921
+       0.137700 -0.658467  0.739891
+      -0.912473 -0.912473 -0.042085
+       0.610492  0.610492 -0.589770
+      -0.993164 -0.993164 -0.052217
+       0.215094  0.975463 -0.046602
+       0.983184  0.001282 -0.182440
+       0.248817  0.647542  0.720237
+       0.944945  0.944945 -0.133488
+      -0.940703  0.010376 -0.339030
+       0.001282  0.001282 -0.182440
+       0.829646  0.556047  0.049471
+       0.703696  0.703696  0.705618
+       0.989227  0.989227  0.138707
+      -0.023041 -0.023041  0.281411
+      -0.095889 -0.973510 -0.207526
+      -0.797937 -0.602344 -0.020936
+       0.000000  0.959685  0.280984
+       0.001495 -0.030396  0.999512
+      -0.576678  0.540269 -0.612781
+       0.985778 -0.003113 -0.167913
+       0.546098  0.546098 -0.028108
+       0.604053  0.604053 -0.122776
+       0.959441  0.959441  0.067537
+      -0.024049 -0.024049 -0.747826
+       0.717429 -0.678610 -0.157262
+      -0.015900 -0.015900  0.024323
+      -0.000031  0.566485 -0.824061
+      -0.570605 -0.570605 -0.564287
+       0.651234  0.651234 -0.754357
+       0.810114 -0.517014 -0.276345
+      -0.985778 -0.003113 -0.167913
+      -0.000031 -0.000031 -1.000000
+      -0.001892 -0.001892 -0.935392
+      -0.212531 -0.654378  0.725669
+       0.653432  0.653432  0.756920
+      -0.953642 -0.029969  0.299387
+       0.695242  0.695242 -0.714347
+       0.000488  0.000488 -0.847621
+      -0.276223 -0.637684  0.719016
+      -0.264687  0.687551  0.676138
+       0.992889  0.992889  0.008026
+       0.561449  0.561449 -0.712973
+       0.588427  0.588427  0.234535
+       0.993957  0.993957  0.109714
+      -0.165929  0.638539  0.751457
+       0.640034  0.640034  0.544603
+       0.566485  0.566485 -0.824061
+      -0.993194  0.037843 -0.109989
+       0.000000 -0.000031 -1.000000
+      -0.459548 -0.320658  0.828211
+       0.637715  0.548631  0.540635
+       0.631306  0.631306  0.549516
+      -0.999146  0.010773 -0.039796
+       0.576678  0.540269 -0.612781
+       0.276528  0.959105  0.060060
+       0.763054 -0.630268  0.142979
+       0.000305  0.000305 -0.247719
+      -0.979156 -0.979156  0.202918
+      -0.132145 -0.707968  0.693716
+       0.009522  0.009522 -0.236763
+       0.990234  0.990234  0.138524
+      -0.298654  0.944945 -0.133488
+       0.612568  0.612568  0.725150
+       0.000000  0.999939  0.010559
+      -0.009857  0.987823  0.155095
+      -0.690695 -0.690695 -0.723106
+      -0.999969 -0.999969 -0.000793
+      -0.320139 -0.320139 -0.944365
+       0.608997  0.608997 -0.592761
+       0.561449  0.561449 -0.712973
+       0.920530  0.920530 -0.272958
+      -0.556597 -0.556597  0.543413
+      -0.431288 -0.424543  0.796045
+      -0.593890 -0.593890  0.781640
+       0.741569  0.622883 -0.249092
+       0.651601  0.012116 -0.758446
+       0.302652 -0.537736 -0.786889
+      -0.527024 -0.527024  0.608386
+       0.959288 -0.023041  0.281411
+      -0.000031 -0.000031 -1.000000
+      -0.596637 -0.570605 -0.564287
+       0.059328 -0.003937 -0.998230
+       0.360881  0.909787 -0.204871
+      -0.983245 -0.007050 -0.182073
+      -0.984680 -0.984680 -0.100864
+       0.659566  0.659566  0.751579
+       0.005158  0.005158 -0.047609
+      -0.258889 -0.194800 -0.946043
+      -0.565355 -0.565355 -0.587909
+      -0.530564  0.000488 -0.847621
+      -0.663411 -0.024049 -0.747826
+      -0.971435 -0.971435 -0.137638
+      -0.528642  0.610492 -0.589770
+      -0.273659  0.959441  0.067537
+       0.686911  0.723869  0.064028
+      -0.363445 -0.363445  0.931333
+       0.017518 -0.991699 -0.127293
+       0.973846  0.973846 -0.227149
+       0.840999  0.528398 -0.116184
+       0.652913  0.410291  0.636647
+      -0.382275 -0.921506 -0.068239
+       0.501968  0.501968  0.434095
+       0.581317  0.638752 -0.503983
+      -0.021943 -0.021943  0.133427
+      -0.163335 -0.643971  0.747368
+      -0.512711 -0.030671 -0.857997
+      -0.792413  0.608142 -0.046937
+       0.740898  0.657735  0.135685
+       0.001251  0.001251 -0.205145
+       0.179601 -0.054415  0.982208
+      -0.993194  0.037843 -0.109989
+       0.987823  0.987823  0.155095
+       0.612568  0.612568  0.725150
+      -0.678610 -0.678610 -0.157262
+       0.279885  0.279885  0.723014
+       0.232643 -0.165716  0.958312
      ) ;; normals
 
     (texcoords
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 1.000000
-      1.000000 1.000000
-      0.000000 1.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      1.000000 1.000000
-      1.000000 0.000000
-      1.000000 0.000000
-      0.000000 0.000000
-      0.000000 0.000000
-      1.000000 0.000000
-      1.000000 1.000000
-      0.000000 0.000000
+      0.220364 0.982859
+      0.111159 0.306754
+      0.838172 0.530255
+      0.414672 0.170444
+      0.896231 0.306951
+      0.204580 0.215749
+      0.903752 0.248227
+      0.052518 0.792598
+      0.300131 0.334399
+      0.736706 0.820330
+      0.145931 0.986520
+      0.808901 0.632117
+      0.171549 0.302208
+      0.495987 0.194672
+      0.357173 0.601556
+      0.594666 0.501019
+      0.425600 0.143580
+      0.758350 0.321901
+      0.044527 0.898816
+      0.146167 0.541326
+      0.158808 0.285054
+      0.394710 0.124410
+      0.823599 0.233878
+      0.820253 0.285387
+      0.338596 0.478543
+      0.137201 0.641063
+      0.658623 0.050076
+      0.993778 0.094303
+      0.832757 0.306771
+      0.411789 0.600208
+      0.586334 0.605132
+      0.720557 0.825094
+      0.459398 0.096806
+      0.512783 0.288260
+      0.145124 0.599741
+      0.733740 0.296511
+      0.465335 0.119619
+      0.662309 0.691178
+      0.618615 0.129022
+      0.196205 0.878802
+      0.512169 0.425740
+      0.831649 0.676066
+      0.455601 0.246905
+      0.980080 0.078664
+      0.440586 0.714660
+      0.071631 0.252837
+      0.838172 0.530255
+      0.488941 0.114630
+      0.157394 0.068298
+      0.225347 0.829217
+      0.255312 0.369193
+      0.331786 0.715295
+      0.643532 0.360548
+      0.178490 0.033565
+      0.983352 0.447511
+      0.931604 0.299183
+      0.099453 0.646943
+      0.250158 0.067596
+      0.897949 0.290792
+      0.915036 0.269567
+      0.076260 0.599232
+      0.915036 0.269567
+      0.867233 0.115022
+      0.060094 0.299183
+      0.157394 0.068298
+      0.425369 0.082133
+      0.752595 0.351600
+      0.421023 0.254861
+      0.738962 0.536388
+      0.434778 0.584064
+      0.403563 0.881187
+      0.159463 0.354413
+      0.158808 0.285054
+      0.738962 0.536388
+      0.578516 0.421564
+      0.539896 0.640504
+      0.526215 0.081230
+      0.413326 0.251586
+      0.223983 0.885335
+      0.588966 0.474047
+      0.401802 0.965345
+      0.468212 0.716713
+      0.309542 0.420396
+      0.820150 0.302174
+      0.435975 0.123798
+      0.922097 0.741421
+      0.533241 0.396592
+      0.865641 0.307042
+      0.737088 0.454711
+      0.114893 0.815694
+      0.348698 0.779587
+      0.773033 0.100982
+      0.578516 0.421564
+      0.838187 0.489877
+      0.111654 0.460525
+      0.816119 0.173481
+      0.376043 0.877891
+      0.445299 0.268095
+      0.127841 0.315994
+      0.952718 0.490245
+      0.897949 0.290792
+      0.514235 0.050112
+      0.413518 0.713050
+      0.292365 0.545587
+      0.774146 0.242987
+      0.379329 0.563712
+      0.769901 0.400488
+      0.573233 0.503026
+      0.695007 0.642652
+      0.858756 0.146828
+      0.543085 0.682137
+      0.755666 0.632095
+      0.348396 0.884445
+      0.682426 0.822439
+      0.167450 0.068356
+      0.610854 0.294837
+      0.285263 0.156039
+      0.486449 0.821891
+      0.679259 0.878850
+      0.085343 0.822253
+      0.255312 0.369193
+      0.142783 0.493292
+      0.411588 0.584655
+      0.755728 0.673479
+      0.751939 0.739935
+      0.378344 0.243104
+      0.928922 0.217330
+      0.952640 0.403465
+      0.436317 0.146217
+      0.099453 0.646943
+      0.569821 0.476480
+      0.722248 0.215149
+      0.889408 0.316330
+      0.008918 0.188391
+      0.763279 0.174015
+      0.171445 0.285387
+      0.050645 0.971776
+      0.610854 0.294837
+      0.939348 0.609602
+      0.496896 0.171926
+      0.512225 0.844064
+      0.396427 0.438621
+      0.621340 0.214047
+      0.478877 0.889975
+      0.321008 0.515410
+      0.806452 0.489865
+      0.732697 0.676348
+      0.641477 0.610605
+      0.428184 0.460411
+      0.509655 0.539721
+      0.401802 0.965345
+      0.072152 0.350442
+      0.205909 0.380597
+      0.171549 0.302174
+      0.337432 0.387822
+      0.487031 0.226083
+      0.815391 0.559364
+      0.938653 0.195956
+      0.352167 0.981547
+      0.477206 0.474983
+      0.863858 0.315994
+      0.414339 0.120605
+      0.399474 0.983958
+      0.170258 0.211377
+      0.309542 0.420396
+      0.716536 0.882859
+      0.823599 0.233878
+      0.808851 0.673310
+      0.233358 0.106389
+      0.559518 0.396191
+      0.941861 0.238306
+      0.754517 0.602332
+      0.320997 0.603512
+      0.612452 0.539689
+      0.093750 0.290792
+      0.808851 0.673310
+      0.074344 0.331122
+      0.865764 0.287039
+      0.004244 0.750846
+      0.844800 0.655791
+      0.893083 0.120045
+      0.125914 0.314212
+      0.284563 0.113617
+      0.899584 0.097071
+      0.342289 0.644313
+      0.470815 0.171683
+      0.433497 0.170910
+      0.769829 0.536543
+      0.693060 0.740905
+      0.162511 0.641586
+      0.465335 0.119619
+      0.145124 0.599741
+      0.073432 0.776091
+      0.263102 0.387498
+      0.357959 0.587384
+      0.665390 0.791177
+      0.702216 0.492611
+      0.372555 0.324528
+      0.571599 0.920953
+      0.637975 0.118920
+      0.406988 0.808654
+      0.764195 0.206325
+      0.583870 0.173207
+      0.137201 0.641063
+      0.573233 0.503026
+      0.810124 0.602459
+      0.410859 0.767967
+      0.331786 0.715295
+      0.586532 0.456853
+      0.720294 0.174092
+      0.205784 0.361222
+      0.644402 0.402356
+      0.601982 0.661605
+      0.795453 0.777490
+      0.472619 0.063063
+      0.274429 0.731537
+      0.372555 0.324528
+      0.125934 0.287039
+      0.734864 0.631770
+      0.244996 0.023627
+      0.782342 0.718952
+      0.336960 0.299152
+      0.426915 0.123118
+      0.672904 0.914577
+      0.889481 0.304381
+      0.385888 0.078527
+      0.414672 0.170444
+      0.832757 0.306771
+      0.948562 0.171222
+      0.812353 0.530246
+      0.832757 0.306771
+      0.681415 0.050008
+      0.514235 0.050112
+      0.952660 0.356601
+      0.543334 0.538362
+      0.317566 0.547181
+      0.643532 0.360548
+      0.122925 0.157496
+      0.417191 0.084819
+      0.496683 0.146214
+      0.161274 0.712640
+      0.594666 0.501019
+      0.073432 0.776091
+      0.869969 0.746509
+      0.414339 0.120605
+      0.029622 0.681962
+      0.828825 0.264834
+      0.205462 0.320284
+      0.692550 0.210328
+      0.804749 0.691455
+      0.592578 0.735974
+      0.704478 0.171234
+      0.782342 0.742691
+      0.203869 0.135891
+      0.887481 0.318112
+      0.399474 0.983958
+      0.158613 0.665396
+      0.168571 0.882161
+      0.774910 0.450911
+      0.708008 0.399282
+      0.810124 0.602459
+      0.948562 0.171222
+      0.433497 0.170910
+      0.440308 0.663929
+      0.110608 0.389513
+      0.865857 0.302263
+      0.348396 0.884445
+      0.685448 0.756471
+      0.132165 0.663685
+      0.197011 0.984623
+      0.643554 0.539549
+      0.889481 0.304381
+      0.739077 0.358737
+      0.927930 0.103188
+      0.123322 0.969157
+      0.533241 0.396592
+      0.102217 0.304381
+      0.927950 0.171694
+      0.339259 0.347230
+      0.778663 0.067291
+      0.197011 0.984623
+      0.876100 0.762198
+      0.781197 0.280836
+      0.878738 0.255695
+      0.995977 0.737175
+      0.666798 0.810787
+      0.110706 0.596929
+      0.339750 0.421234
+      0.076025 0.540840
+      0.704478 0.171234
+      0.228172 0.033078
+      0.158941 0.306771
+      0.201575 0.765846
+      0.204235 0.177189
+      0.375540 0.672832
+      0.478445 0.254318
+      0.541155 0.460485
+      0.703357 0.949280
+      0.681415 0.050008
+      0.622922 0.792684
+      0.272869 0.463085
+      0.725228 0.129516
+      0.782342 0.718952
+      0.125841 0.302263
+      0.352167 0.981547
+      0.708698 0.705051
+      0.725228 0.129516
+      0.816704 0.138614
+      0.317276 0.886991
+      0.568394 0.460867
+      0.838176 0.351607
+      0.520672 0.970256
+      0.588311 0.017978
+      0.826416 0.081386
+      0.302160 0.352818
+      0.663449 0.938991
+      0.059312 0.844474
+      0.941861 0.238306
+      0.643554 0.539549
+      0.511771 0.502425
+      0.816119 0.173481
+      0.754517 0.602332
+      0.935154 0.123568
+      0.782342 0.761378
+      0.125175 0.204147
+      0.800997 0.816884
+      0.127841 0.315994
+      0.205035 0.268732
+      0.149515 0.458585
+      0.159463 0.354413
+      0.801234 0.614881
+      0.839537 0.050047
+      0.607380 0.453404
+      0.203556 0.077562
+      0.588383 0.320050
+      0.100252 0.681620
+      0.223983 0.885335
+      0.073816 0.458063
+      0.253612 0.963936
+      0.293702 0.515002
+      0.472412 0.984253
+      0.164768 0.172471
+      0.611900 0.254669
+      0.623121 0.173281
+      0.064812 0.645048
+      0.238840 0.210752
+      0.993778 0.094303
+      0.814459 0.357309
+      0.622922 0.792684
+      0.038667 0.544363
+      0.204580 0.215749
+      0.428184 0.460411
+      0.492212 0.982900
+      0.672104 0.542220
+      0.605183 0.823212
+      0.158941 0.306771
+      0.921967 0.403492
+      0.411588 0.584655
+      0.781197 0.280836
+      0.725229 0.011255
+      0.167450 0.068356
+      0.608680 0.912902
+      0.123322 0.969157
+      0.608680 0.912902
+      0.163056 0.115937
+      0.680604 0.778857
+      0.398331 0.099725
+      0.470209 0.194183
+      0.875456 0.089273
+      0.509702 0.476346
+      0.765008 0.137003
+      0.903752 0.248227
+      0.832891 0.285054
+      0.720294 0.174092
+      0.034402 0.295832
+      0.936847 0.082296
+      0.731478 0.090321
+      0.719864 0.659390
+      0.732590 0.256059
+      0.526736 0.897933
+      0.104217 0.318112
+      0.887085 0.172475
+      0.633567 0.320230
+      0.008918 0.188391
+      0.233800 0.670833
+      0.433551 0.600006
+      0.162133 0.024102
+      0.752551 0.863173
+      0.755728 0.673479
+      0.795453 0.777490
+      0.509655 0.539721
+      0.161956 0.263198
+      0.470209 0.194183
+      0.758415 0.017684
+      0.708869 0.322086
+      0.060094 0.299183
+      0.174724 0.496534
+      0.935154 0.123568
+      0.583036 0.205288
+      0.812198 0.740476
+      0.170490 0.966677
+      0.738193 0.400229
+      0.763395 0.614826
+      0.033024 0.640786
+      0.809873 0.717372
+      0.201575 0.765846
+      0.550410 0.584438
+      0.446086 0.473648
+      0.643769 0.642652
+      0.472412 0.984253
+      0.897949 0.290792
+      0.122090 0.031344
+      0.233800 0.670833
+      0.508733 0.397256
+      0.498555 0.776127
+      0.407378 0.460142
+      0.702216 0.492611
+      0.447168 0.460559
+      0.196205 0.878802
+      0.104120 0.302256
+      0.164768 0.172471
+      0.887085 0.172475
+      0.162511 0.641586
+      0.598135 0.535848
+      0.541268 0.720548
+      0.264431 0.514910
+      0.582618 0.953909
+      0.434927 0.193050
+      0.770133 0.363721
+      0.487538 0.437177
+      0.865641 0.307042
+      0.205909 0.380597
+      0.338293 0.670968
+      0.583036 0.205288
+      0.036062 0.346414
+      0.612908 0.090103
+      0.607380 0.453404
+      0.223862 0.962597
+      0.448619 0.967698
+      0.754580 0.716245
+      0.695113 0.627219
+      0.752595 0.351600
+      0.122934 0.115028
+      0.424705 0.104536
+      0.362259 0.433964
+      0.829568 0.631832
+      0.425600 0.143580
+      0.125175 0.204147
+      0.930221 0.312196
+      0.110606 0.609575
+      0.100252 0.681620
+      0.462117 0.771709
+      0.285751 0.586270
+      0.033024 0.640786
+      0.774910 0.450911
+      0.669571 0.673917
+      0.223862 0.962597
+      0.196405 0.672642
+      0.371131 0.710578
+      0.782338 0.674393
+      0.225347 0.829217
+      0.550410 0.584438
+      0.420801 0.237057
+      0.622985 0.659834
+      0.233358 0.106389
+      0.952680 0.447538
+      0.110608 0.389513
+      0.832757 0.306771
+      0.160412 0.313688
+      0.732870 0.779222
+      0.063313 0.199470
+      0.324143 0.984938
+      0.927440 0.761077
+      0.039793 0.452825
+      0.235163 0.582838
+      0.983390 0.490217
+      0.568394 0.460867
+      0.586532 0.456853
+      0.030966 0.720128
+      0.252049 0.353675
+      0.860798 0.357328
+      0.662309 0.691178
+      0.632909 0.750965
+      0.710626 0.539022
+      0.471216 0.585974
+      0.896040 0.220987
+      0.111159 0.306754
+      0.893083 0.120045
+      0.641089 0.674518
+      0.588311 0.017978
+      0.110606 0.609575
+      0.648458 0.209257
+      0.492212 0.982900
+      0.924860 0.146829
+      0.716142 0.671577
+      0.863991 0.530264
+      0.250094 0.478528
+      0.526215 0.081230
+      0.869969 0.746509
+      0.179845 0.621962
+      0.993202 0.559365
+      0.828825 0.264834
+      0.530680 0.109328
+      0.986924 0.111070
+      0.663190 0.642658
+      0.399876 0.185002
+      0.038586 0.327344
+      0.782331 0.596486
+      0.471820 0.964375
+      0.959486 0.726742
+      0.029738 0.848334
+      0.541075 0.476656
+      0.927930 0.103188
+      0.925233 0.124253
+      0.119318 0.985866
+      0.200664 0.710664
+      0.436289 0.769761
+      0.283819 0.202747
+      0.050645 0.971776
+      0.959486 0.726742
+      0.375266 0.342569
+      0.348698 0.779587
+      0.472721 0.645863
+      0.174218 0.106646
+      0.666798 0.810787
+      0.099927 0.965832
+      0.248033 0.262458
+      0.565102 0.879042
+      0.706215 0.083452
+      0.806487 0.400080
+      0.663449 0.938991
+      0.183477 0.545362
+      0.612453 0.402601
+      0.695113 0.627219
+      0.223457 0.780019
+      0.060094 0.299183
+      0.146905 0.574606
+      0.582290 0.136456
+      0.541268 0.720548
+      0.375347 0.808723
+      0.876100 0.762198
+      0.859522 0.195629
+      0.806452 0.489865
+      0.569821 0.476480
+      0.426237 0.984986
+      0.102291 0.316330
+      0.487031 0.226083
+      0.769829 0.536543
+      0.171446 0.285409
+      0.433512 0.102880
+      0.524024 0.263389
+      0.029622 0.681962
+      0.863955 0.300138
+      0.447168 0.460559
+      0.429384 0.885468
+      0.623558 0.812282
+      0.796135 0.844297
+      0.345154 0.559586
+      0.769901 0.400488
+      0.931604 0.299183
+      0.758415 0.017684
+      0.074344 0.331122
+      0.357959 0.587384
+      0.507729 0.643895
+      0.618615 0.129022
+      0.932081 0.240102
+      0.782332 0.613407
+      0.863858 0.315994
+      0.948925 0.121038
+      0.407378 0.460142
+      0.553613 0.808452
+      0.865764 0.287039
+      0.519277 0.792634
+      0.370450 0.765425
+      0.623558 0.812282
+      0.109306 0.355377
+      0.064812 0.645048
+      0.282339 0.389055
+      0.346939 0.828571
+      0.645487 0.457253
+      0.592578 0.735974
+      0.732590 0.256059
+      0.244996 0.023627
+      0.092791 0.890871
+      0.520672 0.970256
+      0.512225 0.844064
+      0.448619 0.967698
+      0.821527 0.109682
+      0.462641 0.219855
+      0.406988 0.808654
+      0.481432 0.089062
+      0.567725 0.751314
+      0.967716 0.749785
+      0.473736 0.681204
+      0.264212 0.546047
+      0.645225 0.495100
+      0.887578 0.302256
+      0.496896 0.171926
+      0.379329 0.563712
+      0.812198 0.740476
+      0.697529 0.658548
+      0.928922 0.217330
+      0.446689 0.559908
+      0.488941 0.114630
+      0.110706 0.596929
+      0.865764 0.287039
+      0.110034 0.771677
+      0.471914 0.602265
+      0.073688 0.897837
+      0.074088 0.393998
+      0.752551 0.863173
+      0.375130 0.645220
+      0.073816 0.458063
+      0.704025 0.119343
+      0.263102 0.387498
+      0.605469 0.490806
+      0.255418 0.587065
+      0.926387 0.193990
+      0.286059 0.604281
+      0.857697 0.710516
+      0.114893 0.815694
+      0.720342 0.642653
+      0.632909 0.750965
+      0.733485 0.051815
+      0.303719 0.461782
+      0.512444 0.583101
+      0.119318 0.985866
+      0.171549 0.302208
+      0.203869 0.135891
+      0.399876 0.185002
+      0.432614 0.216226
+      0.670180 0.611587
+      0.567725 0.751314
+      0.574937 0.539252
+      0.398331 0.099725
+      0.250158 0.067596
+      0.055648 0.683724
+      0.838221 0.400092
+      0.095467 0.306951
+      0.114231 0.068388
+      0.436289 0.769761
+      0.317566 0.547181
+      0.809873 0.717372
+      0.644402 0.402356
+      0.255244 0.887837
+      0.293702 0.515002
+      0.170490 0.966677
+      0.869795 0.658794
+      0.264212 0.546047
+      0.459398 0.096806
+      0.029738 0.848334
+      0.411789 0.600208
+      0.093750 0.290792
+      0.640054 0.731268
+      0.573953 0.241692
+      0.567517 0.279276
+      0.468212 0.716713
+      0.205238 0.012105
+      0.487538 0.437177
+      0.869398 0.609442
+      0.220364 0.982859
+      0.679259 0.878850
+      0.133296 0.714262
+      0.619345 0.642647
+      0.296881 0.255542
+      0.061477 0.312196
+      0.429732 0.238839
+      0.814575 0.756496
+      0.168571 0.882161
+      0.491881 0.968629
+      0.165019 0.809340
+      0.939010 0.217445
+      0.887899 0.277010
+      0.838203 0.445691
+      0.336856 0.328929
+      0.320271 0.585367
+      0.338225 0.250553
+      0.111101 0.335949
+      0.738193 0.400229
+      0.471914 0.602265
+      0.575661 0.394518
+      0.673727 0.364257
+      0.254040 0.604473
+      0.410859 0.767967
+      0.719938 0.625956
+      0.865641 0.307042
+      0.113025 0.257117
+      0.841136 0.289880
+      0.445299 0.268095
+      0.731478 0.090321
+      0.321008 0.515410
+      0.239353 0.067721
+      0.455601 0.246905
+      0.478445 0.254318
+      0.601993 0.877057
+      0.462641 0.219855
+      0.077255 0.612825
+      0.634594 0.269929
+      0.535085 0.138057
+      0.610453 0.602361
+      0.865857 0.302263
+      0.311666 0.789935
+      0.440308 0.663929
+      0.607856 0.580655
+      0.379639 0.110706
+      0.612452 0.539689
+      0.260386 0.418761
+      0.778663 0.067291
+      0.074827 0.574097
+      0.425249 0.967044
+      0.228172 0.033078
+      0.514970 0.721858
+      0.255418 0.587065
+      0.417191 0.084819
+      0.643769 0.642652
+      0.937574 0.104856
+      0.927799 0.529293
+      0.396427 0.438621
+      0.038586 0.327344
+      0.983352 0.447511
+      0.839537 0.050047
+      0.832891 0.285054
+      0.645487 0.457253
+      0.453995 0.888542
+      0.244419 0.114870
+      0.820150 0.302174
+      0.039633 0.606920
+      0.635976 0.083283
+      0.754580 0.716245
+      0.161093 0.768662
+      0.385888 0.078527
+      0.710432 0.921842
+      0.471820 0.964375
+      0.737328 0.492273
+      0.473736 0.681204
+      0.452622 0.984264
+      0.104120 0.302256
+      0.795560 0.032498
+      0.674818 0.401417
+      0.484730 0.554236
+      0.887751 0.195134
+      0.680604 0.495461
+      0.161274 0.712640
+      0.697529 0.658548
+      0.457054 0.815249
+      0.200664 0.710664
+      0.060094 0.299183
+      0.964078 0.655877
+      0.448471 0.069310
+      0.569821 0.067236
+      0.543085 0.682137
+      0.077255 0.612825
+      0.924860 0.146829
+      0.111080 0.543759
+      0.296881 0.255542
+      0.239353 0.067721
+      0.409516 0.641398
+      0.896231 0.306951
+      0.109306 0.355377
+      0.742812 0.846583
+      0.252177 0.459040
+      0.481432 0.089062
+      0.110034 0.771677
+      0.428176 0.474365
+      0.692550 0.210328
+      0.886839 0.146175
+      0.903751 0.700798
+      0.117850 0.889470
+      0.759982 0.691801
+      0.320271 0.585367
+      0.611075 0.051869
+      0.875456 0.089273
+      0.126057 0.307042
+      0.178490 0.033565
+      0.936594 0.144173
+      0.432614 0.216226
+      0.904246 0.658664
+      0.061477 0.312196
+      0.158941 0.306771
+      0.440586 0.714660
+      0.127743 0.300138
+      0.142783 0.493292
+      0.939010 0.217445
+      0.832891 0.285054
+      0.253848 0.834154
+      0.309754 0.388214
+      0.286059 0.604281
+      0.699681 0.449317
+      0.986507 0.712716
+      0.031420 0.246077
+      0.865641 0.307042
+      0.413518 0.713050
+      0.292971 0.067342
+      0.512444 0.583101
+      0.114231 0.068388
+      0.324143 0.984938
+      0.858525 0.172722
+      0.080070 0.492860
+      0.863991 0.530264
+      0.897949 0.290792
+      0.541075 0.476656
+      0.966455 0.100012
+      0.425369 0.082133
+      0.938665 0.690073
+      0.887481 0.318112
+      0.612453 0.402601
+      0.243614 0.543426
+      0.110860 0.575300
+      0.796135 0.844297
+      0.814459 0.357309
+      0.926387 0.193990
+      0.104217 0.318112
+      0.560054 0.424141
+      0.471038 0.145566
+      0.125934 0.287039
+      0.573953 0.241692
+      0.431455 0.811770
+      0.708698 0.705051
+      0.004244 0.750846
+      0.535619 0.172678
+      0.205462 0.320284
+      0.708869 0.322086
+      0.941620 0.256237
+      0.534803 0.203390
+      0.375424 0.983269
+      0.574962 0.100690
+      0.073724 0.301371
+      0.281220 0.421551
+      0.983312 0.403438
+      0.470815 0.171683
+      0.271748 0.480740
+      0.938726 0.658536
+      0.425249 0.967044
+      0.408657 0.474423
+      0.299588 0.305179
+      0.966455 0.100012
+      0.737328 0.492273
+      0.863955 0.300138
+      0.795560 0.032498
+      0.055648 0.683724
+      0.240258 0.715352
+      0.171549 0.302174
+      0.528793 0.232651
+      0.764195 0.206325
+      0.320997 0.603512
+      0.197012 0.645615
+      0.975586 0.362102
+      0.624003 0.980959
+      0.576476 0.696388
+      0.495987 0.194672
+      0.079361 0.984532
+      0.584835 0.585458
+      0.161956 0.263198
+      0.885108 0.063091
+      0.085343 0.822253
+      0.665032 0.979351
+      0.869955 0.400104
+      0.470081 0.275483
+      0.512783 0.288260
+      0.598135 0.535848
+      0.076260 0.599232
+      0.860021 0.445699
+      0.244419 0.114870
+      0.423402 0.216342
+      0.496683 0.146214
+      0.710432 0.921842
+      0.820149 0.302208
+      0.235163 0.582838
+      0.111101 0.335949
+      0.582618 0.953909
+      0.339259 0.347230
+      0.260699 0.790315
+      0.903751 0.700798
+      0.456906 0.441254
+      0.133296 0.714262
+      0.896231 0.306951
+      0.223457 0.780019
+      0.146905 0.574606
+      0.283819 0.202747
+      0.865784 0.314212
+      0.716536 0.882859
+      0.390437 0.585083
+      0.751939 0.739935
+      0.448471 0.069310
+      0.980080 0.078664
+      0.338293 0.670968
+      0.292971 0.067342
+      0.285751 0.586270
+      0.253612 0.963936
+      0.977707 0.529248
+      0.927440 0.761077
+      0.378030 0.959234
+      0.623064 0.625262
+      0.478877 0.889975
+      0.674818 0.401417
+      0.099927 0.965832
+      0.462117 0.771709
+      0.125934 0.287039
+      0.663190 0.642658
+      0.867233 0.115022
+      0.345638 0.197014
+      0.716577 0.614838
+      0.376205 0.292936
+      0.428176 0.474365
+      0.932081 0.240102
+      0.564695 0.720663
+      0.074088 0.393998
+      0.099349 0.985883
+      0.776787 0.488033
+      0.535619 0.172678
+      0.374732 0.462265
+      0.693060 0.740905
+      0.574962 0.100690
+      0.297802 0.731423
+      0.970420 0.124870
+      0.719938 0.625956
+      0.734864 0.631770
+      0.806469 0.445679
+      0.612908 0.090103
+      0.338596 0.478543
+      0.704025 0.119343
+      0.857697 0.710516
+      0.560054 0.424141
+      0.284886 0.030544
+      0.346939 0.828571
+      0.922097 0.741421
+      0.140559 0.812335
+      0.887578 0.302256
+      0.111080 0.543759
+      0.073724 0.301371
+      0.150113 0.394516
+      0.812353 0.530246
+      0.782332 0.613407
+      0.930798 0.362142
+      0.264431 0.514910
+      0.887751 0.195134
+      0.749089 0.755881
+      0.187932 0.401063
+      0.622421 0.940600
+      0.113025 0.257117
+      0.509702 0.476346
+      0.174724 0.496534
+      0.285263 0.156039
+      0.203862 0.125710
+      0.125914 0.314212
+      0.782342 0.742691
+      0.149515 0.458585
+      0.041196 0.620272
+      0.243659 0.171689
+      0.170258 0.211377
+      0.039793 0.452825
+      0.931592 0.447557
+      0.409516 0.641398
+      0.534803 0.203390
+      0.553709 0.306215
+      0.602968 0.713046
+      0.571599 0.920953
+      0.931604 0.299183
+      0.938653 0.195956
+      0.952660 0.356601
+      0.986924 0.111070
+      0.930221 0.312196
+      0.146875 0.968455
+      0.403563 0.881187
+      0.567517 0.279276
+      0.073688 0.897837
+      0.930221 0.312196
+      0.733485 0.051815
+      0.311666 0.789935
+      0.336960 0.299152
+      0.063313 0.199470
+      0.869332 0.227261
+      0.931592 0.447557
+      0.860021 0.445699
+      0.105620 0.716432
+      0.763395 0.614826
+      0.150113 0.394516
+      0.820253 0.285387
+      0.722248 0.215149
+      0.512169 0.425740
+      0.172863 0.985364
+      0.376205 0.292936
+      0.858756 0.146828
+      0.543334 0.538362
+      0.593641 0.349539
+      0.059312 0.844474
+      0.586334 0.605132
+      0.719864 0.659390
+      0.378030 0.959234
+      0.061477 0.312196
+      0.030966 0.720128
+      0.076025 0.540840
+      0.379639 0.110706
+      0.732697 0.676348
+      0.821527 0.109682
+      0.952753 0.529270
+      0.627426 0.677220
+      0.374290 0.476878
+      0.299588 0.305179
+      0.165019 0.809340
+      0.925233 0.124253
+      0.927950 0.171694
+      0.937574 0.104856
+      0.375130 0.645220
+      0.243614 0.543426
+      0.709108 0.362403
+      0.534775 0.424035
+      0.204028 0.034387
+      0.162133 0.024102
+      0.284563 0.113617
+      0.174218 0.106646
+      0.497831 0.896918
+      0.282339 0.389055
+      0.514970 0.721858
+      0.612237 0.365555
+      0.508733 0.397256
+      0.254040 0.604473
+      0.814575 0.756496
+      0.765008 0.137003
+      0.634594 0.269929
+      0.446689 0.559908
+      0.205035 0.268732
+      0.374732 0.462265
+      0.820253 0.285409
+      0.645225 0.495100
+      0.539896 0.640504
+      0.566320 0.822377
+      0.706215 0.083452
+      0.869955 0.400104
+      0.337739 0.460155
+      0.826416 0.081386
+      0.194353 0.960498
+      0.142613 0.886419
+      0.348650 0.961375
+      0.099349 0.985883
+      0.685448 0.756471
+      0.559518 0.396191
+      0.126057 0.307042
+      0.553709 0.306215
+      0.605481 0.780368
+      0.057250 0.721640
+      0.391820 0.599650
+      0.720342 0.642653
+      0.292365 0.545587
+      0.339750 0.421234
+      0.146875 0.968455
+      0.304117 0.480087
+      0.476346 0.462270
+      0.405711 0.072516
+      0.782334 0.631265
+      0.079690 0.970134
+      0.952680 0.447538
+      0.203862 0.125710
+      0.938726 0.658536
+      0.528793 0.232651
+      0.429384 0.885468
+      0.456906 0.441254
+      0.535085 0.138057
+      0.034402 0.295832
+      0.758350 0.321901
+      0.618615 0.011596
+      0.345154 0.559586
+      0.453995 0.888542
+      0.373379 0.094057
+      0.052518 0.792598
+      0.486449 0.821891
+      0.158613 0.665396
+      0.183477 0.545362
+      0.683182 0.451837
+      0.841136 0.289880
+      0.763279 0.174015
+      0.541155 0.460485
+      0.250426 0.312943
+      0.433551 0.600006
+      0.576476 0.696388
+      0.317276 0.886991
+      0.095467 0.306951
+      0.135946 0.770016
+      0.542645 0.502474
+      0.421023 0.254861
+      0.095467 0.306951
+      0.423402 0.216342
+      0.983390 0.490217
+      0.665390 0.791177
+      0.516838 0.683675
+      0.127743 0.300138
+      0.156402 0.370910
+      0.808901 0.632117
+      0.426237 0.984986
+      0.542645 0.502474
+      0.196405 0.672642
+      0.498555 0.776127
+      0.950048 0.252938
+      0.374290 0.476878
+      0.375540 0.672832
+      0.319030 0.962759
+      0.446086 0.473648
+      0.471038 0.145566
+      0.057250 0.721640
+      0.375424 0.983269
+      0.252049 0.353675
+      0.248515 0.986219
+      0.429732 0.238839
+      0.896040 0.220987
+      0.413277 0.665871
+      0.375347 0.808723
+      0.838187 0.489877
+      0.622421 0.940600
+      0.243659 0.171689
+      0.911550 0.069382
+      0.423725 0.195005
+      0.759982 0.691801
+      0.510157 0.460050
+      0.550223 0.604859
+      0.804749 0.691455
+      0.420801 0.237057
+      0.471216 0.585974
+      0.904358 0.609523
+      0.889408 0.316330
+      0.569821 0.067236
+      0.680604 0.495461
+      0.958374 0.072610
+      0.434778 0.584064
+      0.111409 0.496172
+      0.806469 0.445679
+      0.158808 0.285054
+      0.436317 0.146217
+      0.433512 0.102880
+      0.782334 0.631265
+      0.899584 0.097071
+      0.163056 0.115937
+      0.530680 0.109328
+      0.303719 0.461782
+      0.122925 0.157496
+      0.519277 0.792634
+      0.921967 0.403492
+      0.348650 0.961375
+      0.952718 0.490245
+      0.105620 0.716432
+      0.117850 0.889470
+      0.820149 0.302208
+      0.044527 0.898816
+      0.783616 0.863892
+      0.126057 0.307042
+      0.142613 0.886419
+      0.491881 0.968629
+      0.511747 0.603622
+      0.431455 0.811770
+      0.318576 0.833543
+      0.510157 0.460050
+      0.887899 0.277010
+      0.707739 0.271429
+      0.232683 0.602020
+      0.204235 0.177189
+      0.390437 0.585083
+      0.038667 0.544363
+      0.831649 0.676066
+      0.869398 0.609442
+      0.817016 0.204410
+      0.541525 0.848036
+      0.941620 0.256237
+      0.338225 0.250553
+      0.204028 0.034387
+      0.885108 0.063091
+      0.345638 0.197014
+      0.736706 0.820330
+      0.196779 0.809343
+      0.158941 0.306771
+      0.156402 0.370910
+      0.111409 0.496172
+      0.272869 0.463085
+      0.986507 0.712716
+      0.302160 0.352818
+      0.250426 0.312943
+      0.434927 0.193050
+      0.281220 0.421551
+      0.435975 0.123798
+      0.472619 0.063063
+      0.240258 0.715352
+      0.648458 0.209257
+      0.801234 0.614881
+      0.952753 0.529270
+      0.637562 0.170444
+      0.238840 0.210752
+      0.161093 0.768662
+      0.172863 0.985364
+      0.865784 0.314212
+      0.516838 0.683675
+      0.782338 0.674393
+      0.670180 0.611587
+      0.796320 0.307965
+      0.607856 0.580655
+      0.246429 0.513266
+      0.565102 0.879042
+      0.911550 0.069382
+      0.080070 0.492860
+      0.637975 0.118920
+      0.755666 0.632095
+      0.554392 0.032687
+      0.260699 0.790315
+      0.039633 0.606920
+      0.470081 0.275483
+      0.048090 0.495662
+      0.936847 0.082296
+      0.796320 0.307965
+      0.205784 0.361222
+      0.680604 0.778857
+      0.593641 0.349539
+      0.601993 0.877057
+      0.185680 0.584289
+      0.829568 0.631832
+      0.869332 0.227261
+      0.930798 0.362142
+      0.079361 0.984532
+      0.605481 0.780368
+      0.878738 0.255695
+      0.975586 0.362102
+      0.135946 0.770016
+      0.053899 0.986375
+      0.072152 0.350442
+      0.300131 0.334399
+      0.623121 0.173281
+      0.095467 0.306951
+      0.611075 0.051869
+      0.800997 0.816884
+      0.621340 0.214047
+      0.140559 0.812335
+      0.733740 0.296511
+      0.181668 0.607906
+      0.373379 0.094057
+      0.605183 0.823212
+      0.370450 0.765425
+      0.371131 0.710578
+      0.197012 0.645615
+      0.707739 0.271429
+      0.102291 0.316330
+      0.904246 0.658664
+      0.742812 0.846583
+      0.158808 0.285054
+      0.457054 0.815249
+      0.102217 0.304381
+      0.582290 0.136456
+      0.248033 0.262458
+      0.977707 0.529248
+      0.773033 0.100982
+      0.611900 0.254669
+      0.255244 0.887837
+      0.036188 0.400030
+      0.183609 0.453811
+      0.640054 0.731268
+      0.526736 0.897933
+      0.672904 0.914577
+      0.865764 0.287039
+      0.092791 0.890871
+      0.434931 0.640691
+      0.194353 0.960498
+      0.669571 0.673917
+      0.205238 0.012105
+      0.858525 0.172722
+      0.061477 0.312196
+      0.248515 0.986219
+      0.181668 0.607906
+      0.452622 0.984264
+      0.143876 0.614067
+      0.869920 0.489889
+      0.426915 0.123118
+      0.534775 0.424035
+      0.964589 0.676974
+      0.860798 0.357328
+      0.524024 0.263389
+      0.658623 0.050076
+      0.517447 0.984725
+      0.838203 0.445691
+      0.588383 0.320050
+      0.886839 0.146175
+      0.859522 0.195629
+      0.132165 0.663685
+      0.896231 0.306951
+      0.945802 0.085001
+      0.122934 0.115028
+      0.093750 0.290792
+      0.774146 0.242987
+      0.938665 0.690073
+      0.472721 0.645863
+      0.252177 0.459040
+      0.817016 0.204410
+      0.749089 0.755881
+      0.782331 0.596486
+      0.145931 0.986520
+      0.952640 0.403465
+      0.967716 0.749785
+      0.423725 0.195005
+      0.939348 0.609602
+      0.337739 0.460155
+      0.930221 0.312196
+      0.507729 0.643895
+      0.413277 0.665871
+      0.319030 0.962759
+      0.739077 0.358737
+      0.093750 0.290792
+      0.017869 0.808282
+      0.260386 0.418761
+      0.183609 0.453811
+      0.820253 0.285409
+      0.111654 0.460525
+      0.782339 0.694463
+      0.838176 0.351607
+      0.695007 0.642652
+      0.624003 0.980959
+      0.927799 0.529293
+      0.627426 0.677220
+      0.146167 0.541326
+      0.936594 0.144173
+      0.125934 0.287039
+      0.832891 0.285054
+      0.079690 0.970134
+      0.511747 0.603622
+      0.424705 0.104536
+      0.708008 0.399282
+      0.434931 0.640691
+      0.838221 0.400092
+      0.391820 0.599650
+      0.554392 0.032687
+      0.074827 0.574097
+      0.071631 0.252837
+      0.376043 0.877891
+      0.904358 0.609523
+      0.476346 0.462270
+      0.126057 0.307042
+      0.408657 0.474423
+      0.945802 0.085001
+      0.922047 0.490273
+      0.196779 0.809343
+      0.271748 0.480740
+      0.143876 0.614067
+      0.584835 0.585458
+      0.737088 0.454711
+      0.229847 0.644080
+      0.110860 0.575300
+      0.035936 0.583253
+      0.682426 0.822439
+      0.160412 0.313688
+      0.931604 0.299183
+      0.048090 0.495662
+      0.336856 0.328929
+      0.816704 0.138614
+      0.602968 0.713046
+      0.497831 0.896918
+      0.574937 0.539252
+      0.541525 0.848036
+      0.583870 0.173207
+      0.309754 0.388214
+      0.782339 0.694463
+      0.171446 0.285409
+      0.948925 0.121038
+      0.125841 0.302263
+      0.637562 0.170444
      ) ;; texcoords
 
     (triangles
-      281 571 40
-      264 314 310
-      42 218 255
-      387 92 102
-      281 243 439
-      264 496 254
-      370 535 229
-      527 464 33
-      190 413 361
-      103 91 461
-      446 243 255
-      190 376 255
-      446 535 214
-      568 571 97
-      370 1 97
-      568 413 434
-      56 552 526
-      52 182 33
-      198 304 361
-      209 91 261
-      259 1 354
-      420 385 515
-      394 340 156
-      274 592 351
-      568 575 424
-      480 14 417
-      370 329 76
-      527 240 585
-      553 559 76
-      41 240 515
-      568 340 203
-      480 587 134
-      259 595 3
-      420 471 521
-      42 1 427
-      387 197 63
-      565 413 22
-      269 472 400
-      204 495 203
-      459 587 400
-      198 376 486
-      209 548 403
-      294 552 442
-      260 191 151
-      446 218 382
-      295 179 29
-      190 304 523
-      103 208 118
-      506 519 523
-      99 208 403
-      446 552 223
-      295 263 582
-      198 409 187
-      209 302 337
-      7 376 489
-      247 347 418
-      56 535 305
-      52 539 233
-      518 170 223
-      95 263 233
-      618 232 68
-      132 301 363
-      546 232 492
-      544 580 291
-      49 213 296
-      564 160 293
-      611 193 158
-      465 112 380
-      289 72 68
-      184 301 377
-      516 366 194
-      47 372 613
-      438 101 194
-      262 372 192
-      289 6 530
-      184 45 23
-      375 284 25
-      599 445 377
-      611 366 257
-      465 456 293
-      466 228 621
-      622 175 70
-      65 228 258
-      614 430 574
-      246 395 206
-      148 131 114
-      537 116 130
-      335 318 596
-      609 332 621
-      411 175 86
-      108 135 286
-      139 89 222
-      136 410 286
-      569 89 374
-      609 48 275
-      411 157 299
-      583 58 35
-      256 166 86
-      537 135 561
-      335 584 114
-      609 43 66
-      136 556 402
-      609 556 40
-      289 119 319
-      438 327 107
-      289 327 555
-      438 517 331
-      262 510 574
-      136 566 348
-      569 451 291
-      612 73 319
-      272 360 501
-      55 608 66
-      146 573 177
-      36 119 9
-      126 234 75
-      55 428 155
-      146 199 145
-      186 327 111
-      224 111 37
-      359 243 412
-      540 432 140
-      504 96 358
-      504 34 448
-      605 129 373
-      31 476 110
-      576 453 358
-      600 34 110
-      560 96 0
-      589 205 620
-      551 487 53
-      362 53 83
-      605 449 57
-      31 57 196
-      524 547 163
-      391 13 149
-      178 470 57
-      397 57 620
-      576 129 590
-      600 416 431
-      115 509 24
-      69 322 297
-      504 453 440
-      504 511 616
-      85 488 250
-      429 298 353
-      143 493 607
-      180 607 554
-      251 383 141
-      200 468 550
-      207 20 610
-      421 610 357
-      104 378 141
-      104 468 357
-      123 253 161
-      339 188 542
-      207 606 386
-      421 490 249
-      323 383 27
-      367 231 125
-      533 154 290
-      567 407 167
-      211 426 237
-      425 237 44
-      352 153 106
-      586 106 279
-      491 522 215
-      603 344 176
-      288 365 215
-      288 344 279
-      597 341 168
-      549 462 505
-      404 522 525
-      543 525 321
-      352 531 59
-      586 342 405
-      588 280 478
-      94 478 458
-      84 601 59
-      84 342 321
-      55 43 230
-      146 64 545
-      105 571 443
-      562 473 570
-      2 428 278
-      502 529 401
-      8 414 220
-      32 147 498
-      572 356 159
-      162 17 221
-      61 428 497
-      572 5 497
-      61 414 255
-      245 5 393
-      371 51 217
-      277 579 388
-      479 271 485
-      61 503 326
-      120 538 617
-      572 225 185
-      162 558 475
-      593 463 185
-      78 558 217
-      61 579 433
-      120 369 128
-      245 270 109
-      371 137 309
-      483 5 165
-      87 189 183
-      406 414 242
-      330 241 74
-      444 285 433
-      39 369 74
-      349 356 202
-      450 202 28
-      381 276 133
-      117 133 77
-      8 317 313
-      32 138 124
-      423 577 93
-      292 346 455
-      79 216 313
-      79 138 28
-      406 579 408
-      330 236 82
-      245 225 408
-      277 276 336
-      479 71 396
-      349 317 457
-      450 235 12
-      381 270 144
-      117 578 174
-      18 415 457
-      328 152 457
-      21 50 379
-      21 164 54
-      419 591 541
-      226 113 390
-      452 287 379
-      283 164 80
-      67 514 563
-      325 563 528
-      316 50 460
-      150 460 602
-      513 324 312
-      195 422 307
-      320 324 315
-      343 19 46
-      122 447 398
-      441 368 581
-      364 169 392
-      172 469 239
-      4 532 312
-      181 422 484
-      266 437 345
-      16 81 333
-      389 300 345
-      494 81 15
-      4 212 173
-      181 399 90
-      500 30 308
-      252 62 484
-      364 437 520
-      172 454 581
-      4 243 384
-      389 119 435
-      4 119 214
-      389 282 127
-      494 594 602
-      452 10 534
-      283 306 46
-      281 210 384
-      264 201 507
-      612 355 88
-      272 98 26
-      186 557 227
-      224 477 310
-      364 244 303
-      364 248 512
-      172 142 528
-      546 566 508
-      544 334 60
-      65 517 604
-      614 499 219
-      537 467 171
-      335 273 100
-      583 474 350
-      256 615 268
-      375 598 38
-      599 338 267
-      611 481 238
-      465 121 265
-      436 11 350
-      311 615 265
-      619 482 171
-      536 273 267
+      659 179 647
+      659 156 179
+      494 743 455
+      494 987 743
+      747 1292 831
+      747 500 1292
+      1286 323 945
+      936 252 124
+      945 323 667
+      252 1017 399
+      1326 776 831
+      1117 1053 138
+      1042 684 533
+      621 440 108
+      898 455 743
+      504 600 108
+      408 488 455
+      714 1256 504
+      408 463 488
+      408 663 463
+      892 663 408
+      892 408 147
+      1189 147 408
+      631 714 504
+      1189 898 1307
+      631 108 440
+      987 1042 1307
+      377 108 600
+      659 647 776
+      1157 1236 1117
+      1189 533 684
+      631 915 901
+      519 85 472
+      509 890 1290
+      945 599 404
+      252 642 220
+      1171 519 592
+      788 1290 284
+      599 243 921
+      399 619 642
+      243 85 872
+      498 766 619
+      11 1049 1188
+      1087 459 167
+      932 1049 11
+      566 1087 330
+      260 1180 11
+      205 1087 1210
+      1287 932 1180
+      507 330 205
+      404 1114 1352
+      642 1305 220
+      41 175 1114
+      1156 249 642
+      445 11 175
+      1210 167 1156
+      472 85 243
+      890 498 281
+      540 243 599
+      281 399 1017
+      1282 519 1171
+      803 788 1267
+      1282 872 85
+      803 925 509
+      955 580 482
+      1346 622 1249
+      945 302 439
+      252 728 124
+      1074 905 580
+      848 250 1346
+      882 439 305
+      124 817 188
+      911 305 481
+      188 37 1249
+      111 388 1188
+      1197 459 1128
+      388 1111 1352
+      123 1305 459
+      1188 1352 1114
+      459 249 167
+      932 975 111
+      566 1197 1128
+      171 218 111
+      321 1197 402
+      1287 171 975
+      507 402 566
+      439 302 1352
+      728 1305 768
+      146 439 1111
+      993 768 123
+      218 146 388
+      916 123 1197
+      482 267 911
+      622 188 1249
+      267 1286 882
+      1035 124 188
+      1310 212 1074
+      996 848 1346
+      1310 955 653
+      996 1249 37
+      113 661 165
+      1340 880 31
+      1230 1026 1193
+      354 527 694
+      113 1230 1208
+      1340 694 118
+      9 1224 213
+      1165 389 469
+      1224 9 759
+      325 1237 808
+      661 1208 363
+      118 361 1251
+      1208 1193 956
+      694 198 361
+      165 661 223
+      880 1251 865
+      731 223 530
+      865 315 297
+      363 956 869
+      361 426 938
+      223 363 1107
+      1251 938 315
+      556 759 387
+      808 610 1142
+      530 1107 1308
+      315 847 855
+      365 1039 299
+      1206 348 1083
+      1230 113 285
+      354 524 555
+      1039 1230 574
+      1214 555 348
+      113 365 195
+      1340 1083 524
+      574 285 195
+      555 1083 348
+      20 1353 12
+      1125 627 291
+      72 778 841
+      1238 153 135
+      355 12 841
+      291 153 1167
+      1353 20 72
+      548 1238 135
+      778 1143 1037
+      1167 772 291
+      20 217 897
+      1125 1313 1238
+      217 20 355
+      814 291 772
+      1037 1222 652
+      772 1280 814
+      897 174 1080
+      1313 1076 1328
+      217 652 174
+      814 1299 1313
+      1143 1080 1222
+      1328 638 772
+      1143 181 1355
+      1328 303 1313
+      897 1355 1085
+      1313 780 1238
+      778 98 181
+      1167 944 1328
+      72 1085 98
+      1238 326 1167
+      1085 419 380
+      780 811 326
+      98 380 545
+      326 1235 944
+      1355 1240 419
+      303 736 780
+      181 545 1240
+      944 276 303
+      419 1240 545
+      736 1235 811
+      1080 777 989
+      1076 1259 638
+      652 63 535
+      1280 746 1299
+      174 535 777
+      1299 665 1076
+      1222 989 63
+      638 395 1280
+      63 989 777
+      395 665 746
+      372 467 866
+      783 1140 1023
+      1314 23 83
+      721 725 227
+      467 230 83
+      28 725 1140
+      1314 372 1303
+      721 1023 977
+      230 467 430
+      227 87 685
+      372 1314 605
+      783 177 571
+      467 372 1252
+      28 571 87
+      430 1252 100
+      87 58 757
+      605 790 4
+      177 875 410
+      1252 605 799
+      571 410 58
+      790 430 1277
+      685 757 875
+      790 605 265
+      685 700 1186
+      605 1314 552
+      177 837 700
+      230 790 879
+      227 1186 567
+      1314 230 160
+      721 567 837
+      552 160 254
+      837 804 596
+      160 879 132
+      567 1118 804
+      265 552 927
+      700 596 224
+      879 265 271
+      1186 224 1118
+      927 254 132
+      596 1118 224
+      4 1277 961
+      875 1294 448
+      957 1342 100
+      55 58 410
+      799 4 966
+      410 448 55
+      1342 961 1277
+      559 757 58
+      1342 957 966
+      559 448 1294
+      633 851 703
+      1348 1191 859
+      805 643 52
+      532 236 1014
+      633 983 461
+      1348 406 1335
+      1243 475 1137
+      889 99 995
+      682 786 887
+      1016 452 712
+      805 332 722
+      532 579 211
+      738 643 722
+      894 579 1068
+      1041 1154 562
+      1321 194 14
+      105 1061 562
+      598 194 881
+      594 616 887
+      648 452 1043
+      846 959 127
+      1216 1289 828
+      933 356 127
+      1212 1289 233
+      1309 1181 1137
+      716 99 1331
+      602 1122 1116
+      1020 484 739
+      1073 607 1116
+      385 484 69
+      30 851 461
+      986 406 1113
+      738 681 52
+      894 236 211
+      1041 29 357
+      1321 122 881
+      1073 1122 357
+      385 122 651
+      30 699 703
+      986 1191 1335
+      682 616 474
+      1016 867 1152
+      594 1004 474
+      648 867 712
+      607 1146 793
+      679 625 484
+      1116 793 149
+      484 390 739
+      356 972 1051
+      1135 465 1289
+      127 1051 54
+      1289 719 828
+      1061 641 675
+      557 769 194
+      562 675 844
+      194 172 14
+      722 1024 1120
+      579 741 1068
+      332 615 1024
+      436 595 579
+      461 793 1146
+      406 1316 1113
+      1137 1051 972
+      99 951 1331
+      887 675 641
+      452 235 1043
+      786 844 675
+      618 769 452
+      475 54 1051
+      1082 465 99
+      983 149 793
+      234 625 406
+      149 983 1078
+      390 1089 319
+      983 633 204
+      234 107 1089
+      594 103 339
+      648 645 425
+      103 641 144
+      1043 690 645
+      1120 1024 270
+      741 318 353
+      1024 615 705
+      595 173 318
+      1004 594 934
+      806 425 1192
+      633 423 241
+      1348 15 107
+      1200 947 751
+      726 696 860
+      1220 1100 50
+      8 120 1172
+      197 1344 870
+      216 278 520
+      1344 1220 314
+      674 1172 278
+      1100 210 431
+      479 152 120
+      751 490 604
+      696 286 860
+      210 1100 1072
+      1205 1173 247
+      60 604 1338
+      860 807 1323
+      1220 1344 221
+      8 969 834
+      1344 197 981
+      674 902 969
+      1100 1220 998
+      479 834 1173
+      1200 60 708
+      726 1323 1339
+      1155 288 797
+      349 1195 1343
+      1242 664 517
+      526 878 1183
+      676 125 629
+      1161 505 1164
+      664 676 900
+      754 1164 878
+      288 753 1169
+      991 1123 1195
+      1021 1242 345
+      327 1183 5
+      708 288 1155
+      1323 349 1339
+      998 664 1242
+      834 526 1173
+      981 125 676
+      902 1161 969
+      221 676 664
+      969 754 834
+      1338 753 288
+      807 991 1323
+      1072 1242 1021
+      1173 327 247
+      350 345 1108
+      5 948 293
+      797 1169 94
+      1195 1304 337
+      345 517 942
+      1183 116 948
+      1202 797 612
+      1343 337 473
+      950 612 906
+      473 609 1247
+      1108 942 182
+      948 1009 862
+      612 94 466
+      337 264 609
+      1153 1108 724
+      293 862 253
+      182 792 635
+      1009 57 862
+      792 923 219
+      886 582 57
+      1182 1196 38
+      1356 564 343
+      1179 1182 1221
+      491 343 1225
+      1196 727 918
+      199 435 564
+      1019 1179 142
+      697 1225 1245
+      26 1060 312
+      1270 489 1223
+      1207 382 115
+      984 137 334
+      1273 115 964
+      334 655 954
+      770 312 1198
+      1223 1322 749
+      918 770 1119
+      435 749 912
+      115 342 815
+      137 654 655
+      342 142 433
+      1245 398 654
+      38 918 825
+      564 912 1241
+      142 1221 202
+      1225 1350 398
+      1221 38 537
+      343 1241 1350
+      202 537 1057
+      1350 698 909
+      433 202 819
+      398 909 953
+      537 825 502
+      1241 1131 698
+      815 433 823
+      654 953 1054
+      964 815 842
+      655 1054 550
+      825 1119 497
+      912 76 1131
+      1119 1198 232
+      749 101 76
+      1038 964 1269
+      954 550 858
+      33 1269 295
+      858 693 1201
+      497 232 214
+      76 1177 761
+      502 497 590
+      1131 761 603
+      1269 842 546
+      550 155 693
+      842 823 13
+      1054 849 155
+      1057 502 47
+      698 603 864
+      823 819 139
+      953 597 849
+      819 1057 239
+      909 864 597
+      139 239 813
+      597 1097 829
+      13 139 185
+      849 829 367
+      239 47 36
+      864 190 1097
+      546 13 392
+      155 367 695
+      295 546 588
+      693 695 42
+      47 590 32
+      603 649 190
+      590 214 883
+      761 748 649
+      857 295 692
+      1201 42 688
+      97 692 1102
+      688 666 1079
+      32 883 802
+      649 65 549
+      36 32 1127
+      190 549 1176
+      692 588 775
+      42 630 666
+      588 392 1174
+      695 427 630
+      813 36 84
+      1097 1176 128
+      392 185 186
+      367 262 427
+      185 813 1126
+      829 128 262
+      186 1126 446
+      262 16 226
+      1174 186 3
+      427 226 1291
+      1126 84 222
+      128 1265 16
+      775 1174 1110
+      630 1291 863
+      1102 775 1081
+      666 863 462
+      84 1127 443
+      1176 1317 1265
+      1127 802 238
+      549 713 1317
+      67 1102 1115
+      1079 462 77
+      443 238 366
+      1317 634 161
+      238 1048 225
+      713 730 634
+      366 225 1063
+      634 1229 992
+      244 366 704
+      161 992 21
+      75 563 1084
+      1025 1187 750
+      611 184 885
+      1003 432 294
+      1254 952 1104
+      1319 1296 263
+      1283 1254 702
+      522 263 593
+      952 611 1094
+      756 294 1296
+      563 1283 734
+      1295 593 1187
+      1084 734 81
+      1187 656 1013
+      1104 1094 458
+      1296 1232 791
+      734 702 44
+      593 779 656
+      702 1104 102
+      263 791 779
+      1094 885 207
+      294 51 1232
+      110 1084 711
+      750 1013 424
+      591 538 572
+      632 1134 570
+      207 913 968
+      51 701 90
+      538 711 1091
+      424 414 1134
+      458 207 521
+      1232 90 573
+      44 102 683
+      779 206 516
+      81 44 640
+      656 516 451
+      102 458 1231
+      791 573 206
+      711 81 896
+      1013 451 414
+      117 1239 723
+      1065 1062 143
+      589 539 1325
+      200 96 963
+      1239 1147 1055
+      744 554 1062
+      1147 589 70
+      816 963 554
+      539 578 266
+      1105 112 96
+      585 117 893
+      140 143 1347
+      578 1148 308
+      924 1075 112
+      1349 585 1011
+      1159 1347 379
+      1250 1011 1145
+      379 669 311
+      266 308 1297
+      112 1095 1136
+      1011 893 732
+      1347 508 669
+      1325 266 1033
+      96 1136 988
+      1055 70 150
+      554 80 709
+      723 1055 832
+      1062 709 586
+      70 1325 891
+      963 988 80
+      893 723 438
+      143 586 508
+      732 438 1262
+      508 735 340
+      150 891 1099
+      80 824 162
+      438 832 544
+      586 1088 735
+      832 150 255
+      709 162 1088
+      891 1033 304
+      988 158 824
+      1145 732 409
+      669 340 352
+      1033 1297 471
+      1136 795 158
+      584 1145 492
+      311 352 1271
+      896 1239 117
+      451 1065 414
+      1231 539 589
+      573 200 206
+      640 1147 1239
+      516 744 451
+      683 589 1147
+      206 816 516
+      521 578 539
+      90 1105 573
+      1091 117 585
+      414 140 1134
+      968 1148 578
+      701 924 90
+      572 585 1349
+      1134 1159 570
+      827 1301 1284
+      1175 760 300
+      558 428 1298
+      106 272 678
+      827 1170 1132
+      1175 624 164
+      229 46 1106
+      931 93 145
+      543 309 296
+      130 1071 511
+      558 401 1336
+      106 88 454
+      1318 787 1336
+      259 88 678
+      1096 159 1327
+      407 1047 553
+      873 417 1327
+      1056 1047 658
+      812 1266 296
+      922 1071 476
+      347 529 1320
+      809 637 310
+      1268 1306 1320
+      480 637 856
+      798 1264 1106
+      495 93 2
+      717 444 910
+      141 1022 415
+      1329 569 910
+      833 1022 997
+      830 1046 1132
+      1333 624 300
+      1318 401 1298
+      259 272 1005
+      1096 417 351
+      407 148 763
+      1329 903 351
+      833 148 415
+      830 1170 1284
+      1333 760 496
+      543 79 208
+      130 477 476
+      812 309 208
+      922 477 74
+      1093 910 1029
+      997 1293 24
+      910 444 1044
+      1022 287 1293
+      1028 1320 1272
+      856 673 861
+      1320 529 1124
+      637 917 673
+      429 1327 1149
+      658 1112 979
+      1327 159 369
+      1047 940 1112
+      1336 787 196
+      88 416 733
+      258 1336 836
+      454 733 908
+      1132 1046 919
+      624 24 1293
+      1106 1264 973
+      93 861 673
+      296 1266 40
+      1071 979 1112
+      800 296 1149
+      511 1112 940
+      542 1106 1272
+      145 673 917
+      82 1132 1029
+      164 1293 287
+      1044 154 785
+      287 1351 164
+      82 785 1012
+      164 577 1175
+      812 169 86
+      922 275 1006
+      1266 86 1015
+      1006 413 979
+      196 483 68
+      416 73 733
+      836 68 547
+      733 187 908
+      92 680 169
+      74 1036 922
+      827 1012 193
+      1175 614 706
+      1261 191 1263
+      1228 1334 499
+      868 758 1086
+      677 1168 71
+      506 434 151
+      718 1219 176
+      561 151 758
+      176 575 677
+      329 1086 431
+      71 152 1205
+      1263 191 604
+      1334 286 449
+      210 820 468
+      1205 1341 71
+      191 877 1338
+      34 807 286
+      868 1 929
+      677 826 176
+      561 929 374
+      176 1058 718
+      329 468 1
+      71 486 677
+      1261 1209 877
+      1228 536 34
+      1067 396 121
+      531 781 19
+      852 949 324
+      391 447 686
+      45 470 133
+      1324 383 789
+      939 324 470
+      686 970 1324
+      1311 121 1169
+      19 1123 928
+      1021 350 949
+      327 163 391
+      877 1209 1067
+      536 531 19
+      1 468 852
+      486 391 686
+      374 929 45
+      1058 1324 789
+      929 1 939
+      826 686 1324
+      1338 877 1311
+      807 19 928
+      468 820 1021
+      1341 327 391
+      350 1153 420
+      5 341 163
+      121 946 94
+      781 1304 1123
+      949 420 237
+      163 1133 447
+      396 1248 946
+      941 328 781
+      1248 937 976
+      1302 930 328
+      420 364 442
+      341 1279 1133
+      946 976 466
+      328 264 1304
+      1153 628 364
+      293 1130 341
+      442 364 64
+      1279 48 639
+      794 64 1008
+      639 386 411
+      289 373 306
+      251 301 613
+      248 978 373
+      764 209 251
+      920 306 689
+      613 376 528
+      1234 581 978
+      1151 131 764
+      298 623 560
+      231 393 359
+      441 17 35
+      66 1227 821
+      17 1204 358
+      1059 282 1227
+      623 279 737
+      967 838 393
+      689 1244 279
+      376 707 967
+      35 358 1281
+      1227 104 378
+      581 1281 843
+      378 201 131
+      306 370 1244
+      301 91 376
+      978 843 134
+      131 1070 209
+      373 134 370
+      209 1018 301
+      134 95 307
+      1070 1345 1018
+      843 1158 95
+      201 320 1070
+      370 307 587
+      1018 994 91
+      1281 166 1158
+      104 1285 201
+      358 501 166
+      282 22 104
+      1244 587 1030
+      91 313 707
+      279 1030 720
+      707 331 838
+      1204 687 501
+      1190 246 282
+      687 1150 1215
+      1069 283 246
+      1030 368 853
+      313 1163 331
+      587 899 368
+      994 771 313
+      501 1215 971
+      246 1211 22
+      166 971 1275
+      22 541 1285
+      307 982 899
+      1345 62 994
+      1158 1275 796
+      1285 1258 320
+      95 796 982
+      320 109 1345
+      796 421 765
+      1258 1274 109
+      1275 935 421
+      541 381 1258
+      982 765 180
+      109 487 62
+      971 1103 935
+      1211 740 541
+      1215 6 1103
+      283 485 1211
+      899 180 183
+      62 1129 771
+      368 183 1109
+      771 1194 1163
+      1150 61 6
+      672 371 283
+      61 1160 565
+      59 904 371
+      183 512 375
+      1129 1203 1194
+      180 513 512
+      487 273 1129
+      6 565 126
+      371 601 485
+      1103 126 617
+      485 810 740
+      765 493 513
+      1274 1000 487
+      935 617 277
+      740 1001 381
+      421 277 493
+      381 752 1274
+      277 261 1312
+      1001 774 752
+      617 157 261
+      810 228 1001
+      493 1312 322
+      752 397 1000
+      126 671 157
+      601 958 810
+      565 170 671
+      904 782 601
+      513 322 1002
+      1000 715 273
+      512 1002 1278
+      273 1330 1203
+      1160 1092 170
+      822 317 904
+      1002 1354 801
+      715 835 1330
+      1278 801 43
+      1330 884 1121
+      801 960 346
+      835 27 884
+      1354 914 960
+      568 503 835
+      403 551 839
+      453 636 344
+      845 457 384
+      1233 412 1337
+      203 268 256
+      25 1066 422
+      129 335 268
+      56 1276 25
+      189 256 457
+      422 1090 1233
+      576 839 335
+      344 450 56
+      839 1040 1138
+      636 974 450
+      256 240 515
+      1066 745 1090
+      335 1138 874
+      450 662 1276
+      268 874 240
+      1276 742 1066
+      457 515 1178
+      1090 840 412
+      551 478 1040
+      245 1098 636
+      818 1300 1064
+      178 7 990
+      1178 534 871
+      840 1199 215
+      478 1064 242
+      990 192 1098
+      515 405 534
+      745 876 840
+      874 1217 1184
+      662 729 742
+      1138 606 1217
+      974 1077 662
+      240 1184 405
+      742 292 745
+      1040 242 606
+      1098 762 974
+      854 1253 1139
+      119 767 89
+      999 668 418
+      670 39 1166
+      620 1139 1144
+      89 1032 1226
+      926 1144 668
+      1226 257 670
+      1332 418 336
+      1166 78 49
+      316 608 1253
+      985 583 119
+      460 336 644
+      49 1246 784
+      650 18 608
+      510 965 985
+      18 136 1050
+      1141 1315 965
+      336 456 888
+      78 338 1246
+      608 1050 895
+      965 525 583
+      418 1031 456
+      39 437 78
+      1144 1045 646
+      1032 400 257
+      1139 362 1045
+      767 962 1032
+      668 646 1031
+      257 1255 39
+      1253 895 362
+      583 274 767
+      895 1034 514
+      525 626 274
+      646 980 280
+      400 269 1255
+      362 514 10
+      274 1288 962
+      1045 10 980
+      962 1185 400
+      1031 280 660
+      1255 0 437
+      1050 850 1034
+      1315 907 525
+      456 660 1101
+      437 1260 338
+      136 1218 850
+      518 1213 1315
+      606 242 854
+      762 119 89
+      405 1184 999
+      292 670 1166
+      1217 606 620
+      1077 89 1226
+      1184 1217 926
+      729 1226 670
+      534 405 1332
+      876 1166 49
+      242 1064 316
+      192 985 119
+      871 534 460
+      1199 49 784
+      1064 1300 650
+      7 510 985
+      1008 64 360
+      386 114 773
+      64 364 1010
+      48 523 114
+      364 628 1052
+      1130 943 523
+      657 1008 53
+      1257 773 1007
+      635 219 290
+      57 710 691
+      724 635 755
+      862 691 464
+      628 724 168
+      253 464 943
+      219 657 1162
+      582 1007 710
+      290 1162 333
+      53 333 1162
+      168 755 290
+      1010 53 360
+      333 1052 168
+      333 168 290
+      333 53 1010
+      333 1010 1052
+      35 581 1234
+      35 1234 394
+      1027 689 623
+      1027 623 298
+      727 26 770
+      727 770 918
+      1019 342 115
+      1019 115 382
      ) ;; triangles
 
     (groups
+      (group
+        (bone    "Hip")
+        (weight   1.000000)
+        (vertices 1025 1026 1 520 9 522 524 527 530 536 25 31 176 1058 551 860 555 556 1263 1072 8 50 563 56 1083 60 574 575 576 1090 1206 1094 71 75 1100 696 1107 1039 604 1117 610 611 108 1042 110 113 1142 120 636 129 1165 621 1168 1219 1172 661 151 152 708 674 1187 165 1193 1200 1205 694 457 1208 1209 189 1214 191 195 1220 197 198 1224 714 203 1228 34 1230 1233 210 1236 1237 726 216 731 221 223 1251 1254 877 807 1261 750 751 756 245 758 759 826 213 1283 776 486 1295 278 1086 981 1307 1308 285 286 294 1319 808 297 561 299 1326 1084 820 1334 1323 314 315 1340 1341 1344 718 834 323 325 839 329 845 847 855 344 348 1338 865 354 1339 868 869 870 361 363 365 880 677 885 374 1173 384 898 387 389 902 403 408 184 412 1337 929 422 938 431 432 434 947 952 956 449 453 969 247 468 469 118 479 998 490 1003 499 504 506 426)
+       )
+      (group
+        (bone    "Toes.L")
+        (weight   1.000000)
+        (vertices 385 1154 643 651 1041 532 29 805 681 1073 52 1212 959 1216 69 1122 846 211 598 602 233 933 738 357 105 236 881 1014 1321 122 1020 894)
+       )
+      (group
+        (bone    "Shoulder.R")
+        (weight   1.000000)
+        (vertices 386 1027 1151 1133 528 1302 920 794 411 289 930 420 937 48 946 442 64 523 328 976 1234 341 1248 613 639 1130 364 237 1008 1010 248 251 764 1279)
+       )
+      (group
+        (bone    "Hand.L")
+        (weight   1.000000)
+        (vertices 132 265 1303 1294 271 790 23 4 410 28 927 160 1186 804 227 552 685 430 559 177 567 372 58 799 700 957 1342 448 961 837 966 55 1314 977 83 596 725 87 1252 783 605 1118 224 866 571 100 230 721 875 879 467 1140 757 1277 254 1023)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.947601)
+        (vertices 1322 1038 911 1198 954 188)
+       )
+      (group
+        (bone    "Upper Leg.L")
+        (weight   0.500000)
+        (vertices 96 963 70 266 1325 112 554 1055)
+       )
+      (group
+        (bone    "Neck")
+        (weight   1.000000)
+        (vertices 642 976 773 264 906 523 1292 386 657 404 667 1052 930 710 168 114 943 48 691 53 138 290 57 1290 64 464 582 333 463 592 466 724 1162 219 862 609 360 1257 1130 364 1007 1008 1010 755 628 1017 635 253)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.327680)
+        (vertices 137 115 509 519)
+       )
+      (group
+        (bone    "Upper Back")
+        (weight   1.000000)
+        (vertices 1027 517 523 528 533 26 1052 5 1060 862 66 1108 600 94 1123 612 1130 1133 628 629 121 1151 1153 133 647 138 1164 1169 667 1183 163 168 1195 684 1202 179 1207 697 1234 724 727 1248 743 237 1270 253 1292 781 1302 1304 797 293 298 821 1343 324 328 337 341 345 350 359 231 364 878 382 383 900 901 394 396 915 116 420 941 942 943 946 948 949 950 440 441 447 970 464 470 505 984 473 1010 1017 1019)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.872000)
+        (vertices 376 689)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.011529)
+        (vertices 900 517 1164 878 1270 1207 984 1060 26)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.476299)
+        (vertices 560 393 1059 17)
+       )
+      (group
+        (bone    "Forearm.R")
+        (weight   1.000000)
+        (vertices 512 513 6 12 22 27 541 1285 548 1030 43 1069 565 568 59 61 62 1092 587 1103 1109 601 95 1121 1129 109 627 617 1150 1158 135 1160 1163 153 157 671 672 166 1194 687 1203 180 183 1211 1215 715 720 740 1258 752 126 246 1274 1275 765 1278 771 261 774 782 273 277 283 796 1312 801 810 1330 307 822 313 317 320 1345 322 835 1353 1354 331 853 228 346 368 371 884 375 381 899 904 397 914 421 935 841 958 960 971 982 994 485 487 1000 1001 1002 493 501 503 170)
+       )
+      (group
+        (bone    "Head")
+        (weight   1.000000)
+        (vertices 519 11 1042 533 1049 540 1053 37 41 1074 566 1087 1035 580 592 85 599 600 1111 1117 1128 619 108 621 622 111 631 123 124 642 1156 1157 647 138 653 146 1171 1305 667 1180 1188 1189 167 171 684 1197 175 179 1114 1210 188 714 205 1236 728 218 975 220 1249 212 743 1256 747 243 249 250 252 766 768 1282 260 1286 1287 776 1290 267 1292 788 302 281 1307 284 1310 803 817 1326 305 831 321 1346 323 993 1352 330 848 659 911 916 872 882 147 377 890 892 898 388 901 905 663 399 402 915 404 408 921 925 932 936 156 945 1267 439 440 955 445 455 459 463 472 987 481 482 996 488 494 498 500 504 1017 507 509)
+       )
+      (group
+        (bone    "Toes.R")
+        (weight   1.000000)
+        (vertices 259 903 141 272 401 1298 148 407 1306 415 1056 417 1318 553 428 558 1329 310 569 833 1096 717 347 351 480 678 873 106 1005 1268 809 763)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.409600)
+        (vertices 35 1227)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.000000)
+        (vertices 939 1324 45 686)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.014412)
+        (vertices 441 970 66 470 359)
+       )
+      (group
+        (bone    "Foot.L")
+        (weight   1.000000)
+        (vertices 1024 14 15 1041 1043 532 1051 29 30 544 1061 1068 557 1073 562 52 54 1082 1088 1089 579 69 1099 594 595 598 1113 602 1116 607 1120 1122 99 615 616 105 618 103 1135 625 633 122 127 1152 641 1154 643 645 648 651 144 107 149 1181 158 162 675 1191 1192 681 682 172 173 1309 690 699 1212 703 1216 705 194 712 204 716 719 722 211 1243 1146 735 738 739 741 233 234 235 236 1262 241 1271 255 769 1289 471 270 786 793 795 474 1316 805 806 1321 304 1331 1335 824 828 318 319 1348 1078 844 846 851 340 859 352 353 867 356 357 1137 881 887 889 894 385 390 492 406 409 933 934 423 425 436 951 959 452 332 972 461 465 983 986 475 995 484 679 1004 339 1014 1016 1020)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.800000)
+        (vertices 378 581)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.001238)
+        (vertices 133 394 396 941 821 383)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.000000)
+        (vertices 1195 797)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   1.000000)
+        (vertices 11 537 540 1053 1054 1057 38 945 41 1074 564 566 1087 76 599 1111 698 1119 101 619 116 123 124 1131 1156 653 142 655 1171 1305 1179 1182 1188 167 1196 175 179 1114 182 1210 1221 199 1225 202 205 727 1241 1245 1247 1249 550 1256 747 749 243 1269 249 252 766 768 1282 260 788 792 281 803 815 819 823 825 831 1346 1350 1352 842 1356 848 654 342 343 858 872 232 882 886 377 890 388 901 909 398 399 912 402 918 921 923 932 497 942 433 435 953 955 445 964 455 459 975 472 987 33 488 491 494 1009 498 500 502)
+       )
+      (group
+        (bone    "Rower Back")
+        (weight   1.000000)
+        (vertices 1 517 526 1042 531 536 26 5 1058 1060 1067 45 1072 1083 66 1117 1123 108 621 19 629 121 125 1155 133 1161 1164 1169 1173 664 1183 163 676 1195 686 1202 1207 1209 195 708 714 1236 1242 221 231 826 753 754 1270 776 781 789 1307 797 1311 288 807 298 1323 1324 1326 821 1338 1339 1341 1343 834 323 324 327 852 345 349 350 998 359 877 878 374 382 383 898 900 902 391 394 396 408 928 929 939 941 949 441 447 969 970 468 981 470 984 991 486 504 505 1021)
+       )
+      (group
+        (bone    "Upper Leg.R")
+        (weight   1.000000)
+        (vertices 384 256 515 662 7 620 650 268 1090 1166 784 913 985 1300 405 534 89 478 538 1138 412 1178 670 1184 636 292 926 1064 1066 818 1199 432 49 178 51 1332 1077 457 316 1098 192 1217 450 839 840 990 1226 460 974 591 335 854 215 729 207 606 1040 742 871 745 874 999 876 240 424 242 885 119 632 762 1276 510)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.512000)
+        (vertices 1248 1234 1302 1151)
+       )
+      (group
+        (bone    "Upper Leg.L")
+        (weight   1.000000)
+        (vertices 640 896 683 516 263 521 779 1232 1296 913 451 840 791 538 539 924 1178 414 1187 207 294 990 424 1065 1159 44 818 816 968 178 51 478 570 1084 701 702 117 1105 578 1091 1349 1094 711 200 585 458 589 206 591 1104 593 215 1239 90 1231 734 656 102 81 744 572 1134 573 140 1013 632 1147 1148)
+       )
+      (group
+        (bone    "Hand.R")
+        (weight   1.000000)
+        (vertices 1280 897 772 135 777 778 395 780 1037 1167 1299 276 814 535 665 545 419 548 1222 291 811 174 303 944 1076 181 841 1080 1085 1353 63 326 1313 72 652 1355 1328 1235 1238 1240 217 989 736 98 355 1125 746 1259 12 627 1143 153 20 380 638)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.014412)
+        (vertices 505 1202 629 382 1343)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.512000)
+        (vertices 647 684 915 950 697 473 1019)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.800000)
+        (vertices 770 1223 489 330 334 85 312 1273 1180 925)
+       )
+      (group
+        (bone    "Foot.R")
+        (weight   1.000000)
+        (vertices 0 514 1028 1029 428 1034 1036 2 1112 1044 1046 1047 24 542 543 1056 547 40 553 46 1071 569 10 577 68 1093 1096 73 74 1101 1293 82 86 88 92 93 1124 614 529 106 1132 624 626 787 1149 130 706 145 658 660 1175 154 159 1185 164 678 680 169 187 1213 193 1218 196 717 208 733 229 1260 637 1264 296 1266 1268 1272 763 258 259 1284 1288 812 269 272 785 1298 275 1301 280 1306 798 287 800 1318 1320 809 300 1327 1329 309 310 1336 827 830 1333 833 836 1351 141 850 856 347 861 351 873 1170 369 148 558 903 907 908 910 1005 401 917 919 922 413 415 416 417 931 940 429 444 407 454 673 973 760 979 980 79 476 477 480 483 997 1106 1006 495 496 1012 1015 1022 511)
+       )
+      (group
+        (bone    "Upper Leg.R")
+        (weight   0.000000)
+        (vertices 608 644 1253 583 1032 18 1139 1141 1144 767 1246 965)
+       )
+      (group
+        (bone    "Lower Leg.L")
+        (weight   1.000000)
+        (vertices 1033 15 539 1055 544 1062 1065 554 1075 1078 1088 1089 578 70 1095 584 585 586 1099 589 80 1105 96 107 1136 117 1145 1147 1148 645 1159 140 143 144 150 669 158 112 162 1192 173 690 705 709 200 204 723 1239 732 735 1250 891 744 1262 241 1271 255 266 270 1297 795 304 1325 816 308 311 824 318 319 832 1347 1349 339 340 352 353 379 893 409 924 934 425 438 963 471 988 492 1011 508)
+       )
+      (group
+        (bone    "Forearm.L")
+        (weight   1.000000)
+        (vertices 3 1035 13 16 21 23 1048 1049 1054 32 1057 546 1115 36 37 550 1063 42 775 47 566 1079 1081 65 67 580 1097 76 77 590 83 84 597 1110 1111 1114 603 186 97 101 1126 1127 1128 1131 622 111 1140 630 631 634 123 128 1157 649 139 146 147 1174 663 1176 1177 666 155 156 161 1188 1189 167 171 1197 175 688 1201 883 692 693 695 185 698 190 704 262 33 713 1229 212 725 214 728 218 220 222 549 225 226 232 748 238 239 1265 1267 244 1269 761 250 768 1286 1287 267 1303 1305 284 730 1310 802 1317 295 813 302 305 819 823 829 321 481 1352 842 849 857 858 863 864 866 366 367 659 1291 892 388 392 905 909 402 916 932 936 427 439 953 443 446 588 459 462 975 977 1102 249 817 992 993 482 996 497 502 507 1023)
+       )
+      (group
+        (bone    "Upper Leg.R")
+        (weight   0.500000)
+        (vertices 257 418 39 78 336 668)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.645260)
+        (vertices 967 623)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.000507)
+        (vertices 298 231 324 447)
+       )
+      (group
+        (bone    "Lower Leg.R")
+        (weight   1.000000)
+        (vertices 0 514 518 1031 1032 10 1036 525 18 1045 1050 547 39 49 1034 577 68 583 73 1101 78 86 89 608 614 620 626 1139 1141 119 1144 644 646 136 650 1166 660 154 668 670 1185 680 169 187 1213 193 1218 1226 1246 1253 1255 1260 767 257 1288 269 784 785 274 275 280 1315 1332 316 1351 336 850 854 362 888 895 907 400 413 926 418 437 962 965 456 460 980 985 483 999 338 1012 1015 510)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   0.697659)
+        (vertices 528 1027 237 1133)
+       )
+      (group
+        (bone    "Upper Arm.R")
+        (weight   1.000000)
+        (vertices 1281 131 1285 1030 301 707 22 279 920 282 411 794 289 134 166 937 1069 1070 687 306 307 1204 313 442 373 320 1345 331 838 201 587 1279 720 209 978 91 1244 1158 95 737 994 1190 358 104 843 613 370 501 246 248 1018 251 764 639)
+       )
      ) ;; groups
 
    ) ;; mesh
 
+  (mesh
+    (name "")
+    (texture "textures/texture1.png")
+
+    (vertices
+       -0.162368  -0.180741  -0.301794 ;; 0 was 18
+        0.116580  -0.255931  -0.252713 ;; 1 was 121
+       -0.000098  -0.167556  -0.363882 ;; 2 was 48
+        0.017435  -0.116621   0.184560 ;; 3 was 116
+       -0.000101  -0.103588   0.189574 ;; 4 was 47
+       -0.000101  -0.165763   0.155157 ;; 5 was 81
+       -0.099767  -0.048403   0.110438 ;; 6 was 23
+       -0.017613  -0.116621   0.184560 ;; 7 was 32
+        0.025108  -0.187943   0.148529 ;; 8 was 144
+       -0.025281  -0.187942   0.148529 ;; 9 was 5
+       -0.000087  -0.292113  -0.313443 ;; 10 was 102
+       -0.025314  -0.194608   0.152426 ;; 11 was 78
+        0.024965  -0.181024   0.155372 ;; 12 was 86
+       -0.000101  -0.103588   0.189574 ;; 13 was 47
+       -0.000089   0.222528  -0.098664 ;; 14 was 143
+       -0.000097   0.048219  -0.403361 ;; 15 was 58
+       -0.089770  -0.240529   0.095123 ;; 16 was 24
+        0.152337  -0.076046   0.045449 ;; 17 was 87
+       -0.000102  -0.234159   0.147928 ;; 18 was 75
+       -0.114150  -0.335994  -0.108793 ;; 19 was 62
+        0.019725  -0.013626   0.124742 ;; 20 was 93
+        0.113976  -0.335994  -0.108793 ;; 21 was 100
+       -0.000101  -0.180742   0.159165 ;; 22 was 57
+       -0.000087  -0.292113  -0.313443 ;; 23 was 102
+       -0.000100  -0.293170   0.122752 ;; 24 was 52
+       -0.000098  -0.167556  -0.363882 ;; 25 was 48
+       -0.171529  -0.003270  -0.020677 ;; 26 was 68
+        0.020358  -0.104045   0.184269 ;; 27 was 140
+        0.137849  -0.226767  -0.106004 ;; 28 was 126
+       -0.058912  -0.248374  -0.279986 ;; 29 was 35
+       -0.024817  -0.167083   0.150325 ;; 30 was 82
+       -0.000089   0.222528  -0.098664 ;; 31 was 143
+       -0.121366   0.037843   0.113177 ;; 32 was 29
+       -0.019898  -0.013626   0.124742 ;; 33 was 70
+       -0.000102  -0.194340   0.156385 ;; 34 was 77
+       -0.000101  -0.381902  -0.017364 ;; 35 was 60
+        0.038458  -0.288857   0.112872 ;; 36 was 129
+       -0.000089   0.222528  -0.098664 ;; 37 was 143
+        0.121193   0.037843   0.113177 ;; 38 was 119
+       -0.079907   0.029072   0.125086 ;; 39 was 0
+        0.116580  -0.255931  -0.252713 ;; 40 was 121
+       -0.154168   0.024400   0.053299 ;; 41 was 15
+       -0.024817  -0.167083   0.150325 ;; 42 was 82
+       -0.000089   0.222528  -0.098664 ;; 43 was 143
+        0.042460   0.020637   0.136994 ;; 44 was 142
+        0.034048  -0.258671   0.144214 ;; 45 was 91
+       -0.038633  -0.288856   0.112872 ;; 46 was 19
+        0.115977  -0.083468   0.111428 ;; 47 was 98
+        0.031600  -0.279186   0.136841 ;; 48 was 128
+        0.024644  -0.167084   0.150325 ;; 49 was 85
+       -0.000102  -0.300108  -0.017472 ;; 50 was 50
+       -0.083353  -0.270161  -0.062302 ;; 51 was 83
+        0.031472  -0.236276   0.140862 ;; 52 was 89
+       -0.000102   0.009273   0.129329 ;; 53 was 72
+        0.133771   0.120340   0.082274 ;; 54 was 115
+        0.031600  -0.279186   0.136841 ;; 55 was 128
+        0.083180  -0.270161  -0.062302 ;; 56 was 84
+       -0.000100  -0.280785   0.144839 ;; 57 was 49
+       -0.152510  -0.076046   0.045449 ;; 58 was 79
+       -0.114150  -0.335994  -0.108793 ;; 59 was 62
+        0.019725  -0.013626   0.124742 ;; 60 was 93
+       -0.000099  -0.137982   0.160648 ;; 61 was 54
+        0.058739  -0.248374  -0.279986 ;; 62 was 113
+        0.157576  -0.163047  -0.072651 ;; 63 was 94
+        0.034048  -0.258671   0.144214 ;; 64 was 91
+        0.036739  -0.132836   0.152917 ;; 65 was 120
+       -0.020921  -0.214602   0.139589 ;; 66 was 74
+        0.020747  -0.214602   0.139589 ;; 67 was 90
+       -0.121710   0.038522  -0.368101 ;; 68 was 36
+       -0.093715  -0.301320  -0.264741 ;; 69 was 61
+       -0.078985   0.002434   0.098836 ;; 70 was 12
+       -0.000097   0.048219  -0.403361 ;; 71 was 58
+       -0.000099  -0.137982   0.160648 ;; 72 was 54
+       -0.093715  -0.301320  -0.264741 ;; 73 was 61
+       -0.000102  -0.187689   0.152499 ;; 74 was 46
+        0.078812   0.002433   0.098836 ;; 75 was 136
+       -0.000100  -0.255326   0.151201 ;; 76 was 67
+       -0.020921  -0.214602   0.139589 ;; 77 was 74
+       -0.000102   0.140258   0.124818 ;; 78 was 59
+       -0.023024   0.007741   0.133355 ;; 79 was 71
+       -0.000089   0.222528  -0.098664 ;; 80 was 143
+        0.168929  -0.070978  -0.005084 ;; 81 was 96
+        0.058739  -0.248374  -0.279986 ;; 82 was 113
+        0.086070  -0.136199   0.129780 ;; 83 was 99
+       -0.055812  -0.036250   0.106463 ;; 84 was 39
+        0.052435  -0.083160   0.129515 ;; 85 was 97
+       -0.056539  -0.233340   0.132132 ;; 86 was 7
+       -0.000101  -0.214823   0.144088 ;; 87 was 56
+       -0.200230   0.023588  -0.089892 ;; 88 was 21
+       -0.025314  -0.194608   0.152426 ;; 89 was 78
+       -0.086243  -0.136198   0.129780 ;; 90 was 63
+       -0.043364  -0.014844   0.094360 ;; 91 was 14
+       -0.019898  -0.013626   0.124742 ;; 92 was 70
+       -0.138022  -0.226766  -0.106004 ;; 93 was 22
+       -0.000114  -0.060410   0.155772 ;; 94 was 4
+       -0.000102   0.009273   0.129329 ;; 95 was 72
+       -0.169102  -0.070978  -0.005084 ;; 96 was 66
+        0.103687  -0.031188   0.075305 ;; 97 was 138
+        0.124273  -0.213389  -0.015068 ;; 98 was 104
+        0.179667  -0.087410  -0.079778 ;; 99 was 108
+       -0.000102  -0.234159   0.147928 ;; 100 was 75
+        0.133962  -0.009252   0.041657 ;; 101 was 135
+        0.077909  -0.167889  -0.362360 ;; 102 was 131
+        0.093542  -0.301321  -0.264741 ;; 103 was 101
+       -0.052608  -0.083159   0.129515 ;; 104 was 65
+        0.146431  -0.156831  -0.009232 ;; 105 was 106
+        0.106086   0.004738   0.082739 ;; 106 was 139
+       -0.179840  -0.087409  -0.079778 ;; 107 was 40
+        0.102846  -0.185478   0.087072 ;; 108 was 103
+       -0.000101  -0.214823   0.144088 ;; 109 was 56
+       -0.000089   0.222528  -0.098664 ;; 110 was 143
+        0.083180  -0.270161  -0.062302 ;; 111 was 84
+        0.140287  -0.041210   0.075742 ;; 112 was 132
+        0.031472  -0.236276   0.140862 ;; 113 was 89
+       -0.197310  -0.221895  -0.157871 ;; 114 was 26
+       -0.134135  -0.009252   0.041657 ;; 115 was 13
+       -0.000101  -0.381902  -0.017364 ;; 116 was 60
+       -0.000102  -0.240817  -0.307257 ;; 117 was 53
+       -0.038633  -0.288856   0.112872 ;; 118 was 19
+       -0.116150  -0.083468   0.111428 ;; 119 was 64
+       -0.083353  -0.270161  -0.062302 ;; 120 was 83
+        0.020747  -0.214602   0.139589 ;; 121 was 90
+       -0.000101  -0.180742   0.159165 ;; 122 was 57
+       -0.103860  -0.031188   0.075305 ;; 123 was 10
+       -0.034223  -0.258671   0.144214 ;; 124 was 73
+        0.043192  -0.014844   0.094360 ;; 125 was 134
+        0.099595  -0.048403   0.110438 ;; 126 was 125
+       -0.205666   0.014451  -0.265658 ;; 127 was 25
+       -0.000102  -0.007507   0.120977 ;; 128 was 55
+       -0.012272  -0.061468   0.151038 ;; 129 was 3
+       -0.000100  -0.280785   0.144839 ;; 130 was 49
+       -0.103019  -0.185478   0.087072 ;; 131 was 45
+        0.025141  -0.194608   0.152426 ;; 132 was 88
+       -0.020533  -0.104045   0.184269 ;; 133 was 8
+       -0.133943   0.120340   0.082274 ;; 134 was 33
+        0.079734   0.029071   0.125086 ;; 135 was 1
+       -0.058912  -0.248374  -0.279986 ;; 136 was 35
+       -0.146604  -0.156831  -0.009232 ;; 137 was 42
+        0.217207  -0.090661  -0.161713 ;; 138 was 107
+       -0.023024   0.007741   0.133355 ;; 139 was 71
+        0.024644  -0.167084   0.150325 ;; 140 was 85
+       -0.165569   0.046003   0.001105 ;; 141 was 38
+       -0.158282  -0.012372   0.018480 ;; 142 was 31
+       -0.000102  -0.300108  -0.017472 ;; 143 was 50
+       -0.012272  -0.061468   0.151038 ;; 144 was 3
+        0.022851   0.007741   0.133355 ;; 145 was 92
+       -0.025139  -0.181024   0.155372 ;; 146 was 80
+       -0.000099  -0.117178   0.189635 ;; 147 was 51
+        0.076979  -0.033090   0.092908 ;; 148 was 137
+        0.024965  -0.181024   0.155372 ;; 149 was 86
+        0.025141  -0.194608   0.152426 ;; 150 was 88
+       -0.063436   0.141229   0.110891 ;; 151 was 34
+       -0.058912  -0.248374  -0.279986 ;; 152 was 35
+       -0.000089   0.222528  -0.098664 ;; 153 was 143
+        0.055639  -0.036250   0.106463 ;; 154 was 109
+        0.058739  -0.248374  -0.279986 ;; 155 was 113
+       -0.000099  -0.117178   0.189635 ;; 156 was 51
+       -0.124446  -0.213389  -0.015068 ;; 157 was 44
+       -0.031644  -0.236276   0.140862 ;; 158 was 76
+        0.205493   0.014451  -0.265658 ;; 159 was 123
+       -0.031775  -0.279186   0.136841 ;; 160 was 20
+       -0.017613  -0.116621   0.184560 ;; 161 was 32
+       -0.000089   0.222528  -0.098664 ;; 162 was 143
+       -0.000102  -0.187689   0.152499 ;; 163 was 46
+        0.158109  -0.012372   0.018480 ;; 164 was 117
+        0.197137  -0.221895  -0.157871 ;; 165 was 122
+       -0.000102  -0.194340   0.156385 ;; 166 was 77
+       -0.000114  -0.060410   0.155772 ;; 167 was 4
+       -0.000087  -0.292113  -0.313443 ;; 168 was 102
+       -0.025281  -0.187942   0.148529 ;; 169 was 5
+       -0.000102  -0.240817  -0.307257 ;; 170 was 53
+       -0.078088  -0.167889  -0.362360 ;; 171 was 17
+       -0.140460  -0.041209   0.075742 ;; 172 was 16
+        0.017435  -0.116621   0.184560 ;; 173 was 116
+       -0.000089   0.222528  -0.098664 ;; 174 was 143
+        0.020358  -0.104045   0.184269 ;; 175 was 140
+       -0.000102  -0.240817  -0.307257 ;; 176 was 53
+       -0.116752  -0.255930  -0.252713 ;; 177 was 27
+       -0.031644  -0.236276   0.140862 ;; 178 was 76
+       -0.000100  -0.255326   0.151201 ;; 179 was 67
+        0.058739  -0.248374  -0.279986 ;; 180 was 113
+        0.171356  -0.003270  -0.020677 ;; 181 was 95
+       -0.222388   0.023373  -0.170499 ;; 182 was 37
+       -0.034223  -0.258671   0.144214 ;; 183 was 73
+       -0.000101  -0.165763   0.155157 ;; 184 was 81
+       -0.172394  -0.130239  -0.105688 ;; 185 was 43
+        0.093542  -0.301321  -0.264741 ;; 186 was 101
+       -0.217380  -0.090660  -0.161713 ;; 187 was 41
+       -0.077152  -0.033089   0.092908 ;; 188 was 11
+        0.089597  -0.240529   0.095123 ;; 189 was 124
+       -0.073106  -0.177705   0.115099 ;; 190 was 30
+       -0.020533  -0.104045   0.184269 ;; 191 was 8
+        0.153995   0.024400   0.053299 ;; 192 was 133
+       -0.036914  -0.132835   0.152917 ;; 193 was 28
+       -0.000089   0.222528  -0.098664 ;; 194 was 143
+       -0.000089   0.222528  -0.098664 ;; 195 was 143
+        0.121535   0.038522  -0.368101 ;; 196 was 112
+        0.200058   0.023588  -0.089892 ;; 197 was 127
+       -0.036914  -0.132835   0.152917 ;; 198 was 28
+        0.036739  -0.132836   0.152917 ;; 199 was 120
+       -0.000102  -0.240817  -0.307257 ;; 200 was 53
+       -0.000089   0.222528  -0.098664 ;; 201 was 143
+       -0.000102  -0.007507   0.120977 ;; 202 was 55
+        0.012132  -0.061605   0.151084 ;; 203 was 2
+        0.222215   0.023372  -0.170499 ;; 204 was 111
+       -0.157749  -0.163047  -0.072651 ;; 205 was 69
+       -0.106259   0.004738   0.082739 ;; 206 was 9
+        0.165396   0.046003   0.001105 ;; 207 was 110
+        0.072932  -0.177706   0.115099 ;; 208 was 118
+        0.172221  -0.130239  -0.105688 ;; 209 was 105
+        0.063263   0.141228   0.110891 ;; 210 was 114
+       -0.031775  -0.279186   0.136841 ;; 211 was 20
+       -0.000100  -0.293170   0.122752 ;; 212 was 52
+        0.162195  -0.180741  -0.301794 ;; 213 was 130
+       -0.042632   0.020637   0.136994 ;; 214 was 6
+       -0.025139  -0.181024   0.155372 ;; 215 was 80
+        0.056366  -0.233340   0.132132 ;; 216 was 141
+     ) ;; vertices
+
+    (normals
+      -0.402264 -0.402264 -0.583331
+      -0.534928 -0.534928 -0.512742
+      -0.405652 -0.405652 -0.913999
+      -0.416364 -0.416364  0.780908
+       0.313883  0.313883  0.949431
+       0.061464  0.061464  0.998108
+       0.544328  0.544328  0.777429
+      -0.465804 -0.416303  0.780816
+      -0.075808 -0.075808  0.907895
+      -0.075808 -0.075808  0.907865
+       0.089145  0.089145 -0.996002
+      -0.070925 -0.070925  0.911985
+      -0.205206 -0.205206  0.900204
+       0.000061  0.313883  0.949431
+       0.995941  0.995941 -0.089938
+       0.436933  0.436933 -0.899472
+      -0.430097 -0.430097  0.391461
+      -0.125523 -0.125523  0.359874
+      -0.000092  0.172338  0.985015
+      -0.213385 -0.213385  0.445631
+       0.092807  0.092807  0.920530
+      -0.213416 -0.213416  0.445662
+      -0.217597 -0.217597  0.976012
+       0.089145  0.089145 -0.996002
+      -0.000031 -0.958708  0.284280
+      -0.405652 -0.405652 -0.913999
+       0.009552  0.009552  0.361309
+       0.271035  0.271035  0.704276
+      -0.478103 -0.478103  0.324717
+      -0.350352 -0.350352 -0.852931
+      -0.393262  0.037935  0.918638
+       0.995941  0.995941 -0.089938
+      -0.231544 -0.231544  0.774865
+       0.092990  0.092990  0.920499
+      -0.015687 -0.015687  0.999847
+      -0.155583 -0.155583  0.987793
+      -0.852901 -0.852901  0.250130
+       0.995941  0.995941 -0.089938
+      -0.231544 -0.231544  0.774865
+      -0.281289 -0.281289  0.899258
+       0.671468 -0.534928 -0.512742
+      -0.230232 -0.230232  0.440168
+       0.037935  0.037935  0.918638
+       0.995941  0.995941 -0.089938
+      -0.284494 -0.284494  0.942503
+       0.424329 -0.138676  0.894803
+      -0.852870 -0.852870  0.250130
+       0.019868  0.019868  0.759392
+       0.421522 -0.599475  0.680349
+       0.393170  0.037935  0.918668
+      -0.826197 -0.826197  0.563372
+      -0.491531 -0.491531  0.497665
+       0.266854  0.180059  0.946745
+       0.000122 -0.177099  0.984191
+       0.542405  0.542405  0.389782
+      -0.599475 -0.599475  0.680349
+       0.714560 -0.491592  0.497696
+      -0.000061 -0.622364  0.782708
+      -0.125523 -0.125523  0.359874
+      -0.869381 -0.213385  0.445631
+       0.379437  0.092807  0.920530
+      -0.000092 -0.535661  0.844417
+      -0.350322 -0.350322 -0.852962
+      -0.322398 -0.322398  0.156255
+      -0.138676 -0.138676  0.894803
+       0.525315 -0.139561  0.839351
+      -0.129887 -0.129887  0.936186
+       0.326456 -0.129917  0.936216
+       0.415815  0.415815 -0.741020
+      -0.719047 -0.164586 -0.675161
+      -0.518326 -0.518326  0.782617
+       0.436933  0.436933 -0.899472
+      -0.535661 -0.535661  0.844417
+      -0.164586 -0.164586 -0.675161
+      -0.132878 -0.132878  0.991119
+      -0.518326 -0.518326  0.782617
+      -0.000061 -0.052919  0.998596
+      -0.326609 -0.129887  0.936186
+       0.594562  0.594562  0.804010
+      -0.073611 -0.342418  0.936644
+       0.995941  0.995941 -0.089938
+      -0.124180 -0.124180  0.269387
+      -0.350322 -0.350322 -0.852962
+      -0.153539 -0.153539  0.826380
+       0.554125  0.554125  0.732414
+       0.269204  0.269204  0.871670
+      -0.023652 -0.023652  0.834040
+      -0.000092 -0.200842  0.979614
+       0.299600  0.299600  0.245369
+      -0.404004 -0.070925  0.911985
+      -0.153539 -0.153539  0.826380
+      -0.032441 -0.032441  0.862148
+      -0.379467  0.092990  0.920499
+      -0.478103 -0.478103  0.324717
+       0.000336  0.595721  0.803156
+      -0.177099 -0.177099  0.984191
+      -0.124180 -0.124180  0.269387
+       0.462935  0.462935  0.735496
+      -0.511856 -0.511856  0.173193
+      -0.217261 -0.217261  0.262276
+       0.172338  0.172338  0.985015
+       0.024323  0.024323  0.730583
+      -0.411176 -0.411176 -0.866115
+       0.719047 -0.164586 -0.675161
+       0.269204  0.269204  0.871731
+      -0.303598 -0.303598  0.239143
+      -0.491287 -0.491287  0.648366
+      -0.217261 -0.217261  0.262276
+      -0.197089 -0.197089  0.523179
+      -0.200842 -0.200842  0.979614
+       0.995941  0.995941 -0.089938
+      -0.491592 -0.491592  0.497696
+       0.393292  0.393292  0.591205
+       0.180059  0.180059  0.946745
+      -0.588336 -0.588336  0.196783
+       0.024323  0.024323  0.730583
+      -0.000031 -0.155583  0.987793
+      -0.393719 -0.393719 -0.919218
+      -0.458296 -0.852870  0.250130
+       0.019868  0.019868  0.759392
+      -0.714591 -0.491531  0.497665
+      -0.129917 -0.129917  0.936216
+      -0.000061 -0.217597  0.976012
+       0.462935  0.462935  0.735496
+      -0.424421 -0.138676  0.894772
+      -0.032441 -0.032441  0.862148
+       0.544298  0.544298  0.777429
+       0.329356  0.329356 -0.381146
+       0.000153 -0.022950  0.999725
+       0.452406  0.452406  0.756035
+      -0.622364 -0.622364  0.782708
+      -0.197089 -0.197089  0.523179
+       0.403882 -0.070925  0.912015
+       0.270974  0.270974  0.704306
+       0.542405  0.542405  0.389782
+      -0.281289 -0.281289  0.899258
+      -0.350352 -0.350352 -0.852931
+      -0.303598 -0.303598  0.239143
+      -0.128574 -0.128574  0.124516
+      -0.342418 -0.342418  0.936644
+       0.037935  0.037935  0.918668
+       0.315500  0.315500  0.148289
+       0.000580  0.000580  0.391858
+      -0.000092 -0.826197  0.563372
+      -0.472945  0.452406  0.756035
+      -0.342418 -0.342418  0.936613
+      -0.205206 -0.205206  0.900174
+      -0.000092 -0.445387  0.895321
+       0.494003  0.494003  0.809076
+       0.384014 -0.205206  0.900204
+      -0.070925 -0.070925  0.912015
+       0.656880  0.656880  0.696585
+      -0.386944 -0.350352 -0.852931
+       0.995941  0.995941 -0.089938
+       0.554125  0.554125  0.732414
+      -0.350322 -0.350322 -0.852962
+      -0.445387 -0.445387  0.895321
+      -0.511856 -0.511856  0.173193
+       0.180059  0.180059  0.946715
+       0.329356  0.329356 -0.381146
+      -0.421613 -0.599445  0.680319
+      -0.416303 -0.416303  0.780816
+       0.995941  0.995941 -0.089938
+      -0.000092 -0.132878  0.991119
+       0.000580  0.000580  0.391858
+      -0.588336 -0.588336  0.196783
+      -0.000092 -0.015687  0.999847
+       0.595721  0.595721  0.803156
+       0.000000  0.089145 -0.996002
+      -0.412305 -0.075808  0.907865
+      -0.393719 -0.393719 -0.919218
+      -0.411176 -0.411176 -0.866115
+       0.393292  0.393292  0.591205
+       0.465590 -0.416364  0.780908
+       0.995941  0.995941 -0.089938
+       0.656117  0.271035  0.704276
+      -0.393719 -0.393719 -0.919218
+      -0.534928 -0.534928 -0.512742
+      -0.266945  0.180059  0.946715
+      -0.052919 -0.052919  0.998596
+       0.386883 -0.350322 -0.852962
+       0.009552  0.009552  0.361309
+       0.368389  0.368389  0.025788
+      -0.138676 -0.138676  0.894772
+      -0.000092  0.061464  0.998108
+      -0.267037 -0.267037  0.386578
+      -0.164586 -0.164586 -0.675161
+      -0.128574 -0.128574  0.124516
+       0.494003  0.494003  0.809076
+      -0.430097 -0.430097  0.391461
+      -0.203772 -0.203772  0.795618
+      -0.656117  0.270974  0.704306
+      -0.230232 -0.230232  0.440168
+      -0.139500 -0.139500  0.839320
+       0.995941  0.995941 -0.089938
+       0.995941  0.995941 -0.089938
+       0.415815  0.415815 -0.741050
+       0.299600  0.299600  0.245369
+      -0.525376 -0.139500  0.839320
+      -0.139561 -0.139561  0.839351
+      -0.393719 -0.393719 -0.919218
+       0.995941  0.995941 -0.089938
+      -0.022950 -0.022950  0.999725
+       0.452528  0.452528  0.755760
+       0.368389  0.368389  0.025788
+      -0.322398 -0.322398  0.156255
+      -0.491287 -0.491287  0.648366
+       0.315500  0.315500  0.148289
+      -0.203772 -0.203772  0.795618
+      -0.267037 -0.267037  0.386578
+       0.656880  0.656880  0.696585
+      -0.599445 -0.599445  0.680319
+      -0.958708 -0.958708  0.284280
+      -0.402264 -0.402264 -0.583361
+      -0.284494 -0.284494  0.942503
+      -0.384106 -0.205206  0.900174
+      -0.023682 -0.023682  0.834040
+     ) ;; normals
+
+    (texcoords
+      0.254218 0.612386
+      0.664751 0.676133
+      0.173166 0.605419
+      0.524741 0.547363
+      0.507956 0.530518
+      0.508526 0.569335
+      0.456862 0.507707
+      0.491819 0.547363
+      0.521986 0.583984
+      0.494574 0.583984
+      0.682906 0.703449
+      0.495530 0.588464
+      0.522657 0.579620
+      0.507956 0.530518
+      0.404665 0.358157
+      0.127480 0.369175
+      0.450046 0.635509
+      0.598975 0.516959
+      0.508480 0.610711
+      0.386304 0.716850
+      0.525717 0.485751
+      0.648715 0.716850
+      0.508604 0.579688
+      0.350256 0.709309
+      0.508604 0.652344
+      0.851614 0.610356
+      0.388052 0.469858
+      0.521283 0.534424
+      0.680245 0.588334
+      0.291959 0.699740
+      0.496939 0.569262
+      0.800772 0.218587
+      0.447957 0.436523
+      0.490843 0.485751
+      0.508631 0.588223
+      0.508972 0.720855
+      0.519787 0.643686
+      0.273897 0.258403
+      0.568604 0.437988
+      0.465535 0.443848
+      0.664751 0.676133
+      0.417134 0.436523
+      0.496939 0.569262
+      0.611895 0.358157
+      0.533447 0.451172
+      0.533451 0.623574
+      0.487928 0.647090
+      0.567689 0.530027
+      0.521664 0.635785
+      0.519621 0.569262
+      0.508874 0.692559
+      0.415353 0.639955
+      0.525319 0.614058
+      0.509032 0.459992
+      0.573160 0.402406
+      0.521664 0.635785
+      0.622625 0.638351
+      0.508484 0.634508
+      0.415761 0.519107
+      0.386304 0.716850
+      0.525717 0.485751
+      0.507956 0.561035
+      0.701360 0.674173
+      0.656091 0.556355
+      0.533451 0.623574
+      0.532390 0.557129
+      0.493661 0.599243
+      0.522899 0.599243
+      0.172859 0.378810
+      0.368492 0.710289
+      0.456189 0.466212
+      0.891422 0.366196
+      0.507956 0.561035
+      0.368492 0.710289
+      0.508604 0.584229
+      0.555488 0.466212
+      0.508480 0.619681
+      0.493661 0.599243
+      0.508604 0.392578
+      0.496027 0.460236
+      0.741966 0.257508
+      0.625009 0.511915
+      0.682987 0.675153
+      0.560608 0.569976
+      0.473082 0.496893
+      0.550459 0.535650
+      0.477254 0.618408
+      0.508604 0.599854
+      0.360223 0.451752
+      0.495530 0.588464
+      0.452002 0.559797
+      0.477835 0.474704
+      0.490843 0.485751
+      0.336315 0.588334
+      0.508060 0.496857
+      0.509032 0.459992
+      0.391897 0.513413
+      0.575993 0.487889
+      0.616690 0.602084
+      0.657486 0.520776
+      0.508480 0.610711
+      0.596855 0.474278
+      0.814931 0.614781
+      0.664670 0.704429
+      0.465936 0.535548
+      0.631109 0.557644
+      0.575993 0.466212
+      0.359074 0.520776
+      0.606690 0.581331
+      0.508604 0.599854
+      0.539307 0.378906
+      0.622625 0.638351
+      0.603633 0.497621
+      0.525319 0.614058
+      0.324983 0.606774
+      0.419706 0.474278
+      0.508972 0.720855
+      0.701279 0.702469
+      0.487928 0.647090
+      0.445448 0.528803
+      0.415353 0.639955
+      0.522899 0.599243
+      0.508604 0.579688
+      0.435685 0.487889
+      0.483109 0.623574
+      0.538725 0.474704
+      0.560097 0.509783
+      0.235202 0.392804
+      0.507956 0.479980
+      0.500217 0.499237
+      0.508484 0.634508
+      0.409870 0.581331
+      0.521030 0.588464
+      0.495277 0.534424
+      0.443400 0.402406
+      0.551025 0.444580
+      0.350175 0.681012
+      0.389257 0.568022
+      0.705225 0.498338
+      0.496027 0.460236
+      0.519621 0.569262
+      0.396192 0.421706
+      0.396648 0.478308
+      0.508874 0.692559
+      0.500217 0.499237
+      0.521195 0.460195
+      0.493903 0.579620
+      0.508310 0.541504
+      0.555488 0.487889
+      0.522657 0.579620
+      0.521030 0.588464
+      0.477254 0.388672
+      0.350175 0.681012
+      0.477254 0.378906
+      0.543479 0.496893
+      0.727475 0.705693
+      0.508310 0.541504
+      0.399128 0.604842
+      0.491424 0.614072
+      0.781358 0.392804
+      0.492012 0.636070
+      0.491819 0.547363
+      0.565187 0.380005
+      0.508604 0.584229
+      0.624795 0.479284
+      0.696931 0.617852
+      0.508631 0.588223
+      0.508060 0.496857
+      0.350256 0.709309
+      0.494574 0.583984
+      0.239866 0.700543
+      0.209024 0.608810
+      0.412414 0.494626
+      0.524741 0.547363
+      0.214725 0.220765
+      0.521283 0.534424
+      0.781533 0.707936
+      0.368410 0.681992
+      0.491424 0.614072
+      0.508480 0.619681
+      0.682987 0.675153
+      0.630456 0.469951
+      0.299659 0.446372
+      0.483109 0.623574
+      0.508526 0.569335
+      0.339343 0.538082
+      0.664670 0.704429
+      0.301570 0.498338
+      0.456189 0.487889
+      0.566515 0.635509
+      0.466389 0.581055
+      0.495277 0.534424
+      0.599426 0.436523
+      0.484170 0.557129
+      0.375441 0.337194
+      0.641119 0.337194
+      0.845195 0.377130
+      0.656337 0.451752
+      0.484170 0.557129
+      0.532390 0.557129
+      0.331802 0.680032
+      0.451374 0.380005
+      0.507956 0.479980
+      0.516344 0.499237
+      0.707136 0.446372
+      0.360469 0.556355
+      0.435685 0.466212
+      0.620368 0.421706
+      0.550171 0.581055
+      0.676319 0.536163
+      0.539307 0.388672
+      0.492012 0.636070
+      0.508604 0.652344
+      0.768893 0.619801
+      0.483113 0.451172
+      0.493903 0.579620
+      0.539307 0.618408
+     ) ;; texcoords
+
+    (triangles
+      135 44 75
+      135 38 210
+      39 32 70
+      39 214 151
+      157 205 93
+      157 137 205
+      98 63 105
+      98 28 63
+      73 177 136
+      69 152 168
+      23 136 200
+      10 117 62
+      186 10 82
+      103 180 40
+      35 21 111
+      116 56 143
+      35 50 51
+      116 120 59
+      20 203 85
+      20 202 203
+      33 129 202
+      33 104 129
+      27 203 167
+      175 94 13
+      4 167 129
+      13 144 191
+      202 167 203
+      202 129 167
+      203 199 85
+      156 72 199
+      147 65 173
+      156 161 193
+      147 198 61
+      3 27 4
+      173 13 147
+      161 156 4
+      7 13 191
+      104 193 129
+      127 182 194
+      185 93 205
+      185 205 107
+      157 93 51
+      157 51 46
+      51 93 19
+      119 104 6
+      119 6 172
+      50 212 46
+      50 46 51
+      193 90 190
+      193 190 42
+      137 131 58
+      137 58 96
+      190 146 42
+      5 42 146
+      184 215 122
+      72 193 42
+      61 30 184
+      74 22 146
+      163 215 169
+      119 58 131
+      119 131 90
+      131 190 90
+      58 172 142
+      58 142 96
+      90 104 119
+      190 86 66
+      190 66 11
+      34 11 66
+      166 77 87
+      11 34 74
+      89 163 169
+      190 11 9
+      16 46 211
+      16 211 183
+      183 86 16
+      158 86 183
+      158 100 109
+      178 87 77
+      212 130 211
+      24 160 118
+      179 100 158
+      76 178 124
+      66 86 158
+      183 211 130
+      124 57 76
+      32 151 134
+      32 134 41
+      32 39 151
+      151 214 78
+      33 202 95
+      92 53 79
+      139 91 33
+      139 78 214
+      205 137 96
+      205 96 107
+      26 96 142
+      26 141 88
+      142 141 26
+      26 88 96
+      96 88 107
+      157 46 16
+      157 16 137
+      33 84 104
+      172 58 119
+      86 190 131
+      86 131 16
+      177 73 19
+      177 19 93
+      187 182 127
+      114 93 185
+      114 185 187
+      107 187 185
+      182 187 107
+      182 107 88
+      123 188 70
+      123 70 206
+      201 134 151
+      14 88 141
+      78 153 151
+      171 68 15
+      171 15 2
+      0 127 68
+      0 68 171
+      68 127 37
+      29 177 0
+      29 0 171
+      170 29 171
+      170 171 2
+      93 114 177
+      15 68 174
+      90 193 104
+      104 84 6
+      131 137 16
+      141 134 201
+      32 41 206
+      32 206 70
+      6 188 123
+      6 123 172
+      172 123 115
+      172 115 142
+      41 142 115
+      41 115 206
+      127 114 187
+      84 91 188
+      84 188 6
+      9 146 190
+      214 70 91
+      214 39 70
+      139 95 78
+      133 129 193
+      70 188 91
+      41 141 142
+      134 141 41
+      206 115 123
+      33 91 84
+      91 139 214
+      0 177 114
+      194 182 88
+      161 133 193
+      114 127 0
+      159 195 204
+      209 63 28
+      209 99 63
+      98 111 28
+      98 36 111
+      111 21 28
+      47 126 85
+      47 112 126
+      50 36 212
+      50 111 36
+      199 208 83
+      199 140 208
+      105 17 108
+      105 81 17
+      208 140 12
+      5 22 12
+      184 149 49
+      72 5 140
+      61 49 65
+      74 8 12
+      163 149 122
+      47 108 17
+      47 83 108
+      108 83 208
+      17 164 112
+      17 81 164
+      83 47 85
+      208 121 216
+      208 150 121
+      34 109 121
+      166 67 132
+      150 8 74
+      132 163 166
+      208 8 150
+      189 55 36
+      189 64 55
+      64 189 216
+      113 64 216
+      113 121 109
+      52 87 18
+      212 36 55
+      24 48 57
+      179 64 113
+      76 52 18
+      121 113 216
+      64 179 130
+      45 57 48
+      38 54 210
+      38 192 54
+      210 44 135
+      210 78 44
+      20 145 95
+      60 53 128
+      145 20 125
+      145 44 78
+      63 81 105
+      63 99 81
+      181 164 81
+      181 197 207
+      164 181 207
+      181 81 197
+      81 99 197
+      98 189 36
+      98 105 189
+      20 85 154
+      112 47 17
+      216 108 208
+      216 189 108
+      1 21 186
+      1 28 21
+      138 159 204
+      165 209 28
+      165 138 209
+      99 209 138
+      204 99 138
+      204 197 99
+      97 75 148
+      97 106 75
+      162 210 54
+      43 207 197
+      78 210 110
+      102 71 196
+      102 25 71
+      213 196 159
+      213 102 196
+      196 80 159
+      155 213 1
+      155 102 213
+      176 102 155
+      176 25 102
+      28 1 165
+      71 31 196
+      83 85 199
+      85 126 154
+      108 189 105
+      207 162 54
+      38 106 192
+      38 75 106
+      126 97 148
+      126 112 97
+      112 101 97
+      112 164 101
+      192 101 164
+      192 106 101
+      159 138 165
+      154 148 125
+      154 126 148
+      8 208 12
+      44 125 75
+      135 75 38
+      145 78 95
+      27 199 203
+      75 125 148
+      192 164 207
+      54 192 207
+      106 97 101
+      20 154 125
+      125 44 145
+      213 165 1
+      195 197 204
+      3 199 27
+      165 213 159
+     ) ;; triangles
+
+    (groups
+      (group
+        (bone    "Hip")
+        (weight   1.000000)
+        (vertices 0 129 133 135 9 144 28 214 36 167 169 171 172 46 48 55 188 191 192 197 70 203 206 213 86 91 94 102 39 112 115 118 41 123 125 126)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.000000)
+        (vertices 194 195 37 201 43 162 174 80 14 110 153 31)
+       )
+      (group
+        (bone    "Toes.L")
+        (weight   1.000000)
+        (vertices 64 67 132 5 113 42 45 120 146 51 52 21 150 215 184 121 30)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.014412)
+        (vertices 27 175)
+       )
+      (group
+        (bone    "Neck")
+        (weight   0.750000)
+        (vertices 114)
+       )
+      (group
+        (bone    "Hand.L")
+        (weight   1.000000)
+        (vertices 131 4 6 7 136 137 141 142 16 151 152 29 160 161 163 134 157 177 182 185 187 190 193 68 198 32 74 13 211 84 88 93 107 114 127)
+       )
+      (group
+        (bone    "Rower Back")
+        (weight   1.000000)
+        (vertices 0 8 14 148 153 27 31 162 37 43 44 174 175 194 195 201 75 80 216 97 101 106 110)
+       )
+      (group
+        (bone    "Upper Arm.L")
+        (weight   0.011529)
+        (vertices 216 44)
+       )
+      (group
+        (bone    "Forearm.R")
+        (weight   1.000000)
+        (vertices 205 53 183 26 124 95)
+       )
+      (group
+        (bone    "Head")
+        (weight   1.000000)
+        (vertices
+       )
+      (group
+        (bone    "Forearm.L")
+        (weight   1.000000)
+        (vertices 107 131 187 157)
+       )
+      (group
+        (bone    "Lower Leg.L")
+        (weight   1.000000)
+        (vertices 65 164 165 38 199 40 208 1 189 159)
+       )
+      (group
+        (bone    "Hand.R")
+        (weight   1.000000)
+        (vertices 128 2 139 130 77 143 18 147 22 24 25 26 156 33 35 170 176 72 50 179 53 183 57 59 61 66 69 71 200 73 202 76 205 78 79 212 87 90 15 92 95 96 100 104 109 19 116 117 119 122 124)
+       )
+      (group
+        (bone    "Neck")
+        (weight   0.897600)
+        (vertices 165)
+       )
+      (group
+        (bone    "Neck")
+        (weight   1.000000)
+        (vertices 1 136 10 143 19 21 23 152 155 28 29 35 168 170 176 177 50 51 180 56 186 59 62 69 200 73 82 93 103 111 40 116 117 120)
+       )
+      (group
+        (bone    "Upper Back")
+        (weight   1.000000)
+        (vertices 194 195 37 8 201 43 44 162 14 175 80 174 216 153 27 110 31)
+       )
+      (group
+        (bone    "Foot.L")
+        (weight   1.000000)
+        (vertices 209 1 3 132 5 81 65 10 11 12 173 17 146 20 149 150 23 154 155 30 159 34 164 165 166 168 42 45 47 49 178 51 52 158 54 40 56 180 58 60 138 62 63 64 181 67 196 199 140 204 207 208 184 82 83 85 215 89 186 98 99 38 145 105 103 108 210 111 113 189 120 121 21)
+       )
+     ) ;; groups
+
+   ) ;; mesh
+
  ) ;; windstille-model
 
 ;; EOF ;;

Modified: trunk/windstille/data/levels/apartment.wst
===================================================================
--- trunk/windstille/data/levels/apartment.wst	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/data/levels/apartment.wst	2007-11-12 02:28:15 UTC (rev 1524)
@@ -215,7 +215,7 @@
       (z-pos -100)
       (sprite  "models/objects/barrobot/barrobotsprite.sprite")
       (active true)
-      (script "barrobot()")
+      (script "barrobot")
       (use-verb "Look")
     )
     

Modified: trunk/windstille/data/scripts/apartment/barrobot.nut
===================================================================
--- trunk/windstille/data/scripts/apartment/barrobot.nut	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/data/scripts/apartment/barrobot.nut	2007-11-12 02:28:15 UTC (rev 1524)
@@ -1,6 +1,35 @@
-conversation_add("Choice 1");
-conversation_get()
+barrobot <- Dialog(TOP, "Yagor", "images/portraits/yagor.sprite");
+jane     <- Dialog(TOP, "Jane", "images/portraits/jane.sprite");
 
+jane.say("So, what do you have to offer?")
+barrobot.say("Beer, plenty of bear, the finest brew in all of Nugani")
+jane.say("Anything else?")
+barrobot.say("Wiskey, Milk all that stuff, what do you want?")
+
+conversation_add2("Milk",   "Haven't drank any milk in a while.");
+conversation_add2("Wiskey", "I don't think my stomach can take it.");
+conversation_add2("Beer",   "The old classic, always good, never great.");
+
+switch (conversation_get())
+  {
+  case 0:
+    jane.say("Give me a Milk.");
+    barrobot.say("Milk drinker? Here you go.");
+    break;
+
+  case 1:
+    jane.say("Give me a Wiskey, the best you have"); 
+    barrobot.say("Here is the wiskey.");
+    break;
+
+  case 2:
+    jane.say("Give me a beer, that finest of Nugani");
+    barrobot.say("Here is the beer.");
+    break;
+  }
+
+quit()
+
 conversation_add("Choice 1");
 conversation_add("Choice 2");
 conversation_get()

Modified: trunk/windstille/data/scripts/windstille.nut
===================================================================
--- trunk/windstille/data/scripts/windstille.nut	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/data/scripts/windstille.nut	2007-11-12 02:28:15 UTC (rev 1524)
@@ -87,6 +87,12 @@
     portrait = arg_portrait;
   }
 
+  function say(text)
+  {
+    dialog_show(align, character, portrait, text);
+    wait_for_dialog();
+  }
+
   function show(text)
   {
     dialog_show(align, character, portrait, text);

Modified: trunk/windstille/lib/SConscript
===================================================================
--- trunk/windstille/lib/SConscript	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/lib/SConscript	2007-11-12 02:28:15 UTC (rev 1524)
@@ -2,7 +2,7 @@
 
 import glob
 
-Import('conf_env')
+Import('conf_env', 'features')
 
 glew_env = Environment(CPPPATH = ['glew'], CXXFLAGS = ['-g', '-DDEBUG'])
 
@@ -10,8 +10,12 @@
             glob.glob('glew/*.c') +
             glob.glob('glew/*.h'))
 
-squirrel_env = Environment(CPPPATH = ['SQUIRREL2/include'],
-             CXXFLAGS = ["-fno-rtti", "-g", "-DDEBUG"])
+squirrel_env = Environment(CPPPATH  = ['SQUIRREL2/include'],
+                           CXXFLAGS = ["-fno-rtti", "-g", "-DDEBUG"])
+
+if features['64bit']:
+    squirrel_env.Append(CPPDEFINES = '_SQ64')
+
 squirrel_env.Append(CXXFLAGS = conf_env['CXXFLAGS'])
 
 squirrel_env.Library('squirrel',

Modified: trunk/windstille/src/SConscript
===================================================================
--- trunk/windstille/src/SConscript	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/src/SConscript	2007-11-12 02:28:15 UTC (rev 1524)
@@ -24,7 +24,7 @@
 ##  02111-1307, USA.
 ##
 
-Import('conf_env')
+Import('conf_env', 'features')
 
 SConscript('scripting/SConscript')
 
@@ -33,6 +33,13 @@
 env.Append(LIBPATH = ['../lib/'] )
 env.Append(CPPPATH = ['.', '..', '../lib/SQUIRREL2/include/', '../lib/glew'])
 
+if features['64bit']:
+    env.Append(CPPDEFINES = '_SQ64')
+
+if features['cwiid']:
+    env.Append(CPPDEFINES = 'HAVE_CWIID')
+    env.Append(LIBS = 'cwiid')
+
 # env.Copy(LIBS = ['a', 'b'])
 
 env.foo = 5

Modified: trunk/windstille/src/input/controller.cpp
===================================================================
--- trunk/windstille/src/input/controller.cpp	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/src/input/controller.cpp	2007-11-12 02:28:15 UTC (rev 1524)
@@ -1,10 +1,6 @@
 /*  $Id$
-**   __      __ __             ___        __   __ __   __
-**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
-**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
-**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
-**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
-**         \/          \/      \/    \/                         \/
+**
+**  Pingus - A free Lemmings clone
 **  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
 **
 **  This program is free software; you can redistribute it and/or

Modified: trunk/windstille/src/windstille_main.cpp
===================================================================
--- trunk/windstille/src/windstille_main.cpp	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/src/windstille_main.cpp	2007-11-12 02:28:15 UTC (rev 1524)
@@ -85,15 +85,15 @@
       controller_description.add_button("secondary-button", SECONDARY_BUTTON);
       controller_description.add_button("tertiary-button",  TERTIARY_BUTTON);
 
-      controller_description.add_button("menu-up-button",  MENU_UP_BUTTON);
-      controller_description.add_button("menu-down-button",  MENU_DOWN_BUTTON);
+      controller_description.add_button("menu-up-button",   MENU_UP_BUTTON);
+      controller_description.add_button("menu-down-button", MENU_DOWN_BUTTON);
 
       controller_description.add_button("menu-left-button",  MENU_LEFT_BUTTON);
-      controller_description.add_button("menu-right-button",  MENU_RIGHT_BUTTON);
+      controller_description.add_button("menu-right-button", MENU_RIGHT_BUTTON);
   
       controller_description.add_button("view-center-button", VIEW_CENTER_BUTTON);
 
-      controller_description.add_button("pda-button", PDA_BUTTON);
+      controller_description.add_button("pda-button",       PDA_BUTTON);
       controller_description.add_button("inventory-button", INVENTORY_BUTTON);
 
       controller_description.add_button("aim-button",       AIM_BUTTON);

Modified: trunk/windstille/tools/SConscript
===================================================================
--- trunk/windstille/tools/SConscript	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/tools/SConscript	2007-11-12 02:28:15 UTC (rev 1524)
@@ -7,6 +7,7 @@
 env = Environment(CPPPATH=['../..'],
                   CXXFILESUFFIX = ".cpp",
                   YACCFLAGS=['-d', '--no-lines'])
+
 miniswig = env.Program('miniswig/miniswig',
                        ['miniswig/parser.yy',
                         'miniswig/lexer.ll',

Modified: trunk/windstille/tools/mesh_export.py
===================================================================
--- trunk/windstille/tools/mesh_export.py	2007-10-20 20:25:55 UTC (rev 1523)
+++ trunk/windstille/tools/mesh_export.py	2007-11-12 02:28:15 UTC (rev 1524)
@@ -14,7 +14,7 @@
         # [VerticeData, ...]
         self.vertices = []
 
-        # { orig_index : VerticeData, ... }
+        # { orig_index : [VerticeData, ...], ... }
         self.vertmap = {}
 
         # { (bonename, weight) : VertexGroup, ...}
@@ -24,20 +24,27 @@
         self.faces.append(face)
         
         for vert in face.verts:
-            self.vertmap[vert.orig_idx] = vert
+            if not self.vertmap.has_key(vert.orig_idx):
+                self.vertmap[vert.orig_idx] = []
+            self.vertmap[vert.orig_idx].append(vert)
 
     def add_influences(self, orig_idx, influences):
         """influences -> [(bonename, weight), ...]"""
         if not self.vertmap.has_key(orig_idx):
             pass # this is normal due to MeshData not being a complete
-                 # Blender mesh when multiple textures are in play       
+                 # Blender mesh when multiple textures are in play
+                 
         else:
-            self.vertmap[orig_idx].influences = influences
+            # orig_idx is part of this mesh
+            for v in self.vertmap[orig_idx]:
+                # print v.orig_idx
+                v.influences = influences
+            
             for (bone,weight) in influences:
                 key = (bone, weight)
                 if not self.groups.has_key(key):
                     self.groups[key] = VertexGroup(bone, weight)
-                self.groups[key].add(orig_idx)
+                self.groups[key].add(self.vertmap[orig_idx])
 
     def finalize(self):
         """Reorders vertex indexes and merge vertexes which have the
@@ -55,6 +62,10 @@
             for i in xrange(0, len(face.verts)):
                 face.verts[i] = uniq_vertices[face.verts[i].key()]
 
+        for group in self.groups.values():
+            for i in xrange(0, len(group.vertices)):
+                group.vertices[i] = uniq_vertices[group.vertices[i].key()]
+
         # Generate new index numbering
         self.vertices = uniq_vertices.values()
         for i, vert in enumerate(self.vertices):
@@ -77,6 +88,7 @@
         self.influences = []
 
     def key(self):
+        """Return something that can be used as a key to compare if two vertices are equal"""
         return (self.co[0], self.co[1], self.co[2],
                 self.normal[0], self.normal[1], self.normal[2],
                 self.uv[0], self.uv[1])
@@ -86,10 +98,10 @@
     def __init__(self, bone, weight):
         self.bone     = bone
         self.weight   = weight
-        self.vertices = [] # [23,2,1,2,...]
+        self.vertices = [] # [VertexData,...]
 
     def add(self, v):
-        self.vertices.append(v)
+        self.vertices.extend(v)
 
 class WindstilleModel:
     """WindstilleMesh is used to collect data vertex and face data
@@ -139,6 +151,10 @@
 
         for mesh in self.mesh_data.values():
             for vert in blender_mesh.verts:
+                #if blender_mesh.getVertexInfluences(vert.index) == []:
+                #    print "No influences on", vert.index, "this sounds like a bug"
+                #else:
+                #    print vert.index, "Ok"
                 mesh.add_influences(vert.index, blender_mesh.getVertexInfluences(vert.index))
 
 
@@ -157,7 +173,8 @@
             out.write("    (texture \"%s\")\n\n" % mesh.texture_filename)
             out.write("    (vertices\n")
             for v in mesh.vertices:
-                out.write("      %10f %10f %10f ;; %d\n" % (v.co[0], v.co[1], v.co[2], v.index))
+                out.write("      %10f %10f %10f ;; %d was %d\n" % (v.co[0], v.co[1], v.co[2],
+                                                                   v.index, v.orig_idx))
             out.write("     ) ;; vertices\n\n")
 
             out.write("    (normals\n") 
@@ -185,8 +202,8 @@
                 out.write("        (bone    \"%s\")\n" % group.bone)
                 out.write("        (weight   %f)\n" % group.weight)
                 out.write("        (vertices")
-                for v in group.vertices:
-                    out.write(" %d" % v)
+                for v in set(map(lambda v: v.index, group.vertices)):
+                    out.write(" %d" % v) 
                 out.write(")\n")
                 out.write("       )\n")
             out.write("     ) ;; groups\n\n")

Modified: trunk/windstille/tools/model_test.blend
===================================================================
(Binary files differ)



From grumbel at mail.berlios.de  Fri Nov 16 15:02:12 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 16 Nov 2007 15:02:12 +0100
Subject: [Windstille-commit] r1552 - trunk/griv
Message-ID: <200711161402.lAGE2CVN010396@sheep.berlios.de>

Author: grumbel
Date: 2007-11-16 15:02:11 +0100 (Fri, 16 Nov 2007)
New Revision: 1552

Added:
   trunk/griv/md5.cpp
   trunk/griv/md5.hpp
   trunk/griv/thumbgen.cpp
   trunk/griv/thumbget.cpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Modified:
   trunk/griv/
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/image.cpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
Log:
- moved md5 in its own class


Property changes on: trunk/griv
___________________________________________________________________
Name: svn:ignore
   - griv
.sconsign.dblite

   + griv
libgriv.a
.sconsign.dblite
thumbgen
thumbget


Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/SConstruct	2007-11-16 14:02:11 UTC (rev 1552)
@@ -1,12 +1,14 @@
 # -*- python -*-
 
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=['SDL_image', 'mhash', 'GL', 'GLU'])
+libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"])
+libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 'md5.cpp'])
+
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=[libgriv, 'SDL_image', 'mhash', 'GL', 'GLU'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
 
 griv_env.Program('griv', ['griv.cpp',
                           'loader.cpp',
                           'image.cpp',
-                          'filesystem.cpp',
                           'display.cpp', 
                           'texture.cpp', 
                           'workspace.cpp'])
@@ -14,4 +16,7 @@
 thumbget_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O0', '-g'], LIBS=['epeg'])
 thumbget_env.Program('thumbget', ['thumbget.cpp'])
 
+thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O0', '-g'], LIBS=[libgriv, 'epeg', 'mhash'])
+thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
+
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/TODO	2007-11-16 14:02:11 UTC (rev 1552)
@@ -13,7 +13,6 @@
 =========
 - initial load is very slow
 - initial thumbnailing is *extremly* slow
-- (!!!!) Fix color format issues
 
 4096 pictures packed in a single JPEG:
 
@@ -45,7 +44,7 @@
 # Flickr Download:
 
 # Download index files
-FUSER=henry-gail; for i in $(seq 1 67); do wget -c http://flickr.com/photos/${FUSER}/page${i}/ -O index-${FUSER}-${i}.html; done
+FUSER=henry-gail for i in $(seq 1 67); do wget -c http://flickr.com/photos/${FUSER}/page${i}/ -O index-${FUSER}-${i}.html; done
 
 # Get photo id's
  grep -i "farm[0-9]" * | sed "s/.*http:/http:/" | cut -c 37-46 | sort -n | uniq > /tmp/ids
@@ -55,7 +54,7 @@
  grep -i "farm[0-9]" * | sed "s/.*http:/http:/" | cut -c 37- | sed "s/_.*//" | grep -v dyic | sort -n | uniq
 
 # download photos
- (for i in $(cat ../ids); do wget -U mozilla -e robots=off -c -p -H --exclude-domain yahoo.com,yimg.com -p "http://flickr.com/photo_zoom.gne?id=${i}&size=o" --load-cookies /tmp/cookies.txt; done )
+ (for i in $(cat ../ids); do wget -U mozilla -e robots=off -c -p -H   --exclude-domain yahoo.com,yimg.com -p "http://flickr.com/photo_zoom.gne?id=${i}&size=o" --load-cookies /tmp/cookies.txt; done )
 
 - store by md5 and use hardlinks, thus avoid duplicates when files are moved
 

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/filesystem.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -123,4 +123,13 @@
   return res;
 }
 
+bool
+Filesystem::has_extension(const std::string& str, const std::string& suffix)
+{
+  if (str.length() >= suffix.length())
+    return str.compare(str.length() - suffix.length(), suffix.length(), suffix) == 0;
+  else
+    return false;
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/filesystem.hpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -41,6 +41,7 @@
   static std::string getxattr(const std::string& pathname);
   static std::string get_home() { return home_directory; }
   static std::string realpath(const std::string& pathname);
+  static bool has_extension(const std::string& pathname, const std::string& ext);
   
   static void init();
   static void deinit();

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/image.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -179,21 +179,21 @@
 int
 Image::round_res(int r)
 {
-  if (0)
+  if (1)
     { // low quality
-      if (r <= 32)
+      if (r < 32)
         return 16;
-      else if (r <= 64)
+      else if (r < 64)
         return 32;
-      else if (r <= 128)
+      else if (r < 128)
         return 64;
-      else if (r <= 256)
+      else if (r < 256)
         return 128;
-      else if (r <= 512)
+      else if (r < 512)
         return 256;
       else if (r < 1024)
         return 512;
-      else // if (r <= 1024) // zoom limit, 2048 textures make the thing crash
+      else // if (r < 1024) // zoom limit, 2048 textures make the thing crash
         return 1024;
     }
   else

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/loader.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -26,6 +26,7 @@
 #include <iostream>
 #include <iomanip>
 #include <stdexcept>
+#include "md5.hpp"
 #include "filesystem.hpp"
 #include "SDL_image.h"
 #include "image.hpp"
@@ -86,8 +87,7 @@
       if (job.image->res != res && res != 0)
         {
           // Unlock
-      
-          std::string m = this->md5(job.image->url);
+          std::string m = MD5::md5_string(job.image->url);
           std::ostringstream out;
           out << Filesystem::get_home() << "/.griv/cache/by_url/"
               << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
@@ -133,23 +133,4 @@
   return jobs.empty();
 }
 
-std::string
-Loader::md5(const std::string& str)
-{
-  unsigned char hash[16]; /* enough size for MD5 */
-  MHASH td = mhash_init(MHASH_MD5);
-  if (td == MHASH_FAILED) 
-    throw std::runtime_error("Failed to init MHash");
-  
-  mhash(td, str.c_str(), str.length());
-  
-  mhash_deinit(td, hash);
-
-  std::ostringstream out;
-  for (int i = 0; i < 16; i++) 
-    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
-
-  return out.str();
-}
-
 /* EOF */

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/loader.hpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -32,8 +32,6 @@
 #include <string>
 #include <vector>
 
-#include <mhash.h>
-
 class Image;
 
 struct Job
@@ -66,7 +64,6 @@
   void process_job();
   void clear();
   bool empty();
-  std::string md5(const std::string& str);
 
 private:
   Loader (const Loader&);

Added: trunk/griv/md5.cpp
===================================================================
--- trunk/griv/md5.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/md5.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,85 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <mhash.h>
+#include <fstream>
+#include <iomanip>
+#include <sstream>
+#include <stdexcept>
+#include "md5.hpp"
+
+std::string
+MD5::md5_string(const std::string& str)
+{
+  unsigned char hash[16]; /* enough size for MD5 */
+  MHASH td = mhash_init(MHASH_MD5);
+  if (td == MHASH_FAILED)
+    throw std::runtime_error("Failed to init MHash");
+  
+  mhash(td, str.c_str(), str.length());
+  
+  mhash_deinit(td, hash);
+
+  // Convert to string representation
+  std::ostringstream out;
+  for (int i = 0; i < 16; i++) 
+    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
+
+  return out.str();
+}
+
+std::string
+MD5::md5_file(const std::string& filename)
+{
+  unsigned char hash[16]; /* enough size for MD5 */
+  MHASH td = mhash_init(MHASH_MD5);
+  if (td == MHASH_FAILED) 
+    throw std::runtime_error("Failed to init MHash");
+  
+  const unsigned int buf_size = 32768;
+  char buf[buf_size];
+  std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary); 
+  if (!in)
+    throw std::runtime_error("MD5: Couldn't open file " + filename);
+    
+  while(!in.eof())
+    {
+      in.read(buf, buf_size);
+      mhash(td, buf, in.gcount());
+    }
+
+  in.close();
+    
+  mhash_deinit(td, hash);
+
+  // Convert to string representation
+  std::ostringstream out;
+  for (int i = 0; i < 16; i++)
+    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
+
+  return out.str();  
+}
+
+/* EOF */


Property changes on: trunk/griv/md5.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/md5.hpp
===================================================================
--- trunk/griv/md5.hpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/md5.hpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,40 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_MD5_HPP
+#define HEADER_MD5_HPP
+
+#include <string>
+
+class MD5
+{
+public:
+  static std::string md5_string(const std::string& str);
+  static std::string md5_file(const std::string& filename);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/md5.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/thumbgen.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,122 @@
+// Fast Epeg based Thumbnail generator
+#include <sstream>
+#include <stdexcept>
+#include <iomanip>
+#include <iostream>
+#include <Epeg.h>
+#include <mhash.h>
+#include "filesystem.hpp"
+
+int num_sizes = 7;
+int sizes[] = { 16, 32, 64, 128, 256, 512, 1024 };
+
+inline std::string md5(const std::string& str)
+{
+  unsigned char hash[16]; /* enough size for MD5 */
+  MHASH td = mhash_init(MHASH_MD5);
+  if (td == MHASH_FAILED) 
+    throw std::runtime_error("Failed to init MHash");
+  
+  mhash(td, str.c_str(), str.length());
+  
+  mhash_deinit(td, hash);
+
+  std::ostringstream out;
+  for (int i = 0; i < 16; i++) 
+    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
+
+  return out.str();
+}
+
+void generate_thumbnails(const std::string& filename)
+{
+  std::string m = md5("file://" + filename);
+      
+  for(int i = 0; i < num_sizes; ++i)
+    {
+      std::ostringstream str;
+      str << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << sizes[i] << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+
+      if (!Filesystem::exist(str.str()))
+        {
+          // FIXME: This should happen outside the loop, but that doesn't
+          // seem to generate a file, due to the way Epeg behaves
+          Epeg_Image* img = epeg_file_open(filename.c_str());
+          if (!img)
+            {
+              throw std::runtime_error("Cannot open " + filename);
+            }
+  
+          int w, h;
+          epeg_size_get(img, &w, &h);
+
+          if (w > sizes[i] || h > sizes[i])
+            {
+              epeg_quality_set(img, 75);
+              epeg_thumbnail_comments_enable(img, 1);
+
+              if (w > h)
+                epeg_decode_size_set(img, sizes[i], sizes[i] * h / w);
+              else
+                epeg_decode_size_set(img, sizes[i] * w / h, sizes[i]);
+  
+              epeg_decode_colorspace_set(img, EPEG_RGB8);
+
+              std::cout << sizes[i] << " - " << filename << " => " << str.str() << std::endl;
+
+              epeg_file_output_set(img, str.str().c_str());
+              epeg_encode(img);
+            }
+      
+          epeg_close(img);
+        }
+    }
+}
+
+void process_path(const std::string& pathname)
+{
+  if (Filesystem::is_directory(pathname))
+    {
+      std::vector<std::string> dir_list = Filesystem::open_directory(pathname);
+      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+        {
+          process_path(*i);
+        }
+    }
+  else
+    {
+      if (Filesystem::has_extension(pathname, ".jpg") ||
+          Filesystem::has_extension(pathname, ".jpg"))
+        {
+          try {
+            generate_thumbnails(Filesystem::realpath(pathname));
+          } catch(std::exception& err) {
+            std::cout << "Error: " << err.what() << std::endl;
+          }          
+        }
+    }
+}
+
+int main(int argc, char** argv)
+{
+  Filesystem::init();
+
+  if (argc == 1)
+    {
+      std::cout << "Usage: " << argv[0] << " [FILE]..." << std::endl;
+    }
+  else
+    {
+      for(int i = 1; i < argc; ++i)
+        {
+          process_path(argv[i]);
+        }
+    }
+
+  Filesystem::deinit();
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/griv/thumbgen.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumbget.cpp
===================================================================
--- trunk/griv/thumbget.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/thumbget.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,42 @@
+// Little experimental epeg test app
+
+#include <Epeg.h>
+#include <iostream>
+
+int main(int argc, char** argv)
+{
+  if (argc != 7)
+    {
+      printf("Usage: %s INFILE X Y W H OUTFILE\n", argv[0]);
+      exit(0);
+    }
+
+  char* filename = argv[1];
+  int x = atoi(argv[2]);
+  int y = atoi(argv[3]);
+  int w = atoi(argv[4]);
+  int h = atoi(argv[5]);
+  //char* out_filename = argv[6];
+
+  std::cout << filename << " " << x << ", " << y << " - " << w << "x" << h << std::endl;
+
+  Epeg_Image* img;
+
+  img = epeg_file_open(filename);
+  if (!img)
+    {
+      printf("Cannot open %s\n", filename);
+      exit(-1);
+    }
+
+
+  const unsigned char* pixels = static_cast<const unsigned char*>(epeg_pixels_get(img, x, y, w, h));
+  epeg_pixels_free(img, pixels);
+
+  epeg_close(img);
+
+  
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/griv/thumbget.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/thumbnail_store.cpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,102 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <Epeg.h>
+#include "md5.hpp"
+#include "thumbnail_store.hpp"
+
+ThumbnailStore::ThumbnailStore()
+{
+  
+}
+
+ThumbnailStore::~ThumbnailStore()
+{
+}
+
+SDL_Surface* 
+ThumbnailStore::get_by_url(const std::string& url, int res) // URL is file://... *not* just a pathname
+{
+  std::string md5 = MD5::md5_string(url);
+
+  std::ostringstream out;
+  out << Filesystem::get_home() << "/.griv/cache/by_url/"
+      << res << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
+  
+  std::string thumb_filename = out.str();
+  SDL_Surface* img = IMG_Load(thumb_filename.c_str());
+
+  if (!img)
+    {
+      try {
+        generate(url.substr(7)); // cut file:// part
+      } catch (std::exception& err) {
+        std::cout << err.what() << std::endl;
+        return 0;
+      }
+      img = IMG_Load(thumb_filename.c_str());
+    }
+
+  return img;
+}
+
+void
+ThumbnailStore::generate(const std::string& filename, int thumb_size)
+{
+  Epeg_Image* img = epeg_file_open(filename.c_str());
+  if (!img)
+    {
+      throw std::runtime_error("ThumbnailStore::generate: Cannot open " + filename);
+    }
+  
+  int w, h;
+  epeg_size_get(img, &w, &h);
+
+  if (w > thumb_size || h > thumb_size)
+    {
+      epeg_quality_set(img, 75);
+      epeg_thumbnail_comments_enable(img, 1);
+
+      if (w > h)
+        epeg_decode_size_set(img, thumb_size, thumb_size * h / w);
+      else
+        epeg_decode_size_set(img, thumb_size * w / h, thumb_size);
+  
+      epeg_decode_colorspace_set(img, EPEG_RGB8);
+
+      std::ostringstream str;
+      str << Filesystem::get_home() << "/.griv/cache/by_url/"
+          << thumb_size << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+
+      std::cout << thumb_size << " - " << filename << " => " << str.str() << std::endl;
+
+      epeg_file_output_set(img, str.str().c_str());
+      epeg_encode(img);
+    }
+      
+  epeg_close(img);
+}
+
+/* EOF */


Property changes on: trunk/griv/thumbnail_store.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-11-15 23:12:15 UTC (rev 1551)
+++ trunk/griv/thumbnail_store.hpp	2007-11-16 14:02:11 UTC (rev 1552)
@@ -0,0 +1,48 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_THUMBNAIL_STORE_HPP
+#define HEADER_THUMBNAIL_STORE_HPP
+
+/** */
+class ThumbnailStore
+{
+private:
+public:
+  ThumbnailStore();
+  ~ThumbnailStore();
+
+  SDL_Surface* get_by_url(const std::string& url, int res);
+  
+  void generate(const std::string& filename);
+
+private:
+  ThumbnailStore (const ThumbnailStore&);
+  ThumbnailStore& operator= (const ThumbnailStore&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/thumbnail_store.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Fri Nov 16 15:27:37 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 16 Nov 2007 15:27:37 +0100
Subject: [Windstille-commit] r1553 - trunk/griv
Message-ID: <200711161427.lAGERb4g012261@sheep.berlios.de>

Author: grumbel
Date: 2007-11-16 15:27:37 +0100 (Fri, 16 Nov 2007)
New Revision: 1553

Modified:
   trunk/griv/SConstruct
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Log:
- added automatic thumbnailing

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/SConstruct	2007-11-16 14:27:37 UTC (rev 1553)
@@ -3,12 +3,13 @@
 libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"])
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 'md5.cpp'])
 
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=[libgriv, 'SDL_image', 'mhash', 'GL', 'GLU'])
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=[libgriv, 'SDL_image', 'mhash', 'GL', 'GLU', 'epeg'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
 
 griv_env.Program('griv', ['griv.cpp',
                           'loader.cpp',
                           'image.cpp',
+                          'thumbnail_store.cpp',
                           'display.cpp', 
                           'texture.cpp', 
                           'workspace.cpp'])

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/filesystem.cpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -23,12 +23,16 @@
 **  02111-1307, USA.
 */
 
+#include <errno.h>
+#include <sys/stat.h>
+#include <sys/types.h>
 #include <stdexcept>
 #include <iostream>
 #include <dirent.h>
 #include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <boost/format.hpp>
 //#include <attr/xattr.h>
 
 #include "filesystem.hpp"
@@ -106,9 +110,42 @@
     {
       throw std::runtime_error("Couldn't get HOME environment variable");
     }
+
+  mkdir(home_directory + "/.griv");
+  mkdir(home_directory + "/.griv/cache");
+  mkdir(home_directory + "/.griv/cache/by_url");
+
+  std::string base = home_directory + "/.griv/cache/by_url";
+  std::string hex  = "0123456789abcdef";
+  int res[]  = { 16, 32, 64, 128, 256, 512, 1024 };
+  for(size_t r = 0; r < 7; ++r)
+    {
+      Filesystem::mkdir((boost::format("%s/%d") % base % res[r]).str());
+      for(std::string::iterator i = hex.begin(); i != hex.end(); ++i)
+        for(std::string::iterator j = hex.begin(); j != hex.end(); ++j)
+          {
+            Filesystem::mkdir((boost::format("%s/%d/%c%c") % base % res[r] % *i % *j).str());
+          }
+    }
 }
 
 void
+Filesystem::mkdir(const std::string& pathname)
+{
+  if (!Filesystem::exist(pathname))
+    {
+      if (::mkdir(pathname.c_str(), S_IRUSR | S_IWUSR | S_IXUSR | S_IRGRP | S_IXGRP) != 0)
+	{
+	  throw std::runtime_error("Filesystem::mkdir: " + pathname + ": " + strerror(errno));
+	}
+      else
+	{
+	  std::cout << "Filesystem::mkdir: " << pathname << std::endl;
+	}
+    }
+}
+
+void
 Filesystem::deinit()
 {
 }

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/filesystem.hpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -37,6 +37,7 @@
 public:
   static bool is_directory(const std::string& pathname);
   static bool exist(const std::string& pathname);
+  static void mkdir(const std::string& pathname);
   static std::vector<std::string> open_directory(const std::string& pathname);
   static std::string getxattr(const std::string& pathname);
   static std::string get_home() { return home_directory; }

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/loader.cpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -31,6 +31,7 @@
 #include "SDL_image.h"
 #include "image.hpp"
 #include "loader.hpp"
+#include "thumbnail_store.hpp"
 
 Loader loader;
 
@@ -38,6 +39,7 @@
 {
   mutex  = SDL_CreateMutex();
   thread = 0;
+  store  = 0;
 }
 
 Loader::~Loader()
@@ -61,6 +63,10 @@
 void
 Loader::launch_thread()
 {
+  if (!store)
+    {
+      store = new ThumbnailStore();
+    }
   thread = SDL_CreateThread(&Loader::thread_func, 0);
 }
 
@@ -86,15 +92,7 @@
 
       if (job.image->res != res && res != 0)
         {
-          // Unlock
-          std::string m = MD5::md5_string(job.image->url);
-          std::ostringstream out;
-          out << Filesystem::get_home() << "/.griv/cache/by_url/"
-              << res << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
-
-          //std::cout << "Loading: " << job.filename << std::endl;
-          //std::cout << out.str() << std::endl;
-          SDL_Surface* img = IMG_Load(out.str().c_str());
+          SDL_Surface* img = store->get_by_url(job.image->url, res);
           if (img)
             {
               job.image->receive(img, res);

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/loader.hpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -32,6 +32,7 @@
 #include <string>
 #include <vector>
 
+class ThumbnailStore;
 class Image;
 
 struct Job
@@ -49,6 +50,7 @@
 private:
   typedef std::vector<Job> Jobs;
   Jobs jobs;
+  ThumbnailStore* store;
   SDL_mutex* mutex;
   SDL_Thread* thread;
 

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/thumbnail_store.cpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -24,6 +24,11 @@
 */
 
 #include <Epeg.h>
+#include <sstream>
+#include <iostream>
+#include <stdexcept>
+#include "SDL_image.h"
+#include "filesystem.hpp"
 #include "md5.hpp"
 #include "thumbnail_store.hpp"
 
@@ -37,25 +42,27 @@
 }
 
 SDL_Surface* 
-ThumbnailStore::get_by_url(const std::string& url, int res) // URL is file://... *not* just a pathname
+ThumbnailStore::get_by_url(const std::string& url, int thumb_size) // URL is file://... *not* just a pathname
 {
   std::string md5 = MD5::md5_string(url);
 
   std::ostringstream out;
   out << Filesystem::get_home() << "/.griv/cache/by_url/"
-      << res << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
+      << thumb_size << "/" << md5.substr(0,2) << "/" << md5.substr(2) << ".jpg";
   
   std::string thumb_filename = out.str();
   SDL_Surface* img = IMG_Load(thumb_filename.c_str());
 
   if (!img)
     {
+      // Try to generate the thumbnail
       try {
-        generate(url.substr(7)); // cut file:// part
+        generate(url.substr(7), thumb_filename, thumb_size); // cut file:// part
       } catch (std::exception& err) {
         std::cout << err.what() << std::endl;
         return 0;
       }
+
       img = IMG_Load(thumb_filename.c_str());
     }
 
@@ -63,7 +70,7 @@
 }
 
 void
-ThumbnailStore::generate(const std::string& filename, int thumb_size)
+ThumbnailStore::generate(const std::string& filename, const std::string& thumb_location, int thumb_size)
 {
   Epeg_Image* img = epeg_file_open(filename.c_str());
   if (!img)
@@ -86,13 +93,10 @@
   
       epeg_decode_colorspace_set(img, EPEG_RGB8);
 
-      std::ostringstream str;
-      str << Filesystem::get_home() << "/.griv/cache/by_url/"
-          << thumb_size << "/" << m.substr(0,2) << "/" << m.substr(2) << ".jpg";
+      std::cout << "." << std::flush;
+      //std::cout << thumb_size << " - " << filename << " => " << thumb_location << std::endl;
 
-      std::cout << thumb_size << " - " << filename << " => " << str.str() << std::endl;
-
-      epeg_file_output_set(img, str.str().c_str());
+      epeg_file_output_set(img, thumb_location.c_str());
       epeg_encode(img);
     }
       

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-11-16 14:02:11 UTC (rev 1552)
+++ trunk/griv/thumbnail_store.hpp	2007-11-16 14:27:37 UTC (rev 1553)
@@ -26,6 +26,9 @@
 #ifndef HEADER_THUMBNAIL_STORE_HPP
 #define HEADER_THUMBNAIL_STORE_HPP
 
+#include "SDL.h"
+#include <string>
+
 /** */
 class ThumbnailStore
 {
@@ -34,9 +37,9 @@
   ThumbnailStore();
   ~ThumbnailStore();
 
-  SDL_Surface* get_by_url(const std::string& url, int res);
+  SDL_Surface* get_by_url(const std::string& url, int thumb_size);
   
-  void generate(const std::string& filename);
+  void generate(const std::string& filename, const std::string& thumb_location, int thumb_size);
 
 private:
   ThumbnailStore (const ThumbnailStore&);



From grumbel at mail.berlios.de  Fri Nov 16 16:14:30 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 16 Nov 2007 16:14:30 +0100
Subject: [Windstille-commit] r1554 - in trunk/griv: . epeg
Message-ID: <200711161514.lAGFEUxw015597@sheep.berlios.de>

Author: grumbel
Date: 2007-11-16 16:14:29 +0100 (Fri, 16 Nov 2007)
New Revision: 1554

Added:
   trunk/griv/epeg/
   trunk/griv/epeg/COPYING
   trunk/griv/epeg/Epeg.h
   trunk/griv/epeg/epeg_main.c
   trunk/griv/epeg/epeg_private.h
Modified:
   trunk/griv/SConstruct
   trunk/griv/thumbgen.cpp
   trunk/griv/thumbget.cpp
   trunk/griv/thumbnail_store.cpp
   trunk/griv/thumbnail_store.hpp
Log:
- added epeg into the source

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/SConstruct	2007-11-16 15:14:29 UTC (rev 1554)
@@ -1,9 +1,12 @@
 # -*- python -*-
 
-libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"])
+libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"])
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 'md5.cpp'])
 
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O0", "-g"], LIBS=[libgriv, 'SDL_image', 'mhash', 'GL', 'GLU', 'epeg'])
+libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])
+libepeg = libepeg_env.StaticLibrary('epeg', ['epeg/epeg_main.c'])
+
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], LIBS=[libgriv, libepeg, 'SDL_image', 'jpeg', 'mhash', 'GL', 'GLU'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
 
 griv_env.Program('griv', ['griv.cpp',
@@ -14,10 +17,10 @@
                           'texture.cpp', 
                           'workspace.cpp'])
 
-thumbget_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O0', '-g'], LIBS=['epeg'])
+thumbget_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], LIBS=[libepeg, 'jpeg'])
 thumbget_env.Program('thumbget', ['thumbget.cpp'])
 
-thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O0', '-g'], LIBS=[libgriv, 'epeg', 'mhash'])
+thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
 thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
 
 # EOF #

Added: trunk/griv/epeg/COPYING
===================================================================
--- trunk/griv/epeg/COPYING	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/epeg/COPYING	2007-11-16 15:14:29 UTC (rev 1554)
@@ -0,0 +1,28 @@
+Copyright (C) 2000 Carsten Haitzler and various contributors (see AUTHORS)
+
+Permission is hereby granted, free of charge, to any person obtaining a copy
+of this software and associated documentation files (the "Software"), to
+deal in the Software without restriction, including without limitation the
+rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
+sell copies of the Software, and to permit persons to whom the Software is
+furnished to do so, subject to the following conditions:
+
+The above copyright notice and this permission notice shall be included in
+all copies of the Software and its Copyright notices. In addition publicly
+documented acknowledgment must be given that this software has been used if no
+source code of this software is made available publicly. This includes
+acknowledgments in either Copyright notices, Manuals, Publicity and Marketing
+documents or any documentation provided with any product containing this
+software. This License does not apply to any software that links to the
+libraries provided by this software (statically or dynamically), but only to
+the software provided.
+
+Please see the COPYING.PLAIN for a plain-english explanation of this notice
+and it's intent.
+
+THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
+IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER 
+IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
+CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Added: trunk/griv/epeg/Epeg.h
===================================================================
--- trunk/griv/epeg/Epeg.h	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/epeg/Epeg.h	2007-11-16 15:14:29 UTC (rev 1554)
@@ -0,0 +1,76 @@
+#ifndef _EPEG_H
+#define _EPEG_H
+
+#ifdef EAPI
+#undef EAPI
+#endif
+#ifdef WIN32
+# ifdef BUILDING_DLL
+#  define EAPI __declspec(dllexport)
+# else
+#  define EAPI __declspec(dllimport)
+# endif
+#else
+# ifdef __GNUC__
+#  if __GNUC__ >= 4
+#   define EAPI __attribute__ ((visibility("default")))
+#  else
+#   define EAPI
+#  endif
+# else
+#  define EAPI
+# endif
+#endif
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+   typedef enum _Epeg_Colorspace
+     {
+	EPEG_GRAY8,
+	  EPEG_YUV8,
+	  EPEG_RGB8,
+	  EPEG_BGR8,
+	  EPEG_RGBA8,
+	  EPEG_BGRA8,
+	  EPEG_ARGB32,
+	  EPEG_CMYK
+     }
+   Epeg_Colorspace;
+   
+   typedef struct _Epeg_Image          Epeg_Image;
+   typedef struct _Epeg_Thumbnail_Info Epeg_Thumbnail_Info;
+
+   struct _Epeg_Thumbnail_Info
+     {
+	char                   *uri;
+	unsigned long long int  mtime;
+	int                     w, h;
+	char                   *mimetype;
+     };
+   
+   EAPI Epeg_Image   *epeg_file_open                 (const char *file);
+   EAPI Epeg_Image   *epeg_memory_open               (unsigned char *data, int size);
+   EAPI void          epeg_size_get                  (Epeg_Image *im, int *w, int *h);
+   EAPI void          epeg_decode_size_set           (Epeg_Image *im, int w, int h);
+   EAPI void          epeg_colorspace_get            (Epeg_Image *im, int *space);
+   EAPI void          epeg_decode_colorspace_set     (Epeg_Image *im, Epeg_Colorspace colorspace);
+   EAPI const void   *epeg_pixels_get                (Epeg_Image *im, int x, int y, int w, int h);
+   EAPI void          epeg_pixels_free               (Epeg_Image *im, const void *data);
+   EAPI const char   *epeg_comment_get               (Epeg_Image *im);
+   EAPI void          epeg_thumbnail_comments_get    (Epeg_Image *im, Epeg_Thumbnail_Info *info);
+   EAPI void          epeg_comment_set               (Epeg_Image *im, const char *comment);
+   EAPI void          epeg_quality_set               (Epeg_Image *im, int quality);
+   EAPI void          epeg_thumbnail_comments_enable (Epeg_Image *im, int onoff);
+   EAPI void          epeg_file_output_set           (Epeg_Image *im, const char *file);
+   EAPI void          epeg_memory_output_set         (Epeg_Image *im, unsigned char **data, int *size);
+   EAPI int           epeg_encode                    (Epeg_Image *im);
+   EAPI int           epeg_trim                      (Epeg_Image *im);
+   EAPI void          epeg_close                     (Epeg_Image *im);
+   
+#ifdef __cplusplus
+}
+#endif
+
+#endif


Property changes on: trunk/griv/epeg/Epeg.h
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/epeg/epeg_main.c
===================================================================
--- trunk/griv/epeg/epeg_main.c	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/epeg/epeg_main.c	2007-11-16 15:14:29 UTC (rev 1554)
@@ -0,0 +1,1361 @@
+#include "Epeg.h"
+#include "epeg_private.h"
+#include <jerror.h>
+
+static Epeg_Image   *_epeg_open_header         (Epeg_Image *im);
+static int           _epeg_decode              (Epeg_Image *im);
+static int           _epeg_scale               (Epeg_Image *im);
+static int           _epeg_decode_for_trim     (Epeg_Image *im);
+static int           _epeg_trim                (Epeg_Image *im);
+static int           _epeg_encode              (Epeg_Image *im);
+
+static void          _epeg_fatal_error_handler (j_common_ptr cinfo);
+
+#define MIN(__x,__y) ((__x) < (__y) ? (__x) : (__y))
+#define MAX(__x,__y) ((__x) > (__y) ? (__x) : (__y))
+
+static const JOCTET fake_EOI[2] = { 0xFF, JPEG_EOI };
+
+/**
+ * Open a JPEG image by filename.
+ * @param file The file path to open.
+ * @return A handle to the opened JPEG file, with the header decoded.
+ * 
+ * This function opens the file indicated by the @p file parameter, and
+ * attempts to decode it as a jpeg file. If this failes, NULL is returned.
+ * Otherwise a valid handle to an open JPEG file is returned that can be used
+ * by other Epeg calls.
+ * 
+ * The @p file must be a pointer to a valid C string, NUL (0 byte) terminated
+ * thats is a relative or absolute file path. If not results are not
+ * determined.
+ * 
+ * See also: epeg_memory_open(), epeg_close()
+ */
+EAPI Epeg_Image *
+epeg_file_open(const char *file)
+{
+   Epeg_Image *im;
+   
+   im = calloc(1, sizeof(Epeg_Image));
+   if (!im) return NULL;
+   
+   im->in.file = strdup(file);
+   if (!im->in.file)
+     {
+	free(im);
+	return NULL;
+     }
+   
+   im->in.f = fopen(im->in.file, "rb");
+   if (!im->in.f)
+     {
+	epeg_close(im);
+	return NULL;
+     }
+   fstat(fileno(im->in.f), &(im->stat_info));
+   im->out.quality = 75;
+   return _epeg_open_header(im);
+}
+
+/**
+ * Open a JPEG image stored in memory.
+ * @param data A pointer to the memory containing the JPEG data.
+ * @param size The size of the memory segment containing the JPEG.
+ * @return  A handle to the opened JPEG, with the header decoded.
+ * 
+ * This function opens a JPEG file that is stored in memory pointed to by
+ * @p data, and that is @p size bytes in size. If successful a valid handle
+ * is returned, or on failure NULL is returned.
+ * 
+ * See also: epeg_file_open(), epeg_close()
+ */
+EAPI EAPI Epeg_Image *
+epeg_memory_open(unsigned char *data, int size)
+{
+   Epeg_Image *im;
+   
+   im = calloc(1, sizeof(Epeg_Image));
+   if (!im) return NULL;
+   
+   im->out.quality = 75;
+   im->in.mem.data = (unsigned char **)data;
+   im->in.mem.size = size;
+   im->in.f = NULL;
+   im->in.w = 0;
+   im->in.h = 0;
+   return _epeg_open_header(im);
+}
+
+/**
+ * Return the original JPEG pixel size.
+ * @param im A handle to an opened Epeg image.
+ * @param w A pointer to the width value in pixels to be filled in.
+ * @param h A pointer to the height value in pixels to be filled in.
+ * 
+ * Returns the image size in pixels.
+ * 
+ */
+EAPI void
+epeg_size_get(Epeg_Image *im, int *w, int *h)
+{
+   if (w) *w = im->in.w;
+   if (h) *h = im->in.h;
+}
+
+/**
+ * Return the original JPEG pixel color space.
+ * @param im A handle to an opened Epeg image.
+ * @param space A pointer to the color space value to be filled in.
+ * 
+ * Returns the image color space.
+ * 
+ */
+EAPI void
+epeg_colorspace_get(Epeg_Image *im, int *space)
+{
+   if (space) *space = im->color_space;
+}
+
+/**
+ * Set the size of the image to decode in pixels.
+ * @param im A handle to an opened Epeg image.
+ * @param w The width of the image to decode at, in pixels.
+ * @param h The height of the image to decode at, in pixels.
+ * 
+ * Sets the size at which to deocode the JPEG image, giving an optimised load
+ * that only decodes the pixels needed.
+ * 
+ */
+EAPI void
+epeg_decode_size_set(Epeg_Image *im, int w, int h)
+{
+   if      (im->pixels) return;
+   if      (w < 1)        w = 1;
+   else if (w > im->in.w) w = im->in.w;
+   if      (h < 1)        h = 1;
+   else if (h > im->in.h) h = im->in.h;
+   im->out.w = w;
+   im->out.h = h;
+   im->out.x = 0;
+   im->out.y = 0;
+}
+
+EAPI void
+epeg_decode_bounds_set(Epeg_Image *im, int x, int y, int w, int h)
+{
+   if      (im->pixels) return;
+   if      (w < 1)        w = 1;
+   else if (w > im->in.w) w = im->in.w;
+   if      (h < 1)        h = 1;
+   else if (h > im->in.h) h = im->in.h;
+   im->out.w = w;
+   im->out.h = h;
+   if      (x < 0)        x = 0;
+   if      (y < 0)        y = 0;
+   im->out.x = x;
+   im->out.y = y;
+}
+
+/**
+ * Set the colorspace in which to decode the image.
+ * @param im A handle to an opened Epeg image.
+ * @param colorspace The colorspace to decode the image in.
+ * 
+ * This sets the colorspace to decode the image in. The default is EPEG_YUV8,
+ * as this is normally the native colorspace of a JPEG file, avoiding any
+ * colorspace conversions for a faster load and/or save.
+ */
+EAPI void
+epeg_decode_colorspace_set(Epeg_Image *im, Epeg_Colorspace colorspace)
+{
+   if (im->pixels) return;
+   if ((colorspace < EPEG_GRAY8) || (colorspace > EPEG_CMYK)) return;
+   im->color_space = colorspace;
+}
+
+/**
+ * Get a segment of decoded pixels from an image.
+ * @param im A handle to an opened Epeg image.
+ * @param x Rectangle X.
+ * @param y Rectangle Y.
+ * @param w Rectangle width.
+ * @param h Rectangle height.
+ * @return Pointer to the top left of the requested pixel block.
+ * 
+ * Return image pixels in the decoded format from the specified location
+ * rectangle bounded with the box @p x, @p y @p w X @p y. The pixel block is
+ * packed with no row padding, and it organsied from top-left to bottom right,
+ * row by row. You must free the pixel block using epeg_pixels_free() before
+ * you close the image handle, and assume the pixels to be read-only memory.
+ * 
+ * On success the pointer is returned, on failure, NULL is returned. Failure
+ * may be because the rectangle is out of the bounds of the image, memory
+ * allocations failed or the image data cannot be decoded.
+ * 
+ */
+EAPI const void *
+epeg_pixels_get(Epeg_Image *im, int x, int y,  int w, int h)
+{
+   int xx, yy, ww, hh, bpp, ox, oy, ow, oh, iw, ih;
+   
+   if (!im->pixels)
+     {
+	if (_epeg_decode(im) != 0) return NULL;
+     }
+   
+   if (!im->pixels) return NULL;
+   if ((im->out.w < 1) || (im->out.h < 1)) return NULL;
+   
+   if (_epeg_scale(im) != 0) return NULL;
+   
+   bpp = im->in.jinfo.output_components;
+   iw = im->out.w;
+   ih = im->out.h;
+   ow = w;
+   oh = h;
+   ox = 0;
+   oy = 0;
+   if ((x + ow) > iw) ow = iw - x;
+   if ((y + oh) > ih) oh = ih - y;
+   if (ow < 1) return NULL;
+   if (oh < 1) return NULL;
+   if (x < 0)
+     {
+	ow += x;
+	ox = -x;
+     }
+   if (y < 0)
+     {
+	oh += y;
+	oy = -y;
+     }
+   if (ow < 1) return NULL;
+   if (oh < 1) return NULL;
+
+   ww = x + ox + ow;
+   hh = y + oy + oh;
+
+   if (im->color_space == EPEG_GRAY8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 1);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox));
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p++;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_YUV8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[1];
+		  p[2] = s[2];
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_RGB8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[1];
+		  p[2] = s[2];
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_BGR8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[2];
+		  p[1] = s[1];
+		  p[2] = s[0];
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_RGBA8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 4);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 4);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[1];
+		  p[2] = s[2];
+		  p[3] = 0xff;
+		  p += 4;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_BGRA8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 4);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 4);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = 0xff;
+		  p[1] = s[2];
+		  p[2] = s[1];
+		  p[3] = s[0];
+		  p += 4;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_ARGB32)
+     {
+	unsigned int *pix, *p;
+	
+	pix = malloc(w * h * 4);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox));
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = 0xff000000 | (s[0] << 16) | (s[1] << 8) | (s[2]);
+		  p++;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   else if (im->color_space == EPEG_CMYK)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 4);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 4);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[1];
+		  p[2] = s[2];
+		  p[3] = 0xff;
+		  p += 4;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   return NULL;
+}
+
+/**
+ * Get a segment of decoded pixels from an image.
+ * @param im A handle to an opened Epeg image.
+ * @param x Rectangle X.
+ * @param y Rectangle Y.
+ * @param w Rectangle width.
+ * @param h Rectangle height.
+ * @return Pointer to the top left of the requested pixel block.
+ * 
+ * Return image pixels in the decoded format from the specified location
+ * rectangle bounded with the box @p x, @p y @p w X @p y. The pixel block is
+ * packed with no row padding, and it organsied from top-left to bottom right,
+ * row by row. You must free the pixel block using epeg_pixels_free() before
+ * you close the image handle, and assume the pixels to be read-only memory.
+ * 
+ * On success the pointer is returned, on failure, NULL is returned. Failure
+ * may be because the rectangle is out of the bounds of the image, memory
+ * allocations failed or the image data cannot be decoded.
+ * 
+ */
+EAPI const void *
+epeg_pixels_get_as_RGB8(Epeg_Image *im, int x, int y,  int w, int h)
+{
+   int xx, yy, ww, hh, bpp, ox, oy, ow, oh, iw, ih;
+   
+   if (!im->pixels)
+     {
+	if (_epeg_decode(im) != 0) return NULL;
+     }
+	
+   if (!im->pixels) return NULL;
+   if ((im->out.w < 1) || (im->out.h < 1)) return NULL;
+   
+   bpp = im->in.jinfo.output_components;
+   iw = im->out.w;
+   ih = im->out.h;
+   ow = w;
+   oh = h;
+   ox = 0;
+   oy = 0;
+   if ((x + ow) > iw) ow = iw - x;
+   if ((y + oh) > ih) oh = ih - y;
+   if (ow < 1) return NULL;
+   if (oh < 1) return NULL;
+   if (x < 0)
+     {
+	ow += x;
+	ox = -x;
+     }
+   if (y < 0)
+     {
+	oh += y;
+	oy = -y;
+     }
+   if (ow < 1) return NULL;
+   if (oh < 1) return NULL;
+   
+   ww = x + ox + ow;
+   hh = y + oy + oh;
+   
+   if (im->color_space == EPEG_GRAY8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[0];
+		  p[2] = s[0];
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   if (im->color_space == EPEG_RGB8)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = s[0];
+		  p[1] = s[1];
+		  p[2] = s[2];
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   if (im->color_space == EPEG_CMYK)
+     {
+	unsigned char *pix, *p;
+	
+	pix = malloc(w * h * 3);
+	if (!pix) return NULL;
+	for (yy = y + oy; yy < hh; yy++)
+	  {
+	     unsigned char *s;
+	     
+	     s = im->lines[yy] + ((x + ox) * bpp);
+	     p = pix + ((((yy - y) * w) + ox) * 3);
+	     for (xx = x + ox; xx < ww; xx++)
+	       {
+		  p[0] = (unsigned char)(MIN(255, (s[0] * s[3]) / 255));
+		  p[1] = (unsigned char)(MIN(255, (s[1] * s[3]) / 255));
+		  p[2] = (unsigned char)(MIN(255, (s[2] * s[3]) / 255));
+		  p += 3;
+		  s += bpp;
+	       }
+	  }
+	return pix;
+     }
+   return NULL;
+}
+
+/**
+ * Free requested pixel block from an image.
+ * @param im A handle to an opened Epeg image.
+ * @param data The pointer to the image pixels.
+ * 
+ * This frees the data for a block of pixels requested from image @p im.
+ * @p data must be a valid (non NULL) pointer to a pixel block taken from the
+ * image @p im by epeg_pixels_get() and mustbe called before the image is
+ * closed by epeg_close().
+ */
+EAPI void
+epeg_pixels_free(Epeg_Image *im, const void *data)
+{
+   free((void *)data);
+}
+
+/**
+ * Get the image comment field as a string.
+ * @param im A handle to an opened Epeg image.
+ * @return A pointer to the loaded image comments.
+ * 
+ * This function returns the comment field as a string (NUL byte terminated)
+ * of the loaded image @p im, if there is a comment, or NULL if no comment is
+ * saved with the image. Consider the string returned to be read-only.
+ * 
+ */
+EAPI const char *
+epeg_comment_get(Epeg_Image *im)
+{
+   return im->in.comment;
+}
+
+/**
+ * Get thumbnail comments of loaded image.
+ * @param im A handle to an opened Epeg image.
+ * @param info Pointer to a thumbnail info struct to be filled in.
+ * 
+ * This function retrieves thumbnail comments written by Epeg to any saved
+ * JPEG files. If no thumbnail comments were saved, the fields will be 0 in
+ * the @p info struct on return.
+ * 
+ */
+EAPI void
+epeg_thumbnail_comments_get(Epeg_Image *im, Epeg_Thumbnail_Info *info)
+{
+   if (!info) return;
+   info->uri      = im->in.thumb_info.uri;
+   info->mtime    = im->in.thumb_info.mtime;
+   info->w        = im->in.thumb_info.w;
+   info->h        = im->in.thumb_info.h;
+   info->mimetype = im->in.thumb_info.mime;
+}
+
+/**
+ * Set the comment field of the image for saving.
+ * @param im A handle to an opened Epeg image.
+ * @param comment The comment to set.
+ * 
+ * Set the comment for the image file for when it gets saved. This is a NUL
+ * byte terminated C string. If @p comment is NULL the output file will have
+ * no comment field.
+ * 
+ * The default comment will be any comment loaded from the input file.
+ * 
+ */
+EAPI void
+epeg_comment_set(Epeg_Image *im, const char *comment)
+{
+   if (im->out.comment) free(im->out.comment);
+   if (!comment) im->out.comment = NULL;
+   else im->out.comment = strdup(comment);
+}
+
+/**
+ * Set the encoding quality of the saved image.
+ * @param im A handle to an opened Epeg image.
+ * @param quality The quality of encoding from 0 to 100.
+ * 
+ * Set the quality of the output encoded image. Values from 0 to 100
+ * inclusive are valid, with 100 being the maximum quality, and 0 being the
+ * minimum. If the quality is set equal to or above 90%, the output U and V
+ * color planes are encoded at 1:1 with the Y plane.
+ * 
+ * The default quality is 75.
+ * 
+ */
+EAPI void
+epeg_quality_set(Epeg_Image *im, int quality)
+{
+   if      (quality < 0)   quality = 0;
+   else if (quality > 100) quality = 100;
+   im->out.quality = quality;
+}
+
+/**
+ * Enable thumbnail comments in saved image.
+ * @param im A handle to an opened Epeg image.
+ * @param onoff A boolean on and off enabling flag.
+ * 
+ * if @p onoff is 1, the output file will have thumbnail comments added to
+ * it, and if it is 0, it will not. The default is 0.
+ * 
+ */
+EAPI void
+epeg_thumbnail_comments_enable(Epeg_Image *im, int onoff)
+{
+   im->out.thumbnail_info = onoff;
+}
+
+/**
+ * Set the output file path for the image when saved.
+ * @param im A handle to an opened Epeg image.
+ * @param file The path to the output file.
+ * 
+ * This sets the output file path name (either a full or relative path name)
+ * to where the file will be written when saved. @p file must be a NUL
+ * terminated C string conatining the path to the file to be saved to. If it is
+ * NULL, the image will not be saved to a file when calling epeg_encode().
+ */
+EAPI void
+epeg_file_output_set(Epeg_Image *im, const char *file)
+{
+   if (im->out.file) free(im->out.file);
+   if (!file) im->out.file = NULL;
+   else im->out.file = strdup(file);
+}
+
+/**
+ * Set the output file to be a block of allocated memory.
+ * @param im A handle to an opened Epeg image.
+ * @param data A pointer to a pointer to a memory block.
+ * @param size A pointer to a counter of the size of the memory block.
+ * 
+ * This sets the output encoding of the image when saved to be allocated
+ * memory. After epeg_close() is called the pointer pointed to by @p data
+ * and the integer pointed to by @p size will contain the pointer to the
+ * memory block and its size in bytes, respecitvely. The memory block can be
+ * freed with the free() function call. If the save fails the pointer to the
+ * memory block will be unaffected, as will the size.
+ * 
+ */
+EAPI void
+epeg_memory_output_set(Epeg_Image *im, unsigned char **data, int *size)
+{
+   im->out.mem.data = data;
+   im->out.mem.size = size;
+   im->out.file = NULL;
+}
+
+/**
+ * This saves the image to its specified destination.
+ * @param im A handle to an opened Epeg image.
+ * 
+ * This saves the image @p im to its destination specified by
+ * epeg_file_output_set() or epeg_memory_output_set(). The image will be
+ * encoded at the deoded pixel size, using the quality, comment and thumbnail
+ * comment settings set on the image.
+ *
+ * retval 1 - error scale
+ *        2 - error encode
+ *        3 - error decode
+ *        4 - error decode ( setjmp )
+ */
+EAPI int
+epeg_encode(Epeg_Image *im)
+{
+   int ret;
+   if ((ret = _epeg_decode(im)) != 0)
+     return (ret == 2 ? 4 : 3);
+   if (_epeg_scale(im) != 0)
+     return 1;
+   if (_epeg_encode(im) != 0)
+     return 2;
+   return 0;
+}
+
+/**
+ * FIXME: Document this
+ * @param im A handle to an opened Epeg image.
+ * 
+ * FIXME: Document this.
+ */
+EAPI int
+epeg_trim(Epeg_Image *im)
+{
+   if (_epeg_decode_for_trim(im) != 0)
+     return 1;
+   if (_epeg_trim(im) != 0)
+     return 1;
+   if (_epeg_encode(im) != 0)
+     return 1;
+   return 0;
+}
+
+/**
+ * Close an image handle.
+ * @param im A handle to an opened Epeg image.
+ * 
+ * This closes an opened image handle and frees all memory associated with it.
+ * It does not free encoded data generated by epeg_memory_output_set() followed
+ * by epeg_encode() nor does it guarantee to free any data recieved by
+ * epeg_pixels_get(). Once an image handle is closed consider it invalid.
+ */
+EAPI void
+epeg_close(Epeg_Image *im)
+{
+   if (!im) return;
+   if (im->pixels)                   free(im->pixels);
+   if (im->lines)                    free(im->lines);
+   if (im->in.file)                  free(im->in.file);
+   if (!im->in.file)                 free(im->in.jinfo.src);
+   if (im->in.f || im->in.mem.data)  jpeg_destroy_decompress(&(im->in.jinfo));
+   if (im->in.f)                     fclose(im->in.f);
+   if (im->in.comment)               free(im->in.comment);
+   if (im->in.thumb_info.uri)        free(im->in.thumb_info.uri);
+   if (im->in.thumb_info.mime)       free(im->in.thumb_info.mime);
+   if (im->out.file)                 free(im->out.file);
+   if (!im->out.file)                free(im->out.jinfo.dest);
+   if (im->out.f || im->in.mem.data) jpeg_destroy_compress(&(im->out.jinfo));
+   if (im->out.f)                    fclose(im->out.f);
+   if (im->out.comment)              free(im->out.comment);
+   free(im);
+}
+
+static Epeg_Image *
+_epeg_open_header(Epeg_Image *im)
+{
+   struct jpeg_marker_struct *m;
+   struct jpeg_source_mgr *src_mgr = NULL;
+
+   im->in.jinfo.err = jpeg_std_error(&(im->jerr.pub));
+   im->jerr.pub.error_exit = _epeg_fatal_error_handler;
+#ifdef NOWARNINGS
+   im->jerr.pub.emit_message = _emit_message;
+   im->jerr.pub.output_message = _output_message;
+   im->jerr.pub.format_message = _format_message;
+#endif
+   
+   if (setjmp(im->jerr.setjmp_buffer))
+     {
+	error:
+	epeg_close(im);
+	im = NULL;
+	return NULL;
+     }
+   
+   jpeg_create_decompress(&(im->in.jinfo));
+   jpeg_save_markers(&(im->in.jinfo), JPEG_APP0 + 7, 1024);
+   jpeg_save_markers(&(im->in.jinfo), JPEG_COM,      65535);
+   if (im->in.f != NULL)
+     {
+	jpeg_stdio_src(&(im->in.jinfo), im->in.f);
+     }
+   else
+     {
+	/* Setup RAM source manager. */
+	src_mgr = calloc(1, sizeof(struct jpeg_source_mgr));
+	if (!src_mgr) goto error;
+	src_mgr->init_source = _jpeg_init_source;
+	src_mgr->fill_input_buffer = _jpeg_fill_input_buffer;
+	src_mgr->skip_input_data = _jpeg_skip_input_data;
+	src_mgr->resync_to_restart = jpeg_resync_to_restart;
+	src_mgr->term_source = _jpeg_term_source;
+	src_mgr->bytes_in_buffer = im->in.mem.size;
+	src_mgr->next_input_byte = (JOCTET *) im->in.mem.data;
+   	im->in.jinfo.src = (struct jpeg_source_mgr *) src_mgr;
+     }
+
+   jpeg_read_header(&(im->in.jinfo), TRUE);
+   im->in.w = im->in.jinfo.image_width;
+   im->in.h = im->in.jinfo.image_height;
+   if (im->in.w < 1) goto error;
+   if (im->in.h < 1) goto error;
+   
+   im->out.w = im->in.w;
+   im->out.h = im->in.h;
+
+   im->color_space = ((im->in.color_space = im->in.jinfo.out_color_space) == JCS_GRAYSCALE) ? EPEG_GRAY8 : EPEG_RGB8;
+   if (im->in.color_space == JCS_CMYK) im->color_space = EPEG_CMYK;
+   
+   for (m = im->in.jinfo.marker_list; m; m = m->next)
+     {
+	if (m->marker == JPEG_COM)
+	  {
+	     if (im->in.comment) free(im->in.comment);
+	     im->in.comment = malloc(m->data_length + 1);
+	     if (im->in.comment)
+	       {
+		  memcpy(im->in.comment, m->data, m->data_length);
+		  im->in.comment[m->data_length] = 0;
+	       }
+	  }
+	else if (m->marker == (JPEG_APP0 + 7))
+	  {
+	     if ((m->data_length > 7) &&
+		 (!strncmp((char *)m->data, "Thumb::", 7)))
+	       {
+		  char *p, *p2;
+		  
+		  p = malloc(m->data_length + 1);
+		  if (p)
+		    {
+		       memcpy(p, m->data, m->data_length);
+		       p[m->data_length] = 0;
+		       p2 = strchr(p, '\n');
+		       if (p2)
+			 {
+			    p2[0] = 0;
+			    if (!strcmp(p, "Thumb::URI"))
+
+			      im->in.thumb_info.uri = strdup(p2 + 1);
+			    else if (!strcmp(p, "Thumb::MTime"))
+			      sscanf(p2 + 1, "%llu", &(im->in.thumb_info.mtime));
+			    else if (!strcmp(p, "Thumb::Image::Width"))
+			      im->in.thumb_info.w = atoi(p2 + 1);
+			    else if (!strcmp(p, "Thumb::Image::Height"))
+			      im->in.thumb_info.h = atoi(p2 + 1);
+			    else if (!strcmp(p, "Thumb::Mimetype"))
+			      im->in.thumb_info.mime = strdup(p2 + 1);
+			 }
+		       free(p);
+		    }
+	       }
+	  }
+     }
+   return im;
+}
+
+/**
+  retval 1 - malloc or other
+         2 - setjmp error
+*/
+static int
+_epeg_decode(Epeg_Image *im)
+{
+   int scale, scalew, scaleh, y;
+   JDIMENSION old_output_scanline = 1;
+   
+   if (im->pixels) return 1;
+   if ((im->out.w < 1) || (im->out.h < 1)) return 1;
+   
+   scalew = im->in.w / im->out.w;
+   scaleh = im->in.h / im->out.h;
+   
+   scale = scalew;   
+   if (scaleh < scalew) scale = scaleh;
+
+   if      (scale > 8) scale = 8;
+   else if (scale < 1) scale = 1;
+   
+   im->in.jinfo.scale_num           = 1;
+   im->in.jinfo.scale_denom         = scale;
+   im->in.jinfo.do_fancy_upsampling = FALSE;
+   im->in.jinfo.do_block_smoothing  = FALSE;
+   im->in.jinfo.dct_method          = JDCT_IFAST;
+
+   switch (im->color_space)
+     {
+      case EPEG_GRAY8:
+	im->in.jinfo.out_color_space = JCS_GRAYSCALE;
+	im->in.jinfo.output_components = 1;
+	break;
+		
+      case EPEG_YUV8:
+	im->in.jinfo.out_color_space = JCS_YCbCr;
+	break;
+		
+      case EPEG_RGB8:
+      case EPEG_BGR8:
+      case EPEG_RGBA8:
+      case EPEG_BGRA8:
+      case EPEG_ARGB32:
+	im->in.jinfo.out_color_space = JCS_RGB;
+	break;
+		
+      case EPEG_CMYK:
+	im->in.jinfo.out_color_space = JCS_CMYK;
+	im->in.jinfo.output_components = 4;
+	break;
+	
+      default:
+	break;
+     }
+   
+   im->out.jinfo.err			= jpeg_std_error(&(im->jerr.pub));
+   im->jerr.pub.error_exit		= _epeg_fatal_error_handler;
+#ifdef NOWARNINGS
+   im->jerr.pub.emit_message = _emit_message;
+   im->jerr.pub.output_message = _output_message;
+   im->jerr.pub.format_message = _format_message;
+#endif
+
+   if (setjmp(im->jerr.setjmp_buffer))
+     return 2;
+
+   jpeg_calc_output_dimensions(&(im->in.jinfo));
+   
+   im->pixels = malloc(im->in.jinfo.output_width * im->in.jinfo.output_height * im->in.jinfo.output_components);
+   if (!im->pixels) return 1;
+	
+   im->lines = malloc(im->in.jinfo.output_height * sizeof(char *));
+   if (!im->lines)
+     {
+	free(im->pixels);
+	im->pixels = NULL;
+	return 1;
+     }
+	
+   jpeg_start_decompress(&(im->in.jinfo));
+   
+   for (y = 0; y < im->in.jinfo.output_height; y++)
+     im->lines[y] = im->pixels + (y * im->in.jinfo.output_components * im->in.jinfo.output_width);
+   
+   while (im->in.jinfo.output_scanline < im->in.jinfo.output_height)
+     {
+	if (old_output_scanline == im->in.jinfo.output_scanline)
+	  {
+	     jpeg_abort_decompress(&(im->in.jinfo));
+	     return 1;
+	  }
+	old_output_scanline = im->in.jinfo.output_scanline;
+	jpeg_read_scanlines(&(im->in.jinfo), 
+			    &(im->lines[im->in.jinfo.output_scanline]), 
+			    im->in.jinfo.rec_outbuf_height);
+     }
+   
+   jpeg_finish_decompress(&(im->in.jinfo));
+   
+   return 0;
+}
+
+static int
+_epeg_scale(Epeg_Image *im)
+{
+   unsigned char *dst, *row, *src;
+   int            x, y, w, h, i;
+   
+   if ((im->in.w == im->out.w) && (im->in.h == im->out.h)) return 0;
+   if (im->scaled) return 0;
+   
+   if ((im->out.w < 1) || (im->out.h < 1)) return 0;
+   
+   im->scaled = 1;
+   w = im->out.w;
+   h = im->out.h;
+   for (y = 0; y < h; y++)
+     {
+	row = im->pixels + (((y * im->in.jinfo.output_height) / h) * im->in.jinfo.output_components * im->in.jinfo.output_width);
+	dst = im->pixels + (y * im->in.jinfo.output_components * im->in.jinfo.output_width);
+	
+	for (x = 0; x < im->out.w; x++)
+	  {
+	     src = row + (((x * im->in.jinfo.output_width) / w) * im->in.jinfo.output_components);
+	     for (i = 0; i < im->in.jinfo.output_components; i++)
+	       dst[i] = src[i];
+	     dst += im->in.jinfo.output_components;
+	  }
+     }
+   return 0;
+}
+
+static int
+_epeg_decode_for_trim(Epeg_Image *im)
+{
+   int		y;
+   
+   if (im->pixels) return 1;
+
+   im->in.jinfo.scale_num           = 1;
+   im->in.jinfo.scale_denom         = 1;
+   im->in.jinfo.do_fancy_upsampling = FALSE;
+   im->in.jinfo.do_block_smoothing  = FALSE;
+   im->in.jinfo.dct_method          = JDCT_ISLOW;
+   
+   switch (im->color_space)
+     {
+      case EPEG_GRAY8:
+	im->in.jinfo.out_color_space = JCS_GRAYSCALE;
+	im->in.jinfo.output_components = 1;
+	break;
+	
+      case EPEG_YUV8:
+	im->in.jinfo.out_color_space = JCS_YCbCr;
+	break;
+	
+      case EPEG_RGB8:
+      case EPEG_BGR8:
+      case EPEG_RGBA8:
+      case EPEG_BGRA8:
+      case EPEG_ARGB32:
+	im->in.jinfo.out_color_space = JCS_RGB;
+	break;
+	
+      case EPEG_CMYK:
+	im->in.jinfo.out_color_space = JCS_CMYK;
+	im->in.jinfo.output_components = 4;
+	break;
+	
+      default:
+	break;
+     }
+   
+   im->out.jinfo.err = jpeg_std_error(&(im->jerr.pub));
+   im->jerr.pub.error_exit = _epeg_fatal_error_handler;
+#ifdef NOWARNINGS
+   im->jerr.pub.emit_message = _emit_message;
+   im->jerr.pub.output_message = _output_message;
+   im->jerr.pub.format_message = _format_message;
+#endif
+   
+   if (setjmp(im->jerr.setjmp_buffer))
+     return 1;
+
+   jpeg_calc_output_dimensions(&(im->in.jinfo));
+
+   im->pixels = malloc(im->in.jinfo.output_width * im->in.jinfo.output_height * im->in.jinfo.output_components);
+   if (!im->pixels) return 1;
+   
+   im->lines = malloc(im->in.jinfo.output_height * sizeof(char *));
+   if (!im->lines)
+     {
+	free(im->pixels);
+	im->pixels = NULL;
+	return 1;
+     }
+   
+   jpeg_start_decompress(&(im->in.jinfo));
+   
+   for (y = 0; y < im->in.jinfo.output_height; y++)
+     im->lines[y] = im->pixels + (y * im->in.jinfo.output_components * im->in.jinfo.output_width);
+   
+   while (im->in.jinfo.output_scanline < im->in.jinfo.output_height)
+     jpeg_read_scanlines(&(im->in.jinfo), 
+			 &(im->lines[im->in.jinfo.output_scanline]), 
+			 im->in.jinfo.rec_outbuf_height);
+   
+   jpeg_finish_decompress(&(im->in.jinfo));
+   
+   return 0;
+}
+
+static int
+_epeg_trim(Epeg_Image *im)
+{
+   int            y, a, b, w, h;
+   
+   if ((im->in.w == im->out.w) && (im->in.h == im->out.h)) return 1;
+   if (im->scaled) return 1;
+   
+   im->scaled = 1;
+   w = im->out.w;
+   h = im->out.h;
+   a = im->out.x;
+   b = im->out.y;
+   
+   for (y = 0; y < h; y++)
+     im->lines[y] = im->pixels + ((y+b) * im->in.jinfo.output_components * im->in.jinfo.output_width) + (a * im->in.jinfo.output_components);
+   
+   return 0;
+}
+
+struct epeg_destination_mgr
+{
+   struct jpeg_destination_mgr dst_mgr;
+   Epeg_Image *im;
+   unsigned char *buf;
+};
+
+static int
+_epeg_encode(Epeg_Image *im)
+{
+   struct epeg_destination_mgr *dst_mgr = NULL;
+   int ok = 0;
+
+   if ((im->out.w < 1) || (im->out.h < 1)) return 1;
+   if (im->out.f) return 1;
+   
+   if (im->out.file)
+     {
+	im->out.f = fopen(im->out.file, "wb");
+	if (!im->out.f)
+   	  {
+	     im->error = 1;
+	     return 1;
+	  }
+     }
+   else
+     im->out.f = NULL;
+   
+   im->out.jinfo.err = jpeg_std_error(&(im->jerr.pub));
+   im->jerr.pub.error_exit = _epeg_fatal_error_handler;
+#ifdef NOWARNINGS
+   im->jerr.pub.emit_message = _emit_message;
+   im->jerr.pub.output_message = _output_message;
+   im->jerr.pub.format_message = _format_message;
+#endif
+   
+   if (setjmp(im->jerr.setjmp_buffer))
+     {
+	ok = 1;
+	im->error = 1;
+	goto done;
+     }
+
+   jpeg_create_compress(&(im->out.jinfo));
+   if (im->out.f)
+     jpeg_stdio_dest(&(im->out.jinfo), im->out.f);
+   else
+     {
+	*(im->out.mem.data) = NULL;
+	*(im->out.mem.size) = 0;
+	/* Setup RAM destination manager */
+	dst_mgr = calloc(1, sizeof(struct epeg_destination_mgr));
+	if (!dst_mgr) return 1;
+	dst_mgr->dst_mgr.init_destination = _jpeg_init_destination;
+	dst_mgr->dst_mgr.empty_output_buffer = _jpeg_empty_output_buffer;
+	dst_mgr->dst_mgr.term_destination = _jpeg_term_destination;
+	dst_mgr->im = im;
+	dst_mgr->buf = malloc(65536);
+	if (!dst_mgr->buf)
+	  {
+	     ok = 1;
+	     im->error = 1;
+	     goto done;
+	  }
+   	im->out.jinfo.dest = (struct jpeg_destination_mgr *)dst_mgr;
+     }
+   im->out.jinfo.image_width      = im->out.w;
+   im->out.jinfo.image_height     = im->out.h;
+   im->out.jinfo.input_components = im->in.jinfo.output_components;
+   im->out.jinfo.in_color_space   = im->in.jinfo.out_color_space;
+   im->out.jinfo.dct_method	  = im->in.jinfo.dct_method;
+   jpeg_set_defaults(&(im->out.jinfo));
+   jpeg_set_quality(&(im->out.jinfo), im->out.quality, TRUE);   
+   
+   if (im->out.quality >= 90)
+     {
+	im->out.jinfo.comp_info[0].h_samp_factor = 1;
+	im->out.jinfo.comp_info[0].v_samp_factor = 1;
+	im->out.jinfo.comp_info[1].h_samp_factor = 1;
+	im->out.jinfo.comp_info[1].v_samp_factor = 1;
+	im->out.jinfo.comp_info[2].h_samp_factor = 1;
+	im->out.jinfo.comp_info[2].v_samp_factor = 1;
+     }
+   jpeg_start_compress(&(im->out.jinfo), TRUE);
+
+   if (im->out.comment)
+     jpeg_write_marker(&(im->out.jinfo), JPEG_COM, im->out.comment, strlen(im->out.comment));
+   
+   if (im->out.thumbnail_info)
+     {
+	char buf[8192];
+	
+	if (im->in.file)
+	  {
+	     snprintf(buf, sizeof(buf), "Thumb::URI\nfile://%s", im->in.file);
+	     jpeg_write_marker(&(im->out.jinfo), JPEG_APP0 + 7, buf, strlen(buf));
+	     snprintf(buf, sizeof(buf), "Thumb::MTime\n%llu", (unsigned long long int)im->stat_info.st_mtime);
+	  }
+	jpeg_write_marker(&(im->out.jinfo), JPEG_APP0 + 7, buf, strlen(buf));
+	snprintf(buf, sizeof(buf), "Thumb::Image::Width\n%i", im->in.w);
+	jpeg_write_marker(&(im->out.jinfo), JPEG_APP0 + 7, buf, strlen(buf));
+	snprintf(buf, sizeof(buf), "Thumb::Image::Height\n%i", im->in.h);
+	jpeg_write_marker(&(im->out.jinfo), JPEG_APP0 + 7, buf, strlen(buf));
+	snprintf(buf, sizeof(buf), "Thumb::Mimetype\nimage/jpeg");
+	jpeg_write_marker(&(im->out.jinfo), JPEG_APP0 + 7, buf, strlen(buf));
+     }
+   
+   while (im->out.jinfo.next_scanline < im->out.h)
+     jpeg_write_scanlines(&(im->out.jinfo), &(im->lines[im->out.jinfo.next_scanline]), 1);
+   jpeg_finish_compress(&(im->out.jinfo));
+
+   done:
+   if ((im->in.f) || (im->in.mem.data != NULL)) jpeg_destroy_decompress(&(im->in.jinfo));
+   if ((im->in.f) && (im->in.file)) fclose(im->in.f);
+   if (dst_mgr)
+     {
+	if (dst_mgr->buf) free(dst_mgr->buf);
+	free(dst_mgr);
+	im->out.jinfo.dest = NULL;
+     }
+   jpeg_destroy_compress(&(im->out.jinfo));
+   if ((im->out.f) && (im->out.file)) fclose(im->out.f); 
+   im->in.f = NULL;
+   im->out.f = NULL;
+   
+   return ok;
+}
+
+static void 
+_epeg_fatal_error_handler(j_common_ptr cinfo)
+{
+   emptr errmgr;
+   
+   errmgr = (emptr)cinfo->err;
+   longjmp(errmgr->setjmp_buffer, 1);
+   return;
+}
+
+/* Source manager methods */
+METHODDEF(void)
+_jpeg_decompress_error_exit(j_common_ptr cinfo)
+{
+}
+
+
+METHODDEF(void)
+_jpeg_init_source(j_decompress_ptr cinfo)
+{
+}
+
+METHODDEF(boolean)
+_jpeg_fill_input_buffer(j_decompress_ptr cinfo)
+{
+   WARNMS(cinfo, JWRN_JPEG_EOF);
+   
+   /* Insert a fake EOI marker */
+   cinfo->src->next_input_byte = fake_EOI;
+   cinfo->src->bytes_in_buffer = sizeof(fake_EOI);
+   return TRUE;
+}
+
+
+METHODDEF(void)
+_jpeg_skip_input_data(j_decompress_ptr cinfo, long num_bytes)
+{
+   if (num_bytes > (long)(cinfo)->src->bytes_in_buffer)
+     ERREXIT(cinfo, 0);
+   
+   (cinfo)->src->next_input_byte += num_bytes;
+   (cinfo)->src->bytes_in_buffer -= num_bytes;
+}
+
+METHODDEF(void)
+_jpeg_term_source(j_decompress_ptr cinfo)
+{
+}
+
+
+/* destination manager methods */
+METHODDEF(void)
+_jpeg_init_destination(j_compress_ptr cinfo)
+{
+   struct epeg_destination_mgr *dst_mgr;
+   
+   dst_mgr = (struct epeg_destination_mgr *)cinfo->dest;
+   dst_mgr->dst_mgr.free_in_buffer = 65536;
+   dst_mgr->dst_mgr.next_output_byte = (JOCTET *)dst_mgr->buf;
+}
+
+METHODDEF(boolean)
+_jpeg_empty_output_buffer(j_compress_ptr cinfo)
+{
+   struct epeg_destination_mgr *dst_mgr;
+   unsigned char *p;
+   int psize;
+   
+   dst_mgr = (struct epeg_destination_mgr *)cinfo->dest;
+   psize = *(dst_mgr->im->out.mem.size);
+   *(dst_mgr->im->out.mem.size) += 65536;
+   p = realloc(*(dst_mgr->im->out.mem.data), *(dst_mgr->im->out.mem.size));
+   if (p)
+     {
+	memcpy(p + psize, dst_mgr->buf, 65536);
+	dst_mgr->dst_mgr.free_in_buffer = 65536;
+	dst_mgr->dst_mgr.next_output_byte = (JOCTET *)dst_mgr->buf;
+     }
+   else
+     return FALSE;
+   return TRUE;
+}
+
+METHODDEF(void)
+_jpeg_term_destination(j_compress_ptr cinfo)
+{
+   struct epeg_destination_mgr *dst_mgr;
+   unsigned char *p;
+   int psize;
+   
+   dst_mgr = (struct epeg_destination_mgr *)cinfo->dest;
+   psize = *(dst_mgr->im->out.mem.size);
+   *(dst_mgr->im->out.mem.size) += 65536 - dst_mgr->dst_mgr.free_in_buffer;
+   p = realloc(*(dst_mgr->im->out.mem.data), *(dst_mgr->im->out.mem.size));
+   if (p)
+     {
+	*(dst_mgr->im->out.mem.data) = p;
+	memcpy(p + psize, dst_mgr->buf, 65536 - dst_mgr->dst_mgr.free_in_buffer);
+     }
+}
+
+/* be noisy - not */
+METHODDEF(void)
+_emit_message(j_common_ptr cinfo, int msg_level)
+{
+}
+
+METHODDEF(void)
+_output_message(j_common_ptr cinfo)
+{
+}
+
+METHODDEF(void)
+_format_message(j_common_ptr cinfo, char * buffer)
+{
+}


Property changes on: trunk/griv/epeg/epeg_main.c
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/epeg/epeg_private.h
===================================================================
--- trunk/griv/epeg/epeg_private.h	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/epeg/epeg_private.h	2007-11-16 15:14:29 UTC (rev 1554)
@@ -0,0 +1,86 @@
+#ifndef _EPEG_PRIVATE_H
+#define _EPEG_PRIVATE_H
+
+#include <stdio.h>
+#include <unistd.h>
+#include <stdlib.h>
+#include <string.h>
+#include <limits.h>
+#include <time.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <setjmp.h>
+#include <jpeglib.h>
+
+//#include "config.h"
+
+typedef struct _epeg_error_mgr *emptr;
+
+struct _epeg_error_mgr
+{
+      struct     jpeg_error_mgr pub;
+      jmp_buf    setjmp_buffer;
+};
+
+struct _Epeg_Image
+{
+   struct _epeg_error_mgr          jerr;
+   struct stat                     stat_info;
+   unsigned char                  *pixels;
+   unsigned char                 **lines;
+   
+   char                            scaled : 1;
+   
+   int                             error;
+   
+   Epeg_Colorspace                 color_space;
+   
+   struct {
+      char                          *file;
+      struct {
+	 unsigned char           **data;
+	 int                       size;
+      } mem;
+      int                            w, h;
+      char                          *comment;
+      FILE                          *f;
+      J_COLOR_SPACE                  color_space;
+      struct jpeg_decompress_struct  jinfo;
+      struct {
+	 char                       *uri;
+	 unsigned long long int      mtime;
+	 int                         w, h;
+	 char                       *mime;
+      } thumb_info;
+   } in;
+   struct {
+      char                        *file;
+      struct {
+	 unsigned char           **data;
+	 int                      *size;
+      } mem;
+      int                          x, y;
+      int                          w, h;
+      char                        *comment;
+      FILE                        *f;
+      struct jpeg_compress_struct  jinfo;
+      int                          quality;
+      char                         thumbnail_info : 1;
+   } out;
+};
+
+METHODDEF(void) _jpeg_decompress_error_exit(j_common_ptr cinfo);
+METHODDEF(void) _jpeg_init_source(j_decompress_ptr cinfo);
+METHODDEF(boolean) _jpeg_fill_input_buffer(j_decompress_ptr cinfo);
+METHODDEF(void) _jpeg_skip_input_data(j_decompress_ptr cinfo, long num_bytes);
+METHODDEF(void) _jpeg_term_source(j_decompress_ptr cinfo);
+
+METHODDEF(void) _jpeg_init_destination(j_compress_ptr cinfo);
+METHODDEF(boolean) _jpeg_empty_output_buffer (j_compress_ptr cinfo);
+METHODDEF(void) _jpeg_term_destination (j_compress_ptr cinfo);
+    
+METHODDEF(void) _emit_message (j_common_ptr cinfo, int msg_level);
+METHODDEF(void) _output_message (j_common_ptr cinfo);
+METHODDEF(void) _format_message (j_common_ptr cinfo, char * buffer);
+#endif


Property changes on: trunk/griv/epeg/epeg_private.h
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/thumbgen.cpp	2007-11-16 15:14:29 UTC (rev 1554)
@@ -3,7 +3,7 @@
 #include <stdexcept>
 #include <iomanip>
 #include <iostream>
-#include <Epeg.h>
+#include "epeg/Epeg.h"
 #include <mhash.h>
 #include "filesystem.hpp"
 
@@ -53,7 +53,7 @@
 
           if (w > sizes[i] || h > sizes[i])
             {
-              epeg_quality_set(img, 75);
+              epeg_quality_set(img, 80);
               epeg_thumbnail_comments_enable(img, 1);
 
               if (w > h)

Modified: trunk/griv/thumbget.cpp
===================================================================
--- trunk/griv/thumbget.cpp	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/thumbget.cpp	2007-11-16 15:14:29 UTC (rev 1554)
@@ -1,6 +1,6 @@
 // Little experimental epeg test app
 
-#include <Epeg.h>
+#include "epeg/Epeg.h"
 #include <iostream>
 
 int main(int argc, char** argv)

Modified: trunk/griv/thumbnail_store.cpp
===================================================================
--- trunk/griv/thumbnail_store.cpp	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/thumbnail_store.cpp	2007-11-16 15:14:29 UTC (rev 1554)
@@ -23,7 +23,7 @@
 **  02111-1307, USA.
 */
 
-#include <Epeg.h>
+#include "epeg/Epeg.h"
 #include <sstream>
 #include <iostream>
 #include <stdexcept>
@@ -83,7 +83,7 @@
 
   if (w > thumb_size || h > thumb_size)
     {
-      epeg_quality_set(img, 75);
+      epeg_quality_set(img, 80);
       epeg_thumbnail_comments_enable(img, 1);
 
       if (w > h)

Modified: trunk/griv/thumbnail_store.hpp
===================================================================
--- trunk/griv/thumbnail_store.hpp	2007-11-16 14:27:37 UTC (rev 1553)
+++ trunk/griv/thumbnail_store.hpp	2007-11-16 15:14:29 UTC (rev 1554)
@@ -33,6 +33,7 @@
 class ThumbnailStore
 {
 private:
+
 public:
   ThumbnailStore();
   ~ThumbnailStore();



From grumbel at mail.berlios.de  Sat Nov 17 12:46:11 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 17 Nov 2007 12:46:11 +0100
Subject: [Windstille-commit] r1555 - in trunk/griv: . obsolete
Message-ID: <200711171146.lAHBkB7s018731@sheep.berlios.de>

Author: grumbel
Date: 2007-11-17 12:46:09 +0100 (Sat, 17 Nov 2007)
New Revision: 1555

Added:
   trunk/griv/command_line.cpp
   trunk/griv/command_line.hpp
   trunk/griv/obsolete/
   trunk/griv/obsolete/thumbget.cpp
   trunk/griv/obsolete/thumbnail.py
Removed:
   trunk/griv/thumbget.cpp
   trunk/griv/thumbnail.py
Modified:
   trunk/griv/README
   trunk/griv/SConstruct
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/thumbgen.cpp
Log:
- added command line parsing and a high/lov quality toggle

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/README	2007-11-17 11:46:09 UTC (rev 1555)
@@ -6,12 +6,13 @@
 Usage:
 ======
 
-To use it, first you have to generate thumbnails by calling:
+You can view any collectino of files in a directory by:
 
-./thumbnail.py [PATHNAME]...
+ ./griv [PATHNAME]...
 
-Once done, you can view any collectino of files in that directory:
+Optionally you can pre-generate the thumbnails, which results in
+a smoother experience by calling:
 
-./griv [PATHNAME]...
+ ./thumbgen -s 16,32,64,128,256,512,1024 [PATHNAME]...
 
 # EOF #

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/SConstruct	2007-11-17 11:46:09 UTC (rev 1555)
@@ -1,14 +1,16 @@
 # -*- python -*-
-
+
 libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"])
-libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 'md5.cpp'])
-
+libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 
+                                             'command_line.cpp',
+                                             'md5.cpp'])
+
 libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])
 libepeg = libepeg_env.StaticLibrary('epeg', ['epeg/epeg_main.c'])
-
-griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], LIBS=[libgriv, libepeg, 'SDL_image', 'jpeg', 'mhash', 'GL', 'GLU'])
+
+griv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"], 
+                       LIBS=[libgriv, libepeg, 'SDL_image', 'jpeg', 'mhash', 'GL', 'GLU'])
 griv_env.ParseConfig("sdl-config --libs --cflags")
-
 griv_env.Program('griv', ['griv.cpp',
                           'loader.cpp',
                           'image.cpp',
@@ -16,11 +18,9 @@
                           'display.cpp', 
                           'texture.cpp', 
                           'workspace.cpp'])
-
-thumbget_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], LIBS=[libepeg, 'jpeg'])
-thumbget_env.Program('thumbget', ['thumbget.cpp'])
-
-thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
+
+thumbgen_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
+                           LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
 thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
-
+
 # EOF #

Added: trunk/griv/command_line.cpp
===================================================================
--- trunk/griv/command_line.cpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/command_line.cpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -0,0 +1,339 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    Ingo Ruhnke
+**    (if your name is missing here, please add it)
+*/
+
+#include <iomanip>
+#include <iostream>
+#include <stdexcept>
+#include <stdio.h>
+#include "command_line.hpp"
+
+#ifdef WIN32
+#define snprintf _snprintf
+#endif
+
+CommandLine::CommandLine()
+{
+  help_indent = 18;
+}
+
+CommandLine::~CommandLine()
+{
+}
+
+void CommandLine::parse_args(int argc, char** argv)
+{
+  programm = argv[0];
+
+  for(int i = 1; i < argc; ++i) 
+    {
+      if (argv[i][0] == '-') 
+        {
+          if (argv[i][1] == '-') 
+            {
+              // We got a long option
+              if (argv[i][2] == '\0') { 
+                // Got a '--', so we stop evaluating arguments
+                ++i;
+                while(i < argc) 
+                  {
+                    read_option(CommandLine::REST_ARG, argv[i]);
+                    ++i;
+                  }
+              } 
+              else
+                {
+                  std::string opt = argv[i] + 2;
+                  std::string long_opt;
+                  std::string long_opt_arg;
+
+                  std::string::size_type pos = opt.find('=');
+
+                  if (pos != std::string::npos) 
+                    {
+                      long_opt = opt.substr(0, pos);
+                      long_opt_arg = opt.substr(pos+1);
+                    }
+                  else 
+                    {
+                      long_opt = opt;
+                    }
+
+                  // Long Option
+                  Option* option = lookup_long_option(long_opt);
+
+                  if (option) 
+                    {
+                      if (option->argument.empty()) 
+                        {
+                          read_option(option->key, "");
+                        } 
+                      else
+                        {
+                          if (pos != std::string::npos) 
+                            {
+                              read_option(option->key, long_opt_arg);
+                            }
+                          else
+                            {            
+                              if (i == argc - 1) 
+                                {
+                                  throw std::runtime_error("option '" + std::string(argv[i]) + "' requires an argument");
+                                }
+                              else 
+                                {
+                                  read_option(option->key, argv[i + 1]);
+                                  ++i;
+                                }
+                            }
+                        }
+                    }
+                  else
+                    {
+                      throw std::runtime_error("unrecognized option '" + std::string(argv[i]) + "'");
+                    }
+                }
+            } 
+          else 
+            {
+              // We got a short option
+              char* p = argv[i] + 1;
+          
+              if (*p != '\0') {
+                // Handle option chains
+                while (*p) 
+                  {
+                    // Short option(s)
+                    Option* option = lookup_short_option(*p);
+
+                    if (option) 
+                      {
+                        if (option->argument.empty()) 
+                          {
+                            read_option(option->key, "");
+                          } 
+                        else 
+                          {
+                            if (i == argc - 1 || *(p+1) != '\0') 
+                              {
+                                // No more arguments
+                                throw std::runtime_error("option requires an argument -- " + std::string(1, *p));
+                              }
+                            else
+                              {
+                                read_option(option->key, argv[i + 1]);
+                                ++i;
+                              }
+                          }
+                      } 
+                    else 
+                      {
+                        throw std::runtime_error("invalid option -- " + std::string(1, *p));
+                      }
+                    ++p; 
+                  }
+              } 
+              else
+                {
+                  read_option(CommandLine::REST_ARG, "-");
+                } 
+            }
+        } 
+      else
+        {
+          read_option(CommandLine::REST_ARG, argv[i]);
+        }
+    }
+
+  current_option = parsed_options.end();
+}
+
+CommandLine::Option *CommandLine::lookup_short_option(char short_option)
+{
+  for(Options::iterator i = options.begin(); i != options.end(); ++i)
+    {
+      if (i->key == short_option)
+        return &(*i);
+    }
+  return 0;
+}
+
+CommandLine::Option *CommandLine::lookup_long_option(const std::string& long_option)
+{
+  for(Options::iterator i = options.begin(); i != options.end(); ++i)
+    {
+      if (i->long_option == long_option)
+        return &*i;
+    }
+  return 0;
+}
+
+void CommandLine::read_option(int key, const std::string& argument)
+{
+  ParsedOption parsed_option;
+  
+  parsed_option.key = key;
+  parsed_option.argument = argument;
+
+  parsed_options.push_back(parsed_option);
+}
+
+void CommandLine::print_help()
+{
+  bool first_usage = true;
+  for(Options::iterator i = options.begin(); i != options.end(); ++i)
+    {
+      if (i->visible)
+        {
+          if (i->key == USAGE) 
+            {
+              if (first_usage) 
+                {
+                  std::cout << "Usage: " << programm << " " <<  i->help << std::endl; 
+                  first_usage = false;
+                }
+              else
+                {
+                  std::cout << "or:    " << programm << " " << i->help << std::endl; 
+                }
+            } 
+          else if (i->key == GROUP) 
+            {
+              if (i != options.begin())
+                std::cout << std::endl;
+              std::cout << i->help << std::endl;
+            }
+          else if (i->key == DOC) 
+            {
+              if (i != options.begin())
+                std::cout << std::endl;
+              std::cout << i->help << std::endl;
+            }
+          else 
+            {
+              char option[256]   = { 0 };
+              char argument[256] = { 0 };
+
+              if (i->key > 255 || i->key < 0)
+                snprintf(option, 256, "--%s", i->long_option.c_str());
+              else if (i->long_option.empty())
+                snprintf(option, 256, "-%c", char(i->key));
+              else
+                snprintf(option, 256, "-%c, --%s", char(i->key), i->long_option.c_str());
+
+              if (!i->argument.empty())
+                {
+                  if (i->long_option.empty())
+                    snprintf(argument, 256, " %s", i->argument.c_str());
+                  else
+                    snprintf(argument, 256, "=%s", i->argument.c_str());
+                }
+
+              std::cout << "  " 
+                        << std::setiosflags(std::ios::left) << std::setw(help_indent)
+                        << (std::string(option) + std::string(argument)) << std::setw(0)
+                        << " " << i->help << std::endl;
+            }
+        }
+    }
+  std::cout << std::endl;
+}
+
+void CommandLine::add_usage(const std::string& usage)
+{
+  Option option;
+
+  option.key          = USAGE;
+  option.help         = usage;
+  option.visible      = true;
+
+  options.push_back(option);   
+}
+
+void CommandLine::add_doc(const std::string& grouptopic)
+{
+  Option option;
+
+  option.key          = DOC;
+  option.help         = grouptopic;
+  option.visible      = true;
+
+  options.push_back(option);  
+}
+
+void CommandLine::add_group(const std::string& grouptopic)
+{
+  Option option;
+
+  option.key          = GROUP;
+  option.help         = grouptopic;
+  option.visible      = true;
+
+  options.push_back(option);  
+}
+
+void CommandLine::add_option(int key, 
+                                        const std::string& long_option, 
+                                        const std::string& argument,
+                                        const std::string& help,
+                                        bool visible)
+{
+  Option option;
+
+  option.key          = key;
+  option.help         = help;
+  option.long_option  = long_option;
+  option.argument     = argument;
+  option.visible      = visible;
+
+  options.push_back(option);
+}
+
+bool CommandLine::next()
+{
+  if (current_option == parsed_options.end()) 
+    {
+      (current_option = parsed_options.begin());
+      return current_option != parsed_options.end();
+    }
+  else
+    {
+      return (++current_option) != parsed_options.end();
+    }
+}
+
+int CommandLine::get_key()
+{
+  return current_option->key;
+}
+
+std::string CommandLine::get_argument()
+{
+  return current_option->argument;
+}


Property changes on: trunk/griv/command_line.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/command_line.hpp
===================================================================
--- trunk/griv/command_line.hpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/command_line.hpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -0,0 +1,196 @@
+/*
+**  ClanLib SDK
+**  Copyright (c) 1997-2005 The ClanLib Team
+**
+**  This software is provided 'as-is', without any express or implied
+**  warranty.  In no event will the authors be held liable for any damages
+**  arising from the use of this software.
+**
+**  Permission is granted to anyone to use this software for any purpose,
+**  including commercial applications, and to alter it and redistribute it
+**  freely, subject to the following restrictions:
+**
+**  1. The origin of this software must not be misrepresented; you must not
+**     claim that you wrote the original software. If you use this software
+**     in a product, an acknowledgment in the product documentation would be
+**     appreciated but is not required.
+**  2. Altered source versions must be plainly marked as such, and must not be
+**     misrepresented as being the original software.
+**  3. This notice may not be removed or altered from any source distribution.
+**
+**  Note: Some of the libraries ClanLib may link to may have additional
+**  requirements or restrictions.
+**
+**  File Author(s):
+**
+**    Magnus Norddahl
+**    Ingo Ruhnke
+**    (if your name is missing here, please add it)
+*/
+
+//! clanCore="System"
+//! header=core.h
+
+#ifndef HEADER_COMMAND_LINE_HPP
+#define HEADER_COMMAND_LINE_HPP
+
+#if _MSC_VER > 1000
+#pragma once
+#endif
+
+#include <string>
+#include <vector>
+
+//: Helper class to parse command line arguments
+//- !group=Core/System!
+//- !header=core.h!
+//- <p>The CommandLine class helps to parse command line arguments, namely
+//- the argc/argv pair that you get from main(). CommandLine mimics
+//- getopt_long() behaviour as closely as possible, while providing a
+//- cleaner interface and a few additional features, like automatic
+//- generation of '--help' output. CommandLine can parse long arguments
+//- in the following styles:</p>
+//-
+//- <p>program --file FILENAME<br>
+//- program --file=FILENAME</p>
+//-
+//- <p>Short arguments are handled like this:</p>
+//-
+//- <p>program -f FILENAME</p>
+//-
+//- <p>Concatenating short arguments is also supported, so that:</p>
+//- 
+//- <p>program -f -a -b FILENAME</p>
+//-
+//- <p>is equivalent to:</p>
+//-
+//- <p>program -fab FILENAME</p>
+//-
+//- <p>Non-option arguments (aka rest arguments) are supported as well:</p>
+//-
+//- <p>program SOMEFILE SOMEOTHERFILE ...</p>
+//- 
+//- <p>To avoid ambiguity when a filename starts with '-' CommandLine stops
+//- parsing arguments after the first encounter of a '--', so in</p>
+//-
+//- <p>program -f -b -- -f -b</p>
+//-
+//- <p>In the above example the first '-f -b' options are treated as
+//- normal while the ones after the '--' are treated as rest arguments
+//- (aka filenames in most programs).</p>
+class CommandLine
+{
+private:
+	int help_indent;
+
+	std::string programm;
+
+	struct Option 
+	{
+		int key;
+		std::string help;
+		std::string long_option;
+		std::string argument;
+		bool visible;
+	};
+  
+	typedef std::vector<Option> Options;
+	Options options;
+
+	struct ParsedOption
+	{
+		int key;
+		std::string argument;
+	};
+
+	typedef std::vector<ParsedOption> ParsedOptions;
+	ParsedOptions parsed_options;
+	ParsedOptions::iterator current_option;
+
+	enum
+	{
+		GROUP     = -3,
+		DOC       = -4,
+		USAGE     = -5
+	};
+
+//! Construction:
+public:
+	CommandLine();
+
+	~CommandLine();
+
+//! Attributes:
+public:
+	enum
+	{
+		REST_ARG  = -2
+	};
+
+	//: Return the key of the current option
+	int get_key();
+
+	//: Return the argument to the current option
+	std::string get_argument();
+
+//! Operations:
+public:
+	//: Change the indention used for the help message, default is 18
+	void set_help_indent(int i);
+
+	//: Add a usage line to the help output, usage is for example
+	//: "[OPTIONS]... FILE", the program name will get appended
+	//: automatically
+	void add_usage(const std::string& usage);
+
+	//: Adds extra documentation to the help output, should only be
+	//: used at the beginning or at the end, to
+	void add_doc(const std::string& doc);
+	
+	//: Starts a new group of options, the grouptopic gets printed
+	//: above the group of options in the print_help() output
+	void add_group(const std::string& grouptopic);
+  
+	//: Adds a option to the parser
+	//param key: a letter for a short-option or a numeric value
+	//param key: larger than 255 that identifies the option
+	//param long_option: the long name of this option or "" if non
+	//param long_option: should be used for this option
+	//param argument: the type of the argument that this option
+	//param argument: requires (i.e. FILE, SIZE, WIDTH, etc.) or "" if no argument is
+	//param argument: required
+	//param help: the help string for this option
+	//param visible: true if the option should be listed in the help
+	//param visible: output, false will not list it in the help output which might
+	//param visible: be usefull for cheat-options or backward-compability options
+	//param visible: than would only clutter the help output
+	void add_option(
+		int key,
+		const std::string& long_option, 
+		const std::string& argument,
+		const std::string& help,
+		bool visible = true);
+	
+	//: Parse the options arcording to the options added with
+	//: add_option(), result of the parsing is accessible via
+	//: next() and get_key()/get_argument()
+	void parse_args(int argc, char** argv);
+
+	//: Print the help output, normaly done via a --help option
+	void print_help();
+
+	//: Goto the next option
+	bool next();
+
+//! Implementation:
+private:
+	void read_option(int id, const std::string& argument);
+
+	/** Find the Option structure that matches \a short_option */
+	Option* lookup_short_option(char short_option);
+
+	/** Find the Option structure that matches \a long_option */
+	Option* lookup_long_option (const std::string& long_option);
+};
+
+#endif


Property changes on: trunk/griv/command_line.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/griv.cpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -16,6 +16,7 @@
 float y_offset = 0.0f;
 std::string config_home;
 bool force_redraw = true;
+bool highquality  = true;
 
 Griv::Griv()
 {
@@ -67,6 +68,12 @@
                 x_offset = 0;
                 y_offset = 0;
               }
+            else if (event.key.keysym.sym == SDLK_h)
+              {
+                highquality = !highquality;
+                force_redraw = true;
+                std::cout << "Highquality: " << highquality << std::endl;
+              }
             else if (event.key.keysym.sym == SDLK_9)
               {
                 workspace->layout(4,3);
@@ -84,27 +91,27 @@
               }
             else if (event.key.keysym.sym == SDLK_1)
               {
-                workspace->set_zoom(4.0f);
+                workspace->set_zoom(16.0f);
               }
             else if (event.key.keysym.sym == SDLK_2)
               {
-                workspace->set_zoom(8.0f);
+                workspace->set_zoom(32.0f);
               }
             else if (event.key.keysym.sym == SDLK_3)
               {
-                workspace->set_zoom(16.0f);
+                workspace->set_zoom(64.0f);
               }
             else if (event.key.keysym.sym == SDLK_4)
               {
-                workspace->set_zoom(32.0f);
+                workspace->set_zoom(128.0f);
               }
             else if (event.key.keysym.sym == SDLK_5)
               {
-                workspace->set_zoom(64.0f);
+                workspace->set_zoom(256.0f);
               }
             else if (event.key.keysym.sym == SDLK_6)
               {
-                workspace->set_zoom(128.0f);
+                workspace->set_zoom(512.0f);
               }
             else if (event.key.keysym.sym == SDLK_UP)
               {

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/griv.hpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -32,6 +32,7 @@
 extern float x_offset;
 extern float y_offset;
 extern bool force_redraw;
+extern bool highquality;
 
 class Workspace;
 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/image.cpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -179,7 +179,7 @@
 int
 Image::round_res(int r)
 {
-  if (1)
+  if (!highquality)
     { // low quality
       if (r < 32)
         return 16;

Copied: trunk/griv/obsolete/thumbget.cpp (from rev 1554, trunk/griv/thumbget.cpp)

Copied: trunk/griv/obsolete/thumbnail.py (from rev 1551, trunk/griv/thumbnail.py)

Modified: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/thumbgen.cpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -4,35 +4,18 @@
 #include <iomanip>
 #include <iostream>
 #include "epeg/Epeg.h"
-#include <mhash.h>
+#include "md5.hpp"
+#include "command_line.hpp"
 #include "filesystem.hpp"
 
-int num_sizes = 7;
-int sizes[] = { 16, 32, 64, 128, 256, 512, 1024 };
+bool verbose = false;
 
-inline std::string md5(const std::string& str)
+void
+generate_thumbnails(const std::string& filename, int quality, const std::vector<int>& sizes)
 {
-  unsigned char hash[16]; /* enough size for MD5 */
-  MHASH td = mhash_init(MHASH_MD5);
-  if (td == MHASH_FAILED) 
-    throw std::runtime_error("Failed to init MHash");
-  
-  mhash(td, str.c_str(), str.length());
-  
-  mhash_deinit(td, hash);
-
-  std::ostringstream out;
-  for (int i = 0; i < 16; i++) 
-    out << std::setfill('0') << std::setw(2) << std::hex << int(hash[i]);
-
-  return out.str();
-}
-
-void generate_thumbnails(const std::string& filename)
-{
-  std::string m = md5("file://" + filename);
+  std::string m = MD5::md5_string("file://" + filename);
       
-  for(int i = 0; i < num_sizes; ++i)
+  for(int i = 0; i < int(sizes.size()); ++i)
     {
       std::ostringstream str;
       str << Filesystem::get_home() << "/.griv/cache/by_url/"
@@ -53,7 +36,7 @@
 
           if (w > sizes[i] || h > sizes[i])
             {
-              epeg_quality_set(img, 80);
+              epeg_quality_set(img, quality);
               epeg_thumbnail_comments_enable(img, 1);
 
               if (w > h)
@@ -63,7 +46,8 @@
   
               epeg_decode_colorspace_set(img, EPEG_RGB8);
 
-              std::cout << sizes[i] << " - " << filename << " => " << str.str() << std::endl;
+              if (verbose)
+                std::cout << sizes[i] << " - " << filename << " => " << str.str() << std::endl;
 
               epeg_file_output_set(img, str.str().c_str());
               epeg_encode(img);
@@ -74,44 +58,138 @@
     }
 }
 
-void process_path(const std::string& pathname)
+void
+generate_file_list(const std::string& pathname, std::vector<std::string>& file_list)
 {
   if (Filesystem::is_directory(pathname))
     {
       std::vector<std::string> dir_list = Filesystem::open_directory(pathname);
       for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
         {
-          process_path(*i);
+          generate_file_list(*i, file_list);
         }
     }
   else
     {
-      if (Filesystem::has_extension(pathname, ".jpg") ||
-          Filesystem::has_extension(pathname, ".jpg"))
+      if (Filesystem::has_extension(pathname, ".jpg")  ||
+          Filesystem::has_extension(pathname, ".JPG")  ||
+          Filesystem::has_extension(pathname, ".jpe")  ||
+          Filesystem::has_extension(pathname, ".JPE")  ||
+          Filesystem::has_extension(pathname, ".JPEG") ||
+          Filesystem::has_extension(pathname, ".jpeg"))
         {
-          try {
-            generate_thumbnails(Filesystem::realpath(pathname));
-          } catch(std::exception& err) {
-            std::cout << "Error: " << err.what() << std::endl;
-          }          
+          file_list.push_back(Filesystem::realpath(pathname));
         }
     }
 }
 
+void parse_number_list(const std::string& str, std::vector<int>& sizes)
+{
+  // FIXME: implement me
+  // FIXME: add handling for "16,32,64"
+  sizes.push_back(atoi(str.c_str()));
+}
+
 int main(int argc, char** argv)
 {
-  Filesystem::init();
+  CommandLine argp;
+      
+  argp.add_usage("[OPTION]... [FILE]...");
+  argp.add_doc("A offline thumbnail generator for griv\n");
+  argp.add_option('s', "size", "NUM,...", "Generate thumbnails for the given sizes (default: 16)");
+  argp.add_option('v', "verbose", "", "Print more detailed output on generation");
+  argp.add_option('q', "quality", "NUM", "JPEG quality used for thumbnailing, range 1-100 (default: 80)");
+  argp.add_option('h', "help", "", "Print this help");
 
-  if (argc == 1)
+  try {
+    argp.parse_args(argc, argv);
+  } catch(std::exception& err) {
+    std::cout << "Error: CommandLine: " << err.what() << std::endl;
+    exit(EXIT_FAILURE);
+  }
+
+  int quality = 80;
+  std::vector<int> sizes;
+  std::vector<std::string> pathnames;
+  while(argp.next())
     {
-      std::cout << "Usage: " << argv[0] << " [FILE]..." << std::endl;
+      switch(argp.get_key())
+        {
+          case 's':
+            parse_number_list(argp.get_argument(), sizes);
+            break;
+
+          case 'q':
+            quality = atoi(argp.get_argument().c_str());
+            break;
+
+          case 'v':
+            verbose = true;
+            break;
+
+          case 'h':
+            argp.print_help();
+            exit(EXIT_SUCCESS);
+            break;
+
+          case CommandLine::REST_ARG:
+            pathnames.push_back(argp.get_argument());
+            break;
+
+          default:
+            std::cout << "Unhandled argument: " << argp.get_key() << std::endl;
+            exit(EXIT_FAILURE);
+            break;
+        }
+    };
+  
+  if (sizes.empty())
+    sizes.push_back(16);
+
+  if (pathnames.empty())
+    {
+      argp.print_help();
     }
   else
     {
-      for(int i = 1; i < argc; ++i)
+      Filesystem::init();
+
+      std::cout << "Generating file list... " << std::flush;
+      std::vector<std::string> file_list;
+      for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
+        generate_file_list(*i, file_list);
+      std::cout << "done" << std::endl;;
+
+      int progress_scale = 70;
+      int progress = 0;
+      int last_progress = 0;
+      std::cout << "Generating thumbnails...\n" << std::flush;
+      for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
         {
-          process_path(argv[i]);
+          try {
+            generate_thumbnails(*i, quality, sizes);
+          } catch(std::exception& err) {
+            std::cout << "Error: " << err.what() << std::endl;
+          }
+
+          progress = progress_scale * (i - file_list.begin() + 1) / file_list.size();
+
+          if (progress != last_progress)
+            {
+              last_progress = progress;
+
+              std::cout << "[";
+              for(int i = 0; i < progress_scale; ++i)
+                {
+                  if (i <= progress)
+                    std::cout.put('#');
+                  else
+                    std::cout.put(' ');
+                }
+              std::cout << "]\r" << std::flush;
+            }
         }
+      std::cout << "\ndone" << std::endl;;
     }
 
   Filesystem::deinit();

Deleted: trunk/griv/thumbget.cpp
===================================================================
--- trunk/griv/thumbget.cpp	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/thumbget.cpp	2007-11-17 11:46:09 UTC (rev 1555)
@@ -1,42 +0,0 @@
-// Little experimental epeg test app
-
-#include "epeg/Epeg.h"
-#include <iostream>
-
-int main(int argc, char** argv)
-{
-  if (argc != 7)
-    {
-      printf("Usage: %s INFILE X Y W H OUTFILE\n", argv[0]);
-      exit(0);
-    }
-
-  char* filename = argv[1];
-  int x = atoi(argv[2]);
-  int y = atoi(argv[3]);
-  int w = atoi(argv[4]);
-  int h = atoi(argv[5]);
-  //char* out_filename = argv[6];
-
-  std::cout << filename << " " << x << ", " << y << " - " << w << "x" << h << std::endl;
-
-  Epeg_Image* img;
-
-  img = epeg_file_open(filename);
-  if (!img)
-    {
-      printf("Cannot open %s\n", filename);
-      exit(-1);
-    }
-
-
-  const unsigned char* pixels = static_cast<const unsigned char*>(epeg_pixels_get(img, x, y, w, h));
-  epeg_pixels_free(img, pixels);
-
-  epeg_close(img);
-
-  
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/griv/thumbnail.py
===================================================================
--- trunk/griv/thumbnail.py	2007-11-16 15:14:29 UTC (rev 1554)
+++ trunk/griv/thumbnail.py	2007-11-17 11:46:09 UTC (rev 1555)
@@ -1,84 +0,0 @@
-#!/usr/bin/python
-
-# import xattr
-import sys
-import os
-import md5
-import Image
-from stat import *
-from glob import fnmatch
-import dircache
-
-image_exts = [".jpg", ".png", ".JPG", ".JPEG", ".PNG"]
-
-config_home = os.getenv("HOME")
-
-if not config_home:
-    print "Couldn't find $HOME environment variable"
-    exit()
-else:
-    # FIXME: mkdir also 00-ff
-    for hex in [a+b for a in "0123456789abcdef" for b in "0123456789abcdef"]:
-        for org in ["by_url", "by_md5"]:
-            for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
-                dir = config_home + "/.griv/cache/%s/%d/%s" % (org, res, hex)
-                if not os.access(dir, os.F_OK):
-                    os.makedirs(dir)
-                    print "Created", dir
-
-def has_extension(filename, extensions):
-    for ext in extensions:
-        if filename.endswith(ext):
-            return True
-    return False
-
-def md5sum(filename):
-    f = open(filename)
-    m = md5.new()
-    m.update(f.read())
-    f.close()
-    return m.hexdigest()
-
-def genthumb(orig_filename, img):
-    global config_home
-    for res in [2048, 1024, 512, 256, 128, 64, 32, 16]:
-        url = "file://" + os.path.abspath(orig_filename)
-        m = md5.new()
-        m.update(url)
-        url_md5 = m.hexdigest()
-
-        url_filename = config_home + "/.griv/cache/by_url/%d/%s/%s.jpg" % (res, url_md5[0:2], url_md5[2:])
-
-        if not os.path.exists(url_filename):
-            if res < img.size[0] or res < img.size[1]: # don't thumbnail if orig is smaller
-                if (img.size[0] > img.size[1]): # preserve aspect ratio
-                    size = (res, res * img.size[1] / img.size[0])
-                else:
-                    size = (res * img.size[0] / img.size[1], res)
-
-                img = img.resize(size, Image.BICUBIC) #
-                img.save(url_filename, "JPEG", quality = 75)
-
-                print "%4d %s => %s" % (res, orig_filename, url_filename)
-
-def process_file(pathname):
-    if os.path.isdir(pathname): 
-        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
-            process_file(i)        
-    elif has_extension(pathname, image_exts):
-        try:
-            orig_img = Image.open(pathname)
-            genthumb(pathname, orig_img)
-
-        except IOError, err:
-            print "Image Error:", pathname, err
-    else:
-        pass # ignore non-image files
-
-def main(args):
-    for pathname in args:
-        process_file(pathname)
-
-main(sys.argv[1:])
-
-# EOF #



From grumbel at mail.berlios.de  Sat Nov 17 12:54:58 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 17 Nov 2007 12:54:58 +0100
Subject: [Windstille-commit] r1556 - trunk/griv
Message-ID: <200711171154.lAHBswtM028533@sheep.berlios.de>

Author: grumbel
Date: 2007-11-17 12:54:57 +0100 (Sat, 17 Nov 2007)
New Revision: 1556

Added:
   trunk/griv/ChangeLog
Log:
- added changelog

Added: trunk/griv/ChangeLog
===================================================================
--- trunk/griv/ChangeLog	2007-11-17 11:46:09 UTC (rev 1555)
+++ trunk/griv/ChangeLog	2007-11-17 11:54:57 UTC (rev 1556)
@@ -0,0 +1,175 @@
+2007-11-16 14:02  grumbel
+
+	* ., SConstruct, TODO, filesystem.cpp, filesystem.hpp, image.cpp,
+	  loader.cpp, loader.hpp, md5.cpp, md5.hpp, thumbgen.cpp,
+	  thumbget.cpp, thumbnail_store.cpp, thumbnail_store.hpp:
+	  - moved md5 in its own class
+
+2007-11-15 23:12  grumbel
+
+	* display.hpp, griv.cpp, image.cpp, texture.cpp, workspace.cpp,
+	  workspace.hpp:
+	  - added a little bit rotation support
+	  - fixed pitch issue
+
+2007-11-15 18:06  grumbel
+
+	* SConstruct, TODO, get_thumbnails.py, griv.cpp, griv.hpp,
+	  image.cpp, image.hpp, loader.cpp, workspace.cpp, workspace.hpp:
+	  - added smooth movement and some more stuff
+
+2007-11-15 18:05  grumbel
+
+	* imagepack.py:
+	  - added test application for packed jpegs
+
+2007-11-15 00:47  grumbel
+
+	* griv.cpp, image.cpp, image.hpp, workspace.cpp, workspace.hpp:
+	  - added dynamic reorganisation
+
+2007-11-15 00:32  grumbel
+
+	* TODO, griv.cpp, image.cpp, image.hpp, thumbnail.py,
+	  workspace.cpp, workspace.hpp:
+	  - moved image position into image
+
+2007-11-14 21:21  grumbel
+
+	* TODO, display.cpp, griv.cpp:
+	  - added window resize and fullscreen back
+
+2007-11-14 14:35  grumbel
+
+	* griv.cpp, griv.hpp:
+	  - added smooth zoom with mouse buttons
+
+2007-11-14 14:16  grumbel
+
+	* TODO:
+	  - updates
+
+2007-11-14 14:05  grumbel
+
+	* TODO, thumbnail.py:
+	  - removed xattr handling
+
+2007-11-14 13:15  grumbel
+
+	* griv.cpp, image.cpp, workspace.cpp:
+	  - some opimizations
+
+2007-11-14 12:50  grumbel
+
+	* TODO, griv.cpp, griv.hpp, image.cpp, image.hpp, loader.cpp,
+	  loader.hpp, workspace.cpp, workspace.hpp:
+	  - added variable zoom rates
+
+2007-11-14 00:01  grumbel
+
+	* display.cpp, image.cpp, image.hpp, texture.cpp, texture.hpp:
+	  OpenGL support now somewhat working, but still rather buggy
+
+2007-11-13 23:36  grumbel
+
+	* TODO, display.cpp, image.cpp, texture.cpp:
+	  - trying to get OpenGL to work
+
+2007-11-13 23:17  grumbel
+
+	* SConstruct, TODO, display.cpp, display.hpp, griv.cpp, image.cpp,
+	  image.hpp, texture.cpp, texture.hpp, workspace.cpp:
+	  - trying to get OpenGL to work
+
+2007-11-13 18:15  grumbel
+
+	* filesystem.cpp, griv.cpp, image.cpp, image.hpp, loader.cpp,
+	  loader.hpp, workspace.cpp:
+	  - removed md5/xattr handling
+
+2007-11-13 16:50  grumbel
+
+	* griv.cpp, image.hpp, loader.cpp, workspace.hpp:
+	  - center viewport on startup
+
+2007-11-13 16:21  grumbel
+
+	* SConstruct, filesystem.cpp, filesystem.hpp, griv.cpp, image.cpp,
+	  image.hpp, loader.cpp, loader.hpp, surface.cpp, surface.hpp,
+	  texture.cpp, texture.hpp, thumbnail.py, workspace.cpp,
+	  workspace.hpp:
+	  - changed thumbnaile caching organisation
+
+2007-11-13 09:56  grumbel
+
+	* SConstruct, image.cpp, image.hpp, workspace.cpp, workspace.hpp:
+	  - some more source code splitting
+
+2007-11-13 09:31  grumbel
+
+	* ., SConstruct, display.cpp, display.hpp, filesystem.cpp,
+	  filesystem.hpp, griv.cpp, griv.hpp, image.hpp, loader.cpp,
+	  thumbnail.py, workspace.hpp:
+	  - some more source code splitting
+
+2007-11-12 22:54  grumbel
+
+	* image.hpp, workspace.hpp:
+	  - fixed race condition
+
+2007-11-12 22:09  grumbel
+
+	* SConstruct, griv.cpp, griv.hpp, image.cpp, image.hpp, loader.cpp,
+	  loader.hpp, loading_128.jpg, workspace.hpp:
+	  - added multithread support
+
+2007-11-12 20:44  grumbel
+
+	* SConstruct, filesystem.cpp, filesystem.hpp, griv.cpp, griv.hpp,
+	  image.cpp, image.hpp, workspace.hpp:
+	  - splitted code in a few more files
+
+2007-11-12 20:25  grumbel
+
+	* SConstruct, griv.cpp, griv.hpp, image.hpp, loader.cpp,
+	  loader.hpp, loading_1024.jpg, loading_128.jpg, loading_16.jpg,
+	  loading_256.jpg, loading_32.jpg, loading_512.jpg, loading_64.jpg:
+	  - splitted code in a few more files
+
+2007-11-12 12:15  grumbel
+
+	* README, REAME:
+	  - added HOME handling
+
+2007-11-12 12:15  grumbel
+
+	* REAME, griv.cpp, thumbnail.py:
+	  - added HOME handling
+
+2007-11-12 03:31  grumbel
+
+	* griv.cpp, thumbnail.py:
+	  - added directory handling
+
+2007-11-12 02:28  grumbel
+
+	* ., SConstruct, get_thumbnails.py, griv.cpp, thumbnail.py,
+	  trunk/media/images/gui/wii.xcf,
+	  trunk/media/images/tiles/baroutside.xcf,
+	  trunk/media/models/objects/barrobot/barrobot.blend,
+	  trunk/media/models/vehicles/jsf/jsf.blend,
+	  trunk/test/classtest.nut, trunk/windstille/NEWS,
+	  trunk/windstille/SConstruct,
+	  trunk/windstille/data/armature/armature.arm,
+	  trunk/windstille/data/armature/mesh.mesh,
+	  trunk/windstille/data/levels/apartment.wst,
+	  trunk/windstille/data/scripts/apartment/barrobot.nut,
+	  trunk/windstille/data/scripts/windstille.nut,
+	  trunk/windstille/lib/SConscript, trunk/windstille/src/SConscript,
+	  trunk/windstille/src/input/controller.cpp,
+	  trunk/windstille/src/windstille_main.cpp,
+	  trunk/windstille/tools/SConscript,
+	  trunk/windstille/tools/mesh_export.py,
+	  trunk/windstille/tools/model_test.blend:
+	  - added a zoomable-interface like image viewer
+



From grumbel at mail.berlios.de  Sat Nov 17 15:44:55 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 17 Nov 2007 15:44:55 +0100
Subject: [Windstille-commit] r1557 - in trunk/griv: . epeg
Message-ID: <200711171444.lAHEitbk022098@sheep.berlios.de>

Author: grumbel
Date: 2007-11-17 15:44:55 +0100 (Sat, 17 Nov 2007)
New Revision: 1557

Added:
   trunk/griv/epeg/README
Modified:
   trunk/griv/
   trunk/griv/thumbgen.cpp
Log:
- fixed command line parsing


Property changes on: trunk/griv
___________________________________________________________________
Name: svn:ignore
   - griv
libgriv.a
.sconsign.dblite
thumbgen
thumbget

   + griv
libepeg.a
libgriv.a
.sconsign.dblite
thumbgen
thumbget


Added: trunk/griv/epeg/README
===================================================================
--- trunk/griv/epeg/README	2007-11-17 11:54:57 UTC (rev 1556)
+++ trunk/griv/epeg/README	2007-11-17 14:44:55 UTC (rev 1557)
@@ -0,0 +1,5 @@
+Epeg Library as available from:
+
+cvs -z3 -d :pserver:anonymous at anoncvs.enlightenment.org:/var/cvs/e export e17/libs/epeg
+
+# EOF #

Modified: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-17 11:54:57 UTC (rev 1556)
+++ trunk/griv/thumbgen.cpp	2007-11-17 14:44:55 UTC (rev 1557)
@@ -87,113 +87,147 @@
 {
   // FIXME: implement me
   // FIXME: add handling for "16,32,64"
-  sizes.push_back(atoi(str.c_str()));
+
+  int begin = 0;
+  for(int i = 1; i <= int(str.size()); ++i)
+    {
+      if (str[i] == ',' || i == int(str.size()))
+        {
+          if (i - begin > 0)
+            {
+              int j;
+              if (sscanf(str.substr(begin, i - begin).c_str(), "%d", &j) == 1)
+                {
+                  if (j < 16)
+                    throw std::runtime_error("thumb size below 16 not supported");
+                  else if (j > 1024)
+                    throw std::runtime_error("thumb size larger then 1024 not supported");
+                  else if ((j & (j - 1)) != 0)
+                    throw std::runtime_error("thumb size must be power of two");
+                  else
+                    sizes.push_back(j);
+                }
+              else
+                throw std::runtime_error("argument not a number");
+            }
+          begin = i + 1;
+        }
+    }
 }
 
 int main(int argc, char** argv)
 {
-  CommandLine argp;
+  try {
+    CommandLine argp;
       
-  argp.add_usage("[OPTION]... [FILE]...");
-  argp.add_doc("A offline thumbnail generator for griv\n");
-  argp.add_option('s', "size", "NUM,...", "Generate thumbnails for the given sizes (default: 16)");
-  argp.add_option('v', "verbose", "", "Print more detailed output on generation");
-  argp.add_option('q', "quality", "NUM", "JPEG quality used for thumbnailing, range 1-100 (default: 80)");
-  argp.add_option('h', "help", "", "Print this help");
+    argp.add_usage("[OPTION]... [FILE]...");
+    argp.add_doc("A offline thumbnail generator for griv\n");
+    argp.add_option('s', "size", "NUM,...", "Generate thumbnails for the given sizes (default: 16)");
+    argp.add_option('v', "verbose", "", "Print more detailed output on generation");
+    argp.add_option('q', "quality", "NUM", "JPEG quality used for thumbnailing, range 1-100 (default: 80)");
+    argp.add_option('h', "help", "", "Print this help");
 
-  try {
-    argp.parse_args(argc, argv);
-  } catch(std::exception& err) {
-    std::cout << "Error: CommandLine: " << err.what() << std::endl;
-    exit(EXIT_FAILURE);
-  }
+    try {
+      argp.parse_args(argc, argv);
+    } catch(std::exception& err) {
+      std::cout << "Error: CommandLine: " << err.what() << std::endl;
+      exit(EXIT_FAILURE);
+    }
 
-  int quality = 80;
-  std::vector<int> sizes;
-  std::vector<std::string> pathnames;
-  while(argp.next())
-    {
-      switch(argp.get_key())
-        {
-          case 's':
-            parse_number_list(argp.get_argument(), sizes);
-            break;
+    int quality = 80;
+    std::vector<int> sizes;
+    std::vector<std::string> pathnames;
+    while(argp.next())
+      {
+        switch(argp.get_key())
+          {
+            case 's':
+              parse_number_list(argp.get_argument(), sizes);
+              break;
 
-          case 'q':
-            quality = atoi(argp.get_argument().c_str());
-            break;
+            case 'q':
+              quality = atoi(argp.get_argument().c_str());
+              break;
 
-          case 'v':
-            verbose = true;
-            break;
+            case 'v':
+              verbose = true;
+              break;
 
-          case 'h':
-            argp.print_help();
-            exit(EXIT_SUCCESS);
-            break;
+            case 'h':
+              argp.print_help();
+              exit(EXIT_SUCCESS);
+              break;
 
-          case CommandLine::REST_ARG:
-            pathnames.push_back(argp.get_argument());
-            break;
+            case CommandLine::REST_ARG:
+              pathnames.push_back(argp.get_argument());
+              break;
 
-          default:
-            std::cout << "Unhandled argument: " << argp.get_key() << std::endl;
-            exit(EXIT_FAILURE);
-            break;
-        }
-    };
+            default:
+              std::cout << "Unhandled argument: " << argp.get_key() << std::endl;
+              exit(EXIT_FAILURE);
+              break;
+          }
+      };
   
-  if (sizes.empty())
-    sizes.push_back(16);
+    if (sizes.empty())
+      sizes.push_back(16);
 
-  if (pathnames.empty())
-    {
-      argp.print_help();
-    }
-  else
-    {
-      Filesystem::init();
+    if (pathnames.empty())
+      {
+        argp.print_help();
+      }
+    else
+      {
+        Filesystem::init();
 
-      std::cout << "Generating file list... " << std::flush;
-      std::vector<std::string> file_list;
-      for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
-        generate_file_list(*i, file_list);
-      std::cout << "done" << std::endl;;
+        std::cout << "Generating file list... " << std::flush;
+        std::vector<std::string> file_list;
+        for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
+          generate_file_list(*i, file_list);
+        std::cout << "done" << std::endl;;
 
-      int progress_scale = 70;
-      int progress = 0;
-      int last_progress = 0;
-      std::cout << "Generating thumbnails...\n" << std::flush;
-      for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
-        {
-          try {
-            generate_thumbnails(*i, quality, sizes);
-          } catch(std::exception& err) {
-            std::cout << "Error: " << err.what() << std::endl;
-          }
+        int progress_scale = 70;
+        int progress = 0;
+        int last_progress = 0;
+        std::cout << "Generating thumbnails for " << std::flush;
 
-          progress = progress_scale * (i - file_list.begin() + 1) / file_list.size();
+        for(std::vector<int>::iterator i = sizes.begin(); i != sizes.end(); ++i)
+          std::cout << *i << " " << std::flush;
 
-          if (progress != last_progress)
-            {
-              last_progress = progress;
+        std::cout << std::endl;
 
-              std::cout << "[";
-              for(int i = 0; i < progress_scale; ++i)
-                {
-                  if (i <= progress)
-                    std::cout.put('#');
-                  else
-                    std::cout.put(' ');
-                }
-              std::cout << "]\r" << std::flush;
+        for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
+          {
+            try {
+              generate_thumbnails(*i, quality, sizes);
+            } catch(std::exception& err) {
+              std::cout << "Error: " << err.what() << std::endl;
             }
-        }
-      std::cout << "\ndone" << std::endl;;
-    }
 
-  Filesystem::deinit();
+            progress = progress_scale * (i - file_list.begin() + 1) / file_list.size();
 
+            if (progress != last_progress)
+              {
+                last_progress = progress;
+
+                std::cout << "[";
+                for(int i = 0; i < progress_scale; ++i)
+                  {
+                    if (i <= progress)
+                      std::cout.put('#');
+                    else
+                      std::cout.put(' ');
+                  }
+                std::cout << "]\r" << std::flush;
+              }
+          }
+        std::cout << "\ndone" << std::endl;;
+      }
+
+    Filesystem::deinit();
+  } catch(std::exception& err) {
+    std::cout << "Error: " << err.what() << std::endl;
+  }
   return 0;
 }
 



From grumbel at mail.berlios.de  Sat Nov 17 19:17:34 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Sat, 17 Nov 2007 19:17:34 +0100
Subject: [Windstille-commit] r1558 - in trunk/griv: . obsolete
Message-ID: <200711171817.lAHIHYQf027629@sheep.berlios.de>

Author: grumbel
Date: 2007-11-17 19:17:34 +0100 (Sat, 17 Nov 2007)
New Revision: 1558

Added:
   trunk/griv/obsolete/get_thumbnails.py
   trunk/griv/obsolete/imagepack.py
Removed:
   trunk/griv/get_thumbnails.py
   trunk/griv/imagepack.py
Modified:
   trunk/griv/
Log:
- some cleanup


Property changes on: trunk/griv
___________________________________________________________________
Name: svn:ignore
   - griv
libepeg.a
libgriv.a
.sconsign.dblite
thumbgen
thumbget

   + griv
libepeg.a
libgriv.a
.sconsign.dblite
thumbgen



Deleted: trunk/griv/get_thumbnails.py
===================================================================
--- trunk/griv/get_thumbnails.py	2007-11-17 14:44:55 UTC (rev 1557)
+++ trunk/griv/get_thumbnails.py	2007-11-17 18:17:34 UTC (rev 1558)
@@ -1,34 +0,0 @@
-#!/usr/bin/python
-
-import xattr
-import sys
-import os
-import md5
-import Image
-from stat import *
-
-def process_file(pathname):
-    global res
-    if os.path.isdir(pathname): 
-        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
-            process_file(i)        
-    else:
-        try:
-            md5 = xattr.getxattr(pathname, "user.griv.md5")
-            print "/home/ingo/.griv/%d/%s.jpg" % (res, md5)
-        except IOError, (errno, stderr):
-            pass
-
-def main(args):
-    for pathname in args:
-        print pathname
-        if os.path.isdir(pathname): 
-            for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
-                main(i)
-        else:
-            process_file(pathname)
-
-res = int(sys.argv[1])
-main(sys.argv[2:])
-
-# EOF #

Deleted: trunk/griv/imagepack.py
===================================================================
--- trunk/griv/imagepack.py	2007-11-17 14:44:55 UTC (rev 1557)
+++ trunk/griv/imagepack.py	2007-11-17 18:17:34 UTC (rev 1558)
@@ -1,68 +0,0 @@
-#!/usr/bin/python
-
-import struct
-import sys
-import os
-import Image
-import md5
-
-scale = 16/16 # 1 == 16x16
-
-def process_files(args):
-    global scale 
-
-    args.sort()
-
-    if len(args) > 4096:
-        print "Error: More then 4096 images given,", len(args)
-        exit(0)
-
-    print "."
-    img = Image.new("RGB", (1024*scale, 1024*scale))
-    print "."
-    x = 0
-    y = 0
-    for pathname in args:
-        try:
-            # print "Processing: ", pathname
-            source = Image.open(pathname)
-            img.paste(source, (x,y))
-            del source
-
-            x += 16*scale
-            if x >= 1024*scale:
-                x = 0
-                y += 16*scale
-        except IOError, err:
-            print pathname, err
-
-    img.save("/tmp/out-%d.jpg" % (scale*16), "JPEG", quality = 75)
-
-    # Generate index file
-    f = open("/tmp/out-%d.idx" % (scale*16), "wb")
-    f.write(struct.pack("I", len(args))) # FIXME: endianess
-
-    for i in args: 
-        f.write(os.path.basename(i))
-        f.write("\0")
-    f.close()
-
-    print len(args), "images processed"
-
-
-def gen_file_list(lst, pathname):
-    if os.path.isdir(pathname): 
-        for i in [os.path.join(pathname, name) for name in os.listdir(pathname)]:
-            gen_file_list(lst, i)
-    else:
-        lst.append(pathname)
-            
-def main(args):
-    lst = []
-    for i in args:
-        gen_file_list(lst, i)
-    process_files(lst)
-
-main(sys.argv[1:])
-
-# EOF #

Copied: trunk/griv/obsolete/get_thumbnails.py (from rev 1556, trunk/griv/get_thumbnails.py)

Copied: trunk/griv/obsolete/imagepack.py (from rev 1556, trunk/griv/imagepack.py)



From grumbel at mail.berlios.de  Mon Nov 19 00:48:34 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 19 Nov 2007 00:48:34 +0100
Subject: [Windstille-commit] r1559 - trunk/griv
Message-ID: <200711182348.lAINmYmk030763@sheep.berlios.de>

Author: grumbel
Date: 2007-11-19 00:48:33 +0100 (Mon, 19 Nov 2007)
New Revision: 1559

Modified:
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
   trunk/griv/thumbgen.cpp
Log:
- moved some code into seperate surface class

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/SConstruct	2007-11-18 23:48:33 UTC (rev 1559)
@@ -14,6 +14,7 @@
 griv_env.Program('griv', ['griv.cpp',
                           'loader.cpp',
                           'image.cpp',
+                          'surface.cpp',
                           'thumbnail_store.cpp',
                           'display.cpp', 
                           'texture.cpp', 

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/TODO	2007-11-18 23:48:33 UTC (rev 1559)
@@ -1,3 +1,24 @@
+ToDo:
+=====
+
+- store 16x16 thumbnails in a container format, simple uncompressed
+  RGB, store filenames in a simple linear list, stuff them into a
+  map/hash on load
+
+- implement Surface class that handles images larger then the maximum
+  texture size
+
+- added support for ~/.thumbnails/ to get the smaller mipmaps faster
+
+- create a two OpenGL context to allow better multithreading use (any
+  way to do it portable?)
+
+- move over input code from Pingus to support Spacenavigator and such
+
+
+Misc Stuff:
+===========
+
 1920x1080: (64x64) 30x17=510, (32x32) 60x34=2040, (16x16) 120x68=8160, (4x4) 480x270=129600
 ~100MB for fullscreen 16x16 Thumbs
 4096 images on 1024x1024 texture at 16x16
@@ -3,14 +24,7 @@
 ~32 textures for 129600 thumbs
 
-Ideas:
-======
-- store 16x16 thumbnails in a single 1024x1024 jpeg image (easy to use as texture)
-- store filenames in a simple linear list, stuff them into a map/hash on load
-- maybe do the same for 32x32, but that needs benchmarking first
-
 Problems:
 =========
 - initial load is very slow
-- initial thumbnailing is *extremly* slow
 
 4096 pictures packed in a single JPEG:
@@ -35,10 +49,8 @@
 user    0m0.876s
 sys     0m0.128s
 
-Short Term:
-===========
-- add broken-image image or kick them out of the Workspace
-- use epeg for thumb generation
+Getting pictures for testing from Flickr:
+=========================================
 
 cvs -z3 -d :pserver:anonymous at anoncvs.enlightenment.org:/var/cvs/e export e17/libs/epeg
 # Flickr Download:
@@ -58,10 +70,4 @@
 
 - store by md5 and use hardlinks, thus avoid duplicates when files are moved
 
-Long Term:
-==========
-- move position into Image
-- handle object placement elsewhere
-- added support for ~/.thumbnails/ to get the smaller mipmaps faster
-
 # EOF #

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/griv.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -217,8 +217,7 @@
 {
   Filesystem::init();
   Framebuffer::init();
-  Image::init();
-
+  
   workspace = new Workspace();
 
   for(int i = 1; i < argc; ++i)
@@ -281,7 +280,6 @@
 
   delete workspace;
 
-  Image::deinit();
   Framebuffer::deinit();
   Filesystem::deinit();
 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/image.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -28,37 +28,18 @@
 #include "SDL_image.h"
 #include "texture.hpp"
 #include "image.hpp"
+#include "surface.hpp"
 
-SDL_Surface* Image::loading_16;
-SDL_Surface* Image::loading_32;
-SDL_Surface* Image::loading_64;
-SDL_Surface* Image::loading_128;
-SDL_Surface* Image::loading_256;
-SDL_Surface* Image::loading_512;
-SDL_Surface* Image::loading_1024;
-
-void 
-Image::init()
-{
-  std::cout << "Image" << std::endl;
-
-  loading_1024 = IMG_Load("loading_1024.jpg");
-  loading_512  = IMG_Load("loading_512.jpg");
-  loading_256  = IMG_Load("loading_256.jpg");
-  loading_128  = IMG_Load("loading_128.jpg");
-  loading_64   = IMG_Load("loading_64.jpg");
-  loading_32   = IMG_Load("loading_32.jpg");
-  loading_16   = IMG_Load("loading_16.jpg");
-}
-
 Image::Image(const std::string& url)
   : url(url), 
+    requested_res(0),
+
+    received_surface(0),
+    received_surface_res(0),
+
     surface(0),
-    texture(0),
-    texture_16x16(0),
-    res(0),
-    want_res(0),
-    image_requested(false),
+    surface_16x16(0),
+
     x_pos(0),
     y_pos(0),
     last_x_pos(0),
@@ -76,24 +57,15 @@
 Image::receive(SDL_Surface* new_surface, int r)
 { 
   SDL_LockMutex(mutex);
+  
   if (new_surface)
     {
-      if (surface)
-        {
-          SDL_Surface* old_surface = surface;
-          surface = new_surface;
-          SDL_FreeSurface(old_surface); 
-        }
-      else
-        {
-          surface = new_surface;
-        }
-      
-      res = r;
-
-      force_redraw = true;
+      received_surface     = new_surface;
+      received_surface_res = r;
+      force_redraw         = true;
     }
-  image_requested = false;
+  requested_res        = 0; 
+ 
   SDL_UnlockMutex(mutex);
 }
 
@@ -109,69 +81,49 @@
       x < -res || 
       y < -res)
     { // Image out of screen
-      if (res >= 512)
-        if (surface)
-          {
-            SDL_FreeSurface(surface);
-            surface = 0;
-
-            delete texture;
-            texture = 0;
-
-            want_res  = 0;
-            this->res = 0;
-          }
+      if (surface && surface->get_resolution() >= 512) // keep small images around a while longer
+        {
+          delete surface;
+          surface = 0;
+        }
     }
   else
     { // image on screen
-      //std::cout << round_res(res) << " " << this->res << std::endl;
 
-      if (!image_requested)
-        if (surface == 0 || round_res(int(res)) != int(this->res))
-          {
-            loader.request(this);
-            want_res = round_res(int(res));
-            image_requested = true;
-          }
-
-      if (surface)
+      // Handle loading when resolution changed
+      if (surface == 0 || 
+          round_res(int(res)) != surface->get_resolution())
         {
-          if (!texture || texture->surface != surface)
-            {
-              if (!texture_16x16)
-                {
-                  texture_16x16 = new Texture(surface);
-                }
-              else
-                {
-                  delete texture;
-                  texture = new Texture(surface);
-                }
+          if (round_res(int(res)) != requested_res)
+            {    
+              loader.request(this);
+              requested_res = round_res(int(res));
             }
         }
-
-      if (texture || texture_16x16)
+      
+      // Handle OpenGL Texture creation when new surface was received
+      if (received_surface)
         {
-          if (texture)
-            texture->bind();
-          else if (texture_16x16)
-            texture_16x16->bind();
+          if (!surface_16x16)
+            { // Use surface as the smallest possible surface
+              // FIXME: When somebody is fast this could mean a non 16x16 surface
+              surface_16x16 = new Surface(received_surface, received_surface_res);
+            }
+          else
+            { // Replace the current surface
+              delete surface;
+              surface = new Surface(received_surface, received_surface_res);
+            }
 
-          glColor3f(1.0f, 1.0f, 1.0f);
-          glBegin(GL_QUADS);
-          glTexCoord2f(0,0);
-          glVertex2f(x, y);
-
-          glTexCoord2f(1,0);
-          glVertex2f(x + res, y);
-
-          glTexCoord2f(1,1);
-          glVertex2f(x + res, y + res);
-
-          glTexCoord2f(0,1);
-          glVertex2f(x, y + res);
-          glEnd();
+          received_surface     = 0;
+          received_surface_res = 0;
         }
+
+      // Handle drawing
+      if (surface)
+        surface->draw(x, y, res, res);
+      else if (surface_16x16)
+        surface_16x16->draw(x, y, res, res);
     }
   SDL_UnlockMutex(mutex);
 }

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/image.hpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -31,52 +31,21 @@
 #include "loader.hpp"
 #include "griv.hpp"
 
-class Texture;
+class Surface;
 
 class Image
 {
 public:
-  // Place holder images when no other is available
-  static SDL_Surface* loading_16;
-  static SDL_Surface* loading_32;
-  static SDL_Surface* loading_64;
-  static SDL_Surface* loading_128;
-  static SDL_Surface* loading_256;
-  static SDL_Surface* loading_512;
-  static SDL_Surface* loading_1024;
+  std::string url;
 
-  static void init();
-  static void deinit() {}
+  int  requested_res;
 
-  static SDL_Surface* placeholder(int res)
-  {
-    if (res < 16)
-      return loading_16;
-    else if (res < 32)
-      return loading_32;
-    else if (res < 64)
-      return loading_64;
-    else if (res < 128)
-      return loading_128;
-    else if (res < 256)
-      return loading_256;
-    else if (res < 512)
-      return loading_512;
-    else if (res < 1024)
-      return loading_1024;
-    else 
-      return loading_1024;
-  }
-
-public:
-  std::string url;
+  /** Newly received surface */
+  SDL_Surface* received_surface;
+  int          received_surface_res;
   
-  SDL_Surface* surface;
-  Texture*     texture;
-  Texture*     texture_16x16;
-  int res;
-  int want_res;
-  bool image_requested;
+  Surface*     surface;
+  Surface*     surface_16x16;
 
   SDL_mutex* mutex;
 

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/loader.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -31,6 +31,7 @@
 #include "SDL_image.h"
 #include "image.hpp"
 #include "loader.hpp"
+#include "surface.hpp"
 #include "thumbnail_store.hpp"
 
 Loader loader;
@@ -84,18 +85,18 @@
   SDL_LockMutex(mutex);
   if (!jobs.empty())
     {
+      std::cout << "process_job: " << jobs.size() << std::endl;
       // Lock
       Job job = jobs.back();
       jobs.pop_back();
 
-      int res = job.image->want_res;
-
-      if (job.image->res != res && res != 0)
+      if (!job.image->surface ||
+          job.image->surface->get_resolution() != job.image->requested_res)
         {
-          SDL_Surface* img = store->get_by_url(job.image->url, res);
+          SDL_Surface* img = store->get_by_url(job.image->url, job.image->requested_res);
           if (img)
             {
-              job.image->receive(img, res);
+              job.image->receive(img, job.image->requested_res);
             }
           else
             {
@@ -103,10 +104,10 @@
               if (0)
                 { // FIXME: Wonky, gets super slow for some reason
                   img = IMG_Load(job.image->url.substr(7).c_str()); // cut file:// part
-                  std::cout << "Loading: " << res << " " << img << " " 
+                  std::cout << "Loading: " << job.image->requested_res << " " << img << " " 
                             << img->w << "x" << img->h << " "
                             << job.image->url.substr(7) << std::endl;
-                  job.image->receive(img, res);
+                  job.image->receive(img, job.image->requested_res);
                 }
             }
         }

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/surface.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -23,28 +23,45 @@
 **  02111-1307, USA.
 */
 
+#include <assert.h>
 #include "display.hpp"
 #include "surface.hpp"
 
-Surface::Surface()
-  : surface(0)
+Surface::Surface(SDL_Surface* surface, int res)
+  : surface(surface),
+    res(res)
 {
+  assert(surface);
+  texture = new Texture(surface);
 }
 
 Surface::~Surface()
 {
+  SDL_FreeSurface(surface);
 }
 
 void
-Surface::draw(int x, int y)
+Surface::draw(float x, float y, float w, float h)
 {
   if (surface)
     {
-      SDL_Rect dstrect;
-      dstrect.x = x;
-      dstrect.y = y;
+      texture->bind();
       
-      SDL_BlitSurface(surface, NULL, Display::get_screen(), &dstrect);
+      glColor3f(1.0f, 1.0f, 1.0f);
+
+      glBegin(GL_QUADS);
+      glTexCoord2f(0,0);
+      glVertex2f(x, y);
+
+      glTexCoord2f(1,0);
+      glVertex2f(x + w, y);
+
+      glTexCoord2f(1,1);
+      glVertex2f(x + w, y + h);
+
+      glTexCoord2f(0,1);
+      glVertex2f(x, y + h);
+      glEnd();
     }
 }
 

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/surface.hpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -26,17 +26,26 @@
 #ifndef HEADER_SURFACE_HPP
 #define HEADER_SURFACE_HPP
 
+#include "SDL.h"
+#include "texture.hpp"
+
 /** */
 class Surface
 {
 private:
+  /** Software backstore for the image */
   SDL_Surface* surface;
+  int res;
+  
+  Texture* texture;
 
 public:
-  Surface();
+  Surface(SDL_Surface* surface, int res);
   ~Surface();
 
-  void draw(int x, int y);
+  void draw(float x, float y, float w, float h);
+
+  int get_resolution() const { return res; }
 private:
   Surface (const Surface&);
   Surface& operator= (const Surface&);

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/texture.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <assert.h>
 #include <iostream>
 #include <stdexcept>
 #include <boost/format.hpp>
@@ -31,9 +32,10 @@
 #include "texture.hpp"
 
 Texture::Texture(SDL_Surface* surface)
-  : surface(surface),
-    handle(0)
+ : handle(0)
 {
+  assert(surface);
+
   if (0)
   std::cout << boost::format(",----------------------------\n"
                              "| Pointer: 0x%p\n"

Modified: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/texture.hpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -33,8 +33,6 @@
 /** */
 class Texture
 {
-public:
-  SDL_Surface* surface;
 private:
   GLuint handle;
 

Modified: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-17 18:17:34 UTC (rev 1558)
+++ trunk/griv/thumbgen.cpp	2007-11-18 23:48:33 UTC (rev 1559)
@@ -123,6 +123,7 @@
     argp.add_usage("[OPTION]... [FILE]...");
     argp.add_doc("A offline thumbnail generator for griv\n");
     argp.add_option('s', "size", "NUM,...", "Generate thumbnails for the given sizes (default: 16)");
+    argp.add_option('a', "all", "", "Generate thumbnails for all sizes");
     argp.add_option('v', "verbose", "", "Print more detailed output on generation");
     argp.add_option('q', "quality", "NUM", "JPEG quality used for thumbnailing, range 1-100 (default: 80)");
     argp.add_option('h', "help", "", "Print this help");
@@ -153,6 +154,16 @@
               verbose = true;
               break;
 
+            case 'a':
+              sizes.push_back(16);
+              sizes.push_back(32);
+              sizes.push_back(64);
+              sizes.push_back(128);
+              sizes.push_back(256);
+              sizes.push_back(512);
+              sizes.push_back(1024);
+              break;
+
             case 'h':
               argp.print_help();
               exit(EXIT_SUCCESS);
@@ -184,7 +195,7 @@
         std::vector<std::string> file_list;
         for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
           generate_file_list(*i, file_list);
-        std::cout << "done" << std::endl;;
+        std::cout << file_list.size() << " files found" << std::endl;;
 
         int progress_scale = 70;
         int progress = 0;



From grumbel at mail.berlios.de  Mon Nov 19 01:42:09 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 19 Nov 2007 01:42:09 +0100
Subject: [Windstille-commit] r1560 - trunk/griv
Message-ID: <200711190042.lAJ0g9b1016986@sheep.berlios.de>

Author: grumbel
Date: 2007-11-19 01:42:09 +0100 (Mon, 19 Nov 2007)
New Revision: 1560

Modified:
   trunk/griv/image.cpp
   trunk/griv/loader.cpp
   trunk/griv/surface.cpp
   trunk/griv/texture.cpp
   trunk/griv/texture.hpp
Log:
- fixed memleaks

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-18 23:48:33 UTC (rev 1559)
+++ trunk/griv/image.cpp	2007-11-19 00:42:09 UTC (rev 1560)
@@ -60,6 +60,9 @@
   
   if (new_surface)
     {
+      if (received_surface)
+        SDL_FreeSurface(received_surface);
+
       received_surface     = new_surface;
       received_surface_res = r;
       force_redraw         = true;

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-18 23:48:33 UTC (rev 1559)
+++ trunk/griv/loader.cpp	2007-11-19 00:42:09 UTC (rev 1560)
@@ -85,7 +85,7 @@
   SDL_LockMutex(mutex);
   if (!jobs.empty())
     {
-      std::cout << "process_job: " << jobs.size() << std::endl;
+      //std::cout << "process_job: " << jobs.size() << std::endl;
       // Lock
       Job job = jobs.back();
       jobs.pop_back();

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-11-18 23:48:33 UTC (rev 1559)
+++ trunk/griv/surface.cpp	2007-11-19 00:42:09 UTC (rev 1560)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include <assert.h>
 #include "display.hpp"
 #include "surface.hpp"
@@ -32,11 +33,14 @@
     res(res)
 {
   assert(surface);
-  texture = new Texture(surface);
+  texture = new Texture(res, res, 
+                        surface, 
+                        0, 0, surface->w, surface->h);
 }
 
 Surface::~Surface()
 {
+  delete texture;
   SDL_FreeSurface(surface);
 }
 

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-18 23:48:33 UTC (rev 1559)
+++ trunk/griv/texture.cpp	2007-11-19 00:42:09 UTC (rev 1560)
@@ -31,47 +31,47 @@
 #include "display.hpp"
 #include "texture.hpp"
 
-Texture::Texture(SDL_Surface* surface)
- : handle(0)
+Texture::Texture(int width, int height, 
+                 SDL_Surface* surface, int s_x, int s_y, int s_w, int s_h)
+  : handle(0),
+    width(width),
+    height(height)
 {
   assert(surface);
 
   if (0)
-  std::cout << boost::format(",----------------------------\n"
-                             "| Pointer: 0x%p\n"
-                             "| Size:    %dx%d\n"
-                             "| Pitch:   %d vs %d\n"
-                             "| Rmask:   0x%08x\n"
-                             "| Gmask:   0x%08x\n"
-                             "| Bmask:   0x%08x\n"
-                             "| Amask:   0x%08x\n"
-                             "| Flags:   0x%08x -> %s%s%s%s\n"
-                             "| Palette: 0x%08x\n"
-                             "| BitsPerPixel: %d\n"
-                             "`----------------------------\n"
-                             )
-    % surface
-    % surface->w
-    % surface->h
-    % surface->pitch
-    % (surface->w*3)
-    % surface->format->Rmask
-    % surface->format->Gmask
-    % surface->format->Bmask
-    % surface->format->Amask
-    % surface->flags
-    % ((surface->flags & SDL_HWSURFACE) ? "HWSURFACE " : "")
-    % ((surface->flags & SDL_SWSURFACE) ? "SWSURFACE " : "")
-    % ((surface->flags & SDL_SRCCOLORKEY) ? "SRCCOLORKEY " : "")
-    % ((surface->flags & SDL_SRCALPHA) ? "SRCALPHA " : "")
-    % surface->format->palette
-    % static_cast<int>(surface->format->BitsPerPixel);
+    std::cout << boost::format(",----------------------------\n"
+                               "| Pointer: 0x%p\n"
+                               "| Size:    %dx%d\n"
+                               "| Pitch:   %d vs %d\n"
+                               "| Rmask:   0x%08x\n"
+                               "| Gmask:   0x%08x\n"
+                               "| Bmask:   0x%08x\n"
+                               "| Amask:   0x%08x\n"
+                               "| Flags:   0x%08x -> %s%s%s%s\n"
+                               "| Palette: 0x%08x\n"
+                               "| BitsPerPixel: %d\n"
+                               "`----------------------------\n"
+                               )
+      % surface
+      % surface->w
+      % surface->h
+      % surface->pitch
+      % (surface->w*3)
+      % surface->format->Rmask
+      % surface->format->Gmask
+      % surface->format->Bmask
+      % surface->format->Amask
+      % surface->flags
+      % ((surface->flags & SDL_HWSURFACE) ? "HWSURFACE " : "")
+      % ((surface->flags & SDL_SWSURFACE) ? "SWSURFACE " : "")
+      % ((surface->flags & SDL_SRCCOLORKEY) ? "SRCCOLORKEY " : "")
+      % ((surface->flags & SDL_SRCALPHA) ? "SRCALPHA " : "")
+      % surface->format->palette
+      % static_cast<int>(surface->format->BitsPerPixel);
 
   glGenTextures(1, &handle);
 
-  width  = surface->w;
-  height = surface->h;
-
   const SDL_PixelFormat* format = surface->format;
 
   if(format->BitsPerPixel != 24 && format->BitsPerPixel != 32)
@@ -79,7 +79,7 @@
   
   GLint maxt;
   glGetIntegerv(GL_MAX_TEXTURE_SIZE, &maxt);
-  if(surface->w > maxt || surface->h > maxt)
+  if(width > maxt || height > maxt)
     {
       throw std::runtime_error("Texture size not supported");
     }
@@ -103,14 +103,12 @@
 
   glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
 
-  {
-    int res = std::max(surface->w, surface->h);
-    //std::cout << "Res: " << res << std::endl;
-    unsigned char dummy[res*res*3];
-    memset(dummy, 0, res*res*3);
+  { // Create the texture
+    unsigned char dummy[width*height*3];
+    memset(dummy, 0, width*height*3);
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
-                 res,
-                 res,
+                 width,
+                 height,
                  0,
                  GL_RGB,
                  GL_UNSIGNED_BYTE,
@@ -118,9 +116,13 @@
   }
   
   glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch);
+  // Upload the subimage
   glTexSubImage2D(GL_TEXTURE_2D, 0, 
-                  0, 0, surface->w, surface->h, sdl_format,
-                  GL_UNSIGNED_BYTE, surface->pixels);
+                  0, 0, s_w, s_h, sdl_format,
+                  GL_UNSIGNED_BYTE, 
+                  static_cast<Uint8*>(surface->pixels) 
+                  + (surface->pitch * s_y)
+                  + (s_x * surface->format->BytesPerPixel));
 
   assert_gl("creating texture");
 
@@ -144,4 +146,16 @@
   glBindTexture(GL_TEXTURE_2D, handle);
 }
 
+int
+Texture::get_width() const
+{
+  return width;
+}
+
+int
+Texture::get_height() const
+{
+  return height;
+}
+
 /* EOF */

Modified: trunk/griv/texture.hpp
===================================================================
--- trunk/griv/texture.hpp	2007-11-18 23:48:33 UTC (rev 1559)
+++ trunk/griv/texture.hpp	2007-11-19 00:42:09 UTC (rev 1560)
@@ -40,7 +40,7 @@
   int height;
 
 public:
-  Texture(SDL_Surface* surface);
+  Texture(int w, int h, SDL_Surface* surface, int s_x, int s_y, int s_w, int s_h);
   ~Texture();
 
   int get_width() const;



From grumbel at mail.berlios.de  Mon Nov 19 12:20:17 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 19 Nov 2007 12:20:17 +0100
Subject: [Windstille-commit] r1561 - trunk/griv
Message-ID: <200711191120.lAJBKHII000272@sheep.berlios.de>

Author: grumbel
Date: 2007-11-19 12:20:17 +0100 (Mon, 19 Nov 2007)
New Revision: 1561

Modified:
   trunk/griv/griv.cpp
   trunk/griv/loader.cpp
   trunk/griv/loader.hpp
Log:
- added proper thread cleanup

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-19 00:42:09 UTC (rev 1560)
+++ trunk/griv/griv.cpp	2007-11-19 11:20:17 UTC (rev 1561)
@@ -241,7 +241,7 @@
   old_y_offset = -1;
   next_redraw = 0;
 
-  loader.launch_thread();
+  loader.start_thread();
 
   Uint32 ticks = SDL_GetTicks();
   while(true)
@@ -278,6 +278,8 @@
         }
     }
 
+  loader.stop_thread();
+
   delete workspace;
 
   Framebuffer::deinit();

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-19 00:42:09 UTC (rev 1560)
+++ trunk/griv/loader.cpp	2007-11-19 11:20:17 UTC (rev 1561)
@@ -37,6 +37,8 @@
 Loader loader;
 
 Loader::Loader()
+  : thread(0), 
+    keep_thread_running(true)    
 {
   mutex  = SDL_CreateMutex();
   thread = 0;
@@ -51,7 +53,7 @@
 int
 Loader::thread_func(void*)
 {
-  while(1)
+  while(loader.keep_thread_running)
     {
       loader.process_job();
 
@@ -62,16 +64,29 @@
 }
 
 void
-Loader::launch_thread()
+Loader::start_thread()
 {
   if (!store)
     {
       store = new ThumbnailStore();
     }
-  thread = SDL_CreateThread(&Loader::thread_func, 0);
+
+  if (!thread)
+    {
+      keep_thread_running = true;
+      thread = SDL_CreateThread(&Loader::thread_func, 0);
+    }
 }
 
 void
+Loader::stop_thread()
+{
+  keep_thread_running = false;
+  SDL_WaitThread(thread, NULL);
+  thread = 0;
+}
+
+void
 Loader::request(Image* receiver)
 {
   SDL_LockMutex(mutex);

Modified: trunk/griv/loader.hpp
===================================================================
--- trunk/griv/loader.hpp	2007-11-19 00:42:09 UTC (rev 1560)
+++ trunk/griv/loader.hpp	2007-11-19 11:20:17 UTC (rev 1561)
@@ -53,6 +53,7 @@
   ThumbnailStore* store;
   SDL_mutex* mutex;
   SDL_Thread* thread;
+  bool keep_thread_running;
 
 public:
   static int thread_func(void*);
@@ -60,7 +61,8 @@
   Loader();
   ~Loader();
 
-  void launch_thread();
+  void start_thread();
+  void stop_thread();
 
   void request(Image* receiver);
   void process_job();



From grumbel at mail.berlios.de  Mon Nov 19 13:48:48 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Mon, 19 Nov 2007 13:48:48 +0100
Subject: [Windstille-commit] r1562 - trunk/griv
Message-ID: <200711191248.lAJCmm1H024002@sheep.berlios.de>

Author: grumbel
Date: 2007-11-19 13:48:48 +0100 (Mon, 19 Nov 2007)
New Revision: 1562

Modified:
   trunk/griv/texture.cpp
Log:
- fixed issue with incorrect pitch handling

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-19 11:20:17 UTC (rev 1561)
+++ trunk/griv/texture.cpp	2007-11-19 12:48:48 UTC (rev 1562)
@@ -101,11 +101,12 @@
   glBindTexture(GL_TEXTURE_2D, handle);
   glEnable(GL_TEXTURE_2D);
 
-  glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch/format->BytesPerPixel);
+  glPixelStorei(GL_UNPACK_ROW_LENGTH, 0);
+  glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
 
   { // Create the texture
     unsigned char dummy[width*height*3];
-    memset(dummy, 0, width*height*3);
+    memset(dummy, 100, width*height*3);
     glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB,
                  width,
                  height,
@@ -114,8 +115,16 @@
                  GL_UNSIGNED_BYTE,
                  dummy);
   }
-  
-  glPixelStorei(GL_PACK_ROW_LENGTH, surface->pitch);
+
+  assert_gl("packing image texture");
+
+  if (surface->pitch != (surface->w * surface->format->BytesPerPixel))
+    std::cout  << surface->pitch << " " << (surface->w * surface->format->BytesPerPixel) << std::endl;
+
+  //std::cout << surface->pitch << " " << s_w << " " << s_h << std::endl;
+  glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->w);
+  glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
+
   // Upload the subimage
   glTexSubImage2D(GL_TEXTURE_2D, 0, 
                   0, 0, s_w, s_h, sdl_format,



From grumbel at mail.berlios.de  Tue Nov 20 02:50:09 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Tue, 20 Nov 2007 02:50:09 +0100
Subject: [Windstille-commit] r1563 - trunk/htdocs
Message-ID: <200711200150.lAK1o9Bl018782@sheep.berlios.de>

Author: grumbel
Date: 2007-11-20 02:50:08 +0100 (Tue, 20 Nov 2007)
New Revision: 1563

Modified:
   trunk/htdocs/download.xml
Log:
--- some unknown new stuff (automatically inserted by the upload script) ---

Modified: trunk/htdocs/download.xml
===================================================================
--- trunk/htdocs/download.xml	2007-11-19 12:48:48 UTC (rev 1562)
+++ trunk/htdocs/download.xml	2007-11-20 01:50:08 UTC (rev 1563)
@@ -50,12 +50,42 @@
 
   <section title="Development Version">
     <p>
-      You can also get access to the latest development version, it is
-      available via <a
-        href="http://subversion.tigris.de">Subversion</a> at:
+      You can also get access to the latest development version via <a
+                                                                       href="http://subversion.tigris.de">Subversion</a> at:
     </p>
     <p>
-      <tt>svn co svn://svn.berlios.de/windstille/trunk/</tt>
+      <tt>svn co svn://svn.berlios.de/windstille/trunk/windstille</tt>
     </p>
+    <p>
+      You can browse the repository online
+      at <a href="http://svn.berlios.de/wsvn/windstille">Windstille
+        WebSVN</a>, it contains a few more things inside trunk/ that
+      aren't part of the core engine:
+    </p>
+    <dl>
+      <dt>windstille/</dt>
+      <dd>The core engine/game</dd>
+
+      <dt>windstille-nds/</dt>
+      <dd>A little techdemo version of Windstille for the NintendoDS</dd>
+
+      <dt>media/</dt>
+      <dd>Source for all the Windstille graphics, sketches and stuff</dd>
+
+      <dt>scripts/</dt>
+      <dd>Thumbnail generation script for Blender</dd>
+
+      <dt>txt2png/</dt>
+      <dd>An application to convert text files into graphics</dd>
+
+      <dt>html2image/</dt>
+      <dd>An application to convert html files into graphics</dd>
+
+      <dt>griv/</dt>
+      <dd>An OpenGL based image collection viewer</dd>
+
+      <dt>facebuilder/</dt>
+      <dd>An simple application to construct 2D front-view faces</dd>
+    </dl>
   </section>
 </page>



From grumbel at mail.berlios.de  Wed Nov 21 22:21:43 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Wed, 21 Nov 2007 22:21:43 +0100
Subject: [Windstille-commit] r1564 - trunk/griv
Message-ID: <200711212121.lALLLh4r022586@sheep.berlios.de>

Author: grumbel
Date: 2007-11-21 22:21:42 +0100 (Wed, 21 Nov 2007)
New Revision: 1564

Modified:
   trunk/griv/README
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
   trunk/griv/loader.cpp
   trunk/griv/surface.cpp
   trunk/griv/surface.hpp
   trunk/griv/texture.cpp
   trunk/griv/thumbgen.cpp
   trunk/griv/workspace.cpp
   trunk/griv/workspace.hpp
Log:
- some stuff to display the orignal image when zoom level is large enough
- some unifing of the file list generation

Modified: trunk/griv/README
===================================================================
--- trunk/griv/README	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/README	2007-11-21 21:21:42 UTC (rev 1564)
@@ -1,7 +1,9 @@
 griv 
 =====
 
-griv is a image viewer that allows you to directly zoom into thumbnails.
+griv is a image viewer that allows you to directly zoom into
+thumbnails. Its goal is to allow its viewer to view 100'000 images
+fluently.
 
 Usage:
 ======

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/SConstruct	2007-11-21 21:21:42 UTC (rev 1564)
@@ -3,6 +3,7 @@
 libgriv_env = Environment(CCFLAGS=["-Wall", "-Werror", "-O2", "-g"])
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 
                                              'command_line.cpp',
+                                             'jpeg.cpp',
                                              'md5.cpp'])
 
 libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/TODO	2007-11-21 21:21:42 UTC (rev 1564)
@@ -8,13 +8,20 @@
 - implement Surface class that handles images larger then the maximum
   texture size
 
+- remove round_res(), replace it with something else to allow images
+  in original size
+
 - added support for ~/.thumbnails/ to get the smaller mipmaps faster
 
-- create a two OpenGL context to allow better multithreading use (any
+- create two OpenGL context to allow better multithreading use (any
   way to do it portable?)
 
 - move over input code from Pingus to support Spacenavigator and such
 
+- implement faster realpath(), i.e. no link resolution
+
+- cache file sets
+
 
 Misc Stuff:
 ===========

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/filesystem.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -23,15 +23,16 @@
 **  02111-1307, USA.
 */
 
+#include <dirent.h>
 #include <errno.h>
-#include <sys/stat.h>
-#include <sys/types.h>
+#include <iostream>
 #include <stdexcept>
-#include <iostream>
-#include <dirent.h>
 #include <sys/stat.h>
+#include <sys/stat.h>
 #include <sys/types.h>
 #include <unistd.h>
+#include <sys/time.h>
+#include <utime.h>
 #include <boost/format.hpp>
 //#include <attr/xattr.h>
 
@@ -169,4 +170,59 @@
     return false;
 }
 
+void
+Filesystem::copy_mtime(const std::string& from_filename, const std::string& to_filename)
+{
+  struct stat stat_buf;
+  if (stat(from_filename.c_str(), &stat_buf) != 0)
+    {
+      throw std::runtime_error(from_filename + ": " + strerror(errno));
+    }
+
+  struct utimbuf time_buf; 
+  time_buf.actime  = stat_buf.st_atime;
+  time_buf.modtime = stat_buf.st_mtime;
+
+  if (utime(to_filename.c_str(), &time_buf) != 0)
+    {
+      std::cout << "Filesystem:copy_mtime: " << to_filename << ": " << strerror(errno) << std::endl;
+    }
+}
+
+unsigned int
+Filesystem::get_mtime(const std::string& filename)
+{
+  struct stat stat_buf;
+  if (stat(filename.c_str(), &stat_buf) != 0)
+    {
+      throw std::runtime_error(filename + ": " + strerror(errno));
+    } 
+  return stat_buf.st_mtime;
+}
+
+void
+Filesystem::generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list)
+{
+  if (Filesystem::is_directory(pathname))
+    {
+      std::vector<std::string> dir_list = Filesystem::open_directory(pathname);
+      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+        {
+          generate_jpeg_file_list(*i, file_list);
+        }
+    }
+  else
+    {
+      if (Filesystem::has_extension(pathname, ".jpg")  ||
+          Filesystem::has_extension(pathname, ".JPG")  ||
+          Filesystem::has_extension(pathname, ".jpe")  ||
+          Filesystem::has_extension(pathname, ".JPE")  ||
+          Filesystem::has_extension(pathname, ".JPEG") ||
+          Filesystem::has_extension(pathname, ".jpeg"))
+        {
+          file_list.push_back("file://" + Filesystem::realpath(pathname));
+        }
+    }
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/filesystem.hpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -43,7 +43,12 @@
   static std::string get_home() { return home_directory; }
   static std::string realpath(const std::string& pathname);
   static bool has_extension(const std::string& pathname, const std::string& ext);
+  static void copy_mtime(const std::string& from_filename, const std::string& to_filename);
+  static unsigned int get_mtime(const std::string& filename);
   
+  /** Generate a recursive list of all JPEGs in pathname */
+  static void generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list);
+
   static void init();
   static void deinit();
 };

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/griv.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -22,6 +22,11 @@
 {
   zoom_in_pressed = false;
   zoom_out_pressed = false;
+  grid_size = 2;
+  draw_grid = false;
+  grid_color = true;
+  drag_toggle = false;
+  gamma = 1.0f;
 }
 
 Griv::~Griv()
@@ -29,6 +34,33 @@
 }
 
 void
+Griv::gl_draw_grid(int grid_size)
+{
+  glBindTexture(GL_TEXTURE_2D, 0);
+  glBegin(GL_LINES);
+  if (grid_color)
+    glColor4f(1.0f, 1.0f, 1.0f, 0.5f);
+  else
+    glColor4f(0.0f, 0.0f, 0.0f, 0.5f);
+
+  for(int x = Framebuffer::get_width()/grid_size;
+      x < Framebuffer::get_width(); 
+      x += Framebuffer::get_width()/grid_size)
+    {
+      glVertex2f(x, 0);
+      glVertex2f(x, Framebuffer::get_height());
+    }
+
+  for(int y = Framebuffer::get_height()/grid_size;
+      y < Framebuffer::get_height(); y += Framebuffer::get_height()/grid_size)
+    {
+      glVertex2f(0, y);
+      glVertex2f(Framebuffer::get_width(), y);
+    }
+  glEnd();
+}
+
+void
 Griv::process_events(float delta)
 {
   SDL_Event event;
@@ -68,12 +100,45 @@
                 x_offset = 0;
                 y_offset = 0;
               }
+            else if (event.key.keysym.sym == SDLK_s)
+              {
+                grid_size *= 2;
+                if (grid_size > 128)
+                  grid_size = 2;
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_g)
+              {
+                draw_grid = !draw_grid;
+                std::cout << "Drawing grid: " << draw_grid << " " << grid_size << std::endl;
+                force_redraw = true;
+              }
+            else if (event.key.keysym.sym == SDLK_p)
+              {
+                grid_color = !grid_color;
+                force_redraw = true;
+              }
             else if (event.key.keysym.sym == SDLK_h)
               {
                 highquality = !highquality;
                 force_redraw = true;
                 std::cout << "Highquality: " << highquality << std::endl;
               }
+            else if (event.key.keysym.sym == SDLK_PAGEUP)
+              {
+                gamma *= 1.1f;
+                SDL_SetGamma(gamma, gamma, gamma);
+              }
+            else if (event.key.keysym.sym == SDLK_PAGEDOWN)
+              {
+                gamma /= 1.1f;
+                SDL_SetGamma(gamma, gamma, gamma);
+              }
+            else if (event.key.keysym.sym == SDLK_END)
+              {
+                gamma = 1.0f;
+                SDL_SetGamma(gamma, gamma, gamma);
+              }
             else if (event.key.keysym.sym == SDLK_9)
               {
                 workspace->layout(4,3);
@@ -123,6 +188,15 @@
                 workspace->rotation += 90.0f;
                 force_redraw = true;
               }
+            else if (event.key.keysym.sym == SDLK_d)
+              {
+                drag_toggle = !drag_toggle;
+                if (!drag_toggle)
+                  {
+                    SDL_ShowCursor(SDL_ENABLE);
+                    SDL_WM_GrabInput(SDL_GRAB_OFF);
+                  }
+              }
             else if (event.key.keysym.sym == SDLK_b)
               {
                 std::cout << x_offset << ", " << y_offset << std::endl;
@@ -138,6 +212,10 @@
                 x_offset += event.motion.xrel*4;
                 y_offset += event.motion.yrel*4;
               }
+            if (0)
+            std::cout << event.motion.xrel << " " << event.motion.yrel  << " "
+                      << x_offset << " " << y_offset 
+                      << std::endl;
             break;
 
           case SDL_MOUSEBUTTONDOWN:
@@ -173,7 +251,24 @@
               }
             else if (event.button.button == 2)
               {
-                drag_n_drop = event.button.state;
+                if (!drag_toggle)
+                  {
+                    drag_n_drop = event.button.state;
+                  }
+                else if (event.button.state == SDL_PRESSED)
+                  {
+                    drag_n_drop = !drag_n_drop;
+                    if (drag_n_drop)
+                      {
+                        SDL_ShowCursor(SDL_DISABLE);
+                        SDL_WM_GrabInput(SDL_GRAB_ON);
+                      }
+                    else
+                      {
+                        SDL_ShowCursor(SDL_ENABLE);
+                        SDL_WM_GrabInput(SDL_GRAB_OFF);
+                      }
+                  }
               }
             break;
         }
@@ -198,32 +293,57 @@
 
   if (zoom_out_pressed && !zoom_in_pressed)
     {
-      workspace->zoom_out(mouse_x - Framebuffer::get_width()/2,
-                          mouse_y - Framebuffer::get_height()/2,
-                          1.0f + zoom_speed * delta);
+      if (drag_toggle && drag_n_drop)
+        workspace->zoom_out(0,
+                            0,
+                            1.0f + zoom_speed * delta);
+      else
+        workspace->zoom_out(mouse_x - Framebuffer::get_width()/2,
+                            mouse_y - Framebuffer::get_height()/2,
+                            1.0f + zoom_speed * delta);
       loader.clear();
     }
   else if (!zoom_out_pressed && zoom_in_pressed)
     {
-      workspace->zoom_in(mouse_x - Framebuffer::get_width()/2,
-                         mouse_y - Framebuffer::get_height()/2,
-                         1.0f + zoom_speed * delta);    
+      if (drag_toggle && drag_n_drop)
+        workspace->zoom_in(0,
+                            0,
+                            1.0f + zoom_speed * delta);
+      else
+        workspace->zoom_in(mouse_x - Framebuffer::get_width()/2,
+                           mouse_y - Framebuffer::get_height()/2,
+                           1.0f + zoom_speed * delta);    
       loader.clear();
     }
 }
 
+
+
 int
 Griv::main(int argc, char** argv)
 {
   Filesystem::init();
+
+  std::cout << "Generating file list... " << std::flush;
+  std::vector<std::string> file_list;
+  for(int i = 1; i < argc; ++i)
+      Filesystem::generate_jpeg_file_list(argv[i], file_list);
+  std::cout << "done" << std::endl;
+
   Framebuffer::init();
   
   workspace = new Workspace();
 
-  for(int i = 1; i < argc; ++i)
+  for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
     {
-      workspace->add(argv[i]);
+      workspace->add(*i);
+      if ((i - file_list.begin() + 1) % 13 == 0)
+        std::cout << "Adding images to workspace... " 
+                  << (i - file_list.begin() + 1) << "/" << file_list.size() 
+                  << "\r" << std::flush;
     }
+  std::cout << "done" << std::endl;
+      
   workspace->layout(4,3);
   std::cout << " done" << std::endl;
 
@@ -264,6 +384,10 @@
               Framebuffer::clear();
               workspace->update(delta / 1000.0f);
               workspace->draw();
+              
+              if (draw_grid)
+                gl_draw_grid(grid_size);
+
               Framebuffer::flip();
 
               old_res = workspace->res;

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/griv.hpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -51,11 +51,16 @@
   bool zoom_out_pressed;
   int  mouse_x;
   int  mouse_y;
-
+  int  grid_size;
+  bool draw_grid;
+  bool grid_color;
+  bool drag_toggle;
+  float gamma;
 public:
   Griv();
   ~Griv();
-  
+
+  void gl_draw_grid(int grid_size);
   void process_events(float delta);
   int main(int argc, char** argv);
 };

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/image.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -25,13 +25,17 @@
 
 #include <iostream>
 #include <GL/gl.h>
+#include "filesystem.hpp"
 #include "SDL_image.h"
 #include "texture.hpp"
 #include "image.hpp"
+#include "jpeg.hpp"
 #include "surface.hpp"
 
 Image::Image(const std::string& url)
   : url(url), 
+    original_width(0),
+    original_height(0),
     requested_res(0),
 
     received_surface(0),
@@ -45,6 +49,12 @@
     last_x_pos(0),
     last_y_pos(0)
 {
+  // FIXME: Slow, make this in a seperate thread
+  JPEG::get_size(url.substr(7), original_width, original_height);
+  original_mtime = Filesystem::get_mtime(url.substr(7));
+
+  //std::cout << url << " " << original_width << "x" << original_height << std::endl;
+  
   mutex = SDL_CreateMutex();
 }
 

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/image.hpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -37,6 +37,9 @@
 {
 public:
   std::string url;
+  int original_width;
+  int original_height;
+  unsigned int original_mtime;
 
   int  requested_res;
 

Modified: trunk/griv/loader.cpp
===================================================================
--- trunk/griv/loader.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/loader.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -116,8 +116,8 @@
           else
             {
               // No thumbnail, assuming we need the original
-              if (0)
-                { // FIXME: Wonky, gets super slow for some reason
+              std::cout << "Loading original: " << job.image->url << std::endl;
+                { 
                   img = IMG_Load(job.image->url.substr(7).c_str()); // cut file:// part
                   std::cout << "Loading: " << job.image->requested_res << " " << img << " " 
                             << img->w << "x" << img->h << " "

Modified: trunk/griv/surface.cpp
===================================================================
--- trunk/griv/surface.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/surface.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -26,16 +26,34 @@
 #include <iostream>
 #include <assert.h>
 #include "display.hpp"
+#include "math.hpp"
 #include "surface.hpp"
 
 Surface::Surface(SDL_Surface* surface, int res)
   : surface(surface),
-    res(res)
+    res(res),
+    texture(0)
 {
   assert(surface);
-  texture = new Texture(res, res, 
-                        surface, 
-                        0, 0, surface->w, surface->h);
+
+  tex_w = Math::round_to_power_of_two(surface->w);
+  tex_h = Math::round_to_power_of_two(surface->h);
+
+  if (tex_w <= 1024 && tex_h <= 1024)
+    {
+      texture = new Texture(tex_w, tex_h, 
+                            surface, 
+                            0, 0, surface->w, surface->h);
+    
+      u = float(surface->w) / tex_w;
+      v = float(surface->h) / tex_h;
+
+      aspect = float(surface->w) / surface->h;
+    }
+  else
+    {
+      std::cout << "Image violates maximum texture size: " << surface->w << "x" << surface->h << std::endl;
+    }
 }
 
 Surface::~Surface()
@@ -45,25 +63,40 @@
 }
 
 void
-Surface::draw(float x, float y, float w, float h)
+Surface::draw(float x, float y, float orig_w, float orig_h)
 {
-  if (surface)
+  if (texture)
     {
       texture->bind();
       
       glColor3f(1.0f, 1.0f, 1.0f);
 
+      float w, h;
+      if (aspect > 1.0f)
+        { // FIXME: This only works as long as w == h
+          w = orig_w;
+          h = orig_h / aspect;
+        }
+      else
+        {
+          w = orig_w * aspect;
+          h = orig_h;
+        }
+
+      x += (orig_w - w)/2;
+      y += (orig_h - h)/2;
+     
       glBegin(GL_QUADS);
       glTexCoord2f(0,0);
       glVertex2f(x, y);
 
-      glTexCoord2f(1,0);
+      glTexCoord2f(u,0);
       glVertex2f(x + w, y);
 
-      glTexCoord2f(1,1);
+      glTexCoord2f(u,v);
       glVertex2f(x + w, y + h);
 
-      glTexCoord2f(0,1);
+      glTexCoord2f(0,v);
       glVertex2f(x, y + h);
       glEnd();
     }

Modified: trunk/griv/surface.hpp
===================================================================
--- trunk/griv/surface.hpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/surface.hpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -38,7 +38,14 @@
   int res;
   
   Texture* texture;
+  int tex_w;
+  int tex_h;
 
+  float u;
+  float v;
+
+  float aspect;
+
 public:
   Surface(SDL_Surface* surface, int res);
   ~Surface();

Modified: trunk/griv/texture.cpp
===================================================================
--- trunk/griv/texture.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/texture.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -118,12 +118,14 @@
 
   assert_gl("packing image texture");
 
-  if (surface->pitch != (surface->w * surface->format->BytesPerPixel))
-    std::cout  << surface->pitch << " " << (surface->w * surface->format->BytesPerPixel) << std::endl;
+  // if (surface->pitch != (surface->w * surface->format->BytesPerPixel))
+  //   std::cout  << surface->pitch << " " << (surface->w * surface->format->BytesPerPixel) << std::endl;
 
   //std::cout << surface->pitch << " " << s_w << " " << s_h << std::endl;
   glPixelStorei(GL_UNPACK_ROW_LENGTH, surface->w);
-  glPixelStorei(GL_UNPACK_ALIGNMENT,  4);
+  glPixelStorei(GL_UNPACK_ALIGNMENT,  4); // FIXME: This alignment is
+                                          // guessed, we better should
+                                          // check it
 
   // Upload the subimage
   glTexSubImage2D(GL_TEXTURE_2D, 0, 

Modified: trunk/griv/thumbgen.cpp
===================================================================
--- trunk/griv/thumbgen.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/thumbgen.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -11,9 +11,10 @@
 bool verbose = false;
 
 void
-generate_thumbnails(const std::string& filename, int quality, const std::vector<int>& sizes)
+generate_thumbnails(const std::string& url, int quality, const std::vector<int>& sizes)
 {
-  std::string m = MD5::md5_string("file://" + filename);
+  std::string filename = url.substr(7);
+  std::string m = MD5::md5_string(url);
       
   for(int i = 0; i < int(sizes.size()); ++i)
     {
@@ -58,31 +59,6 @@
     }
 }
 
-void
-generate_file_list(const std::string& pathname, std::vector<std::string>& file_list)
-{
-  if (Filesystem::is_directory(pathname))
-    {
-      std::vector<std::string> dir_list = Filesystem::open_directory(pathname);
-      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
-        {
-          generate_file_list(*i, file_list);
-        }
-    }
-  else
-    {
-      if (Filesystem::has_extension(pathname, ".jpg")  ||
-          Filesystem::has_extension(pathname, ".JPG")  ||
-          Filesystem::has_extension(pathname, ".jpe")  ||
-          Filesystem::has_extension(pathname, ".JPE")  ||
-          Filesystem::has_extension(pathname, ".JPEG") ||
-          Filesystem::has_extension(pathname, ".jpeg"))
-        {
-          file_list.push_back(Filesystem::realpath(pathname));
-        }
-    }
-}
-
 void parse_number_list(const std::string& str, std::vector<int>& sizes)
 {
   // FIXME: implement me
@@ -194,7 +170,7 @@
         std::cout << "Generating file list... " << std::flush;
         std::vector<std::string> file_list;
         for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
-          generate_file_list(*i, file_list);
+          Filesystem::generate_jpeg_file_list(*i, file_list);
         std::cout << file_list.size() << " files found" << std::endl;;
 
         int progress_scale = 70;

Modified: trunk/griv/workspace.cpp
===================================================================
--- trunk/griv/workspace.cpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/workspace.cpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -105,25 +105,9 @@
 }
 
 void
-Workspace::add(const std::string& filename)
+Workspace::add(const std::string& url)
 {
-  // if directory, do recursion
-  if (Filesystem::is_directory(filename))
-    {
-      std::cout << '.' << std::flush;
-      std::vector<std::string> dir_list = Filesystem::open_directory(filename);
-      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
-        {
-          if (*i != ".xvpics")
-            add(*i);
-        }
-    }
-  else if (has_suffix(filename, ".jpg") ||
-           has_suffix(filename, ".JPG"))
-    {
-      std::string url = "file://" + Filesystem::realpath(filename);
-      images.push_back(new Image(url));
-    }
+  images.push_back(new Image(url));
 }
 
 void
@@ -132,9 +116,9 @@
   float old_res = res;
   res *= zoom;
   
-  if (res > 8192) 
+  if (res > 8192*4) // zoom limit
     {
-      res = 8192;
+      res = 8192*4;
       zoom = res / old_res;
     }
 

Modified: trunk/griv/workspace.hpp
===================================================================
--- trunk/griv/workspace.hpp	2007-11-20 01:50:08 UTC (rev 1563)
+++ trunk/griv/workspace.hpp	2007-11-21 21:21:42 UTC (rev 1564)
@@ -45,7 +45,7 @@
 
   void draw();
   void update(float delta);
-  void add(const std::string& filename);
+  void add(const std::string& url);
 
   void zoom_in(int mouse_x, int mouse_y, float zoom);
   void zoom_out(int mouse_x, int mouse_y, float zoom);



From grumbel at mail.berlios.de  Thu Nov 22 15:53:58 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 22 Nov 2007 15:53:58 +0100
Subject: [Windstille-commit] r1565 - trunk/griv
Message-ID: <200711221453.lAMErwkp015514@sheep.berlios.de>

Author: grumbel
Date: 2007-11-22 15:53:58 +0100 (Thu, 22 Nov 2007)
New Revision: 1565

Added:
   trunk/griv/cache.cpp
   trunk/griv/cache.hpp
   trunk/griv/jpeg.cpp
   trunk/griv/jpeg.hpp
   trunk/griv/math.hpp
   trunk/griv/packer.cpp
Modified:
   trunk/griv/SConstruct
   trunk/griv/TODO
Log:
- added some missing files
- started file cache

Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/SConstruct	2007-11-22 14:53:58 UTC (rev 1565)
@@ -4,6 +4,7 @@
 libgriv = libgriv_env.StaticLibrary('griv', ['filesystem.cpp', 
                                              'command_line.cpp',
                                              'jpeg.cpp',
+                                             'cache.cpp',
                                              'md5.cpp'])
 
 libepeg_env = Environment(CCFLAGS=["-Wall", "-O2", "-g"])
@@ -25,4 +26,8 @@
                            LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
 thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
 
+#packer_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
+#                           LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
+#packer_env.Program('packer', ['packer.cpp'])
+
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/TODO	2007-11-22 14:53:58 UTC (rev 1565)
@@ -21,7 +21,25 @@
 - implement faster realpath(), i.e. no link resolution
 
 - cache file sets
+
+Cache Files:
+============
 
+
+
+struct FileEntry {
+       std::string filename_md5;
+       std::string md5;
+       int mtime;  // mtime at which the thumbnail was done
+       int thumbnail_id; // offset into the thumbnail database
+       int width;  // image width
+       int height; // image height
+};
+
+struct ThumbnailEntry {
+       char        rgb[16*16*3];
+};
+
 
 Misc Stuff:
 ===========

Added: trunk/griv/cache.cpp
===================================================================
--- trunk/griv/cache.cpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/cache.cpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,62 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <fstream>
+#include "cache.hpp"
+
+Cache::Cache(const std::string& filename)
+{
+  std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
+
+  while(!in.eof())
+    {
+      FileEntry entry;
+      
+      in.read(entry.filename_md5,  sizeof(char) * 33);
+      in.read(entry.md5,           sizeof(char) * 33);
+      in.read((char*)(&entry.mtime),        sizeof(unsigned int));
+      in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
+      in.read((char*)(&entry.width),        sizeof(unsigned int));
+      in.read((char*)(&entry.height),       sizeof(unsigned int));
+      
+      entries[entry.filename_md5] = entry;
+    }
+}
+
+const FileEntry*
+Cache::get_entry(const std::string& url) const
+{
+  Entries::const_iterator i = entries.find(url);
+  if (i == entries.end())
+    {
+      return 0;
+    }
+  else
+    {
+      return &i->second;
+    }
+}
+
+/* EOF */


Property changes on: trunk/griv/cache.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/cache.hpp
===================================================================
--- trunk/griv/cache.hpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/cache.hpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,56 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_CACHE_HPP
+#define HEADER_CACHE_HPP
+
+#include <string>
+#include <map>
+
+struct FileEntry {
+  char filename_md5[33];
+  char md5[33];
+  int  mtime;  // mtime at which the thumbnail was done
+  int  thumbnail_id; // offset into the thumbnail database
+  int  width;  // image width
+  int  height; // image height
+};
+
+/** */
+class Cache
+{
+
+private:
+  typedef std::map<std::string, FileEntry> Entries;
+  Entries entries;
+
+public:
+  Cache(const std::string& filename);
+  const FileEntry* get_entry(const std::string& url) const;
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/cache.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/jpeg.cpp
===================================================================
--- trunk/griv/jpeg.cpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/jpeg.cpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,53 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include <stdexcept>
+#include <jpeglib.h>
+#include "jpeg.hpp"
+
+void
+JPEG::get_size(const std::string& filename, int& w, int& h)
+{
+  FILE* in = fopen(filename.c_str(), "rb");
+  if (!in)
+    throw std::runtime_error("JPEG::get_size: Couldn't open " + filename);
+
+  struct jpeg_decompress_struct  jinfo;
+  struct jpeg_error_mgr jerr;
+        
+  jpeg_create_decompress(&jinfo);
+  jinfo.err = jpeg_std_error(&jerr);
+  jpeg_stdio_src(&jinfo, in);
+  jpeg_read_header(&jinfo, FALSE);
+
+  w = jinfo.image_width;
+  h = jinfo.image_height;
+
+  jpeg_destroy_decompress(&jinfo);
+
+  fclose(in);
+}
+
+/* EOF */


Property changes on: trunk/griv/jpeg.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/jpeg.hpp
===================================================================
--- trunk/griv/jpeg.hpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/jpeg.hpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,39 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_JPEG_HPP
+#define HEADER_JPEG_HPP
+
+/** */
+class JPEG
+{
+private:
+public:
+  static void get_size(const std::string& filename, int& w, int& h);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/jpeg.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/math.hpp
===================================================================
--- trunk/griv/math.hpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/math.hpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,56 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_MATH_HPP
+#define HEADER_MATH_HPP
+
+/** */
+class Math
+{
+public:
+  static inline int round_to_power_of_two(int n)
+  {
+    n = n - 1;
+
+    n = n | (n >> 1);
+    n = n | (n >> 2);
+    n = n | (n >> 4);
+    n = n | (n >> 8);
+    n = n | (n >> 16);
+  
+    n = n + 1;
+  
+    return n;
+  }
+
+  static inline bool is_power_of_two(int n)
+  {
+    return (n > 0) && ((n & (n - 1)) == 0);
+  }
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/math.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/packer.cpp
===================================================================
--- trunk/griv/packer.cpp	2007-11-21 21:21:42 UTC (rev 1564)
+++ trunk/griv/packer.cpp	2007-11-22 14:53:58 UTC (rev 1565)
@@ -0,0 +1,11 @@
+#include "filesystem.hpp"
+#include "md5.hpp"
+#include <iostream>
+
+int main(int argc, char** argv)
+{
+  
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/griv/packer.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



From grumbel at mail.berlios.de  Thu Nov 22 20:19:19 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Thu, 22 Nov 2007 20:19:19 +0100
Subject: [Windstille-commit] r1566 - trunk/griv
Message-ID: <200711221919.lAMJJJ2e017633@sheep.berlios.de>

Author: grumbel
Date: 2007-11-22 20:19:18 +0100 (Thu, 22 Nov 2007)
New Revision: 1566

Modified:
   trunk/griv/
   trunk/griv/SConstruct
   trunk/griv/TODO
   trunk/griv/cache.cpp
   trunk/griv/cache.hpp
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/griv.cpp
   trunk/griv/griv.hpp
   trunk/griv/image.cpp
   trunk/griv/jpeg.cpp
   trunk/griv/jpeg.hpp
   trunk/griv/packer.cpp
Log:
- implemented caching of image size, mtime, etc. (huge boost on startup)


Property changes on: trunk/griv
___________________________________________________________________
Name: svn:ignore
   - griv
libepeg.a
libgriv.a
.sconsign.dblite
thumbgen


   + griv
libepeg.a
libgriv.a
packer
.sconsign.dblite
thumbgen


Modified: trunk/griv/SConstruct
===================================================================
--- trunk/griv/SConstruct	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/SConstruct	2007-11-22 19:19:18 UTC (rev 1566)
@@ -26,8 +26,8 @@
                            LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
 thumbgen_env.Program('thumbgen', ['thumbgen.cpp'])
 
-#packer_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
-#                           LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
-#packer_env.Program('packer', ['packer.cpp'])
+packer_env = Environment(CCFLAGS=['-Wall', '-Werror', '-O2', '-g'], 
+                           LIBS=[libgriv, libepeg, 'jpeg', 'mhash'])
+packer_env.Program('packer', ['packer.cpp'])
 
 # EOF #

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/TODO	2007-11-22 19:19:18 UTC (rev 1566)
@@ -21,6 +21,10 @@
 - implement faster realpath(), i.e. no link resolution
 
 - cache file sets
+
+- write fast file system routines, use readdir(), d_type instead of
+  stat to check for a directory
+
 
 Cache Files:
 ============

Modified: trunk/griv/cache.cpp
===================================================================
--- trunk/griv/cache.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/cache.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -23,35 +23,87 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
+#include "filesystem.hpp"
+#include "jpeg.hpp"
+#include "md5.hpp"
 #include <fstream>
 #include "cache.hpp"
 
 Cache::Cache(const std::string& filename)
 {
   std::ifstream in(filename.c_str(), std::ios::in | std::ios::binary);
-
-  while(!in.eof())
+  if (!in)
     {
-      FileEntry entry;
+      // do nothing, since empty cache is ok
+    }
+  else
+    {
+      while(!in.eof())
+        {
+          FileEntry entry;
       
-      in.read(entry.filename_md5,  sizeof(char) * 33);
-      in.read(entry.md5,           sizeof(char) * 33);
-      in.read((char*)(&entry.mtime),        sizeof(unsigned int));
-      in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
-      in.read((char*)(&entry.width),        sizeof(unsigned int));
-      in.read((char*)(&entry.height),       sizeof(unsigned int));
-      
-      entries[entry.filename_md5] = entry;
+          in.read(entry.url_md5,  sizeof(char) * 33);
+          in.read(entry.md5,           sizeof(char) * 33);
+          in.read((char*)(&entry.mtime),        sizeof(unsigned int));
+          in.read((char*)(&entry.thumbnail_id), sizeof(unsigned int));
+          in.read((char*)(&entry.width),        sizeof(unsigned int));
+          in.read((char*)(&entry.height),       sizeof(unsigned int));
+
+          // FIXME: Do error checking to avoid adding incomplete entries
+          entries[entry.url_md5] = entry;
+        }
     }
 }
 
+void
+Cache::save(const std::string& filename) const
+{
+  std::ofstream out(filename.c_str(), std::ios::out | std::ios::binary);
+
+  if (!out)
+    {
+      std::cout << "Couldn't save cache" << std::endl;
+    }
+  else
+    {
+      for(Entries::const_iterator i = entries.begin();
+          i != entries.end(); ++i)
+        {
+          const FileEntry& entry = i->second;
+          out.write(entry.url_md5,  sizeof(char) * 33);
+          out.write(entry.md5,      sizeof(char) * 33);
+          out.write((char*)(&entry.mtime),        sizeof(unsigned int));
+          out.write((char*)(&entry.thumbnail_id), sizeof(unsigned int));
+          out.write((char*)(&entry.width),        sizeof(unsigned int));
+          out.write((char*)(&entry.height),       sizeof(unsigned int));
+        }
+    }
+}
+
 const FileEntry*
-Cache::get_entry(const std::string& url) const
+Cache::get_entry(const std::string& url)
 {
-  Entries::const_iterator i = entries.find(url);
+  std::string url_md5 = MD5::md5_string(url);
+
+  Entries::const_iterator i = entries.find(url_md5);
   if (i == entries.end())
     {
-      return 0;
+      FileEntry entry;
+      try { 
+        strcpy(entry.url_md5, url_md5.c_str());
+        strcpy(entry.md5, "<empty>");
+        entry.mtime = Filesystem::get_mtime(url.substr(7));
+        entry.thumbnail_id = 0;
+        JPEG::get_size(url.substr(7), entry.width, entry.height);
+      } catch (std::exception& err) {
+        std::cout << url << ": " << err.what() << std::endl;
+        return 0;
+      }
+      
+      entries[url_md5] = entry;
+
+      return &entries[url_md5];
     }
   else
     {

Modified: trunk/griv/cache.hpp
===================================================================
--- trunk/griv/cache.hpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/cache.hpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -30,7 +30,7 @@
 #include <map>
 
 struct FileEntry {
-  char filename_md5[33];
+  char url_md5[33];
   char md5[33];
   int  mtime;  // mtime at which the thumbnail was done
   int  thumbnail_id; // offset into the thumbnail database
@@ -48,7 +48,10 @@
 
 public:
   Cache(const std::string& filename);
-  const FileEntry* get_entry(const std::string& url) const;
+
+  void save(const std::string& filename) const;
+
+  const FileEntry* get_entry(const std::string& url);
 };
 
 #endif

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/filesystem.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -54,6 +54,46 @@
   return S_ISDIR(buf.st_mode);
 }
 
+void
+Filesystem::open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst)
+{
+  DIR* dp = ::opendir(pathname.c_str());
+
+  if (dp == 0)
+    {
+      std::cout << "System: Couldn't open: " << pathname << std::endl;
+    }
+  else
+    {
+      dirent* de = 0;
+      while ((de = ::readdir(dp)) != 0)
+        {
+          if (strcmp(de->d_name, ".")  != 0 &&
+              strcmp(de->d_name, "..") != 0)
+            {
+              if (de->d_type == DT_DIR)
+                { // Avoid stat'ing on file systems that don't need it
+                  open_directory_recursivly(pathname + "/" + de->d_name, lst);
+                }
+              else
+                {
+                  std::string new_path = pathname + "/" + de->d_name;
+                  if (is_directory(new_path))
+                    {
+                      open_directory_recursivly(pathname + "/" + de->d_name, lst);
+                    }
+                  else
+                    {
+                      lst.push_back(new_path);
+                    }
+                }
+            }
+        }
+
+      closedir(dp);
+    }
+}
+
 std::vector<std::string>
 Filesystem::open_directory(const std::string& pathname)
 {
@@ -151,16 +191,6 @@
 {
 }
 
-std::string
-Filesystem::realpath(const std::string& pathname)
-{
-  char* result = ::realpath(pathname.c_str(), NULL);
-  std::string res = result;
-  free(result);
-  
-  return res;
-}
-
 bool
 Filesystem::has_extension(const std::string& str, const std::string& suffix)
 {
@@ -203,26 +233,110 @@
 void
 Filesystem::generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list)
 {
-  if (Filesystem::is_directory(pathname))
+  std::vector<std::string> lst;
+  open_directory_recursivly(pathname, lst);
+  
+  for(std::vector<std::string>::iterator i = lst.begin(); i != lst.end(); ++i)
     {
-      std::vector<std::string> dir_list = Filesystem::open_directory(pathname);
-      for(std::vector<std::string>::iterator i = dir_list.begin(); i != dir_list.end(); ++i)
+      if (Filesystem::has_extension(*i, ".jpg")  ||
+          Filesystem::has_extension(*i, ".JPG")  ||
+          Filesystem::has_extension(*i, ".jpe")  ||
+          Filesystem::has_extension(*i, ".JPE")  ||
+          Filesystem::has_extension(*i, ".JPEG") ||
+          Filesystem::has_extension(*i, ".jpeg"))
         {
-          generate_jpeg_file_list(*i, file_list);
+          file_list.push_back("file://" + Filesystem::realpath(*i)); // realpath slow?
         }
     }
+}
+
+std::string
+Filesystem::realpath_system(const std::string& pathname)
+{
+  char* result = ::realpath(pathname.c_str(), NULL);
+  std::string res = result;
+  free(result);
+  
+  return res;
+}
+
+std::string
+Filesystem::realpath_fast(const std::string& pathname)
+{
+  std::string fullpath;
+  std::string drive;
+  
+  if (pathname.size() > 0 && pathname[0] == '/')
+    {
+      fullpath = pathname;
+    }
+#ifdef WIN32
+  else if (pathname.size() > 2 && pathname[1] == ':' && pathname[2] == '/')
+    {
+      drive = pathname.substr(0, 2);
+      fullpath = pathname;
+    }
+#endif
   else
     {
-      if (Filesystem::has_extension(pathname, ".jpg")  ||
-          Filesystem::has_extension(pathname, ".JPG")  ||
-          Filesystem::has_extension(pathname, ".jpe")  ||
-          Filesystem::has_extension(pathname, ".JPE")  ||
-          Filesystem::has_extension(pathname, ".JPEG") ||
-          Filesystem::has_extension(pathname, ".jpeg"))
+      char buf[PATH_MAX];
+      if (getcwd(buf, PATH_MAX) == 0)
         {
-          file_list.push_back("file://" + Filesystem::realpath(pathname));
+          std::cout << "System::realpath: Error: couldn't getcwd()" << std::endl;
+          return pathname;
         }
+#ifdef WIN32
+      for (char *p = buf; *p; ++p)
+        {
+          if (*p == '\\')
+            *p = '/';
+        }
+      drive.assign(buf, 2);
+#endif
+      
+      fullpath = fullpath + buf + "/" + pathname;
     }
+  
+  std::string result;
+  std::string::reverse_iterator last_slash = fullpath.rbegin();
+  int skip = 0;
+  // /foo/bar/../../bar/baz/
+  //std::cout << "fullpath: '" << fullpath << "'" << std::endl;
+  for(std::string::reverse_iterator i = fullpath.rbegin(); i != fullpath.rend(); ++i)
+    { // FIXME: Little crude and hackish
+      if (*i == '/')
+        {
+          std::string dir(last_slash, i); 
+          //std::cout << "'" << dir << "'" << std::endl;
+          if (dir == ".." || dir == "/..")
+            {
+              skip += 1;
+            }
+          else if (dir == "." || dir == "/." || dir.empty() || dir == "/")
+            {
+              // pass
+            }
+          else
+            {
+              if (skip == 0)
+                {
+                  result += dir;
+                }
+              else
+                skip -= 1;
+            }
+
+          last_slash = i;
+        }
+    }
+  
+  return drive + "/" + std::string(result.rbegin(), result.rend());
 }
 
+std::string
+Filesystem::realpath(const std::string& pathname)
+{
+  return realpath_fast(pathname);
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/filesystem.hpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -39,9 +39,17 @@
   static bool exist(const std::string& pathname);
   static void mkdir(const std::string& pathname);
   static std::vector<std::string> open_directory(const std::string& pathname);
+
+  static void open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst);
+
   static std::string getxattr(const std::string& pathname);
   static std::string get_home() { return home_directory; }
+
+  static std::string realpath_system(const std::string& pathname);
+  static std::string realpath_fast(const std::string& pathname);
   static std::string realpath(const std::string& pathname);
+
+
   static bool has_extension(const std::string& pathname, const std::string& ext);
   static void copy_mtime(const std::string& from_filename, const std::string& to_filename);
   static unsigned int get_mtime(const std::string& filename);

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/griv.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -11,12 +11,14 @@
 #include "workspace.hpp"
 #include "loader.hpp"
 #include "image.hpp"
+#include "cache.hpp"
 
 float x_offset = 0.0f;
 float y_offset = 0.0f;
 std::string config_home;
 bool force_redraw = true;
-bool highquality  = true;
+bool highquality  = false;
+Cache* cache;
 
 Griv::Griv()
 {
@@ -324,6 +326,10 @@
 {
   Filesystem::init();
 
+  std::cout << "Loading cache... " << std::flush;
+  cache = new Cache(Filesystem::get_home() + "/.griv/cache/file.cache");
+    std::cout << "done" << std::endl;
+
   std::cout << "Generating file list... " << std::flush;
   std::vector<std::string> file_list;
   for(int i = 1; i < argc; ++i)
@@ -343,7 +349,10 @@
                   << "\r" << std::flush;
     }
   std::cout << "done" << std::endl;
-      
+  
+  std::cout << "Saving cache" << std::endl;
+  cache->save(Filesystem::get_home() + "/.griv/cache/file.cache");
+
   workspace->layout(4,3);
   std::cout << " done" << std::endl;
 

Modified: trunk/griv/griv.hpp
===================================================================
--- trunk/griv/griv.hpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/griv.hpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -29,10 +29,13 @@
 #include <SDL.h>
 #include <string>
 
+class Cache;
+
 extern float x_offset;
 extern float y_offset;
 extern bool force_redraw;
 extern bool highquality;
+extern Cache* cache;
 
 class Workspace;
 

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/image.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -30,6 +30,7 @@
 #include "texture.hpp"
 #include "image.hpp"
 #include "jpeg.hpp"
+#include "cache.hpp"
 #include "surface.hpp"
 
 Image::Image(const std::string& url)
@@ -50,9 +51,18 @@
     last_y_pos(0)
 {
   // FIXME: Slow, make this in a seperate thread
-  JPEG::get_size(url.substr(7), original_width, original_height);
-  original_mtime = Filesystem::get_mtime(url.substr(7));
+  const FileEntry* entry = cache->get_entry(url);
+  
+  if (entry)
+    {
+      original_width  = entry->width;
+      original_height = entry->height;
+      original_mtime  = entry->mtime;
+    }
 
+  //JPEG::get_size(url.substr(7), original_width, original_height);
+  //original_mtime = Filesystem::get_mtime(url.substr(7));
+
   //std::cout << url << " " << original_width << "x" << original_height << std::endl;
   
   mutex = SDL_CreateMutex();

Modified: trunk/griv/jpeg.cpp
===================================================================
--- trunk/griv/jpeg.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/jpeg.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -23,10 +23,16 @@
 **  02111-1307, USA.
 */
 
+#include <iostream>
 #include <stdexcept>
 #include <jpeglib.h>
 #include "jpeg.hpp"
 
+void fatal_error_handler(j_common_ptr cinfo)
+{
+  std::cout << "Some jpeg error" << std::endl;
+}
+
 void
 JPEG::get_size(const std::string& filename, int& w, int& h)
 {
@@ -36,9 +42,11 @@
 
   struct jpeg_decompress_struct  jinfo;
   struct jpeg_error_mgr jerr;
-        
+
+  jinfo.err = jpeg_std_error(&jerr);
+  jinfo.err->error_exit = &fatal_error_handler;
+
   jpeg_create_decompress(&jinfo);
-  jinfo.err = jpeg_std_error(&jerr);
   jpeg_stdio_src(&jinfo, in);
   jpeg_read_header(&jinfo, FALSE);
 

Modified: trunk/griv/jpeg.hpp
===================================================================
--- trunk/griv/jpeg.hpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/jpeg.hpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -26,6 +26,8 @@
 #ifndef HEADER_JPEG_HPP
 #define HEADER_JPEG_HPP
 
+#include <string>
+
 /** */
 class JPEG
 {

Modified: trunk/griv/packer.cpp
===================================================================
--- trunk/griv/packer.cpp	2007-11-22 14:53:58 UTC (rev 1565)
+++ trunk/griv/packer.cpp	2007-11-22 19:19:18 UTC (rev 1566)
@@ -1,10 +1,40 @@
 #include "filesystem.hpp"
 #include "md5.hpp"
+#include "cache.hpp"
 #include <iostream>
 
 int main(int argc, char** argv)
 {
-  
+  Cache cache("/tmp/test.cache");
+
+  std::cout << "Generating file list... " << std::flush;
+  std::vector<std::string> file_list;
+  for(int i = 1; i < argc; ++i)
+    {
+      Filesystem::generate_jpeg_file_list(argv[i], file_list);
+    }
+  std::cout << file_list.size() << " done"  << std::endl;
+
+  for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
+    {
+      const FileEntry* entry = cache.get_entry(*i);
+      if (!entry)
+        {
+          std::cout << "Couldn't get entry for: " << *i << std::endl;
+        }
+      else
+        {
+          std::cout << *i << std::endl;
+          std::cout << "  " << entry->url_md5 << std::endl;
+          std::cout << "  " << entry->mtime << std::endl;
+          std::cout << "  " << entry->width << "x" << entry->height << std::endl;
+          std::cout << std::endl;
+        }
+    }
+
+  std::cout << "Saving cache" << std::endl;
+  cache.save("/tmp/test.cache");
+
   return 0;
 }
 



From grumbel at mail.berlios.de  Fri Nov 23 00:59:57 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 23 Nov 2007 00:59:57 +0100
Subject: [Windstille-commit] r1567 - trunk/griv
Message-ID: <200711222359.lAMNxvUB023103@sheep.berlios.de>

Author: grumbel
Date: 2007-11-23 00:59:56 +0100 (Fri, 23 Nov 2007)
New Revision: 1567

Modified:
   trunk/griv/filesystem.cpp
   trunk/griv/jpeg.cpp
Log:
- fixed JPEG error handling
- fixed files being handled as directory

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-22 19:19:18 UTC (rev 1566)
+++ trunk/griv/filesystem.cpp	2007-11-22 23:59:56 UTC (rev 1567)
@@ -74,7 +74,7 @@
               if (de->d_type == DT_DIR)
                 { // Avoid stat'ing on file systems that don't need it
                   open_directory_recursivly(pathname + "/" + de->d_name, lst);
-                }
+                } // FIXME: Check for DT_UNKNOWN, DT_FILE, etc.
               else
                 {
                   std::string new_path = pathname + "/" + de->d_name;
@@ -234,7 +234,10 @@
 Filesystem::generate_jpeg_file_list(const std::string& pathname, std::vector<std::string>& file_list)
 {
   std::vector<std::string> lst;
-  open_directory_recursivly(pathname, lst);
+  if (is_directory(pathname))
+    open_directory_recursivly(pathname, lst);
+  else
+    lst.push_back(pathname);
   
   for(std::vector<std::string>::iterator i = lst.begin(); i != lst.end(); ++i)
     {

Modified: trunk/griv/jpeg.cpp
===================================================================
--- trunk/griv/jpeg.cpp	2007-11-22 19:19:18 UTC (rev 1566)
+++ trunk/griv/jpeg.cpp	2007-11-22 23:59:56 UTC (rev 1567)
@@ -26,11 +26,15 @@
 #include <iostream>
 #include <stdexcept>
 #include <jpeglib.h>
+#include <setjmp.h>
 #include "jpeg.hpp"
 
+jmp_buf setjmp_buffer;
+
 void fatal_error_handler(j_common_ptr cinfo)
 {
   std::cout << "Some jpeg error" << std::endl;
+  longjmp(setjmp_buffer, 1);
 }
 
 void
@@ -45,9 +49,14 @@
 
   jinfo.err = jpeg_std_error(&jerr);
   jinfo.err->error_exit = &fatal_error_handler;
-
   jpeg_create_decompress(&jinfo);
   jpeg_stdio_src(&jinfo, in);
+
+  if (setjmp(setjmp_buffer))
+    {
+      throw std::runtime_error("JPEG::get_size: ERROR: Couldn't open " + filename);
+    }
+
   jpeg_read_header(&jinfo, FALSE);
 
   w = jinfo.image_width;



From grumbel at mail.berlios.de  Fri Nov 23 16:07:09 2007
From: grumbel at mail.berlios.de (grumbel at BerliOS)
Date: Fri, 23 Nov 2007 16:07:09 +0100
Subject: [Windstille-commit] r1568 - trunk/griv
Message-ID: <200711231507.lANF79uS025685@sheep.berlios.de>

Author: grumbel
Date: 2007-11-23 16:07:08 +0100 (Fri, 23 Nov 2007)
New Revision: 1568

Added:
   trunk/griv/thumb_cache.cpp
   trunk/griv/thumb_cache.hpp
Modified:
   trunk/griv/TODO
   trunk/griv/filesystem.cpp
   trunk/griv/filesystem.hpp
   trunk/griv/griv.cpp
   trunk/griv/image.cpp
   trunk/griv/image.hpp
Log:
- added command line handling
- added reading of URL list from file

Modified: trunk/griv/TODO
===================================================================
--- trunk/griv/TODO	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/TODO	2007-11-23 15:07:08 UTC (rev 1568)
@@ -25,12 +25,12 @@
 - write fast file system routines, use readdir(), d_type instead of
   stat to check for a directory
 
+- add support for filesets, i.e. files that contain a list of urls
+
 
 Cache Files:
 ============
 
-
-
 struct FileEntry {
        std::string filename_md5;
        std::string md5;
@@ -43,7 +43,6 @@
 struct ThumbnailEntry {
        char        rgb[16*16*3];
 };
-
 
 Misc Stuff:
 ===========

Modified: trunk/griv/filesystem.cpp
===================================================================
--- trunk/griv/filesystem.cpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/filesystem.cpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -23,6 +23,7 @@
 **  02111-1307, USA.
 */
 
+#include <fstream>
 #include <dirent.h>
 #include <errno.h>
 #include <iostream>
@@ -342,4 +343,20 @@
   return realpath_fast(pathname);
 }
 
+void
+Filesystem::readlines_from_file(const std::string& pathname, std::vector<std::string>& lst)
+{
+  std::ifstream in(pathname.c_str());
+
+  if (!in)
+    throw std::runtime_error("Couldn't open file: " + pathname);
+  
+  std::string line;
+  while(std::getline(in, line))
+   {
+     lst.push_back(line);
+   }
+  in.close();
+}
+
 /* EOF */

Modified: trunk/griv/filesystem.hpp
===================================================================
--- trunk/griv/filesystem.hpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/filesystem.hpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -42,6 +42,8 @@
 
   static void open_directory_recursivly(const std::string& pathname, std::vector<std::string>& lst);
 
+  static void readlines_from_file(const std::string& pathname, std::vector<std::string>& lst);
+
   static std::string getxattr(const std::string& pathname);
   static std::string get_home() { return home_directory; }
 

Modified: trunk/griv/griv.cpp
===================================================================
--- trunk/griv/griv.cpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/griv.cpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -11,6 +11,7 @@
 #include "workspace.hpp"
 #include "loader.hpp"
 #include "image.hpp"
+#include "command_line.hpp"
 #include "cache.hpp"
 
 float x_offset = 0.0f;
@@ -115,11 +116,21 @@
                 std::cout << "Drawing grid: " << draw_grid << " " << grid_size << std::endl;
                 force_redraw = true;
               }
-            else if (event.key.keysym.sym == SDLK_p)
+            else if (event.key.keysym.sym == SDLK_t)
               {
                 grid_color = !grid_color;
                 force_redraw = true;
               }
+            else if (event.key.keysym.sym == SDLK_p)
+              {
+                std::cout << "---------------------------------------------------------" << std::endl;
+                for(int i = 0; i < int(workspace->images.size()); ++i)
+                  {
+                    if (workspace->images[i]->is_visible())
+                      std::cout << workspace->images[i]->url << std::endl;
+                  }
+                std::cout << "---------------------------------------------------------" << std::endl;
+              }
             else if (event.key.keysym.sym == SDLK_h)
               {
                 highquality = !highquality;
@@ -324,99 +335,146 @@
 int
 Griv::main(int argc, char** argv)
 {
-  Filesystem::init();
+  try {
+    std::cout << "Processing command line arguments... " << std::flush;
+    CommandLine argp;
+      
+    argp.add_usage("[OPTION]... [FILE]...");
+    argp.add_doc("Griv - A ZUI image viewer\n");
+    argp.add_option('f', "file", "FILE", "Load URL list from FILE");
+    argp.add_option('h', "help", "", "Print this help");
 
-  std::cout << "Loading cache... " << std::flush;
-  cache = new Cache(Filesystem::get_home() + "/.griv/cache/file.cache");
+    try {
+      argp.parse_args(argc, argv);
+    } catch(std::exception& err) {
+      std::cout << "Error: CommandLine: " << err.what() << std::endl;
+      exit(EXIT_FAILURE);
+    }
+
+    std::vector<std::string> url_list;
+    std::vector<std::string> pathnames;
+    while(argp.next())
+      {
+        switch(argp.get_key())
+          {
+            case 'h':
+              argp.print_help();
+              exit(EXIT_SUCCESS);
+              break;
+
+            case 'f':
+              Filesystem::readlines_from_file(argp.get_argument(), url_list);
+              break;
+
+            case CommandLine::REST_ARG:
+              pathnames.push_back(argp.get_argument());
+              break;
+
+            default:
+              std::cout << "Unhandled argument: " << argp.get_key() << std::endl;
+              exit(EXIT_FAILURE);
+              break;
+          }
+      };
+    std::cout << "done" << std::endl;    
+
+    std::cout << "Init filesystem... " << std::flush;
+    Filesystem::init();
     std::cout << "done" << std::endl;
 
-  std::cout << "Generating file list... " << std::flush;
-  std::vector<std::string> file_list;
-  for(int i = 1; i < argc; ++i)
-      Filesystem::generate_jpeg_file_list(argv[i], file_list);
-  std::cout << "done" << std::endl;
+    std::cout << "Loading cache... " << std::flush;
+    cache = new Cache(Filesystem::get_home() + "/.griv/cache/file.cache");
+    std::cout << "done" << std::endl;
 
-  Framebuffer::init();
+    std::cout << "Generating url list... " << std::flush;
+    for(std::vector<std::string>::iterator i = pathnames.begin(); i != pathnames.end(); ++i)
+      Filesystem::generate_jpeg_file_list(*i, url_list);
+    std::cout << "done" << std::endl;
+
+    Framebuffer::init();
   
-  workspace = new Workspace();
+    workspace = new Workspace();
 
-  for(std::vector<std::string>::iterator i = file_list.begin(); i != file_list.end(); ++i)
-    {
-      workspace->add(*i);
-      if ((i - file_list.begin() + 1) % 13 == 0)
-        std::cout << "Adding images to workspace... " 
-                  << (i - file_list.begin() + 1) << "/" << file_list.size() 
-                  << "\r" << std::flush;
-    }
-  std::cout << "done" << std::endl;
+    for(std::vector<std::string>::iterator i = url_list.begin(); i != url_list.end(); ++i)
+      {
+        workspace->add(*i);
+        if ((i - url_list.begin() + 1) % 29 == 0)
+          std::cout << "Adding images to workspace... " 
+                    << (i - url_list.begin() + 1) << "/" << url_list.size() 
+                    << "\r" << std::flush;
+      }
+    std::cout << "done" << std::endl;
   
-  std::cout << "Saving cache" << std::endl;
-  cache->save(Filesystem::get_home() + "/.griv/cache/file.cache");
+    std::cout << "Saving cache" << std::endl;
+    cache->save(Filesystem::get_home() + "/.griv/cache/file.cache");
 
-  workspace->layout(4,3);
-  std::cout << " done" << std::endl;
+    workspace->layout(4,3);
+    std::cout << " done" << std::endl;
 
-  std::cout << workspace->size() << " images scanned" << std::endl;
+    std::cout << workspace->size() << " images scanned" << std::endl;
 
-  {
-    int w = int(sqrt(4 * workspace->size() / 3));
-    x_offset = (-w/2) * 4;
-    y_offset = (-(w*3/4)/2) * 4;
-  }
+    {
+      int w = int(sqrt(4 * workspace->size() / 3));
+      x_offset = (-w/2) * 4;
+      y_offset = (-(w*3/4)/2) * 4;
+    }
   
-  drag_n_drop = false;
-  old_res = -1;
-  old_x_offset = -1;
-  old_y_offset = -1;
-  next_redraw = 0;
+    drag_n_drop = false;
+    old_res = -1;
+    old_x_offset = -1;
+    old_y_offset = -1;
+    next_redraw = 0;
 
-  loader.start_thread();
+    loader.start_thread();
 
-  Uint32 ticks = SDL_GetTicks();
-  while(true)
-    {
-      Uint32 cticks = SDL_GetTicks();
-      int delta = cticks - ticks;
-      if (delta > 0)
-        {
-          ticks = cticks;
-          process_events(delta / 1000.0f);
+    Uint32 ticks = SDL_GetTicks();
+    while(true)
+      {
+        Uint32 cticks = SDL_GetTicks();
+        int delta = cticks - ticks;
+        if (delta > 0)
+          {
+            ticks = cticks;
+            process_events(delta / 1000.0f);
 
-          if (workspace->res != old_res ||
-              old_x_offset != x_offset ||
-              old_y_offset != y_offset ||
-              (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())) ||
-              workspace->reorganize)
-            {
-              force_redraw = false;
+            if (workspace->res != old_res ||
+                old_x_offset != x_offset ||
+                old_y_offset != y_offset ||
+                (force_redraw && (next_redraw < SDL_GetTicks() || loader.empty())) ||
+                workspace->reorganize)
+              {
+                force_redraw = false;
 
-              Framebuffer::clear();
-              workspace->update(delta / 1000.0f);
-              workspace->draw();
+                Framebuffer::clear();
+                workspace->update(delta / 1000.0f);
+                workspace->draw();
               
-              if (draw_grid)
-                gl_draw_grid(grid_size);
+                if (draw_grid)
+                  gl_draw_grid(grid_size);
 
-              Framebuffer::flip();
+                Framebuffer::flip();
 
-              old_res = workspace->res;
-              old_x_offset = x_offset;
-              old_y_offset = y_offset;
-              next_redraw = SDL_GetTicks() + 1000;
-            }
-          else
-            {
-              SDL_Delay(5);
-            }
-        }
-    }
+                old_res = workspace->res;
+                old_x_offset = x_offset;
+                old_y_offset = y_offset;
+                next_redraw = SDL_GetTicks() + 1000;
+              }
+            else
+              {
+                SDL_Delay(5);
+              }
+          }
+      }
 
-  loader.stop_thread();
+    loader.stop_thread();
 
-  delete workspace;
+    delete workspace;
 
-  Framebuffer::deinit();
-  Filesystem::deinit();
+    Framebuffer::deinit();
+    Filesystem::deinit();
+  } catch(std::exception& err) {
+    std::cout << "ERROR: " << err.what() << std::endl;
+  }
 
   return 0;
 }

Modified: trunk/griv/image.cpp
===================================================================
--- trunk/griv/image.cpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/image.cpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -48,7 +48,8 @@
     x_pos(0),
     y_pos(0),
     last_x_pos(0),
-    last_y_pos(0)
+    last_y_pos(0),
+    visible(false)
 {
   // FIXME: Slow, make this in a seperate thread
   const FileEntry* entry = cache->get_entry(url);
@@ -104,6 +105,7 @@
       x < -res || 
       y < -res)
     { // Image out of screen
+      visible = false;
       if (surface && surface->get_resolution() >= 512) // keep small images around a while longer
         {
           delete surface;
@@ -112,7 +114,7 @@
     }
   else
     { // image on screen
-
+      visible = true;
       // Handle loading when resolution changed
       if (surface == 0 || 
           round_res(int(res)) != surface->get_resolution())

Modified: trunk/griv/image.hpp
===================================================================
--- trunk/griv/image.hpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/image.hpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -62,6 +62,8 @@
   float target_x_pos;
   float target_y_pos;
 
+  bool visible;
+
 public:
   Image(const std::string& url);
   ~Image();
@@ -72,6 +74,8 @@
 
   int round_res(int res);
   void set_pos(float x, float y);
+
+  bool is_visible() const { return visible; }
 };
 
 #endif

Added: trunk/griv/thumb_cache.cpp
===================================================================
--- trunk/griv/thumb_cache.cpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/thumb_cache.cpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -0,0 +1,55 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#include "thumb_cache.hpp"
+
+ThumbCache::ThumbCache(const std::string& filename)
+{
+  in = std::ifstream(filename.c_str(), std::ios::in | std::ios::binary);
+}
+
+ThumbCache::~ThumbCache()
+{
+}
+
+SDL_Surface*
+ThumbCache::get(int offset)
+{
+  
+}
+
+void
+ThumbCache::add(SDL_Surface* surface)
+{
+  
+}
+
+void
+ThumbCache::save(const std::string& filename)
+{
+  
+}
+
+/* EOF */


Property changes on: trunk/griv/thumb_cache.cpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native

Added: trunk/griv/thumb_cache.hpp
===================================================================
--- trunk/griv/thumb_cache.hpp	2007-11-22 23:59:56 UTC (rev 1567)
+++ trunk/griv/thumb_cache.hpp	2007-11-23 15:07:08 UTC (rev 1568)
@@ -0,0 +1,53 @@
+/*  $Id$
+**   __      __ __             ___        __   __ __   __
+**  /  \    /  \__| ____    __| _/_______/  |_|__|  | |  |   ____
+**  \   \/\/   /  |/    \  / __ |/  ___/\   __\  |  | |  | _/ __ \
+**   \        /|  |   |  \/ /_/ |\___ \  |  | |  |  |_|  |_\  ___/
+**    \__/\  / |__|___|  /\____ /____  > |__| |__|____/____/\___  >
+**         \/          \/      \/    \/                         \/
+**  Copyright (C) 2007 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software; you can redistribute it and/or
+**  modify it under the terms of the GNU General Public License
+**  as published by the Free Software Foundation; either version 2
+**  of the License, or (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+** 
+**  You should have received a copy of the GNU General Public License
+**  along with this program; if not, write to the Free Software
+**  Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA
+**  02111-1307, USA.
+*/
+
+#ifndef HEADER_THUMB_CACHE_HPP
+#define HEADER_THUMB_CACHE_HPP
+
+#include <fstream>
+
+/** */
+class ThumbCache
+{
+private:
+  std::ifstream in;
+  
+public:
+  ThumbCache(const std::string& filename);
+  ~ThumbCache();
+
+  SDL_Surface* get(int offset);
+  void add(SDL_Surface* surface);
+  
+  void save(const std::string& filename);
+
+private:
+  ThumbCache (const ThumbCache&);
+  ThumbCache& operator= (const ThumbCache&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/griv/thumb_cache.hpp
___________________________________________________________________
Name: svn:keywords
   + Id
Name: svn:eol-style
   + native



