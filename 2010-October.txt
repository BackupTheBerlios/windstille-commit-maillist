From grumbel at mail.berlios.de  Fri Oct  8 01:19:09 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri,  8 Oct 2010 01:19:09 +0200
Subject: [Windstille-commit] r3367 - in trunk/windstille/extra: . lenseflair
Message-ID: <20101007231909.D9804480403@sheep.berlios.de>

Author: grumbel
Date: 2010-10-08 01:19:09 +0200 (Fri, 08 Oct 2010)
New Revision: 3367

Added:
   trunk/windstille/extra/lenseflair/
   trunk/windstille/extra/lenseflair/cover.png
   trunk/windstille/extra/lenseflair/flair1.png
   trunk/windstille/extra/lenseflair/flair2.png
   trunk/windstille/extra/lenseflair/halo.png
   trunk/windstille/extra/lenseflair/lenseflair.cpp
   trunk/windstille/extra/lenseflair/lenseflair.hpp
   trunk/windstille/extra/lenseflair/light.png
   trunk/windstille/extra/lenseflair/superlight.png
Log:
Some experimentation with lense flair

Added: trunk/windstille/extra/lenseflair/cover.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/cover.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/lenseflair/flair1.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/flair1.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/lenseflair/flair2.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/flair2.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/lenseflair/halo.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/halo.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/lenseflair/lenseflair.cpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.cpp	                        (rev 0)
+++ trunk/windstille/extra/lenseflair/lenseflair.cpp	2010-10-07 23:19:09 UTC (rev 3367)
@@ -0,0 +1,215 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "lenseflair.hpp"
+
+#include "display/opengl_state.hpp"
+#include "display/opengl_window.hpp"
+#include "display/shader_program.hpp"
+#include "display/surface_manager.hpp"
+#include "display/surface_drawing_parameters.hpp"
+#include "display/texture_manager.hpp"
+#include "math/random.hpp"
+#include "system/sdl.hpp"
+
+Lenseflair::Lenseflair() :
+  m_aspect_ratio(1280, 800),
+  m_window_size(1280, 800),
+  m_fullscreen(false),
+  m_loop(false),
+  
+  m_light(),
+  m_superlight(),
+  m_flair1(),
+  m_flair2(),
+  m_cover(),
+  m_halo(),
+
+  m_flairs(),
+
+  m_mouse()
+{
+}
+
+void
+Lenseflair::draw()
+{
+  Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
+                         static_cast<float>(m_aspect_ratio.height) / 2.0f);
+  float dist = (m_mouse - screen_center).length();
+
+  float factor = 0.3f - (dist / static_cast<float>(m_aspect_ratio.width + m_aspect_ratio.height));
+  factor *= 3.3f;
+  std::cout << factor << std::endl;
+
+  m_light->draw(SurfaceDrawingParameters()
+                .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2,
+                                  m_mouse.y - m_light->get_height()/2)));
+
+  m_cover->draw(Vector2f(600, 400));
+
+  m_halo->draw(SurfaceDrawingParameters()
+                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                 .set_scale(2.0f + factor*5.0f)
+                 .set_pos(Vector2f(m_mouse.x,
+                                   m_mouse.y)
+                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
+                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
+
+
+  m_superlight->draw(SurfaceDrawingParameters()
+                     .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                     .set_color(Color(1.0f, 1.0f, 1.0f, factor))
+                     .set_scale(factor)
+                     .set_pos(Vector2f(m_mouse.x - m_superlight->get_width()/2 * factor,
+                                       m_mouse.y - m_superlight->get_height()/2  * factor)));
+
+  for(Flairs::iterator i = m_flairs.begin(); i != m_flairs.end(); ++i)
+  {
+    i->m_surface->draw(SurfaceDrawingParameters()
+                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                       .set_scale(i->m_scale)
+                       .set_color(Color(1,1,1,factor))
+                       .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
+                                - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
+                                           i->m_surface->get_height()/2 * i->m_scale)));
+  }
+  
+  if (false)
+  {
+    m_flair1->draw(SurfaceDrawingParameters()
+                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                   .set_pos(screen_center + (m_mouse - screen_center) * -0.5f
+                            - Vector2f(m_flair1->get_width()/2,
+                                       m_flair1->get_height()/2)));
+  
+    m_flair2->draw(SurfaceDrawingParameters()
+                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                   .set_pos(screen_center + (m_mouse - screen_center) * -0.75f 
+                            - Vector2f(m_flair2->get_width()/2,
+                                       m_flair2->get_height()/2)));
+
+    m_flair2->draw(SurfaceDrawingParameters()
+                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                   .set_pos(screen_center + (m_mouse - screen_center) * 0.25f 
+                            - Vector2f(m_flair2->get_width()/2,
+                                       m_flair2->get_height()/2)));
+
+    m_flair2->draw(SurfaceDrawingParameters()
+                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                   .set_pos(screen_center + (m_mouse - screen_center) * 0.75f
+                            - Vector2f(m_flair2->get_width()/2,
+                                       m_flair2->get_height()/2)));
+
+    m_flair1->draw(SurfaceDrawingParameters()
+                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                   .set_pos(screen_center + (m_mouse - screen_center) * 0.5f
+                            - Vector2f(m_flair1->get_width()/2,
+                                       m_flair1->get_height()/2)));
+  }
+}
+
+void
+Lenseflair::process_input()
+{
+  SDL_Event event;
+  while(SDL_PollEvent(&event))
+  {
+    switch(event.type)
+    {
+      case SDL_QUIT:
+        m_loop = false;
+        break;
+
+      case SDL_MOUSEMOTION:
+        m_mouse.x = event.motion.x;
+        m_mouse.y = event.motion.y;
+        break;
+
+      case SDL_KEYDOWN:
+        switch (event.key.keysym.sym)
+        {
+          case SDLK_ESCAPE:
+            m_loop = false;
+            break;
+
+          default:
+            break;
+        }
+        break;
+
+      default:
+        break;
+    }
+  }
+}
+
+int
+Lenseflair::main()
+{
+  SDL sdl;
+  OpenGLWindow window("Shader Test",
+                      m_window_size, // window size
+                      m_aspect_ratio, // aspect ratio
+                      m_fullscreen, // fullscreen
+                      4); // anti-alias
+  TextureManager texture_manager;
+  SurfaceManager surface_manager;
+
+  m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
+  m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
+  m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
+  m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
+  m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
+  m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
+
+  m_flairs.push_back(Flair(m_flair1, 0.5f, 0.5f));
+  m_flairs.push_back(Flair(m_flair1, 1.5f, 0.5f));
+  m_flairs.push_back(Flair(m_flair1, -1.5f, 0.5f));
+  m_flairs.push_back(Flair(m_flair1, 1.0/2.0f, 0.5f));
+  m_flairs.push_back(Flair(m_flair1, 1.0f/8.0f, 0.25f));
+  m_flairs.push_back(Flair(m_flair2, -1.0f/2.0f, 0.5f));
+  m_flairs.push_back(Flair(m_flair1, -1.0f/3.0f, 0.25f));
+  m_flairs.push_back(Flair(m_flair2, -1.0f/4.0f, 0.25f));
+  m_flairs.push_back(Flair(m_flair1, -1.0f/5.0f, 0.75f));
+  m_flairs.push_back(Flair(m_flair2, -1.0f/5.5f, 0.75f));
+
+
+  m_loop = true;
+  while(m_loop)
+  {
+    glClearColor(0,0,0,0);
+    glClear(GL_COLOR_BUFFER_BIT);
+
+    process_input();
+    draw();
+    window.swap_buffers();
+  }
+
+  return 0;
+}
+
+int main()
+{
+  Lenseflair app;
+  app.main();
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/windstille/extra/lenseflair/lenseflair.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/extra/lenseflair/lenseflair.hpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.hpp	                        (rev 0)
+++ trunk/windstille/extra/lenseflair/lenseflair.hpp	2010-10-07 23:19:09 UTC (rev 3367)
@@ -0,0 +1,78 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+#define HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+
+#include <vector>
+
+#include "math/vector2f.hpp"
+#include "math/size.hpp"
+#include "display/surface.hpp"
+
+struct Flair
+{
+  SurfacePtr m_surface;
+  float      m_distance;
+  float      m_scale;
+
+  Flair(SurfacePtr surface,
+        float      distance,
+        float      scale) :
+    m_surface(surface),
+    m_distance(distance),
+    m_scale(scale)
+  {}
+};
+
+class Lenseflair
+{
+private:
+  Size m_aspect_ratio;
+  Size m_window_size;
+  bool m_fullscreen;
+  bool m_loop;
+
+  SurfacePtr m_light;
+  SurfacePtr m_superlight;
+  SurfacePtr m_flair1;
+  SurfacePtr m_flair2;
+  SurfacePtr m_cover;
+  SurfacePtr m_halo;
+
+  typedef std::vector<Flair> Flairs;
+  Flairs m_flairs;
+
+  Vector2f m_mouse;
+  
+public:
+  Lenseflair();
+  
+  int main();
+
+  void process_input();
+  void draw();
+
+private:
+  Lenseflair(const Lenseflair&);
+  Lenseflair& operator=(const Lenseflair&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/extra/lenseflair/lenseflair.hpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/extra/lenseflair/light.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/light.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/lenseflair/superlight.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/superlight.png
___________________________________________________________________
Added: svn:mime-type
   + image/png



From grumbel at mail.berlios.de  Fri Oct  8 14:52:26 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri,  8 Oct 2010 14:52:26 +0200
Subject: [Windstille-commit] r3368 - trunk/windstille/extra/lenseflair
Message-ID: <20101008125226.3C329480DF4@sheep.berlios.de>

Author: grumbel
Date: 2010-10-08 14:52:26 +0200 (Fri, 08 Oct 2010)
New Revision: 3368

Added:
   trunk/windstille/extra/lenseflair/lightquery.png
Modified:
   trunk/windstille/extra/lenseflair/cover.png
   trunk/windstille/extra/lenseflair/flair2.png
   trunk/windstille/extra/lenseflair/lenseflair.cpp
   trunk/windstille/extra/lenseflair/lenseflair.hpp
   trunk/windstille/extra/lenseflair/light.png
Log:
Added occlusion queries to the lenseflair

Modified: trunk/windstille/extra/lenseflair/cover.png
===================================================================
(Binary files differ)

Modified: trunk/windstille/extra/lenseflair/flair2.png
===================================================================
(Binary files differ)

Modified: trunk/windstille/extra/lenseflair/lenseflair.cpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.cpp	2010-10-07 23:19:09 UTC (rev 3367)
+++ trunk/windstille/extra/lenseflair/lenseflair.cpp	2010-10-08 12:52:26 UTC (rev 3368)
@@ -34,6 +34,7 @@
   m_loop(false),
   
   m_light(),
+  m_lightquery(),
   m_superlight(),
   m_flair1(),
   m_flair2(),
@@ -49,6 +50,9 @@
 void
 Lenseflair::draw()
 {
+  GLuint query_id;
+  glGenQueries(1, &query_id);
+
   Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
                          static_cast<float>(m_aspect_ratio.height) / 2.0f);
   float dist = (m_mouse - screen_center).length();
@@ -57,20 +61,67 @@
   factor *= 3.3f;
   std::cout << factor << std::endl;
 
+  glEnable(GL_DEPTH_TEST);
+
+  glDepthMask(GL_TRUE);
+  glAlphaFunc ( GL_GREATER, 0.1f );
+  glEnable(GL_ALPHA_TEST);
+  m_cover->draw(Vector2f(600, 400));
+  glDisable(GL_ALPHA_TEST);
+  glDepthMask(GL_FALSE);
+
+  glBeginQuery(GL_SAMPLES_PASSED, query_id);
+  m_lightquery->draw(SurfaceDrawingParameters()
+                     .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                     .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
+                                       m_mouse.y - m_lightquery->get_height()/2)));
+  GLint samples = 0;
+  glEndQuery(GL_SAMPLES_PASSED);
+
+
+  GLint query_counter_bits = 0;
+  glGetQueryiv(GL_SAMPLES_PASSED, GL_QUERY_COUNTER_BITS, &query_counter_bits);
+  if (query_counter_bits == 0)
+  {
+    std::cout << "Occlusion query not supported" << std::endl;
+  }
+
+  glGetQueryObjectiv(query_id, GL_QUERY_RESULT, &samples);
+  
+  std::cout << "samples: " << samples << std::endl;
+
+  glDeleteQueries(1, &query_id);
+
+  float visibility = static_cast<float>(samples) / 16384.0f;
+  factor *= visibility;
+
+  m_halo->draw(SurfaceDrawingParameters()
+               .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+               .set_color(Color(1,1,1,visibility))
+               .set_scale(1.0f)
+               .set_pos(Vector2f(m_mouse.x,
+                                 m_mouse.y)
+                        - Vector2f(m_halo->get_width()/2 * (1.0f),
+                                   m_halo->get_height()/2 * (1.0f))));
+
+  glDisable(GL_DEPTH_TEST);
+
   m_light->draw(SurfaceDrawingParameters()
                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2,
-                                  m_mouse.y - m_light->get_height()/2)));
+                .set_color(Color(1,1,1,1))
+                .set_scale(visibility)
+                .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2 * visibility,
+                                  m_mouse.y - m_light->get_height()/2 * visibility)));
 
-  m_cover->draw(Vector2f(600, 400));
 
   m_halo->draw(SurfaceDrawingParameters()
-                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                 .set_scale(2.0f + factor*5.0f)
-                 .set_pos(Vector2f(m_mouse.x,
-                                   m_mouse.y)
-                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
-                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
+               .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+               .set_color(Color(1,1,1,visibility))
+               .set_scale(2.0f + factor*5.0f)
+               .set_pos(Vector2f(m_mouse.x,
+                                 m_mouse.y)
+                        - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
+                                   m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
 
 
   m_superlight->draw(SurfaceDrawingParameters()
@@ -85,7 +136,7 @@
     i->m_surface->draw(SurfaceDrawingParameters()
                        .set_blend_func(GL_SRC_ALPHA, GL_ONE)
                        .set_scale(i->m_scale)
-                       .set_color(Color(1,1,1,factor))
+                       .set_color(Color(i->m_color.r, i->m_color.g, i->m_color.b, i->m_color.a * visibility))
                        .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
                                 - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
                                            i->m_surface->get_height()/2 * i->m_scale)));
@@ -173,29 +224,33 @@
   SurfaceManager surface_manager;
 
   m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
+  m_lightquery  = Surface::create(Pathname("lightquery.png", Pathname::kSysPath));
   m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
   m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
   m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
   m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
   m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
 
-  m_flairs.push_back(Flair(m_flair1, 0.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, -1.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.0/2.0f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.0f/8.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/2.0f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, -1.0f/3.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/4.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair1, -1.0f/5.0f, 0.75f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/5.5f, 0.75f));
+  float pos[] = { 0.1f, 0.2f, 0.4f, 0.8f, 1.6f, 3.2f };
+  
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair2, pos[i], 1.0f * pos[i], Color(1,1,1,1)));
+    m_flairs.push_back(Flair(m_flair2, -pos[i] * 0.7f, 1.0f * pos[i] * 0.7f, Color(1,1,1,1)));
+  }
 
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair1, pos[i]* 0.2f, 1.0f * pos[i] * 0.2f, Color(1,1,1,0.1f)));
+    m_flairs.push_back(Flair(m_flair1, -pos[i] * 0.1f, 1.0f * pos[i] * 0.1f, Color(1,1,1,0.1f)));
+  }
 
+
   m_loop = true;
   while(m_loop)
   {
     glClearColor(0,0,0,0);
-    glClear(GL_COLOR_BUFFER_BIT);
+    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
 
     process_input();
     draw();

Modified: trunk/windstille/extra/lenseflair/lenseflair.hpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.hpp	2010-10-07 23:19:09 UTC (rev 3367)
+++ trunk/windstille/extra/lenseflair/lenseflair.hpp	2010-10-08 12:52:26 UTC (rev 3368)
@@ -24,19 +24,23 @@
 #include "math/vector2f.hpp"
 #include "math/size.hpp"
 #include "display/surface.hpp"
+#include "display/color.hpp"
 
 struct Flair
 {
   SurfacePtr m_surface;
   float      m_distance;
   float      m_scale;
-
+  Color      m_color;
+  
   Flair(SurfacePtr surface,
         float      distance,
-        float      scale) :
+        float      scale,
+        Color color) :
     m_surface(surface),
     m_distance(distance),
-    m_scale(scale)
+    m_scale(scale),
+    m_color(color)
   {}
 };
 
@@ -49,6 +53,7 @@
   bool m_loop;
 
   SurfacePtr m_light;
+  SurfacePtr m_lightquery;
   SurfacePtr m_superlight;
   SurfacePtr m_flair1;
   SurfacePtr m_flair2;

Modified: trunk/windstille/extra/lenseflair/light.png
===================================================================
(Binary files differ)

Added: trunk/windstille/extra/lenseflair/lightquery.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/lenseflair/lightquery.png
___________________________________________________________________
Added: svn:mime-type
   + image/png



From grumbel at mail.berlios.de  Fri Oct  8 17:14:41 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri,  8 Oct 2010 17:14:41 +0200
Subject: [Windstille-commit] r3369 - in trunk/windstille/extra: . lensflare
Message-ID: <20101008151441.7A7E6480175@sheep.berlios.de>

Author: grumbel
Date: 2010-10-08 17:14:41 +0200 (Fri, 08 Oct 2010)
New Revision: 3369

Added:
   trunk/windstille/extra/lensflare/
   trunk/windstille/extra/lensflare/cover.png
   trunk/windstille/extra/lensflare/flair2.png
   trunk/windstille/extra/lensflare/lenseflair.cpp
   trunk/windstille/extra/lensflare/lenseflair.hpp
   trunk/windstille/extra/lensflare/light.png
   trunk/windstille/extra/lensflare/lightquery.png
Removed:
   trunk/windstille/extra/lensflare/cover.png
   trunk/windstille/extra/lensflare/flair2.png
   trunk/windstille/extra/lensflare/lenseflair.cpp
   trunk/windstille/extra/lensflare/lenseflair.hpp
   trunk/windstille/extra/lensflare/light.png
Log:
Spelling fix

Deleted: trunk/windstille/extra/lensflare/cover.png
===================================================================
(Binary files differ)

Copied: trunk/windstille/extra/lensflare/cover.png (from rev 3368, trunk/windstille/extra/lenseflair/cover.png)
===================================================================
(Binary files differ)

Deleted: trunk/windstille/extra/lensflare/flair2.png
===================================================================
(Binary files differ)

Copied: trunk/windstille/extra/lensflare/flair2.png (from rev 3368, trunk/windstille/extra/lenseflair/flair2.png)
===================================================================
(Binary files differ)

Deleted: trunk/windstille/extra/lensflare/lenseflair.cpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.cpp	2010-10-07 23:19:09 UTC (rev 3367)
+++ trunk/windstille/extra/lensflare/lenseflair.cpp	2010-10-08 15:14:41 UTC (rev 3369)
@@ -1,215 +0,0 @@
-/*
-**  Windstille - A Sci-Fi Action-Adventure Game
-**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software: you can redistribute it and/or modify
-**  it under the terms of the GNU General Public License as published by
-**  the Free Software Foundation, either version 3 of the License, or
-**  (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-**
-**  You should have received a copy of the GNU General Public License
-**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include "lenseflair.hpp"
-
-#include "display/opengl_state.hpp"
-#include "display/opengl_window.hpp"
-#include "display/shader_program.hpp"
-#include "display/surface_manager.hpp"
-#include "display/surface_drawing_parameters.hpp"
-#include "display/texture_manager.hpp"
-#include "math/random.hpp"
-#include "system/sdl.hpp"
-
-Lenseflair::Lenseflair() :
-  m_aspect_ratio(1280, 800),
-  m_window_size(1280, 800),
-  m_fullscreen(false),
-  m_loop(false),
-  
-  m_light(),
-  m_superlight(),
-  m_flair1(),
-  m_flair2(),
-  m_cover(),
-  m_halo(),
-
-  m_flairs(),
-
-  m_mouse()
-{
-}
-
-void
-Lenseflair::draw()
-{
-  Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
-                         static_cast<float>(m_aspect_ratio.height) / 2.0f);
-  float dist = (m_mouse - screen_center).length();
-
-  float factor = 0.3f - (dist / static_cast<float>(m_aspect_ratio.width + m_aspect_ratio.height));
-  factor *= 3.3f;
-  std::cout << factor << std::endl;
-
-  m_light->draw(SurfaceDrawingParameters()
-                .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2,
-                                  m_mouse.y - m_light->get_height()/2)));
-
-  m_cover->draw(Vector2f(600, 400));
-
-  m_halo->draw(SurfaceDrawingParameters()
-                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                 .set_scale(2.0f + factor*5.0f)
-                 .set_pos(Vector2f(m_mouse.x,
-                                   m_mouse.y)
-                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
-                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
-
-
-  m_superlight->draw(SurfaceDrawingParameters()
-                     .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                     .set_color(Color(1.0f, 1.0f, 1.0f, factor))
-                     .set_scale(factor)
-                     .set_pos(Vector2f(m_mouse.x - m_superlight->get_width()/2 * factor,
-                                       m_mouse.y - m_superlight->get_height()/2  * factor)));
-
-  for(Flairs::iterator i = m_flairs.begin(); i != m_flairs.end(); ++i)
-  {
-    i->m_surface->draw(SurfaceDrawingParameters()
-                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                       .set_scale(i->m_scale)
-                       .set_color(Color(1,1,1,factor))
-                       .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
-                                - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
-                                           i->m_surface->get_height()/2 * i->m_scale)));
-  }
-  
-  if (false)
-  {
-    m_flair1->draw(SurfaceDrawingParameters()
-                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                   .set_pos(screen_center + (m_mouse - screen_center) * -0.5f
-                            - Vector2f(m_flair1->get_width()/2,
-                                       m_flair1->get_height()/2)));
-  
-    m_flair2->draw(SurfaceDrawingParameters()
-                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                   .set_pos(screen_center + (m_mouse - screen_center) * -0.75f 
-                            - Vector2f(m_flair2->get_width()/2,
-                                       m_flair2->get_height()/2)));
-
-    m_flair2->draw(SurfaceDrawingParameters()
-                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                   .set_pos(screen_center + (m_mouse - screen_center) * 0.25f 
-                            - Vector2f(m_flair2->get_width()/2,
-                                       m_flair2->get_height()/2)));
-
-    m_flair2->draw(SurfaceDrawingParameters()
-                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                   .set_pos(screen_center + (m_mouse - screen_center) * 0.75f
-                            - Vector2f(m_flair2->get_width()/2,
-                                       m_flair2->get_height()/2)));
-
-    m_flair1->draw(SurfaceDrawingParameters()
-                   .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                   .set_pos(screen_center + (m_mouse - screen_center) * 0.5f
-                            - Vector2f(m_flair1->get_width()/2,
-                                       m_flair1->get_height()/2)));
-  }
-}
-
-void
-Lenseflair::process_input()
-{
-  SDL_Event event;
-  while(SDL_PollEvent(&event))
-  {
-    switch(event.type)
-    {
-      case SDL_QUIT:
-        m_loop = false;
-        break;
-
-      case SDL_MOUSEMOTION:
-        m_mouse.x = event.motion.x;
-        m_mouse.y = event.motion.y;
-        break;
-
-      case SDL_KEYDOWN:
-        switch (event.key.keysym.sym)
-        {
-          case SDLK_ESCAPE:
-            m_loop = false;
-            break;
-
-          default:
-            break;
-        }
-        break;
-
-      default:
-        break;
-    }
-  }
-}
-
-int
-Lenseflair::main()
-{
-  SDL sdl;
-  OpenGLWindow window("Shader Test",
-                      m_window_size, // window size
-                      m_aspect_ratio, // aspect ratio
-                      m_fullscreen, // fullscreen
-                      4); // anti-alias
-  TextureManager texture_manager;
-  SurfaceManager surface_manager;
-
-  m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
-  m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
-  m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
-  m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
-  m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
-  m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
-
-  m_flairs.push_back(Flair(m_flair1, 0.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, -1.5f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.0/2.0f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, 1.0f/8.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/2.0f, 0.5f));
-  m_flairs.push_back(Flair(m_flair1, -1.0f/3.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/4.0f, 0.25f));
-  m_flairs.push_back(Flair(m_flair1, -1.0f/5.0f, 0.75f));
-  m_flairs.push_back(Flair(m_flair2, -1.0f/5.5f, 0.75f));
-
-
-  m_loop = true;
-  while(m_loop)
-  {
-    glClearColor(0,0,0,0);
-    glClear(GL_COLOR_BUFFER_BIT);
-
-    process_input();
-    draw();
-    window.swap_buffers();
-  }
-
-  return 0;
-}
-
-int main()
-{
-  Lenseflair app;
-  app.main();
-  return 0;
-}
-
-/* EOF */

Copied: trunk/windstille/extra/lensflare/lenseflair.cpp (from rev 3368, trunk/windstille/extra/lenseflair/lenseflair.cpp)
===================================================================
--- trunk/windstille/extra/lensflare/lenseflair.cpp	                        (rev 0)
+++ trunk/windstille/extra/lensflare/lenseflair.cpp	2010-10-08 15:14:41 UTC (rev 3369)
@@ -0,0 +1,244 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "lenseflair.hpp"
+
+#include "display/opengl_state.hpp"
+#include "display/opengl_window.hpp"
+#include "display/shader_program.hpp"
+#include "display/surface_manager.hpp"
+#include "display/surface_drawing_parameters.hpp"
+#include "display/texture_manager.hpp"
+#include "math/random.hpp"
+#include "system/sdl.hpp"
+
+Lenseflair::Lenseflair() :
+  m_aspect_ratio(1280, 800),
+  m_window_size(1280, 800),
+  m_fullscreen(false),
+  m_loop(false),
+  
+  m_light(),
+  m_lightquery(),
+  m_superlight(),
+  m_flair1(),
+  m_flair2(),
+  m_cover(),
+  m_halo(),
+
+  m_flairs(),
+
+  m_mouse()
+{
+}
+
+void
+Lenseflair::draw()
+{
+  Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
+                         static_cast<float>(m_aspect_ratio.height) / 2.0f);
+  float dist = (m_mouse - screen_center).length();
+
+  float factor = 0.3f - (dist / static_cast<float>(m_aspect_ratio.width + m_aspect_ratio.height));
+  factor *= 3.3f;
+  std::cout << factor << std::endl;
+
+  glEnable(GL_DEPTH_TEST); 
+  glDepthMask(GL_TRUE);
+  glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
+  glAlphaFunc ( GL_GREATER, 0.1f );
+  glEnable(GL_ALPHA_TEST);
+    
+  m_cover->draw(SurfaceDrawingParameters()
+                .set_pos(Vector2f(600, 400))
+                .set_color(Color(0.15f, 0.15f, 0.15f, 1.0f))
+    );
+  
+  glDisable(GL_ALPHA_TEST);
+  
+  if (true)
+  {
+    GLuint query_id;
+    glGenQueries(1, &query_id);
+
+    glBeginQuery(GL_SAMPLES_PASSED, query_id);
+    m_lightquery->draw(SurfaceDrawingParameters()
+                       .set_color(Color(1,0,0,0)) // query without drawing 
+                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                       .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
+                                         m_mouse.y - m_lightquery->get_height()/2)));
+    GLint samples = 0;
+    glEndQuery(GL_SAMPLES_PASSED);
+
+    glGetQueryObjectiv(query_id, GL_QUERY_RESULT, &samples);
+  
+    std::cout << "samples: " << samples << std::endl;
+
+    glDeleteQueries(1, &query_id);
+
+    float visibility = static_cast<float>(samples) / 16384.0f;
+    factor *= visibility;
+
+    glDepthMask(GL_FALSE);
+    m_halo->draw(SurfaceDrawingParameters()
+                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                 .set_color(Color(1,1,1,visibility))
+                 .set_scale(1.0f)
+                 .set_pos(Vector2f(m_mouse.x,
+                                   m_mouse.y)
+                          - Vector2f(m_halo->get_width()/2 * (1.0f),
+                                     m_halo->get_height()/2 * (1.0f))));
+
+    glDisable(GL_DEPTH_TEST);
+    m_light->draw(SurfaceDrawingParameters()
+                  .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                  .set_color(Color(1,1,1,1))
+                  .set_scale(visibility)
+                  .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2 * visibility,
+                                    m_mouse.y - m_light->get_height()/2 * visibility)));
+
+    glDepthMask(GL_TRUE);
+
+    m_halo->draw(SurfaceDrawingParameters()
+                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                 .set_color(Color(1,1,1,visibility))
+                 .set_scale(2.0f + factor*5.0f)
+                 .set_pos(Vector2f(m_mouse.x,
+                                   m_mouse.y)
+                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
+                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
+
+
+    m_superlight->draw(SurfaceDrawingParameters()
+                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                       .set_color(Color(1.0f, 1.0f, 1.0f, factor))
+                       .set_scale(factor)
+                       .set_pos(Vector2f(m_mouse.x - m_superlight->get_width()/2 * factor,
+                                         m_mouse.y - m_superlight->get_height()/2  * factor)));
+
+    for(Flairs::iterator i = m_flairs.begin(); i != m_flairs.end(); ++i)
+    {
+      i->m_surface->draw(SurfaceDrawingParameters()
+                         .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                         .set_scale(i->m_scale)
+                         .set_color(Color(i->m_color.r, i->m_color.g, i->m_color.b, i->m_color.a * visibility))
+                         .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
+                                  - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
+                                             i->m_surface->get_height()/2 * i->m_scale)));
+    }
+  }
+}
+
+void
+Lenseflair::process_input()
+{
+  SDL_Event event;
+  while(SDL_PollEvent(&event))
+  {
+    switch(event.type)
+    {
+      case SDL_QUIT:
+        m_loop = false;
+        break;
+
+      case SDL_MOUSEMOTION:
+        m_mouse.x = event.motion.x;
+        m_mouse.y = event.motion.y;
+        break;
+
+      case SDL_KEYDOWN:
+        switch (event.key.keysym.sym)
+        {
+          case SDLK_ESCAPE:
+            m_loop = false;
+            break;
+
+          default:
+            break;
+        }
+        break;
+
+      default:
+        break;
+    }
+  }
+}
+
+int
+Lenseflair::main()
+{
+  SDL sdl;
+  OpenGLWindow window("Shader Test",
+                      m_window_size, // window size
+                      m_aspect_ratio, // aspect ratio
+                      m_fullscreen, // fullscreen
+                      4); // anti-alias
+  TextureManager texture_manager;
+  SurfaceManager surface_manager;
+
+  m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
+  m_lightquery  = Surface::create(Pathname("lightquery.png", Pathname::kSysPath));
+  m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
+  m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
+  m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
+  m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
+  m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
+
+  float pos[] = { 0.1f, 0.2f, 0.4f, 0.8f, 1.6f, 3.2f };
+  
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair2, pos[i], 1.0f * pos[i], Color(1,1,1,1)));
+    m_flairs.push_back(Flair(m_flair2, -pos[i] * 0.7f, 1.0f * pos[i] * 0.7f, Color(1,1,1,1)));
+  }
+
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair1, pos[i]* 0.2f, 1.0f * pos[i] * 0.2f, Color(1,1,1,0.1f)));
+    m_flairs.push_back(Flair(m_flair1, -pos[i] * 0.1f, 1.0f * pos[i] * 0.1f, Color(1,1,1,0.1f)));
+  }
+
+  GLint query_counter_bits = 0;
+  glGetQueryiv(GL_SAMPLES_PASSED, GL_QUERY_COUNTER_BITS, &query_counter_bits);
+  if (query_counter_bits == 0)
+  {
+    std::cout << "Occlusion query not supported" << std::endl;
+  }
+
+  m_loop = true;
+  while(m_loop)
+  {
+    glClearColor(0,0,0,1);
+    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
+
+    process_input();
+    draw();
+    window.swap_buffers();
+  }
+
+  return 0;
+}
+
+int main()
+{
+  Lenseflair app;
+  app.main();
+  return 0;
+}
+
+/* EOF */

Deleted: trunk/windstille/extra/lensflare/lenseflair.hpp
===================================================================
--- trunk/windstille/extra/lenseflair/lenseflair.hpp	2010-10-07 23:19:09 UTC (rev 3367)
+++ trunk/windstille/extra/lensflare/lenseflair.hpp	2010-10-08 15:14:41 UTC (rev 3369)
@@ -1,78 +0,0 @@
-/*
-**  Windstille - A Sci-Fi Action-Adventure Game
-**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software: you can redistribute it and/or modify
-**  it under the terms of the GNU General Public License as published by
-**  the Free Software Foundation, either version 3 of the License, or
-**  (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-**
-**  You should have received a copy of the GNU General Public License
-**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#ifndef HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
-#define HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
-
-#include <vector>
-
-#include "math/vector2f.hpp"
-#include "math/size.hpp"
-#include "display/surface.hpp"
-
-struct Flair
-{
-  SurfacePtr m_surface;
-  float      m_distance;
-  float      m_scale;
-
-  Flair(SurfacePtr surface,
-        float      distance,
-        float      scale) :
-    m_surface(surface),
-    m_distance(distance),
-    m_scale(scale)
-  {}
-};
-
-class Lenseflair
-{
-private:
-  Size m_aspect_ratio;
-  Size m_window_size;
-  bool m_fullscreen;
-  bool m_loop;
-
-  SurfacePtr m_light;
-  SurfacePtr m_superlight;
-  SurfacePtr m_flair1;
-  SurfacePtr m_flair2;
-  SurfacePtr m_cover;
-  SurfacePtr m_halo;
-
-  typedef std::vector<Flair> Flairs;
-  Flairs m_flairs;
-
-  Vector2f m_mouse;
-  
-public:
-  Lenseflair();
-  
-  int main();
-
-  void process_input();
-  void draw();
-
-private:
-  Lenseflair(const Lenseflair&);
-  Lenseflair& operator=(const Lenseflair&);
-};
-
-#endif
-
-/* EOF */

Copied: trunk/windstille/extra/lensflare/lenseflair.hpp (from rev 3368, trunk/windstille/extra/lenseflair/lenseflair.hpp)
===================================================================
--- trunk/windstille/extra/lensflare/lenseflair.hpp	                        (rev 0)
+++ trunk/windstille/extra/lensflare/lenseflair.hpp	2010-10-08 15:14:41 UTC (rev 3369)
@@ -0,0 +1,83 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+#define HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+
+#include <vector>
+
+#include "math/vector2f.hpp"
+#include "math/size.hpp"
+#include "display/surface.hpp"
+#include "display/color.hpp"
+
+struct Flair
+{
+  SurfacePtr m_surface;
+  float      m_distance;
+  float      m_scale;
+  Color      m_color;
+  
+  Flair(SurfacePtr surface,
+        float      distance,
+        float      scale,
+        Color color) :
+    m_surface(surface),
+    m_distance(distance),
+    m_scale(scale),
+    m_color(color)
+  {}
+};
+
+class Lenseflair
+{
+private:
+  Size m_aspect_ratio;
+  Size m_window_size;
+  bool m_fullscreen;
+  bool m_loop;
+
+  SurfacePtr m_light;
+  SurfacePtr m_lightquery;
+  SurfacePtr m_superlight;
+  SurfacePtr m_flair1;
+  SurfacePtr m_flair2;
+  SurfacePtr m_cover;
+  SurfacePtr m_halo;
+
+  typedef std::vector<Flair> Flairs;
+  Flairs m_flairs;
+
+  Vector2f m_mouse;
+  
+public:
+  Lenseflair();
+  
+  int main();
+
+  void process_input();
+  void draw();
+
+private:
+  Lenseflair(const Lenseflair&);
+  Lenseflair& operator=(const Lenseflair&);
+};
+
+#endif
+
+/* EOF */

Deleted: trunk/windstille/extra/lensflare/light.png
===================================================================
(Binary files differ)

Copied: trunk/windstille/extra/lensflare/light.png (from rev 3368, trunk/windstille/extra/lenseflair/light.png)
===================================================================
(Binary files differ)

Copied: trunk/windstille/extra/lensflare/lightquery.png (from rev 3368, trunk/windstille/extra/lenseflair/lightquery.png)
===================================================================
(Binary files differ)



From grumbel at mail.berlios.de  Fri Oct  8 17:35:07 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri,  8 Oct 2010 17:35:07 +0200
Subject: [Windstille-commit] r3370 - trunk/windstille/extra/lensflare
Message-ID: <20101008153507.6496548017A@sheep.berlios.de>

Author: grumbel
Date: 2010-10-08 17:35:07 +0200 (Fri, 08 Oct 2010)
New Revision: 3370

Added:
   trunk/windstille/extra/lensflare/lensflare.cpp
   trunk/windstille/extra/lensflare/lensflare.hpp
Removed:
   trunk/windstille/extra/lensflare/lenseflair.cpp
   trunk/windstille/extra/lensflare/lenseflair.hpp
Log:
Spelling fixes

Deleted: trunk/windstille/extra/lensflare/lenseflair.cpp
===================================================================
--- trunk/windstille/extra/lensflare/lenseflair.cpp	2010-10-08 15:14:41 UTC (rev 3369)
+++ trunk/windstille/extra/lensflare/lenseflair.cpp	2010-10-08 15:35:07 UTC (rev 3370)
@@ -1,244 +0,0 @@
-/*
-**  Windstille - A Sci-Fi Action-Adventure Game
-**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software: you can redistribute it and/or modify
-**  it under the terms of the GNU General Public License as published by
-**  the Free Software Foundation, either version 3 of the License, or
-**  (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-**
-**  You should have received a copy of the GNU General Public License
-**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#include "lenseflair.hpp"
-
-#include "display/opengl_state.hpp"
-#include "display/opengl_window.hpp"
-#include "display/shader_program.hpp"
-#include "display/surface_manager.hpp"
-#include "display/surface_drawing_parameters.hpp"
-#include "display/texture_manager.hpp"
-#include "math/random.hpp"
-#include "system/sdl.hpp"
-
-Lenseflair::Lenseflair() :
-  m_aspect_ratio(1280, 800),
-  m_window_size(1280, 800),
-  m_fullscreen(false),
-  m_loop(false),
-  
-  m_light(),
-  m_lightquery(),
-  m_superlight(),
-  m_flair1(),
-  m_flair2(),
-  m_cover(),
-  m_halo(),
-
-  m_flairs(),
-
-  m_mouse()
-{
-}
-
-void
-Lenseflair::draw()
-{
-  Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
-                         static_cast<float>(m_aspect_ratio.height) / 2.0f);
-  float dist = (m_mouse - screen_center).length();
-
-  float factor = 0.3f - (dist / static_cast<float>(m_aspect_ratio.width + m_aspect_ratio.height));
-  factor *= 3.3f;
-  std::cout << factor << std::endl;
-
-  glEnable(GL_DEPTH_TEST); 
-  glDepthMask(GL_TRUE);
-  glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
-  glAlphaFunc ( GL_GREATER, 0.1f );
-  glEnable(GL_ALPHA_TEST);
-    
-  m_cover->draw(SurfaceDrawingParameters()
-                .set_pos(Vector2f(600, 400))
-                .set_color(Color(0.15f, 0.15f, 0.15f, 1.0f))
-    );
-  
-  glDisable(GL_ALPHA_TEST);
-  
-  if (true)
-  {
-    GLuint query_id;
-    glGenQueries(1, &query_id);
-
-    glBeginQuery(GL_SAMPLES_PASSED, query_id);
-    m_lightquery->draw(SurfaceDrawingParameters()
-                       .set_color(Color(1,0,0,0)) // query without drawing 
-                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                       .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
-                                         m_mouse.y - m_lightquery->get_height()/2)));
-    GLint samples = 0;
-    glEndQuery(GL_SAMPLES_PASSED);
-
-    glGetQueryObjectiv(query_id, GL_QUERY_RESULT, &samples);
-  
-    std::cout << "samples: " << samples << std::endl;
-
-    glDeleteQueries(1, &query_id);
-
-    float visibility = static_cast<float>(samples) / 16384.0f;
-    factor *= visibility;
-
-    glDepthMask(GL_FALSE);
-    m_halo->draw(SurfaceDrawingParameters()
-                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                 .set_color(Color(1,1,1,visibility))
-                 .set_scale(1.0f)
-                 .set_pos(Vector2f(m_mouse.x,
-                                   m_mouse.y)
-                          - Vector2f(m_halo->get_width()/2 * (1.0f),
-                                     m_halo->get_height()/2 * (1.0f))));
-
-    glDisable(GL_DEPTH_TEST);
-    m_light->draw(SurfaceDrawingParameters()
-                  .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                  .set_color(Color(1,1,1,1))
-                  .set_scale(visibility)
-                  .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2 * visibility,
-                                    m_mouse.y - m_light->get_height()/2 * visibility)));
-
-    glDepthMask(GL_TRUE);
-
-    m_halo->draw(SurfaceDrawingParameters()
-                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                 .set_color(Color(1,1,1,visibility))
-                 .set_scale(2.0f + factor*5.0f)
-                 .set_pos(Vector2f(m_mouse.x,
-                                   m_mouse.y)
-                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
-                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
-
-
-    m_superlight->draw(SurfaceDrawingParameters()
-                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                       .set_color(Color(1.0f, 1.0f, 1.0f, factor))
-                       .set_scale(factor)
-                       .set_pos(Vector2f(m_mouse.x - m_superlight->get_width()/2 * factor,
-                                         m_mouse.y - m_superlight->get_height()/2  * factor)));
-
-    for(Flairs::iterator i = m_flairs.begin(); i != m_flairs.end(); ++i)
-    {
-      i->m_surface->draw(SurfaceDrawingParameters()
-                         .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                         .set_scale(i->m_scale)
-                         .set_color(Color(i->m_color.r, i->m_color.g, i->m_color.b, i->m_color.a * visibility))
-                         .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
-                                  - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
-                                             i->m_surface->get_height()/2 * i->m_scale)));
-    }
-  }
-}
-
-void
-Lenseflair::process_input()
-{
-  SDL_Event event;
-  while(SDL_PollEvent(&event))
-  {
-    switch(event.type)
-    {
-      case SDL_QUIT:
-        m_loop = false;
-        break;
-
-      case SDL_MOUSEMOTION:
-        m_mouse.x = event.motion.x;
-        m_mouse.y = event.motion.y;
-        break;
-
-      case SDL_KEYDOWN:
-        switch (event.key.keysym.sym)
-        {
-          case SDLK_ESCAPE:
-            m_loop = false;
-            break;
-
-          default:
-            break;
-        }
-        break;
-
-      default:
-        break;
-    }
-  }
-}
-
-int
-Lenseflair::main()
-{
-  SDL sdl;
-  OpenGLWindow window("Shader Test",
-                      m_window_size, // window size
-                      m_aspect_ratio, // aspect ratio
-                      m_fullscreen, // fullscreen
-                      4); // anti-alias
-  TextureManager texture_manager;
-  SurfaceManager surface_manager;
-
-  m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
-  m_lightquery  = Surface::create(Pathname("lightquery.png", Pathname::kSysPath));
-  m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
-  m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
-  m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
-  m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
-  m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
-
-  float pos[] = { 0.1f, 0.2f, 0.4f, 0.8f, 1.6f, 3.2f };
-  
-  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
-  {
-    m_flairs.push_back(Flair(m_flair2, pos[i], 1.0f * pos[i], Color(1,1,1,1)));
-    m_flairs.push_back(Flair(m_flair2, -pos[i] * 0.7f, 1.0f * pos[i] * 0.7f, Color(1,1,1,1)));
-  }
-
-  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
-  {
-    m_flairs.push_back(Flair(m_flair1, pos[i]* 0.2f, 1.0f * pos[i] * 0.2f, Color(1,1,1,0.1f)));
-    m_flairs.push_back(Flair(m_flair1, -pos[i] * 0.1f, 1.0f * pos[i] * 0.1f, Color(1,1,1,0.1f)));
-  }
-
-  GLint query_counter_bits = 0;
-  glGetQueryiv(GL_SAMPLES_PASSED, GL_QUERY_COUNTER_BITS, &query_counter_bits);
-  if (query_counter_bits == 0)
-  {
-    std::cout << "Occlusion query not supported" << std::endl;
-  }
-
-  m_loop = true;
-  while(m_loop)
-  {
-    glClearColor(0,0,0,1);
-    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
-
-    process_input();
-    draw();
-    window.swap_buffers();
-  }
-
-  return 0;
-}
-
-int main()
-{
-  Lenseflair app;
-  app.main();
-  return 0;
-}
-
-/* EOF */

Deleted: trunk/windstille/extra/lensflare/lenseflair.hpp
===================================================================
--- trunk/windstille/extra/lensflare/lenseflair.hpp	2010-10-08 15:14:41 UTC (rev 3369)
+++ trunk/windstille/extra/lensflare/lenseflair.hpp	2010-10-08 15:35:07 UTC (rev 3370)
@@ -1,83 +0,0 @@
-/*
-**  Windstille - A Sci-Fi Action-Adventure Game
-**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
-**
-**  This program is free software: you can redistribute it and/or modify
-**  it under the terms of the GNU General Public License as published by
-**  the Free Software Foundation, either version 3 of the License, or
-**  (at your option) any later version.
-**
-**  This program is distributed in the hope that it will be useful,
-**  but WITHOUT ANY WARRANTY; without even the implied warranty of
-**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-**  GNU General Public License for more details.
-**
-**  You should have received a copy of the GNU General Public License
-**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
-*/
-
-#ifndef HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
-#define HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
-
-#include <vector>
-
-#include "math/vector2f.hpp"
-#include "math/size.hpp"
-#include "display/surface.hpp"
-#include "display/color.hpp"
-
-struct Flair
-{
-  SurfacePtr m_surface;
-  float      m_distance;
-  float      m_scale;
-  Color      m_color;
-  
-  Flair(SurfacePtr surface,
-        float      distance,
-        float      scale,
-        Color color) :
-    m_surface(surface),
-    m_distance(distance),
-    m_scale(scale),
-    m_color(color)
-  {}
-};
-
-class Lenseflair
-{
-private:
-  Size m_aspect_ratio;
-  Size m_window_size;
-  bool m_fullscreen;
-  bool m_loop;
-
-  SurfacePtr m_light;
-  SurfacePtr m_lightquery;
-  SurfacePtr m_superlight;
-  SurfacePtr m_flair1;
-  SurfacePtr m_flair2;
-  SurfacePtr m_cover;
-  SurfacePtr m_halo;
-
-  typedef std::vector<Flair> Flairs;
-  Flairs m_flairs;
-
-  Vector2f m_mouse;
-  
-public:
-  Lenseflair();
-  
-  int main();
-
-  void process_input();
-  void draw();
-
-private:
-  Lenseflair(const Lenseflair&);
-  Lenseflair& operator=(const Lenseflair&);
-};
-
-#endif
-
-/* EOF */

Copied: trunk/windstille/extra/lensflare/lensflare.cpp (from rev 3369, trunk/windstille/extra/lensflare/lenseflair.cpp)
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.cpp	                        (rev 0)
+++ trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-08 15:35:07 UTC (rev 3370)
@@ -0,0 +1,244 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "lensflare.hpp"
+
+#include "display/opengl_state.hpp"
+#include "display/opengl_window.hpp"
+#include "display/shader_program.hpp"
+#include "display/surface_manager.hpp"
+#include "display/surface_drawing_parameters.hpp"
+#include "display/texture_manager.hpp"
+#include "math/random.hpp"
+#include "system/sdl.hpp"
+
+Lensflare::Lensflare() :
+  m_aspect_ratio(1280, 800),
+  m_window_size(1280, 800),
+  m_fullscreen(false),
+  m_loop(false),
+  
+  m_light(),
+  m_lightquery(),
+  m_superlight(),
+  m_flair1(),
+  m_flair2(),
+  m_cover(),
+  m_halo(),
+
+  m_flairs(),
+
+  m_mouse()
+{
+}
+
+void
+Lensflare::draw()
+{
+  Vector2f screen_center(static_cast<float>(m_aspect_ratio.width)  / 2.0f,
+                         static_cast<float>(m_aspect_ratio.height) / 2.0f);
+  float dist = (m_mouse - screen_center).length();
+
+  float factor = 0.3f - (dist / static_cast<float>(m_aspect_ratio.width + m_aspect_ratio.height));
+  factor *= 3.3f;
+  std::cout << factor << std::endl;
+
+  glEnable(GL_DEPTH_TEST); 
+  glDepthMask(GL_TRUE);
+  glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
+  glAlphaFunc ( GL_GREATER, 0.1f );
+  glEnable(GL_ALPHA_TEST);
+    
+  m_cover->draw(SurfaceDrawingParameters()
+                .set_pos(Vector2f(600, 400))
+                .set_color(Color(0.15f, 0.15f, 0.15f, 1.0f))
+    );
+  
+  glDisable(GL_ALPHA_TEST);
+  
+  if (true)
+  {
+    GLuint query_id;
+    glGenQueries(1, &query_id);
+
+    glBeginQuery(GL_SAMPLES_PASSED, query_id);
+    m_lightquery->draw(SurfaceDrawingParameters()
+                       .set_color(Color(1,0,0,0)) // query without drawing 
+                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                       .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
+                                         m_mouse.y - m_lightquery->get_height()/2)));
+    GLint samples = 0;
+    glEndQuery(GL_SAMPLES_PASSED);
+
+    glGetQueryObjectiv(query_id, GL_QUERY_RESULT, &samples);
+  
+    std::cout << "samples: " << samples << std::endl;
+
+    glDeleteQueries(1, &query_id);
+
+    float visibility = static_cast<float>(samples) / 16384.0f;
+    factor *= visibility;
+
+    glDepthMask(GL_FALSE);
+    m_halo->draw(SurfaceDrawingParameters()
+                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                 .set_color(Color(1,1,1,visibility))
+                 .set_scale(1.0f)
+                 .set_pos(Vector2f(m_mouse.x,
+                                   m_mouse.y)
+                          - Vector2f(m_halo->get_width()/2 * (1.0f),
+                                     m_halo->get_height()/2 * (1.0f))));
+
+    glDisable(GL_DEPTH_TEST);
+    m_light->draw(SurfaceDrawingParameters()
+                  .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                  .set_color(Color(1,1,1,1))
+                  .set_scale(visibility)
+                  .set_pos(Vector2f(m_mouse.x - m_light->get_width()/2 * visibility,
+                                    m_mouse.y - m_light->get_height()/2 * visibility)));
+
+    glDepthMask(GL_TRUE);
+
+    m_halo->draw(SurfaceDrawingParameters()
+                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                 .set_color(Color(1,1,1,visibility))
+                 .set_scale(2.0f + factor*5.0f)
+                 .set_pos(Vector2f(m_mouse.x,
+                                   m_mouse.y)
+                          - Vector2f(m_halo->get_width()/2 * (2.0f + factor*5.0f),
+                                     m_halo->get_height()/2 * (2.0f +  factor*5.0f))));
+
+
+    m_superlight->draw(SurfaceDrawingParameters()
+                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                       .set_color(Color(1.0f, 1.0f, 1.0f, factor))
+                       .set_scale(factor)
+                       .set_pos(Vector2f(m_mouse.x - m_superlight->get_width()/2 * factor,
+                                         m_mouse.y - m_superlight->get_height()/2  * factor)));
+
+    for(Flairs::iterator i = m_flairs.begin(); i != m_flairs.end(); ++i)
+    {
+      i->m_surface->draw(SurfaceDrawingParameters()
+                         .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                         .set_scale(i->m_scale)
+                         .set_color(Color(i->m_color.r, i->m_color.g, i->m_color.b, i->m_color.a * visibility))
+                         .set_pos(screen_center + (m_mouse - screen_center) * i->m_distance
+                                  - Vector2f(i->m_surface->get_width() /2 * i->m_scale,
+                                             i->m_surface->get_height()/2 * i->m_scale)));
+    }
+  }
+}
+
+void
+Lensflare::process_input()
+{
+  SDL_Event event;
+  while(SDL_PollEvent(&event))
+  {
+    switch(event.type)
+    {
+      case SDL_QUIT:
+        m_loop = false;
+        break;
+
+      case SDL_MOUSEMOTION:
+        m_mouse.x = event.motion.x;
+        m_mouse.y = event.motion.y;
+        break;
+
+      case SDL_KEYDOWN:
+        switch (event.key.keysym.sym)
+        {
+          case SDLK_ESCAPE:
+            m_loop = false;
+            break;
+
+          default:
+            break;
+        }
+        break;
+
+      default:
+        break;
+    }
+  }
+}
+
+int
+Lensflare::main()
+{
+  SDL sdl;
+  OpenGLWindow window("Shader Test",
+                      m_window_size, // window size
+                      m_aspect_ratio, // aspect ratio
+                      m_fullscreen, // fullscreen
+                      4); // anti-alias
+  TextureManager texture_manager;
+  SurfaceManager surface_manager;
+
+  m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
+  m_lightquery  = Surface::create(Pathname("lightquery.png", Pathname::kSysPath));
+  m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
+  m_flair1 = Surface::create(Pathname("flair1.png", Pathname::kSysPath));
+  m_flair2 = Surface::create(Pathname("flair2.png", Pathname::kSysPath));
+  m_cover = Surface::create(Pathname("cover.png", Pathname::kSysPath));
+  m_halo = Surface::create(Pathname("halo.png", Pathname::kSysPath));
+
+  float pos[] = { 0.1f, 0.2f, 0.4f, 0.8f, 1.6f, 3.2f };
+  
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair2, pos[i], 1.0f * pos[i], Color(1,1,1,1)));
+    m_flairs.push_back(Flair(m_flair2, -pos[i] * 0.7f, 1.0f * pos[i] * 0.7f, Color(1,1,1,1)));
+  }
+
+  for(size_t i = 0; i < sizeof(pos)/sizeof(float); ++i)
+  {
+    m_flairs.push_back(Flair(m_flair1, pos[i]* 0.2f, 1.0f * pos[i] * 0.2f, Color(1,1,1,0.1f)));
+    m_flairs.push_back(Flair(m_flair1, -pos[i] * 0.1f, 1.0f * pos[i] * 0.1f, Color(1,1,1,0.1f)));
+  }
+
+  GLint query_counter_bits = 0;
+  glGetQueryiv(GL_SAMPLES_PASSED, GL_QUERY_COUNTER_BITS, &query_counter_bits);
+  if (query_counter_bits == 0)
+  {
+    std::cout << "Occlusion query not supported" << std::endl;
+  }
+
+  m_loop = true;
+  while(m_loop)
+  {
+    glClearColor(0,0,0,1);
+    glClear( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT );
+
+    process_input();
+    draw();
+    window.swap_buffers();
+  }
+
+  return 0;
+}
+
+int main()
+{
+  Lensflare app;
+  app.main();
+  return 0;
+}
+
+/* EOF */

Copied: trunk/windstille/extra/lensflare/lensflare.hpp (from rev 3369, trunk/windstille/extra/lensflare/lenseflair.hpp)
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.hpp	                        (rev 0)
+++ trunk/windstille/extra/lensflare/lensflare.hpp	2010-10-08 15:35:07 UTC (rev 3370)
@@ -0,0 +1,83 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+#define HEADER_WINDSTILLE_EXTRA_LENSEFLAIR_LENSEFLAIR_HPP
+
+#include <vector>
+
+#include "math/vector2f.hpp"
+#include "math/size.hpp"
+#include "display/surface.hpp"
+#include "display/color.hpp"
+
+struct Flair
+{
+  SurfacePtr m_surface;
+  float      m_distance;
+  float      m_scale;
+  Color      m_color;
+  
+  Flair(SurfacePtr surface,
+        float      distance,
+        float      scale,
+        Color color) :
+    m_surface(surface),
+    m_distance(distance),
+    m_scale(scale),
+    m_color(color)
+  {}
+};
+
+class Lensflare
+{
+private:
+  Size m_aspect_ratio;
+  Size m_window_size;
+  bool m_fullscreen;
+  bool m_loop;
+
+  SurfacePtr m_light;
+  SurfacePtr m_lightquery;
+  SurfacePtr m_superlight;
+  SurfacePtr m_flair1;
+  SurfacePtr m_flair2;
+  SurfacePtr m_cover;
+  SurfacePtr m_halo;
+
+  typedef std::vector<Flair> Flairs;
+  Flairs m_flairs;
+
+  Vector2f m_mouse;
+  
+public:
+  Lensflare();
+  
+  int main();
+
+  void process_input();
+  void draw();
+
+private:
+  Lensflare(const Lensflare&);
+  Lensflare& operator=(const Lensflare&);
+};
+
+#endif
+
+/* EOF */



From grumbel at mail.berlios.de  Fri Oct 22 04:11:24 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 04:11:24 +0200
Subject: [Windstille-commit] r3371 - in trunk/windstille/src: display
	objects particles scenegraph
Message-ID: <20101022021124.44541480EDE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 04:11:23 +0200 (Fri, 22 Oct 2010)
New Revision: 3371

Modified:
   trunk/windstille/src/display/compositor.cpp
   trunk/windstille/src/display/display.cpp
   trunk/windstille/src/display/framebuffer.cpp
   trunk/windstille/src/display/opengl_window.cpp
   trunk/windstille/src/display/opengl_window.hpp
   trunk/windstille/src/display/renderbuffer.cpp
   trunk/windstille/src/display/scene_context.hpp
   trunk/windstille/src/display/shader_object.cpp
   trunk/windstille/src/display/shader_object.hpp
   trunk/windstille/src/display/shader_program.cpp
   trunk/windstille/src/display/shader_program.hpp
   trunk/windstille/src/display/surface.cpp
   trunk/windstille/src/display/surface.hpp
   trunk/windstille/src/display/surface_drawing_parameters.hpp
   trunk/windstille/src/objects/shockwave.cpp
   trunk/windstille/src/objects/shockwave.hpp
   trunk/windstille/src/particles/deform_drawer.cpp
   trunk/windstille/src/particles/deform_drawer.hpp
   trunk/windstille/src/scenegraph/shockwave_drawable.hpp
Log:
Changed ShaderProgram to ShaderProgramPtr, removed a few EXT extensions

Modified: trunk/windstille/src/display/compositor.cpp
===================================================================
--- trunk/windstille/src/display/compositor.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/compositor.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -26,7 +26,7 @@
 Compositor::Compositor(const Size& window, const Size& viewport) :
   impl()
 {
-  if (glewIsSupported("GL_EXT_framebuffer_object")) //(GLEW_EXT_framebuffer_object)
+  if (GLEW_VERSION_3_2)
   {
     std::cout  << "Display:: framebuffer_object extension is supported" << std::endl;
     impl.reset(new FramebufferCompositorImpl(window, viewport));

Modified: trunk/windstille/src/display/display.cpp
===================================================================
--- trunk/windstille/src/display/display.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/display.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -602,7 +602,7 @@
 Display::push_framebuffer(FramebufferPtr framebuffer)
 {
   framebuffers.push_back(framebuffer);
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffers.back()->get_handle());
+  glBindFramebuffer(GL_FRAMEBUFFER, framebuffers.back()->get_handle());
 }
 
 void
@@ -614,11 +614,11 @@
   
   if (!framebuffers.empty())
   {
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, framebuffers.back()->get_handle());
+    glBindFramebuffer(GL_FRAMEBUFFER, framebuffers.back()->get_handle());
   }
   else
   {
-    glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+    glBindFramebuffer(GL_FRAMEBUFFER, 0);
   }
 }
 

Modified: trunk/windstille/src/display/framebuffer.cpp
===================================================================
--- trunk/windstille/src/display/framebuffer.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/framebuffer.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -55,13 +55,13 @@
   m_color_buffer(),
   m_depth_stencil_buffer()
 {
-  glGenFramebuffersEXT(1, &m_handle);
+  glGenFramebuffers(1, &m_handle);
   assert_gl("Framebuffer::Framebuffer()");   
 }
 
 Framebuffer::~Framebuffer()
 {
-  glDeleteFramebuffersEXT(1, &m_handle);  
+  glDeleteFramebuffers(1, &m_handle);  
 }
 
 TexturePtr
@@ -95,21 +95,21 @@
 {
   m_size = Size(width, height);
   m_texture = Texture::create(target, width, height);
-  m_depth_stencil_buffer = Renderbuffer::create(GL_DEPTH24_STENCIL8_EXT, width, height, multisample);
+  m_depth_stencil_buffer = Renderbuffer::create(GL_DEPTH24_STENCIL8, width, height, multisample);
     
   // FIXME: Should use push/pop_framebuffer instead, but don't have pointer to Framebuffer here
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_handle);
+  glBindFramebuffer(GL_FRAMEBUFFER, m_handle);
 
   // bind texture and renderbuffers to the framebuffer
-  glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, m_texture->get_target(), m_texture->get_handle(), 0);
-  glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT,   GL_RENDERBUFFER_EXT, m_depth_stencil_buffer->get_handle());
-  glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_STENCIL_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, m_depth_stencil_buffer->get_handle());
+  glFramebufferTexture2D(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0, m_texture->get_target(), m_texture->get_handle(), 0);
+  glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,   GL_RENDERBUFFER, m_depth_stencil_buffer->get_handle());
+  glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, m_depth_stencil_buffer->get_handle());
 
   assert_gl("Framebuffer::Framebuffer() - binding");
 
   check_completness();
 
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);
+  glBindFramebuffer(GL_FRAMEBUFFER, 0);
 }
 
 void
@@ -117,29 +117,29 @@
 { 
   m_size = Size(width, height);
   m_color_buffer = Renderbuffer::create(format, width, height, multisample);
-  m_depth_stencil_buffer = Renderbuffer::create(GL_DEPTH24_STENCIL8_EXT, width, height, multisample);
+  m_depth_stencil_buffer = Renderbuffer::create(GL_DEPTH24_STENCIL8, width, height, multisample);
 
   // FIXME: Should use push/pop_framebuffer instead, but don't have pointer to Framebuffer here
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_handle);
+  glBindFramebuffer(GL_FRAMEBUFFER, m_handle);
 
-  glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT,  GL_RENDERBUFFER_EXT, m_color_buffer->get_handle());
-  glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT,   GL_RENDERBUFFER_EXT, m_depth_stencil_buffer->get_handle());
-  glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_STENCIL_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, m_depth_stencil_buffer->get_handle());
+  glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_COLOR_ATTACHMENT0,  GL_RENDERBUFFER, m_color_buffer->get_handle());
+  glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_ATTACHMENT,   GL_RENDERBUFFER, m_depth_stencil_buffer->get_handle());
+  glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_STENCIL_ATTACHMENT, GL_RENDERBUFFER, m_depth_stencil_buffer->get_handle());
 
   assert_gl("Framebuffer::Framebuffer() - binding");
 
   check_completness();
 
-  glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0);    
+  glBindFramebuffer(GL_FRAMEBUFFER, 0);    
 }
 
 void
 Framebuffer::check_completness()
 {
-  GLenum status = glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT);
+  GLenum status = glCheckFramebufferStatus(GL_FRAMEBUFFER);
   switch(status)
   {
-    case GL_FRAMEBUFFER_COMPLETE_EXT:
+    case GL_FRAMEBUFFER_COMPLETE:
       std::cout << "Framebuffer ok" << std::endl;
       break;
 

Modified: trunk/windstille/src/display/opengl_window.cpp
===================================================================
--- trunk/windstille/src/display/opengl_window.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/opengl_window.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -48,9 +48,12 @@
 
   SDL_GL_SetAttribute(SDL_GL_SWAP_CONTROL, 1); // vsync
   SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1); 
-  SDL_GL_SetAttribute(SDL_GL_RED_SIZE,     5);
-  SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,   5);
-  SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,    5);
+
+  SDL_GL_SetAttribute(SDL_GL_RED_SIZE,     8);
+  SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE,   8);
+  SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE,    8);
+  SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
+
   SDL_GL_SetAttribute(SDL_GL_STENCIL_SIZE, 8);
 
   if (anti_aliasing)
@@ -80,7 +83,10 @@
     }
     else
     {
-      //std::cout << "glewInit() successfull" << std::endl;
+      std::cout << "glewInit() successfull: " << glewGetString(GLEW_VERSION) << std::endl;
+      std::cout << "OpenGL " << glGetString(GL_VERSION) << " detected" << std::endl;
+      std::cout << "OpenGL 3.2: " << GL_VERSION_3_2 << std::endl;
+      std::cout << "GL_VERSION_3_0: " << GL_VERSION_3_0 << std::endl;
 
       glViewport(0, 0, m_impl->m_window->w, m_impl->m_window->h);
       glMatrixMode(GL_PROJECTION);
@@ -158,4 +164,10 @@
   }
 }
 
+void
+OpenGLWindow::swap_buffers()
+{
+  SDL_GL_SwapBuffers();
+}
+
 /* EOF */

Modified: trunk/windstille/src/display/opengl_window.hpp
===================================================================
--- trunk/windstille/src/display/opengl_window.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/opengl_window.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -41,6 +41,8 @@
   void set_fullscreen(bool fullscreen);
   void set_gamma(float r, float g, float b);
 
+  void swap_buffers();
+
 private:
   boost::scoped_ptr<OpenGLWindowImpl> m_impl;
 

Modified: trunk/windstille/src/display/renderbuffer.cpp
===================================================================
--- trunk/windstille/src/display/renderbuffer.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/renderbuffer.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -30,26 +30,26 @@
 Renderbuffer::Renderbuffer(GLenum format, int width, int height, int multisample) :
   m_handle(0)
 {
-  glGenRenderbuffersEXT(1, &m_handle);
+  glGenRenderbuffers(1, &m_handle);
 
-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, m_handle);
+  glBindRenderbuffer(GL_RENDERBUFFER, m_handle);
 
   if (multisample)
   { 
     // antialiasing
     std::cout << "Antialised Renderbuffer" << std::endl;
-    glRenderbufferStorageMultisampleEXT(GL_RENDERBUFFER_EXT, multisample, format, width, height);
+    glRenderbufferStorageMultisample(GL_RENDERBUFFER, multisample, format, width, height);
   }
   else
   {
-    glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, format, width, height);
+    glRenderbufferStorage(GL_RENDERBUFFER, format, width, height);
   }      
-  glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, 0); 
+  glBindRenderbuffer(GL_RENDERBUFFER, 0); 
 }
 
 Renderbuffer::~Renderbuffer()
 {
-  glDeleteRenderbuffersEXT(1, &m_handle);
+  glDeleteRenderbuffers(1, &m_handle);
 }
 
 GLuint

Modified: trunk/windstille/src/display/scene_context.hpp
===================================================================
--- trunk/windstille/src/display/scene_context.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/scene_context.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -81,7 +81,8 @@
     LIGHTMAP       = 1<<1,
     HIGHLIGHTMAP   = 1<<2,
     CONTROLMAP     = 1<<3,
-    LIGHTMAPSCREEN = 1<<4
+    LIGHTMAPSCREEN = 1<<4,
+    GLOWMAP        = 1<<5
   };
 
   /** The render mask allows to switch of some layers and effects for

Modified: trunk/windstille/src/display/shader_object.cpp
===================================================================
--- trunk/windstille/src/display/shader_object.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/shader_object.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -20,6 +20,8 @@
 
 #include <stdio.h>
 #include <iostream>
+#include <boost/scoped_array.hpp>
+#include <stdexcept>
 
 #include "display/assert_gl.hpp"
 
@@ -52,7 +54,7 @@
 }
 
 ShaderObjectPtr
-ShaderObject::create(GLenum type, const std::string& filename)
+ShaderObject::create_from_file(GLenum type, const std::string& filename)
 {
   return ShaderObjectPtr(new ShaderObject(type, filename));
 }
@@ -64,7 +66,6 @@
 
   load(filename);
   compile();
-  print_log();
 }
 
 ShaderObject::~ShaderObject()
@@ -79,7 +80,7 @@
   glShaderSource(m_handle, 1, const_cast<const GLchar**>(&buf), NULL);
   assert_gl("load_source");
 
-  std::cout << "Source:\n" << buf << std::endl;
+  //std::cout << "Source:\n" << buf << std::endl;
   free(buf);
 }
 
@@ -93,6 +94,10 @@
 ShaderObject::compile()
 {
   glCompileShader(m_handle);
+  if (!get_compile_status())
+  {
+    throw std::runtime_error(get_info_log());
+  }
 }
 
 void
@@ -120,5 +125,34 @@
   }
   assert_gl("print_log3");
 }
+
+
+bool
+ShaderObject::get_compile_status()
+{
+  int status;
+  glGetShaderiv(m_handle, GL_COMPILE_STATUS, &status);
+  return (status == GL_TRUE);
+}
+
+std::string
+ShaderObject::get_info_log()
+{
+  int info_log_len = 0;
+  int charsWritten  = 0;
+
+  glGetShaderiv(m_handle, GL_INFO_LOG_LENGTH, &info_log_len);
+
+  if (info_log_len > 0)
+  {
+    boost::scoped_array<GLchar> info_log(new GLchar[info_log_len]);
+    glGetShaderInfoLog(m_handle, info_log_len, &charsWritten, info_log.get());
+    return info_log.get();
+  }
+  else
+  {
+    return std::string("<empty>");
+  }
+}
 
 /* EOF */

Modified: trunk/windstille/src/display/shader_object.hpp
===================================================================
--- trunk/windstille/src/display/shader_object.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/shader_object.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -30,7 +30,7 @@
 class ShaderObject
 {
 public:
-  static ShaderObjectPtr create(GLenum type, const std::string& filename);
+  static ShaderObjectPtr create_from_file(GLenum type, const std::string& filename);
 
 private:
   ShaderObject(GLenum type, const std::string& filename);
@@ -38,6 +38,9 @@
 public:
   ~ShaderObject();
 
+  std::string get_info_log();
+  bool get_compile_status();
+
   GLuint get_handle() const;
   void load(const std::string& filename);
   void compile();

Modified: trunk/windstille/src/display/shader_program.cpp
===================================================================
--- trunk/windstille/src/display/shader_program.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/shader_program.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -16,13 +16,47 @@
 **  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
 
+#include "display/shader_program.hpp"
+
+#include <boost/scoped_array.hpp>
 #include <iostream>
+#include <stdexcept>
 
+#include "display/assert_gl.hpp"
+#include "display/assert_gl.hpp"
 #include "display/shader_object.hpp"
-#include "display/assert_gl.hpp"
-#include "display/shader_program.hpp"
 
 ShaderProgramPtr
+ShaderProgram::load_from_file(const std::string& frag_filename,
+                              const std::string& vert_filename)
+{
+  ShaderProgramPtr prog(new ShaderProgram());
+
+  if (!frag_filename.empty())
+  {
+    ShaderObjectPtr frag = ShaderObject::create_from_file(GL_FRAGMENT_SHADER, frag_filename);
+    prog->attach(frag);
+  }
+
+  if (!vert_filename.empty())
+  {
+    ShaderObjectPtr vert = ShaderObject::create_from_file(GL_VERTEX_SHADER, vert_filename);
+    prog->attach(vert);
+  }
+
+  return prog;
+}
+
+ShaderProgramPtr
+ShaderProgram::create_from_file(const std::string& frag_filename,
+                                const std::string& vert_filename)
+{
+  ShaderProgramPtr prog = load_from_file(frag_filename, vert_filename);
+  prog->link();
+  return prog;
+}
+
+ShaderProgramPtr
 ShaderProgram::create()
 {
   return ShaderProgramPtr(new ShaderProgram());
@@ -43,12 +77,17 @@
 ShaderProgram::attach(ShaderObjectPtr obj)
 {
   glAttachShader(m_handle, obj->get_handle());
+  assert_gl("ShaderProgram::attach()");
 }
 
 void
 ShaderProgram::link()
 {
   glLinkProgram(m_handle);
+  if (!get_link_status())
+  {
+    throw std::runtime_error(get_info_log());
+  }
 }
 
 GLint
@@ -152,4 +191,40 @@
     glUniform4i(location, v0, v1, v2, v3);
 }
 
+void
+ShaderProgram::bind_frag_data_location(GLuint color_number, const char* name)
+{
+  assert(glBindFragDataLocation);
+  glBindFragDataLocation(m_handle, color_number, name);
+  assert_gl("ShaderProgram::bind_frag_data_location");
+}
+
+bool
+ShaderProgram::get_link_status()
+{
+  int status;
+  glGetProgramiv(m_handle, GL_LINK_STATUS, &status);
+  return (status == GL_TRUE);
+}
+
+std::string
+ShaderProgram::get_info_log()
+{
+  int info_log_len = 0;
+  int charsWritten  = 0;
+
+  glGetProgramiv(m_handle, GL_INFO_LOG_LENGTH, &info_log_len);
+
+  if (info_log_len > 0)
+  {
+    boost::scoped_array<GLchar> info_log(new GLchar[info_log_len]);
+    glGetProgramInfoLog(m_handle, info_log_len, &charsWritten, info_log.get());
+    return info_log.get();
+  }
+  else
+  {
+    return std::string("<empty>");
+  }
+}
+
 /* EOF */

Modified: trunk/windstille/src/display/shader_program.hpp
===================================================================
--- trunk/windstille/src/display/shader_program.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/shader_program.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -32,7 +32,13 @@
 class ShaderProgram
 {
 public:
-  static ShaderProgramPtr create(); 
+  static ShaderProgramPtr create();
+  // loads and links a program
+  static ShaderProgramPtr create_from_file(const std::string& frag_filename = std::string(),
+                                           const std::string& vert_filename = std::string());
+  // loads but not links
+  static ShaderProgramPtr load_from_file(const std::string& frag_filename = std::string(),
+                                         const std::string& vert_filename = std::string());
 
 private:
   ShaderProgram();
@@ -43,6 +49,9 @@
   void attach(ShaderObjectPtr obj);
   void link();
 
+  std::string get_info_log();
+  bool get_link_status();
+
   GLint get_uniform_location(const char* name);
   GLuint get_handle() const;
 
@@ -58,6 +67,8 @@
   void set_uniform3i(const char* name, GLint v0, GLint v1, GLint v2);
   void set_uniform4i(const char* name, GLint v0, GLint v1, GLint v2, GLint v3);
 
+  void bind_frag_data_location(GLuint color_number, const char* name);
+
 private:
   GLuint m_handle;
 };

Modified: trunk/windstille/src/display/surface.cpp
===================================================================
--- trunk/windstille/src/display/surface.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/surface.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -80,6 +80,12 @@
   return m_size.height; 
 }
 
+Sizef
+Surface::get_size() const
+{
+  return m_size;
+}
+
 TexturePtr
 Surface::get_texture() const
 {
@@ -146,16 +152,16 @@
   quad.rotate(params.angle);
   
   glTexCoord2f(uv.left, uv.top);
-  glVertex2f(quad.p1.x, quad.p1.y);
+  glVertex3f(quad.p1.x, quad.p1.y, params.z_pos);
 
   glTexCoord2f(uv.right, uv.top);
-  glVertex2f(quad.p2.x, quad.p2.y);
+  glVertex3f(quad.p2.x, quad.p2.y, params.z_pos);
 
   glTexCoord2f(uv.right, uv.bottom);
-  glVertex2f(quad.p3.x, quad.p3.y);
+  glVertex3f(quad.p3.x, quad.p3.y, params.z_pos);
 
   glTexCoord2f(uv.left, uv.bottom);
-  glVertex2f(quad.p4.x, quad.p4.y);
+  glVertex3f(quad.p4.x, quad.p4.y, params.z_pos);
 
   glEnd(); 
 }

Modified: trunk/windstille/src/display/surface.hpp
===================================================================
--- trunk/windstille/src/display/surface.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/surface.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -57,6 +57,7 @@
 
   float get_width()  const;
   float get_height() const;
+  Sizef get_size() const;
   
   TexturePtr get_texture() const;
 

Modified: trunk/windstille/src/display/surface_drawing_parameters.hpp
===================================================================
--- trunk/windstille/src/display/surface_drawing_parameters.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/display/surface_drawing_parameters.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -35,6 +35,7 @@
   GLenum blendfunc_dst;
 
   Vector2f pos;
+  float    z_pos;
 
   /** Includes color and alpha settings */
   Color   color;
@@ -50,6 +51,7 @@
     : blendfunc_src(GL_SRC_ALPHA),
       blendfunc_dst(GL_ONE_MINUS_SRC_ALPHA),
       pos(0, 0),
+      z_pos(0.0f),
       color(1.0f, 1.0f, 1.0f, 1.0f),
       angle(0.0f),
       scale(1.0f, 1.0f),
@@ -87,6 +89,12 @@
     return *this;
   }
 
+  SurfaceDrawingParameters& set_z_pos(float p)
+  { 
+    z_pos = p;
+    return *this;
+  }
+
   SurfaceDrawingParameters& set_hflip(bool v)
   {
     hflip = v;

Modified: trunk/windstille/src/objects/shockwave.cpp
===================================================================
--- trunk/windstille/src/objects/shockwave.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/objects/shockwave.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -25,7 +25,7 @@
 Shockwave::Shockwave(const FileReader& props) :
   pos(),
   noise(Texture::create(Pathname("images/noise3.png"))),
-  shader_program(),
+  shader_program(ShaderProgram::create()),
   radius()
 {
   props.get("pos", pos);
@@ -35,8 +35,8 @@
   noise->set_wrap(GL_REPEAT);
   noise->set_filter(GL_LINEAR);
 
-  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER, "data/shader/shockwave2.frag"));
-  shader_program.link();
+  shader_program->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER, "data/shader/shockwave2.frag"));
+  shader_program->link();
 }
 
 Shockwave::~Shockwave()

Modified: trunk/windstille/src/objects/shockwave.hpp
===================================================================
--- trunk/windstille/src/objects/shockwave.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/objects/shockwave.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -28,7 +28,7 @@
 private:
   Vector2f        pos;
   TexturePtr noise;
-  ShaderProgram shader_program;
+  ShaderProgramPtr shader_program;
   float radius;
 
 public:

Modified: trunk/windstille/src/particles/deform_drawer.cpp
===================================================================
--- trunk/windstille/src/particles/deform_drawer.cpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/particles/deform_drawer.cpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -31,11 +31,11 @@
   FramebufferPtr    framebuffer;
   SurfacePtr        surface;
   ParticleSystem&   psys;
-  ShaderProgram&    shader_program;
+  ShaderProgramPtr  shader_program;
 
   DeformDrawerRequest(const Vector2f& pos_, float z_pos_,  const Matrix& modelview_,
                       FramebufferPtr framebuffer_, SurfacePtr surface_, ParticleSystem& psys_,
-                      ShaderProgram& shader_program_) :
+                      ShaderProgramPtr shader_program_) :
     Drawable(pos_, z_pos_, modelview_),
     framebuffer(framebuffer_), surface(surface_), psys(psys_), 
     shader_program(shader_program_)
@@ -167,10 +167,10 @@
 DeformDrawer::DeformDrawer(FileReader& /*props*/) :
   framebuffer(Framebuffer::create_with_texture(GL_TEXTURE_2D, 800, 600)),
   surface(Surface::create(Pathname("images/particles/deform2.png"))),
-  shader_program()
+  shader_program(ShaderProgram::create())
 {
-  shader_program.attach(ShaderObject(GL_FRAGMENT_SHADER, "data/shader/particledeform.frag"));
-  shader_program.link();
+  shader_program->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER, "data/shader/particledeform.frag"));
+  shader_program->link();
 }
 
 DeformDrawer::~DeformDrawer()

Modified: trunk/windstille/src/particles/deform_drawer.hpp
===================================================================
--- trunk/windstille/src/particles/deform_drawer.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/particles/deform_drawer.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -40,7 +40,7 @@
 private:
   FramebufferPtr framebuffer;
   SurfacePtr     surface;
-  ShaderProgram  shader_program;
+  ShaderProgramPtr shader_program;
 
 public:
   DeformDrawer(FileReader& props);

Modified: trunk/windstille/src/scenegraph/shockwave_drawable.hpp
===================================================================
--- trunk/windstille/src/scenegraph/shockwave_drawable.hpp	2010-10-08 15:35:07 UTC (rev 3370)
+++ trunk/windstille/src/scenegraph/shockwave_drawable.hpp	2010-10-22 02:11:23 UTC (rev 3371)
@@ -25,12 +25,12 @@
 {
 public:
   TexturePtr noise;
-  ShaderProgram shader_program;
+  ShaderProgramPtr shader_program;
   float radius;
 
   ShockwaveDrawable(const Vector2f& pos_, 
                     TexturePtr      noise_,
-                    const ShaderProgram& shader_program_,
+                    ShaderProgramPtr shader_program_,
                     float r,
                     const Matrix& modelview_) :
     Drawable(pos_, 500.0f, modelview_), 



From grumbel at mail.berlios.de  Fri Oct 22 04:22:59 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 04:22:59 +0200
Subject: [Windstille-commit] r3372 - trunk/windstille/test/scissor_drawable
Message-ID: <20101022022259.F3DB2480EDE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 04:22:59 +0200 (Fri, 22 Oct 2010)
New Revision: 3372

Modified:
   trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
Log:
Fixes

Modified: trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
===================================================================
--- trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-22 02:11:23 UTC (rev 3371)
+++ trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-22 02:22:59 UTC (rev 3372)
@@ -57,6 +57,11 @@
                                                                   SurfaceDrawingParameters().set_pos(Vector2f(-50.0f, -50.0f)), 0, Matrix::identity()));
   boost::shared_ptr<SurfaceDrawable> surface3(new SurfaceDrawable(Surface(Pathname("images/portrait.png")), 
                                                                   SurfaceDrawingParameters(), 0, Matrix::identity()));
+
+  boost::shared_ptr<SurfaceDrawable> surface4(new SurfaceDrawable(Surface(Pathname("images/portrait.png")), 
+                                                                  SurfaceDrawingParameters().set_pos(Vector2f(-25.0f, 25.0f)),
+                                                                  0, Matrix::identity()));
+  boost::shared_ptr<StencilDrawable> stencil2(new StencilDrawable());
   
   if (0)
   {
@@ -71,13 +76,17 @@
     stencil->get_drawable_group().add_drawable(surface);
 
     group.add_drawable(surface2);
-    group.add_drawable(stencil);
+
+    stencil2->get_stencil_group().add_drawable(surface4);
+    stencil2->get_drawable_group().add_drawable(stencil);
+
+    group.add_drawable(stencil2);
   }
 
   for(int i = 0; i < 500; ++i)
   {
     std::cout << "." << std::flush;   
-    surface->get_params().set_pos(Vector2f(i-250, 0));
+    surface->get_params().set_pos(Vector2f(static_cast<float>(i) - 250.0f, 0.0f));
     group.render(~0u);
     SDL_GL_SwapBuffers();
   }



From grumbel at mail.berlios.de  Fri Oct 22 04:31:39 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 04:31:39 +0200
Subject: [Windstille-commit] r3373 - trunk/windstille/test/scissor_drawable
Message-ID: <20101022023140.01CBA480EDE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 04:31:39 +0200 (Fri, 22 Oct 2010)
New Revision: 3373

Modified:
   trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
Log:
Adopted code to API changes

Modified: trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
===================================================================
--- trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-22 02:22:59 UTC (rev 3372)
+++ trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-22 02:31:39 UTC (rev 3373)
@@ -38,7 +38,8 @@
     SDL_EnableUNICODE(1);
   }
 
-  OpenGLWindow window(Size(960, 600),
+  OpenGLWindow window("Scissor Drawable", 
+                      Size(960, 600),
                       Size(960, 600));
   TextureManager    texture_manager;
   SurfaceManager    surface_manager;
@@ -50,15 +51,15 @@
   
   boost::shared_ptr<ScissorDrawable> scissor(new ScissorDrawable(Rect(200, 200, 400, 400)));
   boost::shared_ptr<StencilDrawable> stencil(new StencilDrawable());
-  boost::shared_ptr<SurfaceDrawable> surface(new SurfaceDrawable(Surface(Pathname("images/titlescreen.png")), 
+  boost::shared_ptr<SurfaceDrawable> surface(new SurfaceDrawable(Surface::create(Pathname("images/titlescreen.png")), 
                                                                  SurfaceDrawingParameters(), 0, Matrix::identity()));
 
-  boost::shared_ptr<SurfaceDrawable> surface2(new SurfaceDrawable(Surface(Pathname("images/titlescreen.png")), 
+  boost::shared_ptr<SurfaceDrawable> surface2(new SurfaceDrawable(Surface::create(Pathname("images/titlescreen.png")), 
                                                                   SurfaceDrawingParameters().set_pos(Vector2f(-50.0f, -50.0f)), 0, Matrix::identity()));
-  boost::shared_ptr<SurfaceDrawable> surface3(new SurfaceDrawable(Surface(Pathname("images/portrait.png")), 
+  boost::shared_ptr<SurfaceDrawable> surface3(new SurfaceDrawable(Surface::create(Pathname("images/portrait.png")), 
                                                                   SurfaceDrawingParameters(), 0, Matrix::identity()));
 
-  boost::shared_ptr<SurfaceDrawable> surface4(new SurfaceDrawable(Surface(Pathname("images/portrait.png")), 
+  boost::shared_ptr<SurfaceDrawable> surface4(new SurfaceDrawable(Surface::create(Pathname("images/portrait.png")), 
                                                                   SurfaceDrawingParameters().set_pos(Vector2f(-25.0f, 25.0f)),
                                                                   0, Matrix::identity()));
   boost::shared_ptr<StencilDrawable> stencil2(new StencilDrawable());



From grumbel at mail.berlios.de  Fri Oct 22 15:26:41 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 15:26:41 +0200
Subject: [Windstille-commit] r3374 - in trunk/windstille/src: display font
	scenegraph sound tile
Message-ID: <20101022132641.66734480BEE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 15:26:41 +0200 (Fri, 22 Oct 2010)
New Revision: 3374

Modified:
   trunk/windstille/src/display/basic_compositor_impl.cpp
   trunk/windstille/src/display/display.cpp
   trunk/windstille/src/display/drawing_parameters.hpp
   trunk/windstille/src/display/opengl_window.cpp
   trunk/windstille/src/display/shader_object.hpp
   trunk/windstille/src/display/shader_program.hpp
   trunk/windstille/src/display/surface_drawing_parameters.hpp
   trunk/windstille/src/display/texture.hpp
   trunk/windstille/src/display/texture_manager.hpp
   trunk/windstille/src/font/ttf_font.hpp
   trunk/windstille/src/scenegraph/gradient_drawable.cpp
   trunk/windstille/src/sound/ogg_sound_file.hpp
   trunk/windstille/src/sound/openal_sound_source.hpp
   trunk/windstille/src/sound/sound_channel.cpp
   trunk/windstille/src/sound/sound_manager.hpp
   trunk/windstille/src/tile/tile_packer.hpp
Log:
Some include adjustments for better portability

Modified: trunk/windstille/src/display/basic_compositor_impl.cpp
===================================================================
--- trunk/windstille/src/display/basic_compositor_impl.cpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/basic_compositor_impl.cpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -19,7 +19,6 @@
 #include "display/basic_compositor_impl.hpp"
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 
 #include "display/graphic_context_state.hpp"
 #include "display/opengl_state.hpp"

Modified: trunk/windstille/src/display/display.cpp
===================================================================
--- trunk/windstille/src/display/display.cpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/display.cpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -24,7 +24,6 @@
 #include <errno.h>
 #include <fstream>
 #include <GL/glew.h>
-#include <GL/glext.h>
 #include <sstream>
 #include <stdexcept>
 

Modified: trunk/windstille/src/display/drawing_parameters.hpp
===================================================================
--- trunk/windstille/src/display/drawing_parameters.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/drawing_parameters.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_DISPLAY_DRAWING_PARAMETERS_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 
 #include "display/color.hpp"
 

Modified: trunk/windstille/src/display/opengl_window.cpp
===================================================================
--- trunk/windstille/src/display/opengl_window.cpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/opengl_window.cpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,7 @@
 
 #include <GL/glew.h>
 #include <SDL.h>
-#include <SDL/SDL_image.h>
+#include <SDL_image.h>
 
 #include "util/util.hpp" 
 #include "display/opengl_state.hpp"

Modified: trunk/windstille/src/display/shader_object.hpp
===================================================================
--- trunk/windstille/src/display/shader_object.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/shader_object.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_DISPLAY_SHADER_OBJECT_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 #include <string>
 #include <boost/shared_ptr.hpp>
 

Modified: trunk/windstille/src/display/shader_program.hpp
===================================================================
--- trunk/windstille/src/display/shader_program.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/shader_program.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_DISPLAY_SHADER_PROGRAM_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 #include <boost/shared_ptr.hpp>
 
 #include "display/shader_object.hpp"

Modified: trunk/windstille/src/display/surface_drawing_parameters.hpp
===================================================================
--- trunk/windstille/src/display/surface_drawing_parameters.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/surface_drawing_parameters.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_DISPLAY_SURFACE_DRAWING_PARAMETERS_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 
 #include "math/vector2f.hpp"
 #include "display/color.hpp"

Modified: trunk/windstille/src/display/texture.hpp
===================================================================
--- trunk/windstille/src/display/texture.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/texture.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -22,7 +22,6 @@
 
 #include <string>
 #include <GL/glew.h>
-#include <GL/gl.h>
 #include <boost/shared_ptr.hpp>
 
 #include "display/software_surface.hpp"

Modified: trunk/windstille/src/display/texture_manager.hpp
===================================================================
--- trunk/windstille/src/display/texture_manager.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/display/texture_manager.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -22,7 +22,6 @@
 #include <string>
 #include <map>
 #include <GL/glew.h>
-#include <GL/gl.h>
 
 #include "display/texture.hpp"
 #include "util/currenton.hpp"

Modified: trunk/windstille/src/font/ttf_font.hpp
===================================================================
--- trunk/windstille/src/font/ttf_font.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/font/ttf_font.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_FONT_TTF_FONT_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 #include <boost/scoped_ptr.hpp>
 #include <string>
 

Modified: trunk/windstille/src/scenegraph/gradient_drawable.cpp
===================================================================
--- trunk/windstille/src/scenegraph/gradient_drawable.cpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/scenegraph/gradient_drawable.cpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -18,7 +18,7 @@
 
 #include "scenegraph/gradient_drawable.hpp"
 
-#include <GL/gl.h>
+#include <GL/glew.h>
 
 #include "display/display.hpp"
 

Modified: trunk/windstille/src/sound/ogg_sound_file.hpp
===================================================================
--- trunk/windstille/src/sound/ogg_sound_file.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/sound/ogg_sound_file.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_SOUND_OGG_SOUND_FILE_HPP
 
 #include <vorbis/vorbisfile.h>
-#include <physfs.h>
 #include <fstream>
 
 #include "sound/sound_file.hpp"

Modified: trunk/windstille/src/sound/openal_sound_source.hpp
===================================================================
--- trunk/windstille/src/sound/openal_sound_source.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/sound/openal_sound_source.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -19,7 +19,11 @@
 #ifndef HEADER_WINDSTILLE_SOUND_OPENAL_SOUND_SOURCE_HPP
 #define HEADER_WINDSTILLE_SOUND_OPENAL_SOUND_SOURCE_HPP
 
-#include <AL/al.h>
+#ifdef __MACOSX__
+#  include <OpenAL/al.h>
+#else
+#  include <AL/al.h>
+#endif
 
 #include "math/vector2f.hpp"
 #include "sound/sound_source.hpp"

Modified: trunk/windstille/src/sound/sound_channel.cpp
===================================================================
--- trunk/windstille/src/sound/sound_channel.cpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/sound/sound_channel.cpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -18,7 +18,6 @@
 
 #include "sound/sound_channel.hpp"
 
-#include <AL/al.h>
 #include <iostream>
 
 #include "math/vector2f.hpp"

Modified: trunk/windstille/src/sound/sound_manager.hpp
===================================================================
--- trunk/windstille/src/sound/sound_manager.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/sound/sound_manager.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -25,8 +25,13 @@
 #include <vector>
 #include <map>
 
-#include <AL/alc.h>
-#include <AL/al.h>
+#ifdef __MACOSX__
+#  include <OpenAL/alc.h>
+#  include <OpenAL/al.h>
+#else
+#  include <AL/alc.h>
+#  include <AL/al.h>
+#endif
 
 #include "math/vector2f.hpp"
 #include "sound/sound_channel.hpp"

Modified: trunk/windstille/src/tile/tile_packer.hpp
===================================================================
--- trunk/windstille/src/tile/tile_packer.hpp	2010-10-22 02:31:39 UTC (rev 3373)
+++ trunk/windstille/src/tile/tile_packer.hpp	2010-10-22 13:26:41 UTC (rev 3374)
@@ -20,7 +20,6 @@
 #define HEADER_WINDSTILLE_TILE_TILE_PACKER_HPP
 
 #include <GL/glew.h>
-#include <GL/gl.h>
 #include <boost/scoped_ptr.hpp>
 
 #include "display/texture.hpp"



From grumbel at mail.berlios.de  Fri Oct 22 15:32:32 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 15:32:32 +0200
Subject: [Windstille-commit] r3375 - trunk/windstille/src/sound
Message-ID: <20101022133232.BE7CB480BEE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 15:32:32 +0200 (Fri, 22 Oct 2010)
New Revision: 3375

Modified:
   trunk/windstille/src/sound/openal_sound_source.hpp
   trunk/windstille/src/sound/sound_manager.hpp
Log:
Switched from __MACOSX__ to __APPLE__

Modified: trunk/windstille/src/sound/openal_sound_source.hpp
===================================================================
--- trunk/windstille/src/sound/openal_sound_source.hpp	2010-10-22 13:26:41 UTC (rev 3374)
+++ trunk/windstille/src/sound/openal_sound_source.hpp	2010-10-22 13:32:32 UTC (rev 3375)
@@ -19,7 +19,7 @@
 #ifndef HEADER_WINDSTILLE_SOUND_OPENAL_SOUND_SOURCE_HPP
 #define HEADER_WINDSTILLE_SOUND_OPENAL_SOUND_SOURCE_HPP
 
-#ifdef __MACOSX__
+#ifdef __APPLE__
 #  include <OpenAL/al.h>
 #else
 #  include <AL/al.h>

Modified: trunk/windstille/src/sound/sound_manager.hpp
===================================================================
--- trunk/windstille/src/sound/sound_manager.hpp	2010-10-22 13:26:41 UTC (rev 3374)
+++ trunk/windstille/src/sound/sound_manager.hpp	2010-10-22 13:32:32 UTC (rev 3375)
@@ -25,7 +25,7 @@
 #include <vector>
 #include <map>
 
-#ifdef __MACOSX__
+#ifdef __APPLE__
 #  include <OpenAL/alc.h>
 #  include <OpenAL/al.h>
 #else



From grumbel at mail.berlios.de  Fri Oct 22 15:37:23 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 15:37:23 +0200
Subject: [Windstille-commit] r3376 - trunk/windstille/src/sound
Message-ID: <20101022133723.329CF480BEE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 15:37:23 +0200 (Fri, 22 Oct 2010)
New Revision: 3376

Modified:
   trunk/windstille/src/sound/sound_channel.cpp
Log:
Added missing header

Modified: trunk/windstille/src/sound/sound_channel.cpp
===================================================================
--- trunk/windstille/src/sound/sound_channel.cpp	2010-10-22 13:32:32 UTC (rev 3375)
+++ trunk/windstille/src/sound/sound_channel.cpp	2010-10-22 13:37:23 UTC (rev 3376)
@@ -21,11 +21,12 @@
 #include <iostream>
 
 #include "math/vector2f.hpp"
-#include "util/pathname.hpp"
+#include "sound/dummy_sound_source.hpp"
+#include "sound/sound_file.hpp"
 #include "sound/sound_manager.hpp"
 #include "sound/sound_source.hpp"
 #include "sound/stream_sound_source.hpp"
-#include "sound/dummy_sound_source.hpp"
+#include "util/pathname.hpp"
 
 SoundChannel::SoundChannel(SoundManager& sound_manager) :
   m_sound_manager(sound_manager),



From grumbel at mail.berlios.de  Fri Oct 22 16:05:19 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Fri, 22 Oct 2010 16:05:19 +0200
Subject: [Windstille-commit] r3377 - in trunk/windstille/src: app util
Message-ID: <20101022140519.E02D7480BEE@sheep.berlios.de>

Author: grumbel
Date: 2010-10-22 16:05:19 +0200 (Fri, 22 Oct 2010)
New Revision: 3377

Modified:
   trunk/windstille/src/app/windstille_main.cpp
   trunk/windstille/src/app/windstille_main.hpp
   trunk/windstille/src/util/pathname.cpp
   trunk/windstille/src/util/pathname.hpp
Log:
Removed physfs dependency

Modified: trunk/windstille/src/app/windstille_main.cpp
===================================================================
--- trunk/windstille/src/app/windstille_main.cpp	2010-10-22 13:37:23 UTC (rev 3376)
+++ trunk/windstille/src/app/windstille_main.cpp	2010-10-22 14:05:19 UTC (rev 3377)
@@ -18,7 +18,6 @@
 
 #include <sstream>
 #include <boost/filesystem.hpp>
-#include <physfs.h>
 
 #include "app/config.hpp"
 #include "app/console.hpp"
@@ -58,7 +57,6 @@
 
     config.parse_args(argc, argv);
 
-    init_physfs(argv[0]);
     init_sdl();
 
     config.load();
@@ -89,8 +87,6 @@
       run();
 
       config.save();
-    
-      PHYSFS_deinit();
     }
   }
   catch (std::exception& err)
@@ -188,41 +184,6 @@
     SDL_EnableUNICODE(1);
   }
 }
-
-void
-WindstilleMain::init_physfs(const char* argv0)
-{
-  if (!PHYSFS_init(argv0))
-  {
-    std::stringstream msg;
-    msg << "Couldn't initialize physfs: " << PHYSFS_getLastError();
-    throw std::runtime_error(msg.str());
-  }
-  else
-  {
-    boost::filesystem::create_directory(Pathname::get_userdir());
-    boost::filesystem::create_directory(Pathname("screenshots", Pathname::kUserPath).get_sys_path());
-
-    PHYSFS_setWriteDir(Pathname::get_userdir().c_str());
-    PHYSFS_addToSearchPath(Pathname::get_userdir().c_str(), 0);
-    PHYSFS_addToSearchPath(Pathname::get_datadir().c_str(), 0);
-
-    // allow symbolic links
-    PHYSFS_permitSymbolicLinks(1);
-
-    if (0)
-    { //show search Path
-      std::cout << "userdir: " << Pathname::get_userdir() << std::endl;
-      std::cout << "datadir: " << Pathname::get_datadir() << std::endl;
-
-      std::cout << "SearchPath:" << std::endl;
-      char** search_path = PHYSFS_getSearchPath();
-      for(char** i = search_path; *i != NULL; i++)
-        std::cout << "  " << *i << std::endl;;
-      PHYSFS_freeList(search_path);
-    }
-  }
-}
 
 int main(int argc, char** argv)
 {

Modified: trunk/windstille/src/app/windstille_main.hpp
===================================================================
--- trunk/windstille/src/app/windstille_main.hpp	2010-10-22 13:37:23 UTC (rev 3376)
+++ trunk/windstille/src/app/windstille_main.hpp	2010-10-22 14:05:19 UTC (rev 3377)
@@ -58,7 +58,6 @@
 private:
   void run();
   void init_sdl();
-  void init_physfs(const char* argv0);
   void init_modules();
   void deinit_modules();
 

Modified: trunk/windstille/src/util/pathname.cpp
===================================================================
--- trunk/windstille/src/util/pathname.cpp	2010-10-22 13:37:23 UTC (rev 3376)
+++ trunk/windstille/src/util/pathname.cpp	2010-10-22 14:05:19 UTC (rev 3377)
@@ -114,32 +114,6 @@
 }
 
 std::string
-Pathname::get_physfs_path() const
-{
-  switch(m_type)
-  {
-    case kSysPath: 
-    {
-      std::ostringstream str;
-      str << "Can't convert " << *this << " to PhysFS path";
-      throw std::runtime_error(str.str()); 
-      return "";
-    }
-          
-    case kUserPath:
-    case kDataPath:
-      return m_path;
-
-    case kEmpty:
-      return "";
-
-    default:
-      assert(!"Never reached");
-      return std::string();
-  }
-}
-
-std::string
 Pathname::get_sys_path() const
 {
   switch(m_type)

Modified: trunk/windstille/src/util/pathname.hpp
===================================================================
--- trunk/windstille/src/util/pathname.hpp	2010-10-22 13:37:23 UTC (rev 3376)
+++ trunk/windstille/src/util/pathname.hpp	2010-10-22 14:05:19 UTC (rev 3377)
@@ -113,8 +113,6 @@
    */
   std::string get_sys_path() const;
 
-  std::string get_physfs_path() const;
-
   /** Returns the relative unprocessed path */
   std::string get_raw_path() const { return m_path; }
 



From grumbel at mail.berlios.de  Sat Oct 23 22:48:28 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 22:48:28 +0200
Subject: [Windstille-commit] r3378 - trunk/windstille/src/editor
Message-ID: <20101023204828.65C164802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 22:48:28 +0200 (Sat, 23 Oct 2010)
New Revision: 3378

Modified:
   trunk/windstille/src/editor/control_point.cpp
   trunk/windstille/src/editor/control_point.hpp
   trunk/windstille/src/editor/decal_object_model.cpp
   trunk/windstille/src/editor/decal_object_model.hpp
   trunk/windstille/src/editor/decal_rotate_control_point.cpp
   trunk/windstille/src/editor/decal_scale_control_point.cpp
   trunk/windstille/src/editor/main.cpp
   trunk/windstille/src/editor/object_selector.cpp
   trunk/windstille/src/editor/windstille_widget.cpp
   trunk/windstille/src/editor/windstille_widget.hpp
Log:
Replaced Surface with SurfacePtr, Texture with TexturePtr, ...

Modified: trunk/windstille/src/editor/control_point.cpp
===================================================================
--- trunk/windstille/src/editor/control_point.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/control_point.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -24,10 +24,10 @@
 ControlPointHandle
 ControlPoint::create(const Vector2f& pos)
 {
-  return ControlPointHandle(new ControlPoint(Surface(Pathname("editor/handle.png")), pos));
+  return ControlPointHandle(new ControlPoint(Surface::create(Pathname("editor/handle.png")), pos));
 }
 
-ControlPoint::ControlPoint(const Surface& surface_, const Vector2f& pos_) :
+ControlPoint::ControlPoint(SurfacePtr surface_, const Vector2f& pos_) :
   surface(surface_),
   pos(pos_),
   offset()

Modified: trunk/windstille/src/editor/control_point.hpp
===================================================================
--- trunk/windstille/src/editor/control_point.hpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/control_point.hpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -36,12 +36,12 @@
   static ControlPointHandle create(const Vector2f& pos);
 
 protected:
-  Surface   surface;
+  SurfacePtr surface;
   Vector2f  pos;
   Vector2f  offset;
 
 public:
-  ControlPoint(const Surface& surface, const Vector2f& pos);
+  ControlPoint(SurfacePtr surface, const Vector2f& pos);
   virtual ~ControlPoint();
   
   virtual void draw(SceneContext& sc);

Modified: trunk/windstille/src/editor/decal_object_model.cpp
===================================================================
--- trunk/windstille/src/editor/decal_object_model.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/decal_object_model.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -60,16 +60,16 @@
   reader.get("angle", angle);
   reader.get("hflip", hflip);
   reader.get("vflip", vflip);
-  surface = Surface(Pathname(path));
-  software_surface = SoftwareSurface(Pathname(path));
+  surface = Surface::create(Pathname(path));
+  software_surface = SoftwareSurface::create(Pathname(path));
 }
 
 DecalObjectModel::DecalObjectModel(const std::string& /*name*/, const Vector2f& rel_pos_, 
                                    const std::string& path_, MapType type_) :
   ObjectModel("DecalObjectModel", rel_pos_),
   path(path_),
-  surface(Pathname(path_)),
-  software_surface(Pathname(path_)),
+  surface(Surface::create(Pathname(path_))),
+  software_surface(SoftwareSurface::create(Pathname(path_))),
   type(type_),
   scale(1.0f, 1.0f),
   angle(0.0f),
@@ -136,8 +136,8 @@
     ObjectModel::draw(sc);
 
     Vector2f wo_pos = get_world_pos();
-    Vector2f center_offset(-surface.get_width()/2,
-                           -surface.get_height()/2);
+    Vector2f center_offset(-surface->get_width()/2,
+                           -surface->get_height()/2);
 
     DrawingContext* dc = 0; 
     SurfaceDrawingParameters params;
@@ -163,8 +163,8 @@
 Rectf
 DecalObjectModel::get_bounding_box() const
 {
-  Vector2f center_offset(surface.get_width()/2,
-                         surface.get_height()/2);
+  Vector2f center_offset(surface->get_width()/2,
+                         surface->get_height()/2);
 
   center_offset.x *= scale.x;
   center_offset.y *= scale.y;
@@ -213,8 +213,8 @@
   p.x /= scale.x;
   p.y /= scale.y;
 
-  if (fabsf(p.x) < surface.get_width()/2 &&
-      fabsf(p.y) < surface.get_height()/2)
+  if (fabsf(p.x) < surface->get_width()/2 &&
+      fabsf(p.y) < surface->get_height()/2)
   {
     if (hflip)
       p.x = -p.x;
@@ -222,8 +222,8 @@
     if (vflip)
       p.y = -p.y;
 
-    return software_surface.is_at(static_cast<int>(p.x + surface.get_width()/2),
-                                  static_cast<int>(p.y + surface.get_height()/2));
+    return software_surface->is_at(static_cast<int>(p.x + surface->get_width()/2),
+                                  static_cast<int>(p.y + surface->get_height()/2));
   }
   else
   {
@@ -234,8 +234,8 @@
 void
 DecalObjectModel::add_control_points(std::vector<ControlPointHandle>& control_points)
 {
-  float w = surface.get_width()/2  * scale.x;
-  float h = surface.get_height()/2 * scale.y;
+  float w = surface->get_width()/2  * scale.x;
+  float h = surface->get_height()/2 * scale.y;
 
   Rectf rect(-w, -h, w, h);
   Quad quad1(rect);
@@ -310,8 +310,8 @@
 
   if (m_drawable)
   {
-    Vector2f center_offset(-surface.get_width() /2,
-                           -surface.get_height()/2);
+    Vector2f center_offset(-surface->get_width() /2,
+                           -surface->get_height()/2);
 
     center_offset.x *= scale.x;
     center_offset.y *= scale.y;

Modified: trunk/windstille/src/editor/decal_object_model.hpp
===================================================================
--- trunk/windstille/src/editor/decal_object_model.hpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/decal_object_model.hpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -36,8 +36,8 @@
 
 private:
   std::string path;
-  Surface surface;
-  SoftwareSurface software_surface;
+  SurfacePtr surface;
+  SoftwareSurfacePtr software_surface;
   MapType type;
 
   /** scale of the object, independed in x and y axis */

Modified: trunk/windstille/src/editor/decal_rotate_control_point.cpp
===================================================================
--- trunk/windstille/src/editor/decal_rotate_control_point.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/decal_rotate_control_point.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -20,7 +20,7 @@
 #include "editor/decal_rotate_control_point.hpp"
 
 DecalRotateControlPoint::DecalRotateControlPoint(DecalObjectModel* object_, float ctrl_angle_, const Vector2f& pos_) :
-  ControlPoint(Surface(Pathname("editor/rotate_handle.png")), pos_),
+  ControlPoint(Surface::create(Pathname("editor/rotate_handle.png")), pos_),
   object(object_),
   ctrl_angle(ctrl_angle_),
   orig_angle(object->get_angle()),

Modified: trunk/windstille/src/editor/decal_scale_control_point.cpp
===================================================================
--- trunk/windstille/src/editor/decal_scale_control_point.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/decal_scale_control_point.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -21,7 +21,7 @@
 
 DecalScaleControlPoint::DecalScaleControlPoint(DecalObjectModel* object_, float ctrl_angle_, const Vector2f& pos_, 
                                                bool x_scale_, bool y_scale_) :
-  ControlPoint(Surface(Pathname("editor/scale_handle.png")), pos_),
+  ControlPoint(Surface::create(Pathname("editor/scale_handle.png")), pos_),
   object(object_),
   ctrl_angle(ctrl_angle_),
   orig_scale(object_->get_scale()),

Modified: trunk/windstille/src/editor/main.cpp
===================================================================
--- trunk/windstille/src/editor/main.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/main.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -24,7 +24,6 @@
 #include <gtkmm/icontheme.h>
 #include <gtkmm/main.h>
 #include <gtkglmm.h>
-#include <physfs.h>
 
 #include "util/system.hpp"
 #include "util/command_line.hpp"
@@ -75,16 +74,7 @@
 
     Gtk::Main kit(&argc, &argv);
     Gtk::GL::init(&argc, &argv);
-
-    if (!PHYSFS_init(argv[0]))
-    {
-      std::ostringstream msg;
-      msg << "Couldn't initialize physfs: " << PHYSFS_getLastError();
-      throw std::runtime_error(msg.str());
-    }
-  
-    PHYSFS_addToSearchPath(Pathname::get_datadir().c_str(), 0);
-      
+     
     Glib::RefPtr<const Gdk::GL::Config> 
       glconfig = Gdk::GL::Config::create(/* FIXME: Using RGBA instead of RGB to make Display::save_screenshot work*/
         Gdk::GL::MODE_RGBA | 

Modified: trunk/windstille/src/editor/object_selector.cpp
===================================================================
--- trunk/windstille/src/editor/object_selector.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/object_selector.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -311,7 +311,7 @@
 
     if (selection_data.get_target() == "application/x-windstille-decal")
     {
-      std::string str = static_cast<Pathname>((*it)[Columns::instance().pathname]).get_physfs_path();
+      std::string str = static_cast<Pathname>((*it)[Columns::instance().pathname]).get_raw_path();
       selection_data.set(8, reinterpret_cast<const guint8*>(str.c_str()), str.length());
     }
     else

Modified: trunk/windstille/src/editor/windstille_widget.cpp
===================================================================
--- trunk/windstille/src/editor/windstille_widget.cpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/windstille_widget.cpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -161,8 +161,8 @@
       sc->set_render_mask(sc->get_render_mask() & ~SceneContext::LIGHTMAP);
     }
       
-    background_pattern = Texture(Pathname("editor/background_layer.png"));
-    background_pattern.set_wrap(GL_REPEAT);
+    background_pattern = Texture::create(Pathname("editor/background_layer.png"));
+    background_pattern->set_wrap(GL_REPEAT);
 
     glViewport(0, 0, get_width(), get_height());
     glMatrixMode(GL_PROJECTION);

Modified: trunk/windstille/src/editor/windstille_widget.hpp
===================================================================
--- trunk/windstille/src/editor/windstille_widget.hpp	2010-10-22 14:05:19 UTC (rev 3377)
+++ trunk/windstille/src/editor/windstille_widget.hpp	2010-10-23 20:48:28 UTC (rev 3378)
@@ -67,7 +67,7 @@
   boost::scoped_ptr<Compositor> compositor;
   boost::scoped_ptr<SceneContext> sc;
   DecalObjectModel::MapType map_type;
-  Texture background_pattern;
+  TexturePtr background_pattern;
   SelectMask select_mask;
   bool draw_background_pattern;
   bool draw_only_active_layers;



From grumbel at mail.berlios.de  Sat Oct 23 22:49:15 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 22:49:15 +0200
Subject: [Windstille-commit] r3379 - trunk/windstille
Message-ID: <20101023204915.2D80F4802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 22:49:14 +0200 (Sat, 23 Oct 2010)
New Revision: 3379

Added:
   trunk/windstille/scons_tests.py
Modified:
   trunk/windstille/SConscript
Log:
Started rewriting the SConstruct a bit to have a more flexible structure

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-23 20:48:28 UTC (rev 3378)
+++ trunk/windstille/SConscript	2010-10-23 20:49:14 UTC (rev 3379)
@@ -17,10 +17,13 @@
 
 import time
 import os
+import sys
+import scons_tests
+from pprint import pprint
 
 start_time = time.time()
 
-CacheDir('cache')
+# CacheDir('cache')
 
 preset_cxxflags = {
     'release':     [ "-O3", "-s"  ],
@@ -34,6 +37,7 @@
                      "-Wnon-virtual-dtor",
                      "-Weffc++",
                      "-Wconversion",
+                     # "-Wold-style-cast",
                      "-Werror",
                      "-Wshadow",
                      "-Wcast-qual",
@@ -45,8 +49,6 @@
                      ]
     }
 
-
-
 preset_linkflags = {
     'release': [],
     'profile': [ "-pg" ],
@@ -55,102 +57,61 @@
     }
 
 
-# YACC
-yacc_test_text = """
-%{
-#include <stdio.h>
+def MakeEnvironment(packages, cfg):
+    env = Environment(ENV=os.environ)
 
-/* MSVC++ needs this before it can swallow Bison output */
-#ifdef _MSC_VER
-# define __STDC__
-#endif
-%}
-%token MSG
-%start ROOT
-%%
-ROOT:
-    MSG { printf("HELLO"); } 
-    ;
-%%
-"""
+    for pkg in packages:
+        if type(pkg) == str:
+            if pkg in cfg:
+                env.Append(**cfg[pkg])
+            else:
+                raise Exception("Unknown package: %s" % pkg)
+        elif type(pkg) == dict:
+            env.Append(**pkg)
+        else:
+            raise Exception("Unknown package type: %s" % pkg)
 
-def CheckYacc(context):
-    context.Message("Checking for Yacc ('%s')... " % context.env.get('YACC'))
-    is_ok = context.TryCompile(yacc_test_text,".y")
-    context.Result(is_ok)
-    return is_ok
-
-# LEX
-lex_test_text = """
-%{
-#include <stdio.h>
-%}
-DIGIT	[0-9]
-ID		[a-z][a-z0-9]*
-%%
-{DIGIT}+	{
-		printf("A digit: %s\\n",yytext);
-	}
+    return env
 
-[ \\t\\n]+    /* ignore */
+def BuildProgram(target, sources, packages = [], cfg = {}):
+    env = MakeEnvironment(packages, cfg)
+    return env.Program(target, sources)
 
-.			{
-		printf("Unrecognized guff");
-	}
-%%
-main(){
-	yylex();
-}
-"""
+def BuildStaticLibrary(target, sources, packages = [], cfg = {}):
+    env = MakeEnvironment(packages, cfg)
+    return env.StaticLibrary(target, sources)
 
-def CheckLex(context):
-    context.Message("Checking for Lex ('%s')... " % context.env.get('LEX'))
-    is_ok = context.TryCompile(lex_test_text,".l")
-    context.Result(is_ok)
-    return is_ok
+def ParseConfig(cmd):
+    env = Environment()
+    env['ENV']['PATH'] = os.environ['PATH']
+    env.ParseConfig(cmd)
 
-
-def Check32bit(context):
-    check32bit_test_source_file = """
-#include <stdio.h>
-int main()
-{
-   printf("%dbit", sizeof(void*)*8);
-   return 0;
-}
-    """
-    context.Message('Checking for bits... ')
-    (suc, output) = context.TryRun(check32bit_test_source_file, '.cpp')
-    if suc:
-        context.Result(output)
-    else:
-        context.Result("test error")
-    return output
+    cfg = {}
 
+    for var in [ 'CCFLAGS', 'CPPDEFINES', 'CPPPATH', 'LIBS', 'LIBPATH' ]:
+        if var in env and env[var] != []:
+            cfg[var]  = env[var] 
+
+    # if 'CCFLAGS' in cfg:
+    #     cfg['CXXFLAGS'] = cfg['CCFLAGS']
+
+    return cfg
 
 class Project:
     def __init__(self):
         self.features = {
-            "64bit" : 0,
-            "cwiid" : 0
+            "64bit" : False,
+            "cwiid" : False
             }
 
-    def build_all(self):
-        self.env = Environment()
+        self.env = Environment(ENV=os.environ)
 
-        if not GetOption('clean'):
-            self.configure()
+    def configure(self):
+        # windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
+        # windstille_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
 
-        self.build_squirrel()
-        self.build_miniswig()
-        self.build_binreloc()
-        self.build_wstlib()
-        self.build_windstille()
-        self.build_windstille_editor()
-        self.build_windstille_data()
-        self.build_testapps()
+        #     }
 
-    def configure(self):
         # FIXME: None of the options are used, as only self.features
         # makes it across function calls
 
@@ -173,15 +134,17 @@
         Help(opts.GenerateHelpText(self.env))
 
         if 'BUILD' in self.env:
+            print "Build Type: %s" % self.env['BUILD']
             self.env.Append(CXXFLAGS  = preset_cxxflags[self.env['BUILD']],
                             LINKFLAGS = preset_linkflags[self.env['BUILD']])
         else:
+            print "Build Type: release"
             self.env.Append(CXXFLAGS  = preset_cxxflags['release'],
                             LINKFLAGS = preset_linkflags['release'])
 
-        conf = Configure(self.env, custom_tests = { 'Check32bit' : Check32bit,
-                                                    'CheckYacc'  : CheckYacc,
-                                                    'CheckLex'   : CheckLex})
+        conf = Configure(self.env, custom_tests = { 'Check32bit' : scons_tests.Check32bit,
+                                                    'CheckYacc'  : scons_tests.CheckYacc,
+                                                    'CheckLex'   : scons_tests.CheckLex})
 
         if self.env['CXX']:
             print "Using C++ compiler...", self.env['CXX']
@@ -189,12 +152,75 @@
             print "Error: C++ compiler missing"
             Exit(1)
 
+        self.cfg = {}
+        cfg = self.cfg
+
+        if sys.platform == 'darwin':
+            cfg['OpenAL']    = { 'LINKFLAGS' : [ '-framework', 'OpenAL' ] }
+            cfg['OpenGL']    = { 'LINKFLAGS' : [ '-framework', 'OpenGL' ] }
+            cfg['GLEW']      = { 'LIBS' : [ 'GLEW' ] }
+            cfg['SDL']       = { 'LINKFLAGS' : [ '-framework', 'SDL' ] }
+            cfg['SDL_image'] = { 'LINKFLAGS' : [ '-framework', 'SDL_image' ] }
+            cfg['ogg']       = ParseConfig("pkg-config ogg --cflags --libs")
+            cfg['vorbis']    = ParseConfig("pkg-config vorbis --cflags --libs")
+            cfg['boost_signals']    = { 'LIBS' : [ 'boost_signals' ] }
+            cfg['boost_filesystem'] = { 'LIBS' : [ 'boost_filesystem' ] }
+
+        else:
+            cfg['OpenGL']           = { 'LIBS' : [ 'GL', 'GLU' ] }
+            cfg['OpenAL']           = { 'LIBS' : [ 'openal' ] }
+            cfg['GLEW']             = { 'LIBS' : [ 'GLEW' ] }
+            cfg['SDL']              = ParseConfig("sdl-config --cflags --libs")
+            cfg['SDL_image']        = { 'LIBS' : [ 'SDL_image' ] }
+            cfg['ogg']              = ParseConfig("pkg-config ogg --cflags --libs")
+            cfg['vorbis']           = ParseConfig("pkg-config vorbis --cflags --libs")
+            cfg['vorbisfile']       = ParseConfig("pkg-config vorbisfile --cflags --libs")
+
+            # FIXME: Add configure checks for exact boost library name (can be with or without -mt
+            cfg['boost_signals']    = { 'LIBS' : [ 'boost_signals' ] }
+            cfg['boost_filesystem'] = { 'LIBS' : [ 'boost_filesystem' ] }
+
+            cfg['curl']             = ParseConfig("pkg-config --cflags --libs libcurl | sed 's/-I/-isystem/g'")
+            cfg['png']              = ParseConfig("pkg-config --cflags --libs libpng | sed 's/-I/-isystem/g'")
+            cfg['jpeg']             = { 'LIBS' : [ 'jpeg' ] }
+            cfg['gtkmm-2.4']        = ParseConfig("pkg-config --cflags --libs gtkmm-2.4 | sed 's/-I/-isystem/g'")
+            cfg['gtkglextmm-1.2']   = ParseConfig("pkg-config --cflags --libs gtkglextmm-1.2 | sed 's/-I/-isystem/g'")
+            cfg['freetype']         = ParseConfig("freetype-config --libs --cflags | sed 's/-I/-isystem/g'")
+            cfg['binreloc']         = { 'CPPDEFINES' : [ 'HAVE_BINRELOC' ],
+                                        'CPPPATH' : [ 'external/binreloc-2.0/' ],
+                                        'LIBS' : [ File('libbinreloc.a') ] }
+            cfg['squirrel']         = { 'CPPPATH' : [ 'external/SQUIRREL2/include/' ],
+                                        'LIBS' : [ File('libsquirrel.a') ],
+                                        'CPPDEFINES' : [] # empty, but it is needed later on
+                                        }
+
+        cfg['windstille']    = { 'CPPPATH' : [ '.', 'src', 'src/scripting' ] }
+        cfg['test']          = { 'CPPDEFINES' : [ '__TEST__' ],
+                                 'OBJPREFIX'  : "test__" }
+
+        cfg['wst_display']   = { 'LIBS' : [ File('libwst_display.a') ] }
+        cfg['wst_math']      = { 'LIBS' : [ File('libwst_math.a') ] }
+        cfg['wst_navgraph']  = { 'LIBS' : [ File('libwst_navgraph.a') ] }
+        cfg['wst_particles'] = { 'LIBS' : [ File('libwst_particles.a') ] }
+        cfg['wst_sound']     = { 'LIBS' : [ File('libwst_sound.a') ] }
+        cfg['wst_system']    = { 'LIBS' : [ File('libwst_system.a') ] }
+        cfg['wst_util']      = { 'LIBS' : [ File('libwst_util.a') ] }
+
+        if False:
+            print
+            print "Current Configuration:"
+            print "======================"
+            for k, v in self.cfg.items():
+                print "cfg['%s'] = %s" % (k, v)
+            print
+
         if conf.Check32bit() == "64bit":
             # conf.env.Append(CXXFLAGS="-D_SQ64")
-            self.features["64bit"] = 1
+            self.features["64bit"] = True
+            cfg['squirrel']['CPPDEFINES'] += ['_SQ64']
 
         if conf.CheckLib('cwiid'):
-            self.features["cwiid"] = 1
+            self.features["cwiid"] = True
 
         if not conf.CheckLex():
             print "lex or flex not found, aborting."
@@ -204,8 +230,19 @@
             print "yacc or bison not found, aborting."
             Exit(1)
 
-        self.env = conf.Finish()
+        self.env = conf.Finish()       
 
+    def build_all(self):
+        self.build_squirrel()
+        self.build_miniswig()
+        self.build_binreloc()
+        self.build_wstlib()
+        self.build_windstille()
+        self.build_windstille_editor()
+        self.build_windstille_data()
+        self.build_test_apps()
+        self.build_extra_apps()
+
     def build_squirrel(self):
         squirrel_env = Environment()
         squirrel_env.Append(CPPPATH  = ['external/SQUIRREL2/include'],
@@ -218,7 +255,6 @@
                                                        Glob('external/SQUIRREL2/squirrel/*.cpp') +
                                                        Glob('external/SQUIRREL2/sqstdlib/*.cpp'))
 
-
     def build_miniswig(self):
         miniswig_env = Environment()
         miniswig_env.Append(CPPPATH=['.', 'external/miniswig/'],
@@ -242,89 +278,141 @@
                     ['src/scripting/interface.hpp',
                      'src/scripting/game_objects.hpp'])
 
-        env.Depends(env.Command(['src/scripting/wrapper.cpp', 'src/scripting/wrapper.hpp'], 'src/scripting/miniswig.tmp',
+        env.Depends(env.Command(['src/scripting/wrapper.cpp', 'src/scripting/wrapper.hpp'],
+                                'src/scripting/miniswig.tmp',
                                 ["$MINISWIG --input $SOURCE --output-cpp ${TARGETS[0]} --output-hpp ${TARGETS[1]} "+
                                  "--module windstille --select-namespace Scripting"]),
                     miniswig_bin)
 
     def build_binreloc(self):
-        self.binreloc_lib = StaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"], CPPDEFINES=["ENABLE_BINRELOC"])
+        self.binreloc_lib = StaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
+                                          CPPDEFINES=["ENABLE_BINRELOC"])
 
     def build_wstlib(self):
-        wstlib_env    = self.env.Clone()
-        wstlib_env.Append(CPPPATH=['src', 'external/binreloc-2.0/', "src/scripting/"],
-                          CPPDEFINES=["HAVE_BINRELOC"])
-        self.util_lib      = wstlib_env.StaticLibrary('util', Glob('src/lisp/*.cpp') + Glob('src/util/*.cpp'))
-        self.math_lib      = wstlib_env.StaticLibrary('math', Glob('src/math/*.cpp'))
-        self.navgraph_lib  = wstlib_env.StaticLibrary('navgraph', Glob('src/navigation/*.cpp'))
-        self.particles_lib = wstlib_env.StaticLibrary('particles', Glob('src/particles/*.cpp'))
+        if False:
+            wstlib_env    = self.env.Clone()
+            wstlib_env.Append(CPPPATH=['src', 'external/binreloc-2.0/', "src/scripting/"],
+                              CPPDEFINES=["HAVE_BINRELOC"])
+            self.util_lib      = wstlib_env.StaticLibrary('wst_util', Glob('src/lisp/*.cpp') + Glob('src/util/*.cpp'))
+            self.math_lib      = wstlib_env.StaticLibrary('wst_math', Glob('src/math/*.cpp'))
+            self.navgraph_lib  = wstlib_env.StaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'))
+            self.particles_lib = wstlib_env.StaticLibrary('wst_particles', Glob('src/particles/*.cpp'))
+            self.sound_lib     = wstlib_env.StaticLibrary('wst_sound', Glob('src/sound/*.cpp'))
 
-        # libdisplay
-        display_env = wstlib_env.Clone()
-        display_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-        display_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
-        self.display_lib = display_env.StaticLibrary('display', 
-                                                     Glob('src/font/*.cpp') +
-                                                     Glob('src/display/*.cpp') +
-                                                     Glob('src/scenegraph/*.cpp') +
-                                                     Glob('src/sprite2d/*.cpp') +
-                                                     Glob('src/sprite3d/*.cpp'))
+            # libdisplay
+            display_env = wstlib_env.Clone()
+            display_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
+            display_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
+            self.display_lib = display_env.StaticLibrary('wst_display', 
+                                                         Glob('src/font/*.cpp') +
+                                                         Glob('src/display/*.cpp') +
+                                                         Glob('src/scenegraph/*.cpp') +
+                                                         Glob('src/sprite2d/*.cpp') +
+                                                         Glob('src/sprite3d/*.cpp'))
+            self.system_lib = display_env.StaticLibrary('system', Glob('src/system/*.cpp'))
 
+        pkgs = [ 'windstille', 'binreloc' ]
+        BuildStaticLibrary('wst_util',
+                           Glob('src/lisp/*.cpp') +
+                           Glob('src/util/*.cpp'),
+                           pkgs, self.cfg)
+        BuildStaticLibrary('wst_math', Glob('src/math/*.cpp'), pkgs, self.cfg)
+        BuildStaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'), pkgs, self.cfg)
+        BuildStaticLibrary('wst_particles', Glob('src/particles/*.cpp'), pkgs, self.cfg)
+        BuildStaticLibrary('wst_sound', Glob('src/sound/*.cpp'), pkgs, self.cfg)
+        BuildStaticLibrary('wst_display', 
+                           Glob('src/font/*.cpp') +
+                           Glob('src/display/*.cpp') +
+                           Glob('src/scenegraph/*.cpp') +
+                           Glob('src/sprite2d/*.cpp') +
+                           Glob('src/sprite3d/*.cpp'),
+                           pkgs + [ 'freetype', 'SDL' ], self.cfg)
+        BuildStaticLibrary('wst_system', Glob('src/system/*.cpp'), pkgs + [ 'SDL' ], self.cfg)
+
     def build_windstille(self):
-        windstille_env = self.env.Clone()
-        windstille_env.Append(CPPPATH=['src', '.', 'external/SQUIRREL2/include/', 'src/scripting/'],
-                              CPPDEFINES=["HAVE_BINRELOC"],
-                              LIBS=[self.particles_lib, self.navgraph_lib, self.display_lib, 
-                                    self.util_lib, self.math_lib, 
-                                    self.binreloc_lib, self.squirrel_lib, 
-                                    'GL', 'GLU', 'GLEW',
-                                    'physfs', 'SDL_image', 'openal', 'ogg', 'vorbis', 'vorbisfile', 'png',
-                                    # FIXME: Add configure checks for exact boost library name
-                                    'boost_signals-mt', 'boost_filesystem-mt'])
+        if False:
+            windstille_env = self.env.Clone()
+            windstille_env.Append(CPPPATH=['src', '.', 'external/SQUIRREL2/include/', 'src/scripting/'],
+                                  CPPDEFINES=["HAVE_BINRELOC"],
+                                  LIBS=[self.particles_lib, self.navgraph_lib, self.display_lib, 
+                                        self.util_lib, self.math_lib, self.sound_lib,
+                                        self.squirrel_lib,
+                                        'GL', 'GLU', 'GLEW',
+                                        'SDL_image', 'openal', 'ogg', 'vorbis', 'vorbisfile', 'png',
+                                        'boost_signals', 'boost_filesystem'])
 
-        windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-        windstille_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
+            windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
+            windstille_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
 
-        if self.features['64bit']:
-            windstille_env.Append(CPPDEFINES = '_SQ64')
+            if self.features['64bit']:
+                windstille_env.Append(CPPDEFINES = '_SQ64')
 
-        if self.features['cwiid']:
-            windstille_env.Append(CPPDEFINES = 'HAVE_CWIID')
-            windstille_env.Append(LIBS = 'cwiid')
+            if self.features['cwiid']:
+                windstille_env.Append(CPPDEFINES = 'HAVE_CWIID')
+                windstille_env.Append(LIBS = 'cwiid')
 
-        windstille_env.Program('windstille',
-                               Glob('src/app/*.cpp') +
-                               Glob('src/armature/*.cpp') +
-                               Glob('src/collision/*.cpp') +
-                               Glob('src/engine/*.cpp') +
-                               Glob('src/gui/*.cpp') +
-                               Glob('src/hud/*.cpp') +
-                               Glob('src/input/*.cpp') +
-                               Glob('src/objects/*.cpp') +
-                               Glob('src/properties/*.cpp') +
-                               Glob('src/screen/*.cpp') +
-                               Glob('src/scripting/*.cpp') +
-                               Glob('src/sound/*.cpp') +
-                               Glob('src/tile/*.cpp'))
+            windstille_env.Program('windstille',
+                                   Glob('src/app/*.cpp') +
+                                   Glob('src/armature/*.cpp') +
+                                   Glob('src/collision/*.cpp') +
+                                   Glob('src/engine/*.cpp') +
+                                   Glob('src/gui/*.cpp') +
+                                   Glob('src/hud/*.cpp') +
+                                   Glob('src/input/*.cpp') +
+                                   Glob('src/objects/*.cpp') +
+                                   Glob('src/properties/*.cpp') +
+                                   Glob('src/screen/*.cpp') +
+                                   Glob('src/scripting/*.cpp') +
+                                   Glob('src/tile/*.cpp'))
 
+        BuildProgram('windstille',
+                     Glob('src/app/*.cpp') +
+                     Glob('src/armature/*.cpp') +
+                     Glob('src/collision/*.cpp') +
+                     Glob('src/engine/*.cpp') +
+                     Glob('src/gui/*.cpp') +
+                     Glob('src/hud/*.cpp') +
+                     Glob('src/input/*.cpp') +
+                     Glob('src/objects/*.cpp') +
+                     Glob('src/properties/*.cpp') +
+                     Glob('src/screen/*.cpp') +
+                     Glob('src/scripting/*.cpp') +
+                     Glob('src/tile/*.cpp'),
+                     [ 'windstille',
+                       'wst_particles', 'wst_navgraph', 'wst_display', 'wst_util', 'wst_math', 'wst_sound',
+                       'OpenGL', 'GLEW',
+                       'freetype',
+                       'SDL', 'SDL_image',
+                       'OpenAL', 'ogg', 'vorbis', 'vorbisfile', 
+                       'squirrel', 'png', 'binreloc',
+                       'boost_signals', 'boost_filesystem' ],
+                     self.cfg)
+
     def build_windstille_editor(self):
-        editor_env = self.env.Clone()
-        editor_env.Append(CPPPATH=['src'],
-                          CPPDEFINES=["HAVE_BINRELOC"],
-                          LIBS = [self.particles_lib, self.navgraph_lib, self.display_lib,
-                                  self.util_lib, self.math_lib, self.binreloc_lib,
-                                  'GL', 'GLEW', 'SDL_image', 'physfs', 'boost_filesystem-mt'])
+        if False:
+            editor_env = self.env.Clone()
+            editor_env.Append(CPPPATH=['src'],
+                              CPPDEFINES=["HAVE_BINRELOC"],
+                              LIBS = [self.particles_lib, self.navgraph_lib, self.display_lib,
+                                      self.util_lib, self.math_lib, self.binreloc_lib,
+                                      'GL', 'GLEW', 'SDL_image', 'boost_filesystem'])
 
-        editor_env.ParseConfig('Magick++-config --libs --cppflags | sed "s/-I/-isystem/g"')
-        editor_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-        editor_env.ParseConfig('pkg-config --cflags --libs libcurl | sed "s/-I/-isystem/g"')
-        editor_env.ParseConfig('pkg-config --cflags --libs libpng | sed "s/-I/-isystem/g"')
+            # editor_env.ParseConfig('Magick++-config --libs --cppflags | sed "s/-I/-isystem/g"')
+            editor_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
+            editor_env.ParseConfig('pkg-config --cflags --libs libcurl | sed "s/-I/-isystem/g"')
+            editor_env.ParseConfig('pkg-config --cflags --libs libpng | sed "s/-I/-isystem/g"')
 
-        # Turn -I options into -isystem, so we don't get warnings from external libraries
-        editor_env.ParseConfig('pkg-config --cflags --libs gtkmm-2.4 | sed "s/-I/-isystem/g"')
-        editor_env.ParseConfig('pkg-config --cflags --libs gtkglextmm-1.2 | sed "s/-I/-isystem/g"')
+            # Turn -I options into -isystem, so we don't get warnings from external libraries
+            editor_env.ParseConfig('pkg-config --cflags --libs gtkmm-2.4 | sed "s/-I/-isystem/g"')
+            editor_env.ParseConfig('pkg-config --cflags --libs gtkglextmm-1.2 | sed "s/-I/-isystem/g"')
 
-        editor_env.Program('windstille-editor', Glob('src/editor/*.cpp'))
+        pkgs = [ 'SDL', 'SDL_image',
+                 'boost_filesystem',
+                 'gtkglextmm-1.2' , 'gtkmm-2.4', 'SDL', 'curl', 'png', 'binreloc', 'OpenGL', 'GLEW',
+                 'windstille',
+                 'wst_particles', 'wst_navgraph', 'wst_display', 'wst_util', 'wst_math', 'wst_sound',
+                 'binreloc', 'jpeg' ]
+        BuildProgram('windstille-editor', Glob('src/editor/*.cpp'), pkgs, self.cfg)
 
         # FIXME: temporary dirty hack
         # test_editor_env = editor_env.Clone(OBJPREFIX="test_")
@@ -332,30 +420,51 @@
         # test_editor_env.Program('test_animation_widget',
         #                        [f for f in Glob('src/editor/*.cpp') if f.get_path() != "src/editor/main.cpp"])
 
-    def build_testapps(self):
-        env = self.env.Clone()
-        env.Append(OBJPREFIX="test__",
-                   CPPPATH=['src'],
-                   CPPDEFINES=["__TEST__"])
-        env.Program("test_babyxml", ["src/util/baby_xml.cpp"])
-        env.Program("test_response_curve", ["src/util/response_curve.cpp"])
-        env.Program("test_random", ["src/math/random.cpp"])
-        env.Program("test_pathname", ["src/util/pathname.cpp"], LIBS=['boost_filesystem-mt'])
-        env.Program("test_directory", ["src/util/directory.cpp"], LIBS=['boost_filesystem-mt', self.util_lib])
-        env.Program("test_easing", ["src/math/easing.cpp"])
+    def build_extra_apps(self):
+        if False:
+            env = self.env.Clone()
+            env.Append(CPPPATH = ["src/", "extra/"])
+            env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
+            env.Append(LIBS = ["SDL_image", "GL", "GLEW", "png", "boost_filesystem",
+                               self.display_lib, self.util_lib, self.math_lib, self.sound_lib, self.util_lib, self.system_lib,
+                               'openal', 'ogg', 'vorbis', 'vorbisfile'])
 
-        # FIXME: Little dirty, need to clean up the testcase stuff
-        sdl_env = env.Clone()
-        sdl_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-                        
-        sdl_env.Program("test_scissor_drawable",
-                        ["test/scissor_drawable/scissor_drawable.cpp"],
-                        CPPPATH=sdl_env["CPPPATH"],
-                        CPPDEFINES=sdl_env["CPPDEFINES"],
-                        CXXFLAGS=sdl_env["CXXFLAGS"] + ['-g3', "-O0"],
-                        LIBS=[self.display_lib, self.math_lib, self.util_lib, self.binreloc_lib,
-                              'png', 'GL', 'GLEW', 'SDL_image', 'boost_filesystem-mt'] + sdl_env["LIBS"])
+        pkgs = [ 'SDL', 'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
+                 'windstille',
+                 'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
+                 'OpenAL', 'ogg', 'vorbis', 'vorbisfile']
 
+        BuildProgram("slideshow", Glob("extra/slideshow/*.cpp") + Glob("extra/slideshow/plugins/*.cpp"),
+                     pkgs + [ { 'CPPPATH' : 'extra/' } ], self.cfg)
+        BuildProgram("shadertest", Glob("extra/shadertest/*.cpp"), pkgs, self.cfg)
+        BuildProgram("lensflare", Glob("extra/lensflare/*.cpp"), pkgs, self.cfg)
+        BuildProgram("memleak", Glob("extra/memleak/*.cpp"), pkgs, self.cfg)
+
+        for filename in Glob("extra/*.cpp", strings=True):
+            BuildProgram(filename[:-4], filename, pkgs, self.cfg)
+
+    def build_test_apps(self):
+        pkgs = [ 'test', 'windstille' ]
+        
+        BuildProgram("test_babyxml", ["src/util/baby_xml.cpp"], pkgs, self.cfg)
+        BuildProgram("test_response_curve", ["src/util/response_curve.cpp"], pkgs, self.cfg)
+        BuildProgram("test_random", ["src/math/random.cpp"], pkgs, self.cfg)
+        BuildProgram("test_pathname", ["src/util/pathname.cpp"], pkgs + [ 'boost_filesystem' ], self.cfg)
+        BuildProgram("test_directory", ["src/util/directory.cpp"], pkgs + [ 'boost_filesystem', 'wst_util' ], self.cfg)
+        BuildProgram("test_easing", ["src/math/easing.cpp"], pkgs, self.cfg)
+
+        BuildProgram("test_scissor_drawable", ["test/scissor_drawable/scissor_drawable.cpp"],
+                     pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
+                              'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
+                              'binreloc' ],
+                     self.cfg)
+
+        BuildProgram("test_shader_drawable", [ "test/shader_drawable/shader_drawable.cpp" ],
+                     pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
+                              'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
+                              'binreloc' ],
+                     self.cfg)
+                
     def build_windstille_data(self):
         data_env = self.env.Clone()
 
@@ -377,9 +486,17 @@
             for filename in Glob(pattern):
                 File(filename)
 
+Alias('configure')
+
 project = Project()
-project.build_all()
 
+if 'configure' in COMMAND_LINE_TARGETS or \
+   not (File('config.py').exists() and not GetOption('clean')):
+    project.configure()
+    project.build_all()
+else:
+    project.build_all()
+
 print "Time reading SConscript: %.2fsec" % (time.time() - start_time)
 
 # EOF #

Added: trunk/windstille/scons_tests.py
===================================================================
--- trunk/windstille/scons_tests.py	                        (rev 0)
+++ trunk/windstille/scons_tests.py	2010-10-23 20:49:14 UTC (rev 3379)
@@ -0,0 +1,90 @@
+##  Windstille - A Sci-Fi Action-Adventure Game
+##  Copyright (C) 2000,2005 Ingo Ruhnke <grumbel at gmx.de>
+##
+##  This program is free software: you can redistribute it and/or modify
+##  it under the terms of the GNU General Public License as published by
+##  the Free Software Foundation, either version 3 of the License, or
+##  (at your option) any later version.
+##  
+##  This program is distributed in the hope that it will be useful,
+##  but WITHOUT ANY WARRANTY; without even the implied warranty of
+##  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+##  GNU General Public License for more details.
+##  
+##  You should have received a copy of the GNU General Public License
+##  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+# YACC
+yacc_test_text = """
+%{
+#include <stdio.h>
+
+/* MSVC++ needs this before it can swallow Bison output */
+#ifdef _MSC_VER
+# define __STDC__
+#endif
+%}
+%token MSG
+%start ROOT
+%%
+ROOT:
+    MSG { printf("HELLO"); } 
+    ;
+%%
+"""
+
+def CheckYacc(context):
+    context.Message("Checking for Yacc ('%s')... " % context.env.get('YACC'))
+    is_ok = context.TryCompile(yacc_test_text,".y")
+    context.Result(is_ok)
+    return is_ok
+
+# LEX
+lex_test_text = """
+%{
+#include <stdio.h>
+%}
+DIGIT	[0-9]
+ID		[a-z][a-z0-9]*
+%%
+{DIGIT}+	{
+		printf("A digit: %s\\n",yytext);
+	}
+
+[ \\t\\n]+    /* ignore */
+
+.			{
+		printf("Unrecognized guff");
+	}
+%%
+main(){
+	yylex();
+}
+"""
+
+def CheckLex(context):
+    context.Message("Checking for Lex ('%s')... " % context.env.get('LEX'))
+    is_ok = context.TryCompile(lex_test_text,".l")
+    context.Result(is_ok)
+    return is_ok
+
+
+def Check32bit(context):
+    check32bit_test_source_file = """
+#include <stdio.h>
+int main()
+{
+   printf("%dbit", sizeof(void*)*8);
+   return 0;
+}
+    """
+    context.Message('Checking for bits... ')
+    (suc, output) = context.TryRun(check32bit_test_source_file, '.cpp')
+    if suc:
+        context.Result(output)
+    else:
+        context.Result("test error")
+    return output
+
+
+# EOF #



From grumbel at mail.berlios.de  Sat Oct 23 22:50:45 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 22:50:45 +0200
Subject: [Windstille-commit] r3380 - trunk/windstille
Message-ID: <20101023205045.C14434802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 22:50:45 +0200 (Sat, 23 Oct 2010)
New Revision: 3380

Modified:
   trunk/windstille/SConscript
Log:
Started rewriting the SConstruct a bit to have a more flexible structure

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-23 20:49:14 UTC (rev 3379)
+++ trunk/windstille/SConscript	2010-10-23 20:50:45 UTC (rev 3380)
@@ -55,7 +55,6 @@
     'debug':   [],
     'development': []
     }
-
 
 def MakeEnvironment(packages, cfg):
     env = Environment(ENV=os.environ)



From grumbel at mail.berlios.de  Sat Oct 23 23:38:11 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 23:38:11 +0200
Subject: [Windstille-commit] r3381 - trunk/windstille/extra/slideshow
Message-ID: <20101023213812.152E04802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 23:38:11 +0200 (Sat, 23 Oct 2010)
New Revision: 3381

Modified:
   trunk/windstille/extra/slideshow/slide_object.cpp
   trunk/windstille/extra/slideshow/slide_object.hpp
   trunk/windstille/extra/slideshow/slideshow.cpp
Log:
Replaced Surface with SurfacePtr

Modified: trunk/windstille/extra/slideshow/slide_object.cpp
===================================================================
--- trunk/windstille/extra/slideshow/slide_object.cpp	2010-10-23 20:50:45 UTC (rev 3380)
+++ trunk/windstille/extra/slideshow/slide_object.cpp	2010-10-23 21:38:11 UTC (rev 3381)
@@ -52,7 +52,7 @@
 {
   if (!m_surface)
   {
-    m_surface = Surface(m_filename);
+    m_surface = Surface::create(m_filename);
   }
 
   SlidePathNode node = m_path.get(relative_time);
@@ -74,14 +74,14 @@
   float scale = node.zoom;
 
   // recalc pos so that we are draw the image centered
-  pos.x -= m_surface.get_width() /2.0f * scale;
-  pos.y -= m_surface.get_height()/2.0f * scale;
+  pos.x -= m_surface->get_width() /2.0f * scale;
+  pos.y -= m_surface->get_height()/2.0f * scale;
 
-  m_surface.draw(SurfaceDrawingParameters()
-                 .set_color(color)
-                 .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                 .set_pos(pos)
-                 .set_scale(scale));
+  m_surface->draw(SurfaceDrawingParameters()
+                  .set_color(color)
+                  .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                  .set_pos(pos)
+                  .set_scale(scale));
 }
 
 float
@@ -131,7 +131,7 @@
 {
   if (m_surface)
   {
-    m_surface = Surface();
+    m_surface.reset();
     std::cout << "Unloading: " << m_filename.get_sys_path() << std::endl;
     return true;
   }

Modified: trunk/windstille/extra/slideshow/slide_object.hpp
===================================================================
--- trunk/windstille/extra/slideshow/slide_object.hpp	2010-10-23 20:50:45 UTC (rev 3380)
+++ trunk/windstille/extra/slideshow/slide_object.hpp	2010-10-23 21:38:11 UTC (rev 3381)
@@ -30,7 +30,7 @@
 private:
   Pathname m_filename;
   Sizef m_size;
-  Surface m_surface;
+  SurfacePtr m_surface;
   float m_begin;
   SlidePath m_path;
 

Modified: trunk/windstille/extra/slideshow/slideshow.cpp
===================================================================
--- trunk/windstille/extra/slideshow/slideshow.cpp	2010-10-23 20:50:45 UTC (rev 3380)
+++ trunk/windstille/extra/slideshow/slideshow.cpp	2010-10-23 21:38:11 UTC (rev 3381)
@@ -180,8 +180,8 @@
     slide_show.load(*i, m_aspect_ratio);
   }
  
-  Framebuffer framebuffer_multisample(GL_TEXTURE_2D, m_window_size.width, m_window_size.height, 8);
-  Framebuffer framebuffer(GL_TEXTURE_2D, m_window_size.width, m_window_size.height);
+  FramebufferPtr framebuffer_multisample = Framebuffer::create(m_window_size.width, m_window_size.height, 8);
+  FramebufferPtr framebuffer = Framebuffer::create(m_window_size.width, m_window_size.height);
 
   bool loop = true;
   bool pause = false;
@@ -328,11 +328,11 @@
       //SDL_GL_SwapBuffers();
       Display::pop_framebuffer();
 
-      glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT, framebuffer_multisample.get_handle());
-      glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT, framebuffer.get_handle());
+      glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT, framebuffer_multisample->get_handle());
+      glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT, framebuffer->get_handle());
 
-      glBlitFramebufferEXT(0, 0, framebuffer_multisample.get_width(), framebuffer_multisample.get_height(), 
-                           0, 0, framebuffer.get_width(), framebuffer.get_height(),
+      glBlitFramebufferEXT(0, 0, framebuffer_multisample->get_width(), framebuffer_multisample->get_height(), 
+                           0, 0, framebuffer->get_width(), framebuffer->get_height(),
                            GL_COLOR_BUFFER_BIT, GL_LINEAR /*NEAREST*/);
 
       glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT, 0);



From grumbel at mail.berlios.de  Sat Oct 23 23:39:31 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 23:39:31 +0200
Subject: [Windstille-commit] r3382 - trunk/windstille/extra
Message-ID: <20101023213931.E09884802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 23:39:31 +0200 (Sat, 23 Oct 2010)
New Revision: 3382

Removed:
   trunk/windstille/extra/lenseflair/
Log:
Removed obsolete directory



From grumbel at mail.berlios.de  Sat Oct 23 23:40:55 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 23:40:55 +0200
Subject: [Windstille-commit] r3383 - trunk/windstille/extra/lensflare
Message-ID: <20101023214055.41DE54802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 23:40:55 +0200 (Sat, 23 Oct 2010)
New Revision: 3383

Modified:
   trunk/windstille/extra/lensflare/lensflare.cpp
Log:
Lensflare scales properly when window size changes

Modified: trunk/windstille/extra/lensflare/lensflare.cpp
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-23 21:39:31 UTC (rev 3382)
+++ trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-23 21:40:55 UTC (rev 3383)
@@ -18,6 +18,7 @@
 
 #include "lensflare.hpp"
 
+#include "display/assert_gl.hpp"
 #include "display/opengl_state.hpp"
 #include "display/opengl_window.hpp"
 #include "display/shader_program.hpp"
@@ -29,7 +30,7 @@
 
 Lensflare::Lensflare() :
   m_aspect_ratio(1280, 800),
-  m_window_size(1280, 800),
+  m_window_size(640, 400),
   m_fullscreen(false),
   m_loop(false),
   
@@ -61,7 +62,7 @@
   glEnable(GL_DEPTH_TEST); 
   glDepthMask(GL_TRUE);
   glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
-  glAlphaFunc ( GL_GREATER, 0.1f );
+  glAlphaFunc ( GL_GREATER, 0.5f );
   glEnable(GL_ALPHA_TEST);
     
   m_cover->draw(SurfaceDrawingParameters()
@@ -73,25 +74,53 @@
   
   if (true)
   {
+
+    GLint samples = 0;
+    GLint total_samples = 0;
+
     GLuint query_id;
+    GLuint total_query_id;
     glGenQueries(1, &query_id);
+    glGenQueries(1, &total_query_id);
 
+    assert_gl("Broken");
+
+    // disable all buffer writing
+    glDepthMask(GL_FALSE);
+    glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);
+
+    // query the number of visible samples
     glBeginQuery(GL_SAMPLES_PASSED, query_id);
     m_lightquery->draw(SurfaceDrawingParameters()
-                       .set_color(Color(1,0,0,0)) // query without drawing 
-                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
                        .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
                                          m_mouse.y - m_lightquery->get_height()/2)));
-    GLint samples = 0;
     glEndQuery(GL_SAMPLES_PASSED);
 
     glGetQueryObjectiv(query_id, GL_QUERY_RESULT, &samples);
+
+    glClear(GL_DEPTH_BUFFER_BIT);
+
+    // reference query, to get the total amount of samples
+    glDisable(GL_DEPTH_TEST);
+    glBeginQuery(GL_SAMPLES_PASSED, total_query_id);
+    m_lightquery->draw(SurfaceDrawingParameters()
+                       .set_pos(Vector2f(m_mouse.x - m_lightquery->get_width()/2,
+                                         m_mouse.y - m_lightquery->get_height()/2)));
+    glEndQuery(GL_SAMPLES_PASSED);
+    glEnable(GL_DEPTH_TEST);
+
+    glGetQueryObjectiv(total_query_id, GL_QUERY_RESULT, &total_samples);
+
+    glDepthMask(GL_TRUE);
+    glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);
+
   
-    std::cout << "samples: " << samples << std::endl;
+    std::cout << "samples: " << samples << " -/- " << total_samples << std::endl;
 
     glDeleteQueries(1, &query_id);
+    glDeleteQueries(1, &total_query_id);
 
-    float visibility = static_cast<float>(samples) / 16384.0f;
+    float visibility = static_cast<float>(samples) / static_cast<float>(total_samples);
     factor *= visibility;
 
     glDepthMask(GL_FALSE);
@@ -157,8 +186,8 @@
         break;
 
       case SDL_MOUSEMOTION:
-        m_mouse.x = event.motion.x;
-        m_mouse.y = event.motion.y;
+        m_mouse.x = static_cast<float>(m_aspect_ratio.width  * event.motion.x / m_window_size.width);
+        m_mouse.y = static_cast<float>(m_aspect_ratio.height * event.motion.y / m_window_size.height);
         break;
 
       case SDL_KEYDOWN:



From grumbel at mail.berlios.de  Sat Oct 23 23:45:54 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 23:45:54 +0200
Subject: [Windstille-commit] r3384 - trunk/windstille
Message-ID: <20101023214554.2F6BE4802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 23:45:53 +0200 (Sat, 23 Oct 2010)
New Revision: 3384

Modified:
   trunk/windstille/SConscript
Log:
Removed obsolete cruft

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-23 21:40:55 UTC (rev 3383)
+++ trunk/windstille/SConscript	2010-10-23 21:45:53 UTC (rev 3384)
@@ -19,42 +19,12 @@
 import os
 import sys
 import scons_tests
+from scons_enhancements import *
 from pprint import pprint
 
 start_time = time.time()
 
-# CacheDir('cache')
-
-preset_cxxflags = {
-    'release':     [ "-O3", "-s"  ],
-    'profile':     [ "-O2", "-g3", "-pg" ],
-    'debug':       [ "-O0", "-g3" ],
-    'development': [ "-O2", "-g3",
-                     "-ansi",
-                     "-pedantic",
-                     "-Wall",
-                     "-Wextra",
-                     "-Wnon-virtual-dtor",
-                     "-Weffc++",
-                     "-Wconversion",
-                     # "-Wold-style-cast",
-                     "-Werror",
-                     "-Wshadow",
-                     "-Wcast-qual",
-                     "-Winit-self", # only works with >= -O1
-                     "-Wno-unused-parameter",
-                     # "-Winline",
-                     # "-Wfloat-equal",
-                     # "-Wunreachable-code",
-                     ]
-    }
-
-preset_linkflags = {
-    'release': [],
-    'profile': [ "-pg" ],
-    'debug':   [],
-    'development': []
-    }
+CacheDir('cache')
 
 def MakeEnvironment(packages, cfg):
     env = Environment(ENV=os.environ)
@@ -103,7 +73,7 @@
             "cwiid" : False
             }
 
-        self.env = Environment(ENV=os.environ)
+        self.env = Environment()
 
     def configure(self):
         # windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
@@ -132,15 +102,6 @@
         # opts.Save('options.cache', self.env)
         Help(opts.GenerateHelpText(self.env))
 
-        if 'BUILD' in self.env:
-            print "Build Type: %s" % self.env['BUILD']
-            self.env.Append(CXXFLAGS  = preset_cxxflags[self.env['BUILD']],
-                            LINKFLAGS = preset_linkflags[self.env['BUILD']])
-        else:
-            print "Build Type: release"
-            self.env.Append(CXXFLAGS  = preset_cxxflags['release'],
-                            LINKFLAGS = preset_linkflags['release'])
-
         conf = Configure(self.env, custom_tests = { 'Check32bit' : scons_tests.Check32bit,
                                                     'CheckYacc'  : scons_tests.CheckYacc,
                                                     'CheckLex'   : scons_tests.CheckLex})
@@ -154,6 +115,37 @@
         self.cfg = {}
         cfg = self.cfg
 
+        # preset compiler flags
+        cfg['release'] = { 'CCFLAGS' : [ "-O3", "-s" ] }
+        cfg['profile'] = { 'CCFLAGS' : [ "-O2", "-g3", "-pg" ],
+                           'LINKFLAGS' : [ "-pg" ] }
+        cfg['debug']   = { 'CCFLAGS' : [ "-O0", "-g3" ] }
+        cfg['development'] = { 'CCFLAGS' : [ "-O2", "-g3",
+                                             "-ansi",
+                                             "-pedantic",
+                                             "-Wall",
+                                             "-Wextra",
+                                             "-Wnon-virtual-dtor",
+                                             "-Weffc++",
+                                             "-Wconversion",
+                                             # "-Wold-style-cast",
+                                             "-Werror",
+                                             "-Wshadow",
+                                             "-Wcast-qual",
+                                             "-Winit-self", # only works with >= -O1
+                                             "-Wno-unused-parameter",
+                                             # "-Winline",
+                                             # "-Wfloat-equal",
+                                             # "-Wunreachable-code",
+                                             ] }
+
+        if 'BUILD' in self.env:
+            print "Build Type: %s" % self.env['BUILD']
+            cfg['default'] = cfg[self.env['BUILD']]
+        else:
+            print "Build Type: release"
+            cfg['default'] = cfg['release']
+
         if sys.platform == 'darwin':
             cfg['OpenAL']    = { 'LINKFLAGS' : [ '-framework', 'OpenAL' ] }
             cfg['OpenGL']    = { 'LINKFLAGS' : [ '-framework', 'OpenGL' ] }
@@ -243,16 +235,16 @@
         self.build_extra_apps()
 
     def build_squirrel(self):
-        squirrel_env = Environment()
-        squirrel_env.Append(CPPPATH  = ['external/SQUIRREL2/include'],
-                            CXXFLAGS = ["-fno-rtti", "-g", "-DDEBUG"])
+        pkg = { 'CPPPATH'  : [ 'external/SQUIRREL2/include' ],
+                'CXXFLAGS' : [ "-fno-rtti", "-g", "-DDEBUG" ] }
 
         if self.features['64bit']:
-            squirrel_env.Append(CPPDEFINES = '_SQ64')
+            pkg['CPPDEFINES'] = ['_SQ64']
 
-        self.squirrel_lib = squirrel_env.StaticLibrary('squirrel',
-                                                       Glob('external/SQUIRREL2/squirrel/*.cpp') +
-                                                       Glob('external/SQUIRREL2/sqstdlib/*.cpp'))
+        BuildStaticLibrary('squirrel',
+                           Glob('external/SQUIRREL2/squirrel/*.cpp') +
+                           Glob('external/SQUIRREL2/sqstdlib/*.cpp'),
+                           [pkg], self.cfg)
 
     def build_miniswig(self):
         miniswig_env = Environment()
@@ -284,33 +276,11 @@
                     miniswig_bin)
 
     def build_binreloc(self):
-        self.binreloc_lib = StaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
-                                          CPPDEFINES=["ENABLE_BINRELOC"])
+        BuildStaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
+                           [ { 'CPPDEFINES' : ["ENABLE_BINRELOC"] } ], self.cfg)
 
     def build_wstlib(self):
-        if False:
-            wstlib_env    = self.env.Clone()
-            wstlib_env.Append(CPPPATH=['src', 'external/binreloc-2.0/', "src/scripting/"],
-                              CPPDEFINES=["HAVE_BINRELOC"])
-            self.util_lib      = wstlib_env.StaticLibrary('wst_util', Glob('src/lisp/*.cpp') + Glob('src/util/*.cpp'))
-            self.math_lib      = wstlib_env.StaticLibrary('wst_math', Glob('src/math/*.cpp'))
-            self.navgraph_lib  = wstlib_env.StaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'))
-            self.particles_lib = wstlib_env.StaticLibrary('wst_particles', Glob('src/particles/*.cpp'))
-            self.sound_lib     = wstlib_env.StaticLibrary('wst_sound', Glob('src/sound/*.cpp'))
-
-            # libdisplay
-            display_env = wstlib_env.Clone()
-            display_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-            display_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
-            self.display_lib = display_env.StaticLibrary('wst_display', 
-                                                         Glob('src/font/*.cpp') +
-                                                         Glob('src/display/*.cpp') +
-                                                         Glob('src/scenegraph/*.cpp') +
-                                                         Glob('src/sprite2d/*.cpp') +
-                                                         Glob('src/sprite3d/*.cpp'))
-            self.system_lib = display_env.StaticLibrary('system', Glob('src/system/*.cpp'))
-
-        pkgs = [ 'windstille', 'binreloc' ]
+        pkgs = [ 'default', 'windstille', 'binreloc' ]
         BuildStaticLibrary('wst_util',
                            Glob('src/lisp/*.cpp') +
                            Glob('src/util/*.cpp'),
@@ -329,41 +299,6 @@
         BuildStaticLibrary('wst_system', Glob('src/system/*.cpp'), pkgs + [ 'SDL' ], self.cfg)
 
     def build_windstille(self):
-        if False:
-            windstille_env = self.env.Clone()
-            windstille_env.Append(CPPPATH=['src', '.', 'external/SQUIRREL2/include/', 'src/scripting/'],
-                                  CPPDEFINES=["HAVE_BINRELOC"],
-                                  LIBS=[self.particles_lib, self.navgraph_lib, self.display_lib, 
-                                        self.util_lib, self.math_lib, self.sound_lib,
-                                        self.squirrel_lib,
-                                        'GL', 'GLU', 'GLEW',
-                                        'SDL_image', 'openal', 'ogg', 'vorbis', 'vorbisfile', 'png',
-                                        'boost_signals', 'boost_filesystem'])
-
-            windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-            windstille_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
-
-            if self.features['64bit']:
-                windstille_env.Append(CPPDEFINES = '_SQ64')
-
-            if self.features['cwiid']:
-                windstille_env.Append(CPPDEFINES = 'HAVE_CWIID')
-                windstille_env.Append(LIBS = 'cwiid')
-
-            windstille_env.Program('windstille',
-                                   Glob('src/app/*.cpp') +
-                                   Glob('src/armature/*.cpp') +
-                                   Glob('src/collision/*.cpp') +
-                                   Glob('src/engine/*.cpp') +
-                                   Glob('src/gui/*.cpp') +
-                                   Glob('src/hud/*.cpp') +
-                                   Glob('src/input/*.cpp') +
-                                   Glob('src/objects/*.cpp') +
-                                   Glob('src/properties/*.cpp') +
-                                   Glob('src/screen/*.cpp') +
-                                   Glob('src/scripting/*.cpp') +
-                                   Glob('src/tile/*.cpp'))
-
         BuildProgram('windstille',
                      Glob('src/app/*.cpp') +
                      Glob('src/armature/*.cpp') +
@@ -377,7 +312,7 @@
                      Glob('src/screen/*.cpp') +
                      Glob('src/scripting/*.cpp') +
                      Glob('src/tile/*.cpp'),
-                     [ 'windstille',
+                     [ 'default', 'windstille',
                        'wst_particles', 'wst_navgraph', 'wst_display', 'wst_util', 'wst_math', 'wst_sound',
                        'OpenGL', 'GLEW',
                        'freetype',
@@ -388,28 +323,12 @@
                      self.cfg)
 
     def build_windstille_editor(self):
-        if False:
-            editor_env = self.env.Clone()
-            editor_env.Append(CPPPATH=['src'],
-                              CPPDEFINES=["HAVE_BINRELOC"],
-                              LIBS = [self.particles_lib, self.navgraph_lib, self.display_lib,
-                                      self.util_lib, self.math_lib, self.binreloc_lib,
-                                      'GL', 'GLEW', 'SDL_image', 'boost_filesystem'])
-
-            # editor_env.ParseConfig('Magick++-config --libs --cppflags | sed "s/-I/-isystem/g"')
-            editor_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-            editor_env.ParseConfig('pkg-config --cflags --libs libcurl | sed "s/-I/-isystem/g"')
-            editor_env.ParseConfig('pkg-config --cflags --libs libpng | sed "s/-I/-isystem/g"')
-
-            # Turn -I options into -isystem, so we don't get warnings from external libraries
-            editor_env.ParseConfig('pkg-config --cflags --libs gtkmm-2.4 | sed "s/-I/-isystem/g"')
-            editor_env.ParseConfig('pkg-config --cflags --libs gtkglextmm-1.2 | sed "s/-I/-isystem/g"')
-
-        pkgs = [ 'SDL', 'SDL_image',
-                 'boost_filesystem',
-                 'gtkglextmm-1.2' , 'gtkmm-2.4', 'SDL', 'curl', 'png', 'binreloc', 'OpenGL', 'GLEW',
+        pkgs = [ 'default',
                  'windstille',
                  'wst_particles', 'wst_navgraph', 'wst_display', 'wst_util', 'wst_math', 'wst_sound',
+                 'SDL', 'SDL_image',
+                 'boost_filesystem',
+                 'gtkglextmm-1.2' , 'gtkmm-2.4', 'SDL', 'curl', 'png', 'binreloc', 'OpenGL', 'GLEW',
                  'binreloc', 'jpeg' ]
         BuildProgram('windstille-editor', Glob('src/editor/*.cpp'), pkgs, self.cfg)
 
@@ -420,17 +339,10 @@
         #                        [f for f in Glob('src/editor/*.cpp') if f.get_path() != "src/editor/main.cpp"])
 
     def build_extra_apps(self):
-        if False:
-            env = self.env.Clone()
-            env.Append(CPPPATH = ["src/", "extra/"])
-            env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-            env.Append(LIBS = ["SDL_image", "GL", "GLEW", "png", "boost_filesystem",
-                               self.display_lib, self.util_lib, self.math_lib, self.sound_lib, self.util_lib, self.system_lib,
-                               'openal', 'ogg', 'vorbis', 'vorbisfile'])
-
-        pkgs = [ 'SDL', 'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
+        pkgs = [ 'default',
                  'windstille',
                  'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
+                 'SDL', 'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
                  'OpenAL', 'ogg', 'vorbis', 'vorbisfile']
 
         BuildProgram("slideshow", Glob("extra/slideshow/*.cpp") + Glob("extra/slideshow/plugins/*.cpp"),



From grumbel at mail.berlios.de  Sat Oct 23 23:48:36 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sat, 23 Oct 2010 23:48:36 +0200
Subject: [Windstille-commit] r3385 - trunk/windstille
Message-ID: <20101023214837.1A3174802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-23 23:48:36 +0200 (Sat, 23 Oct 2010)
New Revision: 3385

Added:
   trunk/windstille/scons_enhancements.py
Log:
Added scons_enhancements.py

Added: trunk/windstille/scons_enhancements.py
===================================================================
--- trunk/windstille/scons_enhancements.py	                        (rev 0)
+++ trunk/windstille/scons_enhancements.py	2010-10-23 21:48:36 UTC (rev 3385)
@@ -0,0 +1 @@
+# EOF #



From grumbel at mail.berlios.de  Sun Oct 24 00:02:34 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 00:02:34 +0200
Subject: [Windstille-commit] r3386 - trunk/windstille/extra
Message-ID: <20101023220234.EB0C04802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 00:02:34 +0200 (Sun, 24 Oct 2010)
New Revision: 3386

Modified:
   trunk/windstille/extra/image_blur.cpp
   trunk/windstille/extra/soundapp.cpp
Log:
Random stuff

Modified: trunk/windstille/extra/image_blur.cpp
===================================================================
--- trunk/windstille/extra/image_blur.cpp	2010-10-23 21:48:36 UTC (rev 3385)
+++ trunk/windstille/extra/image_blur.cpp	2010-10-23 22:02:34 UTC (rev 3386)
@@ -21,7 +21,9 @@
 #include <stdexcept>
 
 #include "display/opengl_window.hpp"
+#include "display/framebuffer.hpp"
 #include "display/surface.hpp"
+#include "display/display.hpp"
 #include "display/surface_manager.hpp"
 #include "display/surface_drawing_parameters.hpp"
 #include "math/size.hpp"
@@ -49,18 +51,21 @@
     SDL_EnableUNICODE(1);
   }
 
-  Size window_size(1024, 768);
-  OpenGLWindow window(window_size, window_size);
+  Size window_size(1024, 576);
+  OpenGLWindow window("Image Blur", window_size, window_size);
 
   SDL_ShowCursor(SDL_DISABLE);
 
   SurfaceManager surface_manager;
-  Surface surface(Pathname(argv[1], Pathname::kSysPath));
 
-  Surface surface_2(Pathname(argv[2], Pathname::kSysPath));
+  FramebufferPtr framebuffer = Framebuffer::create_hdr(window_size.width, window_size.height);
 
+  SurfacePtr surface   = Surface::create(Pathname(argv[1], Pathname::kSysPath));
+  SurfacePtr surface_2 = Surface::create(Pathname(argv[2], Pathname::kSysPath));
+
   float ray_length = 3.0f;
   Vector2f pos;
+  Vector2f last_pos;
   int t = 0;
   std::vector<Vector2f> buffer(16);
   std::vector<Vector2f>::size_type buffer_pos = 0;
@@ -68,6 +73,7 @@
   while(!quit)
   {
     SDL_Event event;
+    last_pos = pos;
     while(SDL_PollEvent(&event))
     {
       switch(event.type)
@@ -99,8 +105,9 @@
           
         case SDL_MOUSEMOTION:
           //std::cout << event.motion.x << ", " << event.motion.y << std::endl;
+          last_pos = pos;
           pos = Vector2f(1024.0f - static_cast<float>(event.motion.x),
-                         768.0f - static_cast<float>(event.motion.y));
+                         576.0f - static_cast<float>(event.motion.y));
           break;
 
         default:
@@ -109,37 +116,55 @@
     }
 
     t += 30;
-    ray_length = sin(t/1000.0f);
+    //ray_length = sin(t/1000.0f);
 
     buffer[buffer_pos % buffer.size()] = pos;
     buffer_pos += 1;
 
+    Display::push_framebuffer(framebuffer);
+
     glClearColor(0.0f, 0.0f, 0.0f, 1.0f);
     glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
 
-    if (false)
+    if (true)
     {
-      for(size_t i = 0; i < std::min(buffer_pos, buffer.size()); ++i)
+      if (false)
       {
-        size_t idx = (buffer_pos - buffer.size() + i) % buffer.size();
-        pos = buffer[idx];
+        for(size_t i = 0; i < std::min(buffer_pos, buffer.size()); ++i)
+        {
+          size_t idx = (buffer_pos - buffer.size() + i) % buffer.size();
+          pos = buffer[idx];
 
-        float n = static_cast<float>(buffer.size());
+          float n = static_cast<float>(buffer.size());
 
-        if (true)
-        { // after image motion blur
-          n = static_cast<float>(i) / ((n * n + n) / 2.0f);
+          if (false)
+          { // after image motion blur
+            n = static_cast<float>(i) / ((n * n + n) / 2.0f);
+          }
+          else
+          { // simple trail, doesn't fade out
+            n = 1.0f / n;
+          }
+
+          surface->draw(SurfaceDrawingParameters()
+                        .set_scale(1.0f)
+                        .set_pos(pos - Vector2f(surface->get_width()/2, surface->get_height()/2))
+                        .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                        .set_color(Color(1.0f, 1.0f, 1.0f, n)));
         }
-        else
-        { // simple trail, doesn't fade out
-          n = 1.0f / n;
+      }
+      else
+      {
+        int n = 32;
+        for(int i = 0; i < n; ++i)
+        {
+          surface->draw(SurfaceDrawingParameters()
+                        .set_scale(1.0f)
+                        .set_pos(((float)i/(float)(n-1)) * pos + ((float)(n-i-1)/(float)(n-1)) * last_pos
+                                 - Vector2f(surface->get_width()/2, surface->get_height()/2))
+                        .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                        .set_color(Color(1.0f, 1.0f, 1.0f, 1.0f / static_cast<float>(n))));
         }
-
-        surface.draw(SurfaceDrawingParameters()
-                     .set_scale(1.0f)
-                     .set_pos(pos - Vector2f(surface.get_width()/2, surface.get_height()/2))
-                     .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                     .set_color(Color(1.0f, 1.0f, 1.0f, n)));
       }
     }
     else
@@ -149,31 +174,45 @@
       {
         float scale = 1.0f + static_cast<float>(i) / static_cast<float>(n) * ray_length;
         if (true)
-          surface.draw(SurfaceDrawingParameters()
-                       .set_scale(scale)
-                       .set_pos(Vector2f(512, 384) - Vector2f(surface.get_width()/2 * scale, 
-                                                              surface.get_height()/2 * scale)
-                                + (Vector2f(512, 384) - pos) * scale * 3.0f)
-                       .set_blend_func(GL_SRC_ALPHA, GL_ONE)
-                       .set_color(Color(1.0f, 1.0f, 1.0f, static_cast<float>(1)/static_cast<float>(n))));
+          surface->draw(SurfaceDrawingParameters()
+                        .set_scale(scale)
+                        .set_pos(Vector2f(512, 288) - Vector2f(surface->get_width()/2 * scale, 
+                                                               surface->get_height()/2 * scale)
+                                 + (Vector2f(512, 288) - pos) * scale * 3.0f)
+                        .set_blend_func(GL_SRC_ALPHA, GL_ONE)
+                        .set_color(Color(1.0f, 1.0f, 1.0f, static_cast<float>(1)/static_cast<float>(n))));
 
         if (false && i == 1)
         {
           scale = 1.0f;
           //std::cout << "Black: " << pos << std::endl;
-          surface_2.draw(SurfaceDrawingParameters()
+          surface_2->draw(SurfaceDrawingParameters()
                          .set_scale(scale)
-                         .set_pos(Vector2f(512, 384) - Vector2f(surface_2.get_width()/2 * scale, 
-                                                                surface_2.get_height()/2 * scale)
-                                  + (Vector2f(512, 384) - pos) * scale * 3.0f)
+                         .set_pos(Vector2f(512, 288) - Vector2f(surface_2->get_width()/2 * scale, 
+                                                                surface_2->get_height()/2 * scale)
+                                  + (Vector2f(512, 288) - pos) * scale * 3.0f)
                          .set_blend_func(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)
                          .set_color(Color(1.0f, 1.0f, 1.0f, 1.0f)));
         }
       }
     }
+    Display::pop_framebuffer();
 
+    if (true)
+    {
+      glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT, framebuffer->get_handle());
+      glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT, 0);
+
+      glBlitFramebufferEXT(0, 0, framebuffer->get_width(), framebuffer->get_height(), 
+                           0, 0, framebuffer->get_width(), framebuffer->get_height(),
+                           GL_COLOR_BUFFER_BIT, GL_LINEAR /*NEAREST*/);
+
+      glBindFramebufferEXT(GL_READ_FRAMEBUFFER_EXT, 0);
+      glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_EXT, 0);
+    }
+
     SDL_GL_SwapBuffers();
-    SDL_Delay(15);
+    SDL_Delay(20);
   }
 
   return 0;

Modified: trunk/windstille/extra/soundapp.cpp
===================================================================
--- trunk/windstille/extra/soundapp.cpp	2010-10-23 21:48:36 UTC (rev 3385)
+++ trunk/windstille/extra/soundapp.cpp	2010-10-23 22:02:34 UTC (rev 3386)
@@ -18,49 +18,63 @@
 
 #include <iostream>
 
+#include "math/random.hpp"
 #include "sound/sound_manager.hpp"
 #include "sound/sound_source.hpp"
+#include "sound/sound_file.hpp"
+#include "sound/filtered_sound_file.hpp"
 
 int main(int argc, char** argv)
 {
-  if (argc != 3)
+  if (argc < 2)
   {
-    std::cout << "Usage: " << argv[0] << " SOUND VOICE" << std::endl;
+    std::cout << "Usage: " << argv[0] << " SOUNDS..." << std::endl;
     return 1;
   }
   else
   {
     SoundManager sound_manager;
-  
-    Vector2f pos(0.0f, 0.0f);
-    SoundSourcePtr source = sound_manager.sound().prepare(Pathname(argv[1], Pathname::kSysPath));
-    SoundSourcePtr voice  = sound_manager.voice().prepare(Pathname(argv[2], Pathname::kSysPath));
+    
+    sound_manager.set_gain(1.0f);
+    sound_manager.sound().set_gain(1.0f);
+    sound_manager.voice().set_gain(1.0f);
 
-    sound_manager.set_master_volume(10.0f);
-    sound_manager.sound().set_volume(0.1f);
-    sound_manager.voice().set_volume(1.0f);
-    
-    if (true)
+    Random random(time(NULL));
+
+    std::cout << "Filter Test" << std::endl;
+
+    std::vector<SoundSourcePtr> sources;
+    for(int i = 1; i < argc; ++i)
     {
+      std::auto_ptr<SoundFile> sound_file = SoundFile::load(Pathname(argv[i], Pathname::kSysPath));
+      //std::auto_ptr<SoundFile> filtered_sound_file(new FilteredSoundFile(sound_file));
+      SoundSourcePtr source = sound_manager.sound().prepare(sound_file, kStreamSoundSource);
+
       source->set_looping(true);
+      Vector2f pos(random.frand(-500, 500), 0.0f);
       source->set_position(pos);
-      //source->set_velocity(Vector2f(5.0f, 0.0f));
-      source->play();
+      //source->set_rolloff_factor(0.0f);
+
+      std::cout << argv[i] << ": " << pos << std::endl;
+
+      sources.push_back(source);
     }
-
-    if (true)
+    
+    for(std::vector<SoundSourcePtr>::iterator i = sources.begin(); i != sources.end(); ++i)
     {
-      voice->set_looping(true);
-      voice->set_position(pos);
-      voice->play();
+      (*i)->play();
     }
 
-    while(source->is_playing())
+    while(true)
     {
-      pos.x += 25.0f;
-      //source->set_position(pos);
-      usleep(100000);
-      std::cout << "." << std::flush;
+      for(std::vector<SoundSourcePtr>::iterator i = sources.begin(); i != sources.end(); ++i)
+      {
+        std::cout << "pos: " << (*i)->get_pos() << std::endl;
+      }
+
+      usleep(10000);
+
+      sound_manager.update(100);
     }
   
     return 0;



From grumbel at mail.berlios.de  Sun Oct 24 00:21:10 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 00:21:10 +0200
Subject: [Windstille-commit] r3387 - in trunk/windstille/src: . system
Message-ID: <20101023222110.782784802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 00:21:10 +0200 (Sun, 24 Oct 2010)
New Revision: 3387

Added:
   trunk/windstille/src/system/
   trunk/windstille/src/system/sdl.cpp
   trunk/windstille/src/system/sdl.hpp
Log:
Added system/ directory

Added: trunk/windstille/src/system/sdl.cpp
===================================================================
--- trunk/windstille/src/system/sdl.cpp	                        (rev 0)
+++ trunk/windstille/src/system/sdl.cpp	2010-10-23 22:21:10 UTC (rev 3387)
@@ -0,0 +1,51 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "system/sdl.hpp"
+
+#include <sstream>
+#include <stdexcept>
+
+SDL::SDL()
+{
+  Uint32 flags = SDL_INIT_VIDEO | SDL_INIT_JOYSTICK;
+
+  if (SDL_Init(flags) < 0)
+  {
+    std::ostringstream msg;
+    msg << "Couldn't initialize SDL: " << SDL_GetError();
+    throw std::runtime_error(msg.str());
+  }
+  else
+  {
+    atexit(SDL_Quit);
+    SDL_EnableUNICODE(1);
+  }
+}
+
+SDL::~SDL()
+{
+}
+
+void
+SDL::delay(Uint32 msec)
+{
+  SDL_Delay(msec);
+}
+
+/* EOF */


Property changes on: trunk/windstille/src/system/sdl.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/src/system/sdl.hpp
===================================================================
--- trunk/windstille/src/system/sdl.hpp	                        (rev 0)
+++ trunk/windstille/src/system/sdl.hpp	2010-10-23 22:21:10 UTC (rev 3387)
@@ -0,0 +1,41 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_SYSTEM_SDL_HPP
+#define HEADER_WINDSTILLE_SYSTEM_SDL_HPP
+
+#include <SDL.h>
+
+class SDL
+{
+private:
+
+public:
+  SDL();
+  ~SDL();
+
+  void delay(Uint32 msec);
+
+private:
+  SDL(const SDL&);
+  SDL& operator=(const SDL&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/src/system/sdl.hpp
___________________________________________________________________
Added: svn:eol-style
   + native



From grumbel at mail.berlios.de  Sun Oct 24 04:13:45 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 04:13:45 +0200
Subject: [Windstille-commit] r3388 - trunk/windstille
Message-ID: <20101024021345.435254802A6@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 04:13:44 +0200 (Sun, 24 Oct 2010)
New Revision: 3388

Modified:
   trunk/windstille/SConscript
Log:
MacOSX specific build configuration

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-23 22:21:10 UTC (rev 3387)
+++ trunk/windstille/SConscript	2010-10-24 02:13:44 UTC (rev 3388)
@@ -73,7 +73,7 @@
             "cwiid" : False
             }
 
-        self.env = Environment()
+        self.env = Environment(ENV=os.environ)
 
     def configure(self):
         # windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
@@ -150,12 +150,21 @@
             cfg['OpenAL']    = { 'LINKFLAGS' : [ '-framework', 'OpenAL' ] }
             cfg['OpenGL']    = { 'LINKFLAGS' : [ '-framework', 'OpenGL' ] }
             cfg['GLEW']      = { 'LIBS' : [ 'GLEW' ] }
-            cfg['SDL']       = { 'LINKFLAGS' : [ '-framework', 'SDL' ] }
-            cfg['SDL_image'] = { 'LINKFLAGS' : [ '-framework', 'SDL_image' ] }
+            cfg['SDL']       = { 'LINKFLAGS' : [ '-framework', 'SDL',
+                                                 '-framework', 'Cocoa' ],
+                                 'CPPPATH' : '/Library/Frameworks/SDL.framework/Headers/',
+                                 'LIBS'    : 'src/macosx/SDLmain.m' }
+            cfg['SDL_image'] = { 'LINKFLAGS' : [ '-framework', 'SDL_image' ],
+                                 'LIBS' : [ 'jpeg' ],
+                                 'CPPPATH' : '/Library/Frameworks/SDL_image.framework/Headers/' }
             cfg['ogg']       = ParseConfig("pkg-config ogg --cflags --libs")
             cfg['vorbis']    = ParseConfig("pkg-config vorbis --cflags --libs")
+            cfg['vorbisfile']       = ParseConfig("pkg-config vorbisfile --cflags --libs")            
             cfg['boost_signals']    = { 'LIBS' : [ 'boost_signals' ] }
-            cfg['boost_filesystem'] = { 'LIBS' : [ 'boost_filesystem' ] }
+            cfg['boost_filesystem'] = { 'LIBS' : [ 'boost_filesystem', 'boost_system' ] }
+            cfg['binreloc']         = { } # not available on MacOSX
+            cfg['freetype']         = ParseConfig("freetype-config --libs --cflags | sed 's/-I/-isystem/g'")
+            cfg['png']              = ParseConfig("pkg-config --cflags --libs libpng | sed 's/-I/-isystem/g'")
 
         else:
             cfg['OpenGL']           = { 'LIBS' : [ 'GL', 'GLU' ] }
@@ -180,11 +189,12 @@
             cfg['binreloc']         = { 'CPPDEFINES' : [ 'HAVE_BINRELOC' ],
                                         'CPPPATH' : [ 'external/binreloc-2.0/' ],
                                         'LIBS' : [ File('libbinreloc.a') ] }
-            cfg['squirrel']         = { 'CPPPATH' : [ 'external/SQUIRREL2/include/' ],
-                                        'LIBS' : [ File('libsquirrel.a') ],
-                                        'CPPDEFINES' : [] # empty, but it is needed later on
-                                        }
 
+        cfg['squirrel']         = { 'CPPPATH' : [ 'external/SQUIRREL2/include/' ],
+                                    'LIBS' : [ File('libsquirrel.a') ],
+                                    'CPPDEFINES' : [] # empty, but it is needed later on
+                                    }
+        
         cfg['windstille']    = { 'CPPPATH' : [ '.', 'src', 'src/scripting' ] }
         cfg['test']          = { 'CPPDEFINES' : [ '__TEST__' ],
                                  'OBJPREFIX'  : "test__" }
@@ -295,7 +305,7 @@
                            Glob('src/scenegraph/*.cpp') +
                            Glob('src/sprite2d/*.cpp') +
                            Glob('src/sprite3d/*.cpp'),
-                           pkgs + [ 'freetype', 'SDL' ], self.cfg)
+                           pkgs + [ 'freetype', 'SDL', 'SDL_image' ], self.cfg)
         BuildStaticLibrary('wst_system', Glob('src/system/*.cpp'), pkgs + [ 'SDL' ], self.cfg)
 
     def build_windstille(self):
@@ -356,7 +366,7 @@
 
     def build_test_apps(self):
         pkgs = [ 'test', 'windstille' ]
-        
+
         BuildProgram("test_babyxml", ["src/util/baby_xml.cpp"], pkgs, self.cfg)
         BuildProgram("test_response_curve", ["src/util/response_curve.cpp"], pkgs, self.cfg)
         BuildProgram("test_random", ["src/math/random.cpp"], pkgs, self.cfg)
@@ -375,7 +385,7 @@
                               'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
                               'binreloc' ],
                      self.cfg)
-                
+
     def build_windstille_data(self):
         data_env = self.env.Clone()
 



From grumbel at mail.berlios.de  Sun Oct 24 14:24:34 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 14:24:34 +0200
Subject: [Windstille-commit] r3389 - in trunk/windstille/test: .
	shader_drawable
Message-ID: <20101024122434.2C27C480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 14:24:33 +0200 (Sun, 24 Oct 2010)
New Revision: 3389

Added:
   trunk/windstille/test/shader_drawable/
   trunk/windstille/test/shader_drawable/shader_drawable.cpp
Log:
Added test/shader_drawable/

Added: trunk/windstille/test/shader_drawable/shader_drawable.cpp
===================================================================
--- trunk/windstille/test/shader_drawable/shader_drawable.cpp	                        (rev 0)
+++ trunk/windstille/test/shader_drawable/shader_drawable.cpp	2010-10-24 12:24:33 UTC (rev 3389)
@@ -0,0 +1,97 @@
+#include <iostream>
+#include <sstream>
+#include <stdexcept>
+#include "SDL.h"
+
+#include "display/opengl_window.hpp"
+#include "display/surface.hpp"
+#include "display/surface_manager.hpp"
+#include "display/texture_manager.hpp"
+#include "scenegraph/drawable_group.hpp"
+#include "scenegraph/surface_drawable.hpp"
+#include "scenegraph/scissor_drawable.hpp"
+#include "scenegraph/stencil_drawable.hpp"
+#include "scenegraph/shader_drawable.hpp"
+#include "display/shader_object.hpp"
+#include "util/pathname.hpp"
+#include "util/system.hpp"
+
+int main()
+{
+  Pathname::set_datadir("data/"); //System::find_default_datadir());
+  Pathname::set_userdir(System::find_default_userdir());
+
+#ifdef DEBUG
+  // I wanna have usefull backtraces in debug mode
+  Uint32 flags = SDL_INIT_VIDEO | SDL_INIT_JOYSTICK | SDL_INIT_NOPARACHUTE;
+#else
+  Uint32 flags = SDL_INIT_VIDEO | SDL_INIT_JOYSTICK;
+#endif
+
+  if (SDL_Init(flags) < 0)
+  {
+    std::stringstream msg;
+    msg << "Couldn't initialize SDL: " << SDL_GetError();
+    throw std::runtime_error(msg.str());
+  }
+  else
+  {
+    atexit(SDL_Quit);
+    SDL_EnableUNICODE(1);
+  }
+
+  OpenGLWindow window("Shader Drawable",
+                      Size(960, 600),
+                      Size(960, 600));
+  TextureManager    texture_manager;
+  SurfaceManager    surface_manager;
+  DrawableGroup group;
+  
+  int have_stencil = 0xdeadbeaf;
+  SDL_GL_GetAttribute(SDL_GL_STENCIL_SIZE, &have_stencil);
+  std::cout << "STENCIL: " << have_stencil << std::endl;
+  
+  boost::shared_ptr<ShaderDrawable>  shader(new ShaderDrawable());
+  boost::shared_ptr<ShaderDrawable>  shader2(new ShaderDrawable());
+  boost::shared_ptr<SurfaceDrawable> surface(new SurfaceDrawable(Surface::create(Pathname("images/titlescreen.png")), 
+                                                                 SurfaceDrawingParameters(), 0, Matrix::identity()));
+  boost::shared_ptr<SurfaceDrawable> surface2(new SurfaceDrawable(Surface::create(Pathname("images/menu_background.jpg")), 
+                                                                  SurfaceDrawingParameters().set_pos(Vector2f(-50.0f, -50.0f)), 
+                                                                  0, Matrix::identity()));
+  boost::shared_ptr<SurfaceDrawable> surface3(new SurfaceDrawable(Surface::create(Pathname("images/portrait.png")), 
+                                                                  SurfaceDrawingParameters(), 0, Matrix::identity()));
+  boost::shared_ptr<SurfaceDrawable> surface4(new SurfaceDrawable(Surface::create(Pathname("images/portrait.png")), 
+                                                                  SurfaceDrawingParameters().set_pos(Vector2f(-25.0f, 25.0f)),
+                                                                  0, Matrix::identity()));
+
+  TexturePtr texture = Texture::create(Pathname("images/displacement.png")); 
+
+  ShaderProgramPtr shader_prg;
+  shader_prg->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER_ARB, "data/shader/border.frag"));
+  shader_prg->link();
+
+  shader->set_shader(shader_prg);
+  shader->get_drawable_group().add_drawable(surface3);
+
+  ShaderProgramPtr shader2_prg;
+  shader2_prg->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER_ARB, "data/shader/nightvision.frag"));
+  shader2_prg->link();
+
+  shader2->set_shader(shader2_prg);
+  shader2->get_drawable_group().add_drawable(surface2);
+
+  group.add_drawable(shader2);
+  group.add_drawable(shader);
+
+  for(int i = 0; i < 500; ++i)
+  {
+    std::cout << "." << std::flush;   
+    surface3->get_params().set_pos(Vector2f(static_cast<float>(i), 50.0f));
+    group.render(~0u);
+    SDL_GL_SwapBuffers();
+  }
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/windstille/test/shader_drawable/shader_drawable.cpp
___________________________________________________________________
Added: svn:eol-style
   + native



From grumbel at mail.berlios.de  Sun Oct 24 14:29:01 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 14:29:01 +0200
Subject: [Windstille-commit] r3390 - trunk/windstille/src/scenegraph
Message-ID: <20101024122902.25D5A480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 14:29:01 +0200 (Sun, 24 Oct 2010)
New Revision: 3390

Added:
   trunk/windstille/src/scenegraph/shader_drawable.cpp
   trunk/windstille/src/scenegraph/shader_drawable.hpp
Log:
Added ShaderDrawable

Added: trunk/windstille/src/scenegraph/shader_drawable.cpp
===================================================================
--- trunk/windstille/src/scenegraph/shader_drawable.cpp	                        (rev 0)
+++ trunk/windstille/src/scenegraph/shader_drawable.cpp	2010-10-24 12:29:01 UTC (rev 3390)
@@ -0,0 +1,37 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2009 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**  
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**  
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "shader_drawable.hpp"
+
+ShaderDrawable::ShaderDrawable() :
+  m_shader(),
+  m_drawables()
+{
+  m_shader = ShaderProgram::create();
+}
+
+void
+ShaderDrawable::render(unsigned int mask)
+{
+  glUseProgram(m_shader->get_handle());
+  m_shader->set_uniform1i("texture", 0);
+  m_drawables.render(mask);
+  glUseProgram(0);
+}
+
+/* EOF */


Property changes on: trunk/windstille/src/scenegraph/shader_drawable.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/src/scenegraph/shader_drawable.hpp
===================================================================
--- trunk/windstille/src/scenegraph/shader_drawable.hpp	                        (rev 0)
+++ trunk/windstille/src/scenegraph/shader_drawable.hpp	2010-10-24 12:29:01 UTC (rev 3390)
@@ -0,0 +1,48 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2009 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**  
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**  
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_SHADER_DRAWABLE_HPP
+#define HEADER_WINDSTILLE_SHADER_DRAWABLE_HPP
+
+#include "display/shader_program.hpp"
+#include "scenegraph/drawable_group.hpp"
+#include "scenegraph/drawable.hpp"
+
+class ShaderDrawable : public Drawable
+{
+private:
+  ShaderProgramPtr m_shader;
+  DrawableGroup m_drawables;
+
+public:
+  ShaderDrawable();
+
+  void render(unsigned int mask);
+
+  void set_shader(ShaderProgramPtr shader) { m_shader = shader; }
+  ShaderProgramPtr get_shader() { return m_shader; }
+  DrawableGroup& get_drawable_group() { return m_drawables; }
+
+private:
+  ShaderDrawable(const ShaderDrawable&);
+  ShaderDrawable& operator=(const ShaderDrawable&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/src/scenegraph/shader_drawable.hpp
___________________________________________________________________
Added: svn:eol-style
   + native



From grumbel at mail.berlios.de  Sun Oct 24 14:55:50 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 14:55:50 +0200
Subject: [Windstille-commit] r3391 - trunk/windstille
Message-ID: <20101024125550.770E5480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 14:55:50 +0200 (Sun, 24 Oct 2010)
New Revision: 3391

Modified:
   trunk/windstille/SConscript
Log:
Added code for endian correctness

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-24 12:29:01 UTC (rev 3390)
+++ trunk/windstille/SConscript	2010-10-24 12:55:50 UTC (rev 3391)
@@ -294,7 +294,7 @@
         BuildStaticLibrary('wst_util',
                            Glob('src/lisp/*.cpp') +
                            Glob('src/util/*.cpp'),
-                           pkgs, self.cfg)
+                           pkgs + [ 'SDL' ], self.cfg)
         BuildStaticLibrary('wst_math', Glob('src/math/*.cpp'), pkgs, self.cfg)
         BuildStaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'), pkgs, self.cfg)
         BuildStaticLibrary('wst_particles', Glob('src/particles/*.cpp'), pkgs, self.cfg)



From grumbel at mail.berlios.de  Sun Oct 24 15:24:30 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 15:24:30 +0200
Subject: [Windstille-commit] r3392 - in trunk/windstille/extra: . memleak
	shadertest
Message-ID: <20101024132430.EEF60480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 15:24:30 +0200 (Sun, 24 Oct 2010)
New Revision: 3392

Added:
   trunk/windstille/extra/memleak/
   trunk/windstille/extra/memleak/memleak.cpp
   trunk/windstille/extra/shadertest/
   trunk/windstille/extra/shadertest/alphatest.png
   trunk/windstille/extra/shadertest/color.png
   trunk/windstille/extra/shadertest/displace.png
   trunk/windstille/extra/shadertest/shadertest.cpp
   trunk/windstille/extra/shadertest/shadertest.hpp
   trunk/windstille/extra/shadertest/test.frag
   trunk/windstille/extra/shadertest/test.shader
   trunk/windstille/extra/shadertest/test.vert
   trunk/windstille/extra/shadertest/test2.frag
Log:
Added some more missing directiories

Added: trunk/windstille/extra/memleak/memleak.cpp
===================================================================
--- trunk/windstille/extra/memleak/memleak.cpp	                        (rev 0)
+++ trunk/windstille/extra/memleak/memleak.cpp	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,106 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include <SDL.h>
+#include <sstream>
+#include <stdexcept>
+
+#include "util/command_line.hpp"
+#include "display/assert_gl.hpp"
+#include "display/opengl_window.hpp"
+#include "display/framebuffer.hpp"
+#include "display/surface_manager.hpp"
+#include "display/surface_drawing_parameters.hpp"
+#include "display/surface.hpp"
+#include "display/display.hpp"
+#include "display/texture_manager.hpp"
+#include "util/system.hpp"
+
+int main(int argc, char** argv)
+{
+  Uint32 flags = SDL_INIT_VIDEO | SDL_INIT_JOYSTICK;
+
+  if (SDL_Init(flags) < 0)
+  {
+    std::ostringstream msg;
+    msg << "Couldn't initialize SDL: " << SDL_GetError();
+    throw std::runtime_error(msg.str());
+  }
+  else
+  {
+    atexit(SDL_Quit);
+    SDL_EnableUNICODE(1);
+  }
+
+
+  //std::cout << "OpenGLWindow" << std::endl;
+  OpenGLWindow window("Memleak", 
+                      Size(800, 600), // window size
+                      Size(800, 600),
+                      false,
+                      4); // anti-alias
+
+  TextureManager    texture_manager;
+  SurfaceManager    surface_manager;
+
+  SurfacePtr surface;
+
+  bool loop = true;
+  while(loop)
+  {
+    SDL_Event event;
+    while(SDL_PollEvent(&event))
+    {
+      switch(event.type)
+      {
+        case SDL_QUIT:
+          loop = false;
+          break;
+
+        case SDL_KEYUP:
+          break;
+
+        case SDL_KEYDOWN:
+          switch (event.key.keysym.sym)
+          {
+            case SDLK_ESCAPE:
+              loop = false;
+              break;
+
+            default:
+              break;
+          }
+          break;
+      }
+    }
+
+    surface = Surface::create(Pathname(argv[1], Pathname::kSysPath));
+
+    surface->draw(Vector2f(0.0f, 0.0f));
+    SDL_GL_SwapBuffers();
+    SDL_Delay(10);
+    
+    surface.reset();
+    SurfaceManager::current()->cleanup();
+    TextureManager::current()->cleanup();
+  }
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/windstille/extra/memleak/memleak.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/extra/shadertest/alphatest.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/shadertest/alphatest.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/shadertest/color.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/shadertest/color.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/shadertest/displace.png
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/extra/shadertest/displace.png
___________________________________________________________________
Added: svn:mime-type
   + image/png

Added: trunk/windstille/extra/shadertest/shadertest.cpp
===================================================================
--- trunk/windstille/extra/shadertest/shadertest.cpp	                        (rev 0)
+++ trunk/windstille/extra/shadertest/shadertest.cpp	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,186 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "shadertest.hpp"
+
+#include "display/opengl_state.hpp"
+#include "display/opengl_window.hpp"
+#include "display/shader_program.hpp"
+#include "display/surface_manager.hpp"
+#include "display/texture_manager.hpp"
+#include "math/random.hpp"
+#include "system/sdl.hpp"
+
+App::App() :
+  m_aspect_ratio(1280, 800),
+  m_window_size(1280, 800),
+  m_fullscreen(false)
+{  
+}
+
+int
+App::main(int argc, char** argv)
+{
+  SDL sdl;
+  OpenGLWindow window("Shader Test",
+                      m_window_size, // window size
+                      m_aspect_ratio, // aspect ratio
+                      m_fullscreen, // fullscreen
+                      4); // anti-alias
+  TextureManager texture_manager;
+  SurfaceManager surface_manager;
+
+  SurfacePtr surface1 = Surface::create(Pathname(argv[1], Pathname::kSysPath));
+  SurfacePtr surface2 = Surface::create(Pathname(argv[2], Pathname::kSysPath));
+  SurfacePtr surface3 = Surface::create(Pathname(argv[3], Pathname::kSysPath));
+  
+  ShaderProgramPtr prog = ShaderProgram::create();
+
+  prog->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER, argv[4]));
+  prog->attach(ShaderObject::create_from_file(GL_FRAGMENT_SHADER, argv[5]));
+  prog->link();
+
+  Vector2f offset;
+  float displacement = 0.0f;
+
+  bool loop = true;
+  while(loop)
+  {
+    SDL_Event event;
+    while(SDL_PollEvent(&event))
+    {
+      switch(event.type)
+      {
+        case SDL_QUIT:
+          loop = false;
+          break;
+
+        case SDL_KEYDOWN:
+          switch (event.key.keysym.sym)
+          {
+            case SDLK_ESCAPE:
+              loop = false;
+              break;
+
+            default:
+              break;
+          }
+          break;
+
+        default:
+          break;
+      }
+    }
+
+    if (false)
+    {
+      glBindTexture(GL_TEXTURE_2D, surface1->get_texture()->get_handle());
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_REPEAT);
+
+      glBindTexture(GL_TEXTURE_2D, surface2->get_texture()->get_handle());
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_REPEAT);
+
+      glBindTexture(GL_TEXTURE_2D, surface3->get_texture()->get_handle());
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
+      glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_R, GL_REPEAT);
+    }
+
+    if (false)  
+    {
+      glUseProgram(prog->get_handle());
+
+      // uniforms are optimized away when not used, thus giving error
+      prog->set_uniform1i("image_tex", 0);
+      prog->set_uniform1i("displace_tex", 1);
+      //prog->set_uniform1i("color_tex", 2);
+      prog->set_uniform2f("offset", offset.x, offset.y);
+      prog->set_uniform2f("rand_offset", rnd.frand(), rnd.frand());
+      //prog->set_uniform1f("displacement", displacement);
+    }
+
+    OpenGLState state;
+    state.enable(GL_BLEND);
+    //state.set_blend_func(params.blendfunc_src, params.blendfunc_dst);
+    state.bind_texture(surface1->get_texture(), 0);
+    //state.bind_texture(surface2->get_texture(), 1);
+    //state.bind_texture(surface3->get_texture(), 2);
+    //state.color(params.color);
+    state.activate();
+
+    //surface1->draw(Vector2f(0, 0));
+    
+    glClearColor(0.5f,0,0,0);
+    glClear(GL_COLOR_BUFFER_BIT);
+    
+    glAlphaFunc(GL_GREATER, 0.2f);
+    glEnable(GL_ALPHA_TEST);
+
+    glBegin(GL_QUADS);
+    {
+      glTexCoord2f(0.0f, 0.0f);
+      glVertex2f(0.0f, 0.0f);
+
+      glTexCoord2f(1.0f, 0.0f);
+      glVertex2f(1280.0f, 0.0f);
+
+      glTexCoord2f(1.0f, 1.0f);
+      glVertex2f(1280.0f, 800.0f);
+
+      glTexCoord2f(0.0f, 1.0f);
+      glVertex2f(0.0f, 800.0f);
+    }
+    glEnd();
+
+    window.swap_buffers();
+    sdl.delay(100);
+
+    offset += Vector2f(0.001f, 0.0f);
+    displacement += 0.001f;
+  }
+
+  return 0;
+}
+
+int main(int argc, char** argv)
+{
+  try 
+  {
+    App app;
+    app.main(argc, argv);
+  }
+  catch(std::exception& err)
+  {
+    std::cout << err.what() << std::endl;
+    return 1;
+  }
+
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/windstille/extra/shadertest/shadertest.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/extra/shadertest/shadertest.hpp
===================================================================
--- trunk/windstille/extra/shadertest/shadertest.hpp	                        (rev 0)
+++ trunk/windstille/extra/shadertest/shadertest.hpp	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,45 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_EXTRA_SHADERTEST_SHADERTEST_HPP
+#define HEADER_WINDSTILLE_EXTRA_SHADERTEST_SHADERTEST_HPP
+
+#include <GL/glew.h>
+
+#include "math/size.hpp"
+
+class App
+{
+private:
+  Size m_aspect_ratio;
+  Size m_window_size;
+  bool m_fullscreen;
+  
+public:
+  App();
+
+  int main(int argc, char** argv);
+
+private:
+  App(const App&);
+  App& operator=(const App&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/extra/shadertest/shadertest.hpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/extra/shadertest/test.frag
===================================================================
--- trunk/windstille/extra/shadertest/test.frag	                        (rev 0)
+++ trunk/windstille/extra/shadertest/test.frag	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,25 @@
+uniform vec2 offset;
+uniform vec2 rand_offset;
+
+uniform sampler2D image_tex;
+uniform sampler2D displace_tex;
+uniform sampler2D color_tex;
+
+vec4 contrast(vec4 color, float factor);
+vec4 brightness(vec4 color, float factor);
+
+void main(void)
+{
+  vec4 rnd1 =  texture2D(displace_tex, gl_TexCoord[0].st + rand_offset + vec2(0.25,0.25));
+  vec4 rnd2 =  texture2D(displace_tex, gl_TexCoord[0].st + rand_offset + vec2(0.125,0.125));
+  vec4 rnd3 =  texture2D(displace_tex, gl_TexCoord[0].st + rand_offset + vec2(0.5,0.5));
+
+  vec4 color = vec4(texture2D(image_tex, gl_TexCoord[0].st + offset + rnd1*0.03).r,
+                    texture2D(image_tex, gl_TexCoord[0].st + offset + rnd2*0.03).g,
+                    texture2D(image_tex, gl_TexCoord[0].st + offset + rnd3*0.03).b,
+                    1.0);
+
+  gl_FragColor = color;
+}
+
+/* EOF */

Added: trunk/windstille/extra/shadertest/test.shader
===================================================================
--- trunk/windstille/extra/shadertest/test.shader	                        (rev 0)
+++ trunk/windstille/extra/shadertest/test.shader	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,8 @@
+;; -*- scheme -*-
+
+(windstille-shader 
+ (vert "foo.vert")
+ (frag "frag.vert" "frag2.vert" "frag3.vert")
+ )
+  
+;; EOF ;;

Added: trunk/windstille/extra/shadertest/test.vert
===================================================================
--- trunk/windstille/extra/shadertest/test.vert	                        (rev 0)
+++ trunk/windstille/extra/shadertest/test.vert	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,5 @@
+void main(void)
+{
+  gl_TexCoord[0] = gl_MultiTexCoord0;
+  gl_Position = ftransform();
+}

Added: trunk/windstille/extra/shadertest/test2.frag
===================================================================
--- trunk/windstille/extra/shadertest/test2.frag	                        (rev 0)
+++ trunk/windstille/extra/shadertest/test2.frag	2010-10-24 13:24:30 UTC (rev 3392)
@@ -0,0 +1,15 @@
+vec4 brightness(vec4 color, float factor)
+{
+        return vec4((color.r + factor),
+                    (color.g + factor),
+                    (color.b + factor),
+                    color.a);
+}
+
+vec4 contrast(vec4 color, float factor)
+{
+        return vec4((color.r - 0.5) * factor + 0.5,
+                    (color.g - 0.5) * factor + 0.5,
+                    (color.b - 0.5) * factor + 0.5,
+                    color.a);
+}



From grumbel at mail.berlios.de  Sun Oct 24 15:30:58 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 15:30:58 +0200
Subject: [Windstille-commit] r3393 - trunk/windstille/test/scissor_drawable
Message-ID: <20101024133058.460A8480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 15:30:57 +0200 (Sun, 24 Oct 2010)
New Revision: 3393

Modified:
   trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
Log:
Changed main prototype to suit SDL's needs

Modified: trunk/windstille/test/scissor_drawable/scissor_drawable.cpp
===================================================================
--- trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-24 13:24:30 UTC (rev 3392)
+++ trunk/windstille/test/scissor_drawable/scissor_drawable.cpp	2010-10-24 13:30:57 UTC (rev 3393)
@@ -1,7 +1,7 @@
 #include <iostream>
 #include <sstream>
 #include <stdexcept>
-#include "SDL.h"
+#include <SDL.h>
 
 #include "display/opengl_window.hpp"
 #include "display/surface.hpp"
@@ -14,7 +14,7 @@
 #include "util/pathname.hpp"
 #include "util/system.hpp"
 
-int main()
+int main(int argc, char* argv[])
 {
   Pathname::set_datadir("data/"); //System::find_default_datadir());
   Pathname::set_userdir(System::find_default_userdir());



From grumbel at mail.berlios.de  Sun Oct 24 15:37:07 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 15:37:07 +0200
Subject: [Windstille-commit] r3394 - in trunk/windstille: . extra/lensflare
	extra/memleak extra/shadertest extra/slideshow test/shader_drawable
Message-ID: <20101024133707.75C83480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 15:37:07 +0200 (Sun, 24 Oct 2010)
New Revision: 3394

Modified:
   trunk/windstille/SConscript
   trunk/windstille/extra/lensflare/lensflare.cpp
   trunk/windstille/extra/lensflare/lensflare.hpp
   trunk/windstille/extra/memleak/memleak.cpp
   trunk/windstille/extra/shadertest/shadertest.cpp
   trunk/windstille/extra/shadertest/shadertest.hpp
   trunk/windstille/extra/slideshow/slideshow.cpp
   trunk/windstille/extra/slideshow/slideshow.hpp
   trunk/windstille/test/shader_drawable/shader_drawable.cpp
Log:
Further improvments on the MacOSX build process

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/SConscript	2010-10-24 13:37:07 UTC (rev 3394)
@@ -76,11 +76,6 @@
         self.env = Environment(ENV=os.environ)
 
     def configure(self):
-        # windstille_env.ParseConfig('sdl-config --cflags --libs | sed "s/-I/-isystem/g"')
-        # windstille_env.ParseConfig('freetype-config --libs --cflags | sed "s/-I/-isystem/g"')
-
-        #     }
-
         # FIXME: None of the options are used, as only self.features
         # makes it across function calls
 
@@ -153,18 +148,18 @@
             cfg['SDL']       = { 'LINKFLAGS' : [ '-framework', 'SDL',
                                                  '-framework', 'Cocoa' ],
                                  'CPPPATH' : '/Library/Frameworks/SDL.framework/Headers/',
-                                 'LIBS'    : 'src/macosx/SDLmain.m' }
+                                 'LIBS'    : [ File('libsdlmain.a') ] }
             cfg['SDL_image'] = { 'LINKFLAGS' : [ '-framework', 'SDL_image' ],
                                  'LIBS' : [ 'jpeg' ],
                                  'CPPPATH' : '/Library/Frameworks/SDL_image.framework/Headers/' }
-            cfg['ogg']       = ParseConfig("pkg-config ogg --cflags --libs")
-            cfg['vorbis']    = ParseConfig("pkg-config vorbis --cflags --libs")
-            cfg['vorbisfile']       = ParseConfig("pkg-config vorbisfile --cflags --libs")            
+            cfg['ogg']              = ParseConfig("pkg-config ogg --cflags --libs")
+            cfg['vorbis']           = ParseConfig("pkg-config vorbis --cflags --libs")
+            cfg['vorbisfile']       = ParseConfig("pkg-config vorbisfile --cflags --libs")
             cfg['boost_signals']    = { 'LIBS' : [ 'boost_signals' ] }
             cfg['boost_filesystem'] = { 'LIBS' : [ 'boost_filesystem', 'boost_system' ] }
             cfg['binreloc']         = { } # not available on MacOSX
-            cfg['freetype']         = ParseConfig("freetype-config --libs --cflags | sed 's/-I/-isystem/g'")
-            cfg['png']              = ParseConfig("pkg-config --cflags --libs libpng | sed 's/-I/-isystem/g'")
+            cfg['freetype']         = ParseConfig("freetype-config --libs --cflags")
+            cfg['png']              = ParseConfig("pkg-config --cflags --libs libpng")
 
         else:
             cfg['OpenGL']           = { 'LIBS' : [ 'GL', 'GLU' ] }
@@ -234,9 +229,12 @@
         self.env = conf.Finish()       
 
     def build_all(self):
+        if sys.platform == 'darwin':        
+            self.build_sdl_main()
+        
         self.build_squirrel()
         self.build_miniswig()
-        self.build_binreloc()
+        self.build_binreloc()                
         self.build_wstlib()
         self.build_windstille()
         self.build_windstille_editor()
@@ -289,6 +287,10 @@
         BuildStaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
                            [ { 'CPPDEFINES' : ["ENABLE_BINRELOC"] } ], self.cfg)
 
+    def build_sdl_main(self):
+        BuildStaticLibrary("sdlmain", ["src/macosx/SDLmain.m"], 
+                           [ 'SDL' ], self.cfg)
+                           
     def build_wstlib(self):
         pkgs = [ 'default', 'windstille', 'binreloc' ]
         BuildStaticLibrary('wst_util',
@@ -352,8 +354,8 @@
         pkgs = [ 'default',
                  'windstille',
                  'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
-                 'SDL', 'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
-                 'OpenAL', 'ogg', 'vorbis', 'vorbisfile']
+                 'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
+                 'OpenAL', 'ogg', 'vorbis', 'vorbisfile', 'SDL']
 
         BuildProgram("slideshow", Glob("extra/slideshow/*.cpp") + Glob("extra/slideshow/plugins/*.cpp"),
                      pkgs + [ { 'CPPPATH' : 'extra/' } ], self.cfg)

Modified: trunk/windstille/extra/lensflare/lensflare.cpp
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -209,7 +209,7 @@
 }
 
 int
-Lensflare::main()
+Lensflare::run()
 {
   SDL sdl;
   OpenGLWindow window("Shader Test",
@@ -263,10 +263,10 @@
   return 0;
 }
 
-int main()
+int main(int argc, char* argv[])
 {
   Lensflare app;
-  app.main();
+  app.run();
   return 0;
 }
 

Modified: trunk/windstille/extra/lensflare/lensflare.hpp
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.hpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/lensflare/lensflare.hpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -68,7 +68,7 @@
 public:
   Lensflare();
   
-  int main();
+  int run();
 
   void process_input();
   void draw();

Modified: trunk/windstille/extra/memleak/memleak.cpp
===================================================================
--- trunk/windstille/extra/memleak/memleak.cpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/memleak/memleak.cpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -31,7 +31,7 @@
 #include "display/texture_manager.hpp"
 #include "util/system.hpp"
 
-int main(int argc, char** argv)
+int main(int argc, char* argv[])
 {
   Uint32 flags = SDL_INIT_VIDEO | SDL_INIT_JOYSTICK;
 

Modified: trunk/windstille/extra/shadertest/shadertest.cpp
===================================================================
--- trunk/windstille/extra/shadertest/shadertest.cpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/shadertest/shadertest.cpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -34,7 +34,7 @@
 }
 
 int
-App::main(int argc, char** argv)
+App::run(int argc, char* argv[])
 {
   SDL sdl;
   OpenGLWindow window("Shader Test",
@@ -167,12 +167,12 @@
   return 0;
 }
 
-int main(int argc, char** argv)
+int main(int argc, char* argv[])
 {
   try 
   {
     App app;
-    app.main(argc, argv);
+    app.run(argc, argv);
   }
   catch(std::exception& err)
   {

Modified: trunk/windstille/extra/shadertest/shadertest.hpp
===================================================================
--- trunk/windstille/extra/shadertest/shadertest.hpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/shadertest/shadertest.hpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -33,7 +33,7 @@
 public:
   App();
 
-  int main(int argc, char** argv);
+  int run(int argc, char* argv[]);
 
 private:
   App(const App&);

Modified: trunk/windstille/extra/slideshow/slideshow.cpp
===================================================================
--- trunk/windstille/extra/slideshow/slideshow.cpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/slideshow/slideshow.cpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -157,7 +157,7 @@
 }
 
 int
-App::main(int argc, char** argv)
+App::run(int argc, char* argv[])
 {
   parse_args(argc, argv);
     
@@ -377,7 +377,7 @@
   try 
   {
     App app;
-    app.main(argc, argv);
+    app.run(argc, argv);
   }
   catch(std::exception& err)
   {

Modified: trunk/windstille/extra/slideshow/slideshow.hpp
===================================================================
--- trunk/windstille/extra/slideshow/slideshow.hpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/extra/slideshow/slideshow.hpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -40,7 +40,7 @@
   App();
 
   void init_sdl();
-  int main(int argc, char** argv);
+  int run(int argc, char* argv[]);
   void parse_args(int argc, char** argv);
 
 private:

Modified: trunk/windstille/test/shader_drawable/shader_drawable.cpp
===================================================================
--- trunk/windstille/test/shader_drawable/shader_drawable.cpp	2010-10-24 13:30:57 UTC (rev 3393)
+++ trunk/windstille/test/shader_drawable/shader_drawable.cpp	2010-10-24 13:37:07 UTC (rev 3394)
@@ -16,7 +16,7 @@
 #include "util/pathname.hpp"
 #include "util/system.hpp"
 
-int main()
+int main(int argc, char* argv[])
 {
   Pathname::set_datadir("data/"); //System::find_default_datadir());
   Pathname::set_userdir(System::find_default_userdir());



From grumbel at mail.berlios.de  Sun Oct 24 15:38:21 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 15:38:21 +0200
Subject: [Windstille-commit] r3395 - trunk/windstille/src/util
Message-ID: <20101024133821.6D1BE480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 15:38:21 +0200 (Sun, 24 Oct 2010)
New Revision: 3395

Modified:
   trunk/windstille/src/util/util.cpp
Log:
Proper endian handling

Modified: trunk/windstille/src/util/util.cpp
===================================================================
--- trunk/windstille/src/util/util.cpp	2010-10-24 13:37:07 UTC (rev 3394)
+++ trunk/windstille/src/util/util.cpp	2010-10-24 13:38:21 UTC (rev 3395)
@@ -18,6 +18,7 @@
 
 #include "util/util.hpp"
 
+#include <SDL.h>
 #include <fstream>
 #include <sstream>
 #include <errno.h>
@@ -73,7 +74,10 @@
 
 float read_float(std::istream& in)
 {
-  float result;
+  union {
+    float    float_v;
+    uint32_t raw_v;
+  } result;
   
   if (!in.read(reinterpret_cast<char*>(&result), sizeof(result)))
   {
@@ -83,7 +87,15 @@
   }
   else
   {
-    return result;
+    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    {
+      SDL_Swap32(result.raw_v);
+      return result.float_v;
+    }
+    else
+    {
+      return result.float_v;
+    }
   }
 }
 
@@ -99,7 +111,14 @@
   }
   else
   {
-    return result;
+    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    {
+      SDL_Swap16(result);
+    }
+    else
+    {
+      return result;
+    }
   }
 }
 
@@ -115,7 +134,14 @@
   }
   else
   {
-    return result;
+    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    {
+      SDL_Swap32(result);
+    }
+    else
+    {
+      return result;
+    }
   }
 }
 



From grumbel at mail.berlios.de  Sun Oct 24 16:45:27 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 16:45:27 +0200
Subject: [Windstille-commit] r3396 - trunk/windstille/src/display
Message-ID: <20101024144527.26B44480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 16:45:26 +0200 (Sun, 24 Oct 2010)
New Revision: 3396

Modified:
   trunk/windstille/src/display/compositor.cpp
   trunk/windstille/src/display/surface_manager.cpp
   trunk/windstille/src/display/texture.cpp
   trunk/windstille/src/display/texture.hpp
   trunk/windstille/src/display/texture_packer.cpp
Log:
Enabled alternative code path for older hardware

Modified: trunk/windstille/src/display/compositor.cpp
===================================================================
--- trunk/windstille/src/display/compositor.cpp	2010-10-24 13:38:21 UTC (rev 3395)
+++ trunk/windstille/src/display/compositor.cpp	2010-10-24 14:45:26 UTC (rev 3396)
@@ -26,7 +26,7 @@
 Compositor::Compositor(const Size& window, const Size& viewport) :
   impl()
 {
-  if (GLEW_VERSION_3_2)
+  if (GLEW_ARB_framebuffer_object)
   {
     std::cout  << "Display:: framebuffer_object extension is supported" << std::endl;
     impl.reset(new FramebufferCompositorImpl(window, viewport));

Modified: trunk/windstille/src/display/surface_manager.cpp
===================================================================
--- trunk/windstille/src/display/surface_manager.cpp	2010-10-24 13:38:21 UTC (rev 3395)
+++ trunk/windstille/src/display/surface_manager.cpp	2010-10-24 14:45:26 UTC (rev 3396)
@@ -26,9 +26,16 @@
 
 
 SurfaceManager::SurfaceManager() :
-  texture_packer(0), // (new TexturePacker(Size(2048, 2048))),
+  texture_packer(0),
   surfaces()
 {
+  // NPOV should be ok with OpenGL2.0 in theory, but in practice there
+  // is hardware that does OpenGL2.0, but not NPOV, see:
+  // http://www.opengl.org/wiki/NPOT_Texture
+  if (!GLEW_ARB_texture_non_power_of_two)
+  {
+    texture_packer.reset(new TexturePacker(Size(2048, 2048)));
+  }
 }
 
 SurfaceManager::~SurfaceManager()

Modified: trunk/windstille/src/display/texture.cpp
===================================================================
--- trunk/windstille/src/display/texture.cpp	2010-10-24 13:38:21 UTC (rev 3395)
+++ trunk/windstille/src/display/texture.cpp	2010-10-24 14:45:26 UTC (rev 3396)
@@ -67,6 +67,14 @@
   m_width(width),
   m_height(height)
 {
+  if (!GLEW_ARB_texture_non_power_of_two)
+  {
+    if (!is_power_of_2(width) || !is_power_of_2(height))
+    {
+      throw std::runtime_error("image has non power of two size");
+    }
+  }
+
   glGenTextures(1, &m_handle);
   assert_gl("Texture::Texture()"); 
 
@@ -80,6 +88,8 @@
   glTexParameteri(target, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
   glTexParameteri(target, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
   glTexParameteri(target, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);
+
+  assert_gl("Texture::Texture() 2"); 
 }
 
 Texture::Texture(SoftwareSurfacePtr image, GLint glformat) :
@@ -91,9 +101,13 @@
   glGenTextures(1, &m_handle);
   assert_gl("Texture::Texture()"); 
 
-  // Should be ok with OpenGL2.0
-  //if(!is_power_of_2(image->get_width()) || !is_power_of_2(image->get_height()))
-  //throw std::runtime_error("image has no power of 2 size");
+  if (!GLEW_ARB_texture_non_power_of_two)
+  {
+    if (!is_power_of_2(image->get_width()) || !is_power_of_2(image->get_height()))
+    {
+      throw std::runtime_error("image has non power of two size");
+    }
+  }
 
   if (image->get_bits_per_pixel() != 24 && image->get_bits_per_pixel() != 32)
     throw std::runtime_error("image has not 24 or 32 bit color depth");

Modified: trunk/windstille/src/display/texture.hpp
===================================================================
--- trunk/windstille/src/display/texture.hpp	2010-10-24 13:38:21 UTC (rev 3395)
+++ trunk/windstille/src/display/texture.hpp	2010-10-24 14:45:26 UTC (rev 3396)
@@ -40,15 +40,10 @@
   /** Load a texture from file */
   static TexturePtr create(const Pathname& filename);
 
-  /**
-   * Upload an SoftwareSurface onto an OpenGL texture. The surface must have power
-   * of 2 dimensions
-   * */
+  /** Upload an SoftwareSurface onto an OpenGL texture. */
   static TexturePtr create(SoftwareSurfacePtr image, GLint format = GL_RGBA);
   
-  /** 
-   * Create an empty Texture with the given dimensions
-   */
+  /** Create an empty Texture with the given dimensions */
   static TexturePtr create(GLenum target, int width, int height, GLint format = GL_RGBA);
   
 private:

Modified: trunk/windstille/src/display/texture_packer.cpp
===================================================================
--- trunk/windstille/src/display/texture_packer.cpp	2010-10-24 13:38:21 UTC (rev 3395)
+++ trunk/windstille/src/display/texture_packer.cpp	2010-10-24 14:45:26 UTC (rev 3396)
@@ -91,9 +91,9 @@
   TextureSpace   space;
 
 public:
-  TexturePackerTexture(const Size& size)
-    : texture(Texture::create(GL_TEXTURE_2D, size.width, size.height)),
-      space(Rect(Point(0, 0), size))
+  TexturePackerTexture(const Size& size) :
+    texture(Texture::create(GL_TEXTURE_2D, size.width, size.height)),
+    space(Rect(Point(0, 0), size))
   {
   }
 



From grumbel at mail.berlios.de  Sun Oct 24 16:47:51 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 16:47:51 +0200
Subject: [Windstille-commit] r3397 - trunk/windstille/extra/lensflare
Message-ID: <20101024144751.95737480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 16:47:51 +0200 (Sun, 24 Oct 2010)
New Revision: 3397

Modified:
   trunk/windstille/extra/lensflare/lensflare.cpp
Log:
Warn if occulsion query is not supported

Modified: trunk/windstille/extra/lensflare/lensflare.cpp
===================================================================
--- trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-24 14:45:26 UTC (rev 3396)
+++ trunk/windstille/extra/lensflare/lensflare.cpp	2010-10-24 14:47:51 UTC (rev 3397)
@@ -18,6 +18,8 @@
 
 #include "lensflare.hpp"
 
+#include <stdexcept>
+
 #include "display/assert_gl.hpp"
 #include "display/opengl_state.hpp"
 #include "display/opengl_window.hpp"
@@ -220,6 +222,11 @@
   TextureManager texture_manager;
   SurfaceManager surface_manager;
 
+  if (!GLEW_ARB_occlusion_query)
+  {
+    throw std::runtime_error("GL_ARB_occlusion_query not supported");
+  }
+
   m_light  = Surface::create(Pathname("light.png", Pathname::kSysPath));
   m_lightquery  = Surface::create(Pathname("lightquery.png", Pathname::kSysPath));
   m_superlight  = Surface::create(Pathname("superlight.png", Pathname::kSysPath));
@@ -265,8 +272,15 @@
 
 int main(int argc, char* argv[])
 {
-  Lensflare app;
-  app.run();
+  try
+  {
+    Lensflare app;
+    app.run();
+  }
+  catch(std::exception& err)
+  {
+    std::cout << "Error: " << err.what() << std::endl;
+  }
   return 0;
 }
 



From grumbel at mail.berlios.de  Sun Oct 24 17:20:52 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 17:20:52 +0200
Subject: [Windstille-commit] r3398 - trunk/windstille/src/util
Message-ID: <20101024152052.94CCC480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 17:20:52 +0200 (Sun, 24 Oct 2010)
New Revision: 3398

Modified:
   trunk/windstille/src/util/util.cpp
Log:
Added missing return statements

Modified: trunk/windstille/src/util/util.cpp
===================================================================
--- trunk/windstille/src/util/util.cpp	2010-10-24 14:47:51 UTC (rev 3397)
+++ trunk/windstille/src/util/util.cpp	2010-10-24 15:20:52 UTC (rev 3398)
@@ -114,6 +114,7 @@
     if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
     {
       SDL_Swap16(result);
+      return result;
     }
     else
     {
@@ -137,6 +138,7 @@
     if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
     {
       SDL_Swap32(result);
+      return result;
     }
     else
     {



From grumbel at mail.berlios.de  Sun Oct 24 17:34:40 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 17:34:40 +0200
Subject: [Windstille-commit] r3399 - trunk/windstille/test
Message-ID: <20101024153440.77B12480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 17:34:40 +0200 (Sun, 24 Oct 2010)
New Revision: 3399

Added:
   trunk/windstille/test/read_test.cpp
Log:
Added reader_test

Added: trunk/windstille/test/read_test.cpp
===================================================================
--- trunk/windstille/test/read_test.cpp	                        (rev 0)
+++ trunk/windstille/test/read_test.cpp	2010-10-24 15:34:40 UTC (rev 3399)
@@ -0,0 +1,37 @@
+#include <SDL_endian.h>
+#include <stdlib.h>
+#include <fstream>
+#include <iostream>
+
+#include "util/util.hpp"
+
+int main(int argc, char* argv[])
+{
+  if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+  {
+    std::cout << "byte order is: big endian" << std::endl;
+  }
+  else
+  {
+    std::cout << "byte order is: little endian" << std::endl;
+  }
+
+  for(int i = 1; i < argc; ++i)
+  {
+    std::ifstream in(argv[i], std::ios::binary);
+    if (!in)
+    {
+      std::cout << "couldn't open " << argv[i] << std::endl;
+      exit(EXIT_FAILURE);
+    }
+    else
+    {
+      std::cout << "uint32: " << read_uint32_t(in) << std::endl;
+      std::cout << "uint16: " << read_uint16_t(in) << std::endl;
+      std::cout << "float:  " << read_float(in) << std::endl;
+    }
+  }
+  return 0;
+}
+
+/* EOF */


Property changes on: trunk/windstille/test/read_test.cpp
___________________________________________________________________
Added: svn:eol-style
   + native



From grumbel at mail.berlios.de  Sun Oct 24 17:34:50 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 17:34:50 +0200
Subject: [Windstille-commit] r3400 - trunk/windstille/test
Message-ID: <20101024153451.02311480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 17:34:50 +0200 (Sun, 24 Oct 2010)
New Revision: 3400

Added:
   trunk/windstille/test/read_test.dat
Log:
Added reader_test

Added: trunk/windstille/test/read_test.dat
===================================================================
--- trunk/windstille/test/read_test.dat	                        (rev 0)
+++ trunk/windstille/test/read_test.dat	2010-10-24 15:34:50 UTC (rev 3400)
@@ -0,0 +1 @@
+????????~Z?!	@
\ No newline at end of file



From grumbel at mail.berlios.de  Sun Oct 24 17:38:29 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 17:38:29 +0200
Subject: [Windstille-commit] r3401 - trunk/windstille
Message-ID: <20101024153829.9369B480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 17:38:29 +0200 (Sun, 24 Oct 2010)
New Revision: 3401

Modified:
   trunk/windstille/SConscript
Log:
Added reader_test

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-24 15:34:50 UTC (rev 3400)
+++ trunk/windstille/SConscript	2010-10-24 15:38:29 UTC (rev 3401)
@@ -375,6 +375,7 @@
         BuildProgram("test_pathname", ["src/util/pathname.cpp"], pkgs + [ 'boost_filesystem' ], self.cfg)
         BuildProgram("test_directory", ["src/util/directory.cpp"], pkgs + [ 'boost_filesystem', 'wst_util' ], self.cfg)
         BuildProgram("test_easing", ["src/math/easing.cpp"], pkgs, self.cfg)
+        BuildProgram("reader_test", ["test/read_test.cpp"], pkgs + [ 'wst_util', 'SDL' ], self.cfg)
 
         BuildProgram("test_scissor_drawable", ["test/scissor_drawable/scissor_drawable.cpp"],
                      pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 



From grumbel at mail.berlios.de  Sun Oct 24 17:44:33 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 17:44:33 +0200
Subject: [Windstille-commit] r3402 - trunk/windstille/test
Message-ID: <20101024154433.B7D9A480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 17:44:33 +0200 (Sun, 24 Oct 2010)
New Revision: 3402

Modified:
   trunk/windstille/test/read_test.dat
Log:
Better test data

Modified: trunk/windstille/test/read_test.dat
===================================================================
--- trunk/windstille/test/read_test.dat	2010-10-24 15:38:29 UTC (rev 3401)
+++ trunk/windstille/test/read_test.dat	2010-10-24 15:44:33 UTC (rev 3402)
@@ -1 +1 @@
-????????~Z?!	@
\ No newline at end of file
+?[90?I@
\ No newline at end of file



From grumbel at mail.berlios.de  Sun Oct 24 18:16:19 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 18:16:19 +0200
Subject: [Windstille-commit] r3403 - in trunk/windstille: . src/util
Message-ID: <20101024161619.A6990480EDC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 18:16:19 +0200 (Sun, 24 Oct 2010)
New Revision: 3403

Modified:
   trunk/windstille/SConscript
   trunk/windstille/src/util/util.cpp
   trunk/windstille/src/util/util.hpp
Log:
Removed SDL dependency from util/util.hpp

Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-24 15:44:33 UTC (rev 3402)
+++ trunk/windstille/SConscript	2010-10-24 16:16:19 UTC (rev 3403)
@@ -296,7 +296,7 @@
         BuildStaticLibrary('wst_util',
                            Glob('src/lisp/*.cpp') +
                            Glob('src/util/*.cpp'),
-                           pkgs + [ 'SDL' ], self.cfg)
+                           pkgs, self.cfg)
         BuildStaticLibrary('wst_math', Glob('src/math/*.cpp'), pkgs, self.cfg)
         BuildStaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'), pkgs, self.cfg)
         BuildStaticLibrary('wst_particles', Glob('src/particles/*.cpp'), pkgs, self.cfg)

Modified: trunk/windstille/src/util/util.cpp
===================================================================
--- trunk/windstille/src/util/util.cpp	2010-10-24 15:44:33 UTC (rev 3402)
+++ trunk/windstille/src/util/util.cpp	2010-10-24 16:16:19 UTC (rev 3403)
@@ -18,7 +18,6 @@
 
 #include "util/util.hpp"
 
-#include <SDL.h>
 #include <fstream>
 #include <sstream>
 #include <errno.h>
@@ -87,9 +86,9 @@
   }
   else
   {
-    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    if (is_big_endian())
     {
-      SDL_Swap32(result.raw_v);
+      result.raw_v = byte_swap32(result.raw_v);
       return result.float_v;
     }
     else
@@ -111,9 +110,9 @@
   }
   else
   {
-    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    if (is_big_endian())
     {
-      SDL_Swap16(result);
+      byte_swap16(result);
       return result;
     }
     else
@@ -135,9 +134,9 @@
   }
   else
   {
-    if (SDL_BYTEORDER == SDL_BIG_ENDIAN)
+    if (is_big_endian())
     {
-      SDL_Swap32(result);
+      byte_swap32(result);
       return result;
     }
     else
@@ -164,4 +163,24 @@
   }
 }
 
+uint16_t
+byte_swap16(uint16_t v)
+{
+#ifdef __GNUC__
+  return static_cast<uint16_t>(v >> 8 | v << 8);
+#else
+  return _byteswap_ushort(v);
+#endif
+}
+
+uint32_t
+byte_swap32(uint32_t v)
+{
+#ifdef __GNUC__
+  return __builtin_bswap32(v);
+#else
+  return _byteswap_ulong(v);
+#endif
+}
+
 /* EOF */

Modified: trunk/windstille/src/util/util.hpp
===================================================================
--- trunk/windstille/src/util/util.hpp	2010-10-24 15:44:33 UTC (rev 3402)
+++ trunk/windstille/src/util/util.hpp	2010-10-24 16:16:19 UTC (rev 3403)
@@ -45,6 +45,19 @@
 uint32_t    read_uint32_t(std::istream& in);
 std::string read_string(std::istream& in, size_t size);
 
+inline int is_big_endian()
+{
+  union {
+    uint32_t i;
+    char c[4];
+  } bint = {0x01020304};
+
+  return bint.c[0] == 1; 
+}
+
+uint16_t    byte_swap16(uint16_t v);
+uint32_t    byte_swap32(uint32_t v);
+
 #endif
 
 /* EOF */



From grumbel at mail.berlios.de  Sun Oct 24 19:17:19 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 19:17:19 +0200
Subject: [Windstille-commit] r3404 - trunk/windstille/src/sound
Message-ID: <20101024171719.969A4480BFC@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 19:17:19 +0200 (Sun, 24 Oct 2010)
New Revision: 3404

Modified:
   trunk/windstille/src/sound/wav_sound_file.cpp
Log:
Added proper endian handling to WavSoundFile

Modified: trunk/windstille/src/sound/wav_sound_file.cpp
===================================================================
--- trunk/windstille/src/sound/wav_sound_file.cpp	2010-10-24 16:16:19 UTC (rev 3403)
+++ trunk/windstille/src/sound/wav_sound_file.cpp	2010-10-24 17:17:19 UTC (rev 3404)
@@ -187,6 +187,16 @@
     throw std::runtime_error("read error while reading samples");
   }
 
+  // handle endian swaping
+  if (is_big_endian())
+  {
+    uint16_t* p = static_cast<uint16_t*>(buffer);
+    for(size_t i = 0; i < readsize; ++i)
+    {
+      p[i] = byte_swap16(p[i]);
+    }
+  }
+
   return readsize;
 }
 



From grumbel at mail.berlios.de  Sun Oct 24 20:22:24 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 20:22:24 +0200
Subject: [Windstille-commit] r3405 - trunk/windstille/src/util
Message-ID: <20101024182224.E8E7348107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 20:22:24 +0200 (Sun, 24 Oct 2010)
New Revision: 3405

Modified:
   trunk/windstille/src/util/util.cpp
Log:
Bug fixing in endian swapping

Modified: trunk/windstille/src/util/util.cpp
===================================================================
--- trunk/windstille/src/util/util.cpp	2010-10-24 17:17:19 UTC (rev 3404)
+++ trunk/windstille/src/util/util.cpp	2010-10-24 18:22:24 UTC (rev 3405)
@@ -78,7 +78,7 @@
     uint32_t raw_v;
   } result;
   
-  if (!in.read(reinterpret_cast<char*>(&result), sizeof(result)))
+  if (!in.read(reinterpret_cast<char*>(&result.raw_v), sizeof(result.raw_v)))
   {
     std::ostringstream msg;
     msg << "Problem reading float value: " << strerror(errno);
@@ -112,8 +112,7 @@
   {
     if (is_big_endian())
     {
-      byte_swap16(result);
-      return result;
+      return byte_swap16(result);
     }
     else
     {
@@ -136,8 +135,7 @@
   {
     if (is_big_endian())
     {
-      byte_swap32(result);
-      return result;
+      return byte_swap32(result);
     }
     else
     {
@@ -176,7 +174,14 @@
 uint32_t
 byte_swap32(uint32_t v)
 {
-#ifdef __GNUC__
+#if defined(__APPLE__)
+  // FIXME: there are probably faster ways, also inline all this stuff
+  return
+    (v & 0xff000000) >> 24 |
+    (v & 0x00ff0000) >>  8 |
+    (v & 0x0000ff00) <<  8 |
+    (v & 0x000000ff) << 24;
+#elif defined(__GNUC__)
   return __builtin_bswap32(v);
 #else
   return _byteswap_ulong(v);



From grumbel at mail.berlios.de  Sun Oct 24 20:52:30 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 20:52:30 +0200
Subject: [Windstille-commit] r3406 - trunk/windstille/src/util
Message-ID: <20101024185230.AC20648107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 20:52:30 +0200 (Sun, 24 Oct 2010)
New Revision: 3406

Modified:
   trunk/windstille/src/util/util.hpp
Log:
Added is_little_endian()

Modified: trunk/windstille/src/util/util.hpp
===================================================================
--- trunk/windstille/src/util/util.hpp	2010-10-24 18:22:24 UTC (rev 3405)
+++ trunk/windstille/src/util/util.hpp	2010-10-24 18:52:30 UTC (rev 3406)
@@ -45,7 +45,7 @@
 uint32_t    read_uint32_t(std::istream& in);
 std::string read_string(std::istream& in, size_t size);
 
-inline int is_big_endian()
+inline bool is_big_endian()
 {
   union {
     uint32_t i;
@@ -55,6 +55,11 @@
   return bint.c[0] == 1; 
 }
 
+inline bool is_little_endian()
+{
+  return !is_big_endian();
+}
+
 uint16_t    byte_swap16(uint16_t v);
 uint32_t    byte_swap32(uint32_t v);
 



From grumbel at mail.berlios.de  Sun Oct 24 20:53:22 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 20:53:22 +0200
Subject: [Windstille-commit] r3407 - trunk/windstille/src/display
Message-ID: <20101024185322.A537948107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 20:53:22 +0200 (Sun, 24 Oct 2010)
New Revision: 3407

Modified:
   trunk/windstille/src/display/texture.cpp
Log:
Improved error messages

Modified: trunk/windstille/src/display/texture.cpp
===================================================================
--- trunk/windstille/src/display/texture.cpp	2010-10-24 18:52:30 UTC (rev 3406)
+++ trunk/windstille/src/display/texture.cpp	2010-10-24 18:53:22 UTC (rev 3407)
@@ -20,6 +20,7 @@
 #include "display/texture.hpp"
 
 #include <stdint.h>
+#include <sstream>
 #include <stdexcept>
 
 #include "math/rect.hpp"
@@ -27,6 +28,7 @@
 #include "display/opengl_state.hpp"
 #include "display/texture_manager.hpp"
 #include "display/assert_gl.hpp"
+#include "util/util.hpp"
 
 static inline bool is_power_of_2(int v)
 {
@@ -71,7 +73,9 @@
   {
     if (!is_power_of_2(width) || !is_power_of_2(height))
     {
-      throw std::runtime_error("image has non power of two size");
+      std::ostringstream str;
+      str << "Texture::Texture(): texture dimensions have non power of two size: " << width << "x" << height;
+      throw std::runtime_error(str.str());
     }
   }
 
@@ -105,7 +109,10 @@
   {
     if (!is_power_of_2(image->get_width()) || !is_power_of_2(image->get_height()))
     {
-      throw std::runtime_error("image has non power of two size");
+      std::ostringstream str;
+      str << "Texture::Texture(): image dimensions have non power of two size: " 
+          << image->get_width() << "x" << image->get_height();
+      throw std::runtime_error(str.str());
     }
   }
 
@@ -127,11 +134,11 @@
 
     GLint sdl_format;
 
-    if (image->get_bytes_per_pixel() == 3)
+    if (image->get_format() == SoftwareSurface::RGB)
     {
       sdl_format = GL_RGB;
     }
-    else if (image->get_bytes_per_pixel() == 4)
+    else if (image->get_format() == SoftwareSurface::RGBA)
     {
       sdl_format = GL_RGBA;
     }
@@ -142,7 +149,7 @@
 
     glBindTexture(GL_TEXTURE_2D, m_handle);
 
-    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
+    glPixelStorei(GL_UNPACK_ALIGNMENT, 4);
     glPixelStorei(GL_UNPACK_ROW_LENGTH, image->get_pitch() / image->get_bytes_per_pixel());
 
     if (0)
@@ -206,17 +213,17 @@
 {
   GLint sdl_format;
 
-  if (image->get_bytes_per_pixel() == 3)
+  if (image->get_format() == SoftwareSurface::RGB)
   {
     sdl_format = GL_RGB;
   }
-  else if (image->get_bytes_per_pixel() == 4)
+  else if (image->get_format() == SoftwareSurface::RGBA)
   {
     sdl_format = GL_RGBA;
   }
   else
   {
-    throw std::runtime_error("Texture: Image format not supported");
+    throw std::runtime_error("Texture: SoftwareSurface format not supported");
   }
 
   glBindTexture(GL_TEXTURE_2D, m_handle);



From grumbel at mail.berlios.de  Sun Oct 24 20:53:52 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 20:53:52 +0200
Subject: [Windstille-commit] r3408 - trunk/windstille/src/display
Message-ID: <20101024185352.C7F5B48107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 20:53:52 +0200 (Sun, 24 Oct 2010)
New Revision: 3408

Modified:
   trunk/windstille/src/display/software_surface.cpp
   trunk/windstille/src/display/software_surface.hpp
Log:
Convert surface data into a normalized format to avoid issues with Texture upload

Modified: trunk/windstille/src/display/software_surface.cpp
===================================================================
--- trunk/windstille/src/display/software_surface.cpp	2010-10-24 18:53:22 UTC (rev 3407)
+++ trunk/windstille/src/display/software_surface.cpp	2010-10-24 18:53:52 UTC (rev 3408)
@@ -17,14 +17,16 @@
 */
 
 #include <boost/scoped_array.hpp>
+#include <boost/format.hpp>
 #include <png.h>
 #include <errno.h>
 #include <sstream>
 #include <stdexcept>
 #include <SDL_image.h>
 
+#include "display/software_surface.hpp"
 #include "math/rect.hpp"
-#include "display/software_surface.hpp"
+#include "util/util.hpp"
 
 SoftwareSurfacePtr
 SoftwareSurface::create(const Pathname& filename)
@@ -39,7 +41,8 @@
 }
 
 SoftwareSurface::SoftwareSurface(const Pathname& filename) :
-  m_surface(0)
+  m_surface(0),
+  m_format(RGBA)
 {
   m_surface = IMG_Load(filename.get_sys_path().c_str());
 
@@ -53,24 +56,114 @@
   {
     SDL_SetAlpha(m_surface, 0, 0);
 
+    if (m_surface->format->BytesPerPixel == 4)
+    { // convert image into standard format
+      m_format = RGBA;
+      
+      if ((is_little_endian() && 
+           !(m_surface->format->Rmask == 0x000000ff &&
+             m_surface->format->Gmask == 0x0000ff00 &&
+             m_surface->format->Bmask == 0x00ff0000 &&
+             m_surface->format->Amask == 0xff000000)) ||
+          (is_big_endian() &&
+           !(m_surface->format->Rmask == 0xff000000 &&
+             m_surface->format->Gmask == 0x00ff0000 &&
+             m_surface->format->Bmask == 0x0000ff00 &&
+             m_surface->format->Amask == 0x000000ff)))
+      {
+        std::cout << "XXX Doing conversation RGBA: " << filename << std::endl;
+        std::cout << "    rmask: " << boost::format("%08x %08x %08x %08x") % 
+          m_surface->format->Rmask %
+          m_surface->format->Gmask %
+          m_surface->format->Bmask %
+          m_surface->format->Amask << std::endl;
+
+        SDL_Surface* tmp_surface;
+        if (is_little_endian())
+        {
+          tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                             m_surface->w, m_surface->h, 32,
+                                             0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
+        }
+        else
+        {
+          tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                             m_surface->w, m_surface->h, 32,
+                                             0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
+        }
+
+        SDL_BlitSurface(m_surface, 0, tmp_surface, 0);
+
+        std::swap(m_surface, tmp_surface);
+        SDL_FreeSurface(tmp_surface);
+      }
+    }
+    else if (m_surface->format->BytesPerPixel == 3)
+    {
+      m_format = RGB;
+      
+      if ((is_little_endian() && 
+           !(m_surface->format->Rmask == 0x0000ff &&
+             m_surface->format->Gmask == 0x00ff00 &&
+             m_surface->format->Bmask == 0xff0000 &&
+             m_surface->format->Amask == 0x000000)) ||
+          (is_big_endian() &&
+           !(m_surface->format->Rmask == 0xff0000 &&
+             m_surface->format->Gmask == 0x00ff00 &&
+             m_surface->format->Bmask == 0x0000ff &&
+             m_surface->format->Amask == 0x000000)))
+      {
+        std::cout << "XXX Doing conversation RGB: " << filename << std::endl;
+        std::cout << "    rmask: " << boost::format("%08x %08x %08x %08x") % 
+          m_surface->format->Rmask %
+          m_surface->format->Gmask %
+          m_surface->format->Bmask %
+          m_surface->format->Amask << std::endl;
+
+
+        SDL_Surface* tmp_surface;
+        if (is_little_endian())
+        {
+          tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                             m_surface->w, m_surface->h, 24,
+                                             0xff000, 0x00ff00, 0x0000ff, 0);
+        }
+        else
+        {
+          tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                             m_surface->w, m_surface->h, 24,
+                                             0x0000ff, 0x00ff00, 0xff0000, 0);
+        }
+
+        SDL_BlitSurface(m_surface, 0, tmp_surface, 0);
+
+        std::swap(m_surface, tmp_surface);
+        SDL_FreeSurface(tmp_surface);
+      }
+    }
+
     assert(!SDL_MUSTLOCK(m_surface));
   }
 }
 
 SoftwareSurface::SoftwareSurface(int width, int height, Format format) :
-  m_surface(0)
+  m_surface(0),
+  m_format(format)
 {
   assert(format == RGBA);
 
-#if SDL_BYTEORDER == SDL_BIG_ENDIAN
-  m_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
-                                       width, height, 32,
-                                       0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
-#else
-  m_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
-                                       width, height, 32,
-                                       0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
-#endif
+  if (is_big_endian())
+  {
+    m_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                     width, height, 32,
+                                     0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
+  }
+  else
+  {
+    m_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
+                                     width, height, 32,
+                                     0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
+  }
 
   SDL_SetAlpha(m_surface, 0, 0);
 

Modified: trunk/windstille/src/display/software_surface.hpp
===================================================================
--- trunk/windstille/src/display/software_surface.hpp	2010-10-24 18:53:22 UTC (rev 3407)
+++ trunk/windstille/src/display/software_surface.hpp	2010-10-24 18:53:52 UTC (rev 3408)
@@ -67,8 +67,11 @@
 
   bool is_at(int x, int y) const;
 
+  Format get_format() const { return m_format; }
+
 private:
   SDL_Surface* m_surface;
+  Format m_format;
 
 private:
   SoftwareSurface(const SoftwareSurface&);



From grumbel at mail.berlios.de  Sun Oct 24 21:07:23 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 21:07:23 +0200
Subject: [Windstille-commit] r3409 - trunk/windstille/src/display
Message-ID: <20101024190723.B10AB48107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 21:07:23 +0200 (Sun, 24 Oct 2010)
New Revision: 3409

Modified:
   trunk/windstille/src/display/software_surface.cpp
Log:
Fixed mixup in SoftwareSurface conversion


Modified: trunk/windstille/src/display/software_surface.cpp
===================================================================
--- trunk/windstille/src/display/software_surface.cpp	2010-10-24 18:53:52 UTC (rev 3408)
+++ trunk/windstille/src/display/software_surface.cpp	2010-10-24 19:07:23 UTC (rev 3409)
@@ -83,13 +83,13 @@
         {
           tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
                                              m_surface->w, m_surface->h, 32,
-                                             0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
+                                             0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
         }
         else
         {
           tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
                                              m_surface->w, m_surface->h, 32,
-                                             0x000000ff, 0x0000ff00, 0x00ff0000, 0xff000000);
+                                             0xff000000, 0x00ff0000, 0x0000ff00, 0x000000ff);
         }
 
         SDL_BlitSurface(m_surface, 0, tmp_surface, 0);
@@ -126,13 +126,13 @@
         {
           tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
                                              m_surface->w, m_surface->h, 24,
-                                             0xff000, 0x00ff00, 0x0000ff, 0);
+                                             0x0000ff, 0x00ff00, 0xff0000, 0);
         }
         else
         {
           tmp_surface = SDL_CreateRGBSurface(SDL_SWSURFACE,
                                              m_surface->w, m_surface->h, 24,
-                                             0x0000ff, 0x00ff00, 0xff0000, 0);
+                                             0xff000, 0x00ff00, 0x0000ff, 0);
         }
 
         SDL_BlitSurface(m_surface, 0, tmp_surface, 0);



From grumbel at mail.berlios.de  Sun Oct 24 21:13:46 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 21:13:46 +0200
Subject: [Windstille-commit] r3410 - trunk/windstille/data/images
Message-ID: <20101024191346.D939148107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 21:13:46 +0200 (Sun, 24 Oct 2010)
New Revision: 3410

Modified:
   trunk/windstille/data/images/greychess.png
Log:
Resized to 64x64

Modified: trunk/windstille/data/images/greychess.png
===================================================================
(Binary files differ)



From grumbel at mail.berlios.de  Sun Oct 24 21:26:16 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 21:26:16 +0200
Subject: [Windstille-commit] r3411 - trunk/windstille/src/display
Message-ID: <20101024192616.6B37648107E@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 21:26:16 +0200 (Sun, 24 Oct 2010)
New Revision: 3411

Modified:
   trunk/windstille/src/display/surface_manager.cpp
   trunk/windstille/src/display/texture.cpp
Log:
Some more tolleranz for hardware without NPOV texture support

Modified: trunk/windstille/src/display/surface_manager.cpp
===================================================================
--- trunk/windstille/src/display/surface_manager.cpp	2010-10-24 19:13:46 UTC (rev 3410)
+++ trunk/windstille/src/display/surface_manager.cpp	2010-10-24 19:26:16 UTC (rev 3411)
@@ -139,10 +139,17 @@
 SurfaceManager::create_texture(SoftwareSurfacePtr image,
                                float* maxu, float* maxv)
 {
-  // OpenGL2.0 should be fine with non-power-of-two
-  int texture_w = image->get_width();  //math::round_to_power_of_two(image->get_width());
-  int texture_h = image->get_height(); //math::round_to_power_of_two(image->get_height());
+  int texture_w = image->get_width(); 
+  int texture_h = image->get_height(); 
 
+  // OpenGL2.0 should be fine with non-power-of-two, but some
+  // implementations aren't
+  if (!GLEW_ARB_texture_non_power_of_two)
+  {
+    texture_w = math::round_to_power_of_two(texture_w);
+    texture_h = math::round_to_power_of_two(texture_h);
+  }
+
   SoftwareSurfacePtr convert = SoftwareSurface::create(texture_w, texture_h);
 
   image->blit(convert, 0, 0);

Modified: trunk/windstille/src/display/texture.cpp
===================================================================
--- trunk/windstille/src/display/texture.cpp	2010-10-24 19:13:46 UTC (rev 3410)
+++ trunk/windstille/src/display/texture.cpp	2010-10-24 19:26:16 UTC (rev 3411)
@@ -73,9 +73,10 @@
   {
     if (!is_power_of_2(width) || !is_power_of_2(height))
     {
-      std::ostringstream str;
-      str << "Texture::Texture(): texture dimensions have non power of two size: " << width << "x" << height;
-      throw std::runtime_error(str.str());
+      std::cout  << "Texture::Texture(): texture dimensions have non power of two size: " << width << "x" << height;
+
+      width  = math::round_to_power_of_two(width);
+      height = math::round_to_power_of_two(height);
     }
   }
 
@@ -117,7 +118,9 @@
   }
 
   if (image->get_bits_per_pixel() != 24 && image->get_bits_per_pixel() != 32)
+  {
     throw std::runtime_error("image has not 24 or 32 bit color depth");
+  }
 
   // FIXME: User SDL_ConvertSurface to bring images in the right format
   // SDL_ConvertSurface(bmp, screen->format, SDL_SWSURFACE);



From grumbel at mail.berlios.de  Sun Oct 24 21:53:46 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 21:53:46 +0200
Subject: [Windstille-commit] r3412 - trunk/windstille/src/display
Message-ID: <20101024195346.46766481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 21:53:46 +0200 (Sun, 24 Oct 2010)
New Revision: 3412

Modified:
   trunk/windstille/src/display/basic_compositor_impl.cpp
Log:
Fixed lightmap rendering for NPOV textures

Modified: trunk/windstille/src/display/basic_compositor_impl.cpp
===================================================================
--- trunk/windstille/src/display/basic_compositor_impl.cpp	2010-10-24 19:26:16 UTC (rev 3411)
+++ trunk/windstille/src/display/basic_compositor_impl.cpp	2010-10-24 19:53:46 UTC (rev 3412)
@@ -109,16 +109,16 @@
 
     glBegin(GL_QUADS);
 
-    glTexCoord2i(0, 1);
+    glTexCoord2f(m_lightmap->get_uv().left, m_lightmap->get_uv().bottom);
     glVertex2i(0, 0);
 
-    glTexCoord2i(1, 1);
+    glTexCoord2f(m_lightmap->get_uv().right, m_lightmap->get_uv().bottom);
     glVertex2i(m_viewport.width, 0);
 
-    glTexCoord2i(1, 0);
+    glTexCoord2f(m_lightmap->get_uv().right, m_lightmap->get_uv().top);
     glVertex2i(m_viewport.width, m_viewport.height);
 
-    glTexCoord2i(0, 0);
+    glTexCoord2f(m_lightmap->get_uv().left, m_lightmap->get_uv().top);
     glVertex2i(0, m_viewport.height);
 
     glEnd();



From grumbel at mail.berlios.de  Sun Oct 24 21:54:20 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 21:54:20 +0200
Subject: [Windstille-commit] r3413 - trunk/windstille/src/display
Message-ID: <20101024195420.87FF0481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 21:54:20 +0200 (Sun, 24 Oct 2010)
New Revision: 3413

Modified:
   trunk/windstille/src/display/texture.cpp
Log:
Properly set m_width/m_height when they are scaled to next power of two

Modified: trunk/windstille/src/display/texture.cpp
===================================================================
--- trunk/windstille/src/display/texture.cpp	2010-10-24 19:53:46 UTC (rev 3412)
+++ trunk/windstille/src/display/texture.cpp	2010-10-24 19:54:20 UTC (rev 3413)
@@ -71,12 +71,12 @@
 {
   if (!GLEW_ARB_texture_non_power_of_two)
   {
-    if (!is_power_of_2(width) || !is_power_of_2(height))
+    if (!is_power_of_2(m_width) || !is_power_of_2(m_height))
     {
-      std::cout  << "Texture::Texture(): texture dimensions have non power of two size: " << width << "x" << height;
+      std::cout  << "Texture::Texture(): texture dimensions have non power of two size: " << m_width << "x" << m_height;
 
-      width  = math::round_to_power_of_two(width);
-      height = math::round_to_power_of_two(height);
+      m_width  = math::round_to_power_of_two(m_width);
+      m_height = math::round_to_power_of_two(m_height);
     }
   }
 
@@ -85,7 +85,7 @@
 
   glBindTexture(GL_TEXTURE_2D, m_handle);
 
-  glTexImage2D(target, 0, format, width, height, 0, GL_RGBA,
+  glTexImage2D(target, 0, format, m_width, m_height, 0, GL_RGBA,
                GL_UNSIGNED_BYTE, 0);
 
   glTexParameteri(target, GL_TEXTURE_MIN_FILTER, GL_LINEAR);



From grumbel at mail.berlios.de  Sun Oct 24 22:00:08 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 22:00:08 +0200
Subject: [Windstille-commit] r3414 - trunk/windstille/src/display
Message-ID: <20101024200008.96F17481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 22:00:08 +0200 (Sun, 24 Oct 2010)
New Revision: 3414

Added:
   trunk/windstille/src/display/state_set.cpp
   trunk/windstille/src/display/state_set.hpp
Log:
Added incomplete StateSet class

Added: trunk/windstille/src/display/state_set.cpp
===================================================================
--- trunk/windstille/src/display/state_set.cpp	                        (rev 0)
+++ trunk/windstille/src/display/state_set.cpp	2010-10-24 20:00:08 UTC (rev 3414)
@@ -0,0 +1,80 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#include "state_set.hpp"
+
+StateSet::StateSet()
+{
+}
+
+void
+StateSet::set_texture(TexturePtr texture, int unit)
+{
+}
+
+void
+StateSet::set_blend_func(GLenum sfactor, GLenum dfactor)
+{
+}
+
+void
+StateSet::set_program(ShaderProgramPtr prog)
+{
+}
+
+void
+StateSet::set_uniform1f(const char* name, GLfloat v0)
+{
+}
+
+void
+StateSet::set_uniform2f(const char* name, GLfloat v0, GLfloat v1)
+{
+}
+
+void
+StateSet::set_uniform3f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2)
+{
+}
+
+void
+StateSet::set_uniform4f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)
+{
+}
+
+void
+StateSet::set_uniform1i(const char* name, GLint v0)
+{
+}
+
+void
+StateSet::set_uniform2i(const char* name, GLint v0, GLint v1)
+{
+}
+
+void
+StateSet::set_uniform3i(const char* name, GLint v0, GLint v1, GLint v2)
+{
+}
+
+void
+StateSet::set_uniform4i(const char* name, GLint v0, GLint v1, GLint v2, GLint v3)
+{
+}
+
+/* EOF */


Property changes on: trunk/windstille/src/display/state_set.cpp
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/src/display/state_set.hpp
===================================================================
--- trunk/windstille/src/display/state_set.hpp	                        (rev 0)
+++ trunk/windstille/src/display/state_set.hpp	2010-10-24 20:00:08 UTC (rev 3414)
@@ -0,0 +1,67 @@
+/*
+**  Windstille - A Sci-Fi Action-Adventure Game
+**  Copyright (C) 2010 Ingo Ruhnke <grumbel at gmx.de>
+**
+**  This program is free software: you can redistribute it and/or modify
+**  it under the terms of the GNU General Public License as published by
+**  the Free Software Foundation, either version 3 of the License, or
+**  (at your option) any later version.
+**
+**  This program is distributed in the hope that it will be useful,
+**  but WITHOUT ANY WARRANTY; without even the implied warranty of
+**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+**  GNU General Public License for more details.
+**
+**  You should have received a copy of the GNU General Public License
+**  along with this program.  If not, see <http://www.gnu.org/licenses/>.
+*/
+
+#ifndef HEADER_WINDSTILLE_DISPLAY_STATE_SET_HPP
+#define HEADER_WINDSTILLE_DISPLAY_STATE_SET_HPP
+
+#include <boost/shared_ptr.hpp>
+#include <GL/glew.h>
+
+#include "display/texture.hpp"
+#include "display/shader_program.hpp"
+
+class StateSet;
+typedef boost::shared_ptr<StateSet> StateSetPtr;
+
+class StateSet
+{
+private:
+public:
+  StateSet();
+
+  /** 
+   * Binds the given \a texture to the given texture \a unit and
+   * enables texturing via glEnable(GL_TEXTURE2D) for the unit.
+   */
+  void set_texture(TexturePtr texture, int unit = 0);
+  void set_blend_func(GLenum sfactor, GLenum dfactor);
+  void set_program(ShaderProgramPtr prog);
+
+  void set_state(GLenum cap, bool value);
+
+  void set_uniform1f(const char* name, GLfloat v0);
+  void set_uniform2f(const char* name, GLfloat v0, GLfloat v1);
+  void set_uniform3f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2);
+  void set_uniform4f(const char* name, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
+
+  void set_uniform1i(const char* name, GLint v0);
+  void set_uniform2i(const char* name, GLint v0, GLint v1);
+  void set_uniform3i(const char* name, GLint v0, GLint v1, GLint v2);
+  void set_uniform4i(const char* name, GLint v0, GLint v1, GLint v2, GLint v3);
+
+  void push();
+  void pop();
+
+private:
+  StateSet(const StateSet&);
+  StateSet& operator=(const StateSet&);
+};
+
+#endif
+
+/* EOF */


Property changes on: trunk/windstille/src/display/state_set.hpp
___________________________________________________________________
Added: svn:eol-style
   + native



From grumbel at mail.berlios.de  Sun Oct 24 23:04:55 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 23:04:55 +0200
Subject: [Windstille-commit] r3415 - in trunk/windstille/src: . macosx
	macosx/SDLMain.nib
Message-ID: <20101024210455.BA7B2481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 23:04:55 +0200 (Sun, 24 Oct 2010)
New Revision: 3415

Added:
   trunk/windstille/src/macosx/
   trunk/windstille/src/macosx/ReadMeDevLite.txt
   trunk/windstille/src/macosx/SDLMain.h
   trunk/windstille/src/macosx/SDLMain.m
   trunk/windstille/src/macosx/SDLMain.nib/
   trunk/windstille/src/macosx/SDLMain.nib/classes.nib
   trunk/windstille/src/macosx/SDLMain.nib/info.nib
   trunk/windstille/src/macosx/SDLMain.nib/objects.nib
Log:
Added SDLmain.m, required by the Mac OS X build

Added: trunk/windstille/src/macosx/ReadMeDevLite.txt
===================================================================
--- trunk/windstille/src/macosx/ReadMeDevLite.txt	                        (rev 0)
+++ trunk/windstille/src/macosx/ReadMeDevLite.txt	2010-10-24 21:04:55 UTC (rev 3415)
@@ -0,0 +1,12 @@
+This directory is for developers. This directory contains some basic essentials you will need for developing SDL based applications on OS X. The SDL-devel package contains all of this stuff plus more, so you can ignore this if you install the SDL-devel.pkg. The SDL-devel package contains Xcode templates, SDL documentation, and different variations of SDLmain and NIB files for SDL.
+
+To compile an SDL based application on OS X, SDLMain.m must be compiled into your program. (See the SDL FAQ). The SDL-devel.pkg includes Xcode templates which already do this for you. But for those who may not want to install the dev package, an SDLMain is provided here as a convenience. Be aware that there are different variations of SDLMain.m depending on what class of SDL application you make and they are intended to work with NIB files. Only one SDLMain variant is provided here and without any NIB files. You should look to the SDL-devel package for the others. We currently do not provide a SDLMain.a file, partly to call to attention that there are different variations of SDLmain.
+
+To build from the command line, your gcc line will look something like this:
+
+gcc -I/Library/Frameworks/SDL.framework/Headers MyProgram.c SDLmain.m -framework SDL -framework Cocoa
+
+An SDL/OpenGL based application might look like:
+
+gcc -I/Library/Frameworks/SDL.framework/Headers -I/System/Library/Frameworks/OpenGL.framework/Headers MyProgram.c SDLmain.m -framework SDL -framework Cocoa -framework OpenGL
+


Property changes on: trunk/windstille/src/macosx/ReadMeDevLite.txt
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/src/macosx/SDLMain.h
===================================================================
--- trunk/windstille/src/macosx/SDLMain.h	                        (rev 0)
+++ trunk/windstille/src/macosx/SDLMain.h	2010-10-24 21:04:55 UTC (rev 3415)
@@ -0,0 +1,16 @@
+/*   SDLMain.m - main entry point for our Cocoa-ized SDL app
+       Initial Version: Darrell Walisser <dwaliss1 at purdue.edu>
+       Non-NIB-Code & other changes: Max Horn <max at quendi.de>
+
+    Feel free to customize this file to suit your needs
+*/
+
+#ifndef _SDLMain_h_
+#define _SDLMain_h_
+
+#import <Cocoa/Cocoa.h>
+
+ at interface SDLMain : NSObject
+ at end
+
+#endif /* _SDLMain_h_ */


Property changes on: trunk/windstille/src/macosx/SDLMain.h
___________________________________________________________________
Added: svn:eol-style
   + native

Added: trunk/windstille/src/macosx/SDLMain.m
===================================================================
--- trunk/windstille/src/macosx/SDLMain.m	                        (rev 0)
+++ trunk/windstille/src/macosx/SDLMain.m	2010-10-24 21:04:55 UTC (rev 3415)
@@ -0,0 +1,383 @@
+/*   SDLMain.m - main entry point for our Cocoa-ized SDL app
+       Initial Version: Darrell Walisser <dwaliss1 at purdue.edu>
+       Non-NIB-Code & other changes: Max Horn <max at quendi.de>
+
+    Feel free to customize this file to suit your needs
+*/
+
+#include "SDL.h"
+#include "SDLMain.h"
+#include <sys/param.h> /* for MAXPATHLEN */
+#include <unistd.h>
+
+/* For some reaon, Apple removed setAppleMenu from the headers in 10.4,
+ but the method still is there and works. To avoid warnings, we declare
+ it ourselves here. */
+ at interface NSApplication(SDL_Missing_Methods)
+- (void)setAppleMenu:(NSMenu *)menu;
+ at end
+
+/* Use this flag to determine whether we use SDLMain.nib or not */
+#define		SDL_USE_NIB_FILE	0
+
+/* Use this flag to determine whether we use CPS (docking) or not */
+#define		SDL_USE_CPS		1
+#ifdef SDL_USE_CPS
+/* Portions of CPS.h */
+typedef struct CPSProcessSerNum
+{
+	UInt32		lo;
+	UInt32		hi;
+} CPSProcessSerNum;
+
+extern OSErr	CPSGetCurrentProcess( CPSProcessSerNum *psn);
+extern OSErr 	CPSEnableForegroundOperation( CPSProcessSerNum *psn, UInt32 _arg2, UInt32 _arg3, UInt32 _arg4, UInt32 _arg5);
+extern OSErr	CPSSetFrontProcess( CPSProcessSerNum *psn);
+
+#endif /* SDL_USE_CPS */
+
+static int    gArgc;
+static char  **gArgv;
+static BOOL   gFinderLaunch;
+static BOOL   gCalledAppMainline = FALSE;
+
+static NSString *getApplicationName(void)
+{
+    const NSDictionary *dict;
+    NSString *appName = 0;
+
+    /* Determine the application name */
+    dict = (const NSDictionary *)CFBundleGetInfoDictionary(CFBundleGetMainBundle());
+    if (dict)
+        appName = [dict objectForKey: @"CFBundleName"];
+    
+    if (![appName length])
+        appName = [[NSProcessInfo processInfo] processName];
+
+    return appName;
+}
+
+#if SDL_USE_NIB_FILE
+/* A helper category for NSString */
+ at interface NSString (ReplaceSubString)
+- (NSString *)stringByReplacingRange:(NSRange)aRange with:(NSString *)aString;
+ at end
+#endif
+
+ at interface SDLApplication : NSApplication
+ at end
+
+ at implementation SDLApplication
+/* Invoked from the Quit menu item */
+- (void)terminate:(id)sender
+{
+    /* Post a SDL_QUIT event */
+    SDL_Event event;
+    event.type = SDL_QUIT;
+    SDL_PushEvent(&event);
+}
+ at end
+
+/* The main class of the application, the application's delegate */
+ at implementation SDLMain
+
+/* Set the working directory to the .app's parent directory */
+- (void) setupWorkingDirectory:(BOOL)shouldChdir
+{
+    if (shouldChdir)
+    {
+        char parentdir[MAXPATHLEN];
+        CFURLRef url = CFBundleCopyBundleURL(CFBundleGetMainBundle());
+        CFURLRef url2 = CFURLCreateCopyDeletingLastPathComponent(0, url);
+        if (CFURLGetFileSystemRepresentation(url2, 1, (UInt8 *)parentdir, MAXPATHLEN)) {
+            chdir(parentdir);   /* chdir to the binary app's parent */
+        }
+        CFRelease(url);
+        CFRelease(url2);
+    }
+}
+
+#if SDL_USE_NIB_FILE
+
+/* Fix menu to contain the real app name instead of "SDL App" */
+- (void)fixMenu:(NSMenu *)aMenu withAppName:(NSString *)appName
+{
+    NSRange aRange;
+    NSEnumerator *enumerator;
+    NSMenuItem *menuItem;
+
+    aRange = [[aMenu title] rangeOfString:@"SDL App"];
+    if (aRange.length != 0)
+        [aMenu setTitle: [[aMenu title] stringByReplacingRange:aRange with:appName]];
+
+    enumerator = [[aMenu itemArray] objectEnumerator];
+    while ((menuItem = [enumerator nextObject]))
+    {
+        aRange = [[menuItem title] rangeOfString:@"SDL App"];
+        if (aRange.length != 0)
+            [menuItem setTitle: [[menuItem title] stringByReplacingRange:aRange with:appName]];
+        if ([menuItem hasSubmenu])
+            [self fixMenu:[menuItem submenu] withAppName:appName];
+    }
+    [ aMenu sizeToFit ];
+}
+
+#else
+
+static void setApplicationMenu(void)
+{
+    /* warning: this code is very odd */
+    NSMenu *appleMenu;
+    NSMenuItem *menuItem;
+    NSString *title;
+    NSString *appName;
+    
+    appName = getApplicationName();
+    appleMenu = [[NSMenu alloc] initWithTitle:@""];
+    
+    /* Add menu items */
+    title = [@"About " stringByAppendingString:appName];
+    [appleMenu addItemWithTitle:title action:@selector(orderFrontStandardAboutPanel:) keyEquivalent:@""];
+
+    [appleMenu addItem:[NSMenuItem separatorItem]];
+
+    title = [@"Hide " stringByAppendingString:appName];
+    [appleMenu addItemWithTitle:title action:@selector(hide:) keyEquivalent:@"h"];
+
+    menuItem = (NSMenuItem *)[appleMenu addItemWithTitle:@"Hide Others" action:@selector(hideOtherApplications:) keyEquivalent:@"h"];
+    [menuItem setKeyEquivalentModifierMask:(NSAlternateKeyMask|NSCommandKeyMask)];
+
+    [appleMenu addItemWithTitle:@"Show All" action:@selector(unhideAllApplications:) keyEquivalent:@""];
+
+    [appleMenu addItem:[NSMenuItem separatorItem]];
+
+    title = [@"Quit " stringByAppendingString:appName];
+    [appleMenu addItemWithTitle:title action:@selector(terminate:) keyEquivalent:@"q"];
+
+    
+    /* Put menu into the menubar */
+    menuItem = [[NSMenuItem alloc] initWithTitle:@"" action:nil keyEquivalent:@""];
+    [menuItem setSubmenu:appleMenu];
+    [[NSApp mainMenu] addItem:menuItem];
+
+    /* Tell the application object that this is now the application menu */
+    [NSApp setAppleMenu:appleMenu];
+
+    /* Finally give up our references to the objects */
+    [appleMenu release];
+    [menuItem release];
+}
+
+/* Create a window menu */
+static void setupWindowMenu(void)
+{
+    NSMenu      *windowMenu;
+    NSMenuItem  *windowMenuItem;
+    NSMenuItem  *menuItem;
+
+    windowMenu = [[NSMenu alloc] initWithTitle:@"Window"];
+    
+    /* "Minimize" item */
+    menuItem = [[NSMenuItem alloc] initWithTitle:@"Minimize" action:@selector(performMiniaturize:) keyEquivalent:@"m"];
+    [windowMenu addItem:menuItem];
+    [menuItem release];
+    
+    /* Put menu into the menubar */
+    windowMenuItem = [[NSMenuItem alloc] initWithTitle:@"Window" action:nil keyEquivalent:@""];
+    [windowMenuItem setSubmenu:windowMenu];
+    [[NSApp mainMenu] addItem:windowMenuItem];
+    
+    /* Tell the application object that this is now the window menu */
+    [NSApp setWindowsMenu:windowMenu];
+
+    /* Finally give up our references to the objects */
+    [windowMenu release];
+    [windowMenuItem release];
+}
+
+/* Replacement for NSApplicationMain */
+static void CustomApplicationMain (int argc, char **argv)
+{
+    NSAutoreleasePool	*pool = [[NSAutoreleasePool alloc] init];
+    SDLMain				*sdlMain;
+
+    /* Ensure the application object is initialised */
+    [SDLApplication sharedApplication];
+    
+#ifdef SDL_USE_CPS
+    {
+        CPSProcessSerNum PSN;
+        /* Tell the dock about us */
+        if (!CPSGetCurrentProcess(&PSN))
+            if (!CPSEnableForegroundOperation(&PSN,0x03,0x3C,0x2C,0x1103))
+                if (!CPSSetFrontProcess(&PSN))
+                    [SDLApplication sharedApplication];
+    }
+#endif /* SDL_USE_CPS */
+
+    /* Set up the menubar */
+    [NSApp setMainMenu:[[NSMenu alloc] init]];
+    setApplicationMenu();
+    setupWindowMenu();
+
+    /* Create SDLMain and make it the app delegate */
+    sdlMain = [[SDLMain alloc] init];
+    [NSApp setDelegate:sdlMain];
+    
+    /* Start the main event loop */
+    [NSApp run];
+    
+    [sdlMain release];
+    [pool release];
+}
+
+#endif
+
+
+/*
+ * Catch document open requests...this lets us notice files when the app
+ *  was launched by double-clicking a document, or when a document was
+ *  dragged/dropped on the app's icon. You need to have a
+ *  CFBundleDocumentsType section in your Info.plist to get this message,
+ *  apparently.
+ *
+ * Files are added to gArgv, so to the app, they'll look like command line
+ *  arguments. Previously, apps launched from the finder had nothing but
+ *  an argv[0].
+ *
+ * This message may be received multiple times to open several docs on launch.
+ *
+ * This message is ignored once the app's mainline has been called.
+ */
+- (BOOL)application:(NSApplication *)theApplication openFile:(NSString *)filename
+{
+    const char *temparg;
+    size_t arglen;
+    char *arg;
+    char **newargv;
+
+    if (!gFinderLaunch)  /* MacOS is passing command line args. */
+        return FALSE;
+
+    if (gCalledAppMainline)  /* app has started, ignore this document. */
+        return FALSE;
+
+    temparg = [filename UTF8String];
+    arglen = SDL_strlen(temparg) + 1;
+    arg = (char *) SDL_malloc(arglen);
+    if (arg == NULL)
+        return FALSE;
+
+    newargv = (char **) realloc(gArgv, sizeof (char *) * (gArgc + 2));
+    if (newargv == NULL)
+    {
+        SDL_free(arg);
+        return FALSE;
+    }
+    gArgv = newargv;
+
+    SDL_strlcpy(arg, temparg, arglen);
+    gArgv[gArgc++] = arg;
+    gArgv[gArgc] = NULL;
+    return TRUE;
+}
+
+
+/* Called when the internal event loop has just started running */
+- (void) applicationDidFinishLaunching: (NSNotification *) note
+{
+    int status;
+
+    /* Set the working directory to the .app's parent directory */
+    [self setupWorkingDirectory:gFinderLaunch];
+
+#if SDL_USE_NIB_FILE
+    /* Set the main menu to contain the real app name instead of "SDL App" */
+    [self fixMenu:[NSApp mainMenu] withAppName:getApplicationName()];
+#endif
+
+    /* Hand off to main application code */
+    gCalledAppMainline = TRUE;
+    status = SDL_main (gArgc, gArgv);
+
+    /* We're done, thank you for playing */
+    exit(status);
+}
+ at end
+
+
+ at implementation NSString (ReplaceSubString)
+
+- (NSString *)stringByReplacingRange:(NSRange)aRange with:(NSString *)aString
+{
+    unsigned int bufferSize;
+    unsigned int selfLen = [self length];
+    unsigned int aStringLen = [aString length];
+    unichar *buffer;
+    NSRange localRange;
+    NSString *result;
+
+    bufferSize = selfLen + aStringLen - aRange.length;
+    buffer = (unichar *)NSAllocateMemoryPages(bufferSize*sizeof(unichar));
+    
+    /* Get first part into buffer */
+    localRange.location = 0;
+    localRange.length = aRange.location;
+    [self getCharacters:buffer range:localRange];
+    
+    /* Get middle part into buffer */
+    localRange.location = 0;
+    localRange.length = aStringLen;
+    [aString getCharacters:(buffer+aRange.location) range:localRange];
+     
+    /* Get last part into buffer */
+    localRange.location = aRange.location + aRange.length;
+    localRange.length = selfLen - localRange.location;
+    [self getCharacters:(buffer+aRange.location+aStringLen) range:localRange];
+    
+    /* Build output string */
+    result = [NSString stringWithCharacters:buffer length:bufferSize];
+    
+    NSDeallocateMemoryPages(buffer, bufferSize);
+    
+    return result;
+}
+
+ at end
+
+
+
+#ifdef main
+#  undef main
+#endif
+
+
+/* Main entry point to executable - should *not* be SDL_main! */
+int main (int argc, char **argv)
+{
+    /* Copy the arguments into a global variable */
+    /* This is passed if we are launched by double-clicking */
+    if ( argc >= 2 && strncmp (argv[1], "-psn", 4) == 0 ) {
+        gArgv = (char **) SDL_malloc(sizeof (char *) * 2);
+        gArgv[0] = argv[0];
+        gArgv[1] = NULL;
+        gArgc = 1;
+        gFinderLaunch = YES;
+    } else {
+        int i;
+        gArgc = argc;
+        gArgv = (char **) SDL_malloc(sizeof (char *) * (argc+1));
+        for (i = 0; i <= argc; i++)
+            gArgv[i] = argv[i];
+        gFinderLaunch = NO;
+    }
+
+#if SDL_USE_NIB_FILE
+    [SDLApplication poseAsClass:[NSApplication class]];
+    NSApplicationMain (argc, argv);
+#else
+    CustomApplicationMain (argc, argv);
+#endif
+    return 0;
+}
+

Added: trunk/windstille/src/macosx/SDLMain.nib/classes.nib
===================================================================
--- trunk/windstille/src/macosx/SDLMain.nib/classes.nib	                        (rev 0)
+++ trunk/windstille/src/macosx/SDLMain.nib/classes.nib	2010-10-24 21:04:55 UTC (rev 3415)
@@ -0,0 +1,19 @@
+{
+    IBClasses = (
+        {CLASS = FirstResponder; LANGUAGE = ObjC; SUPERCLASS = NSObject; }, 
+        {
+            ACTIONS = {
+                help = id; 
+                newGame = id; 
+                openGame = id; 
+                prefsMenu = id; 
+                saveGame = id; 
+                saveGameAs = id; 
+            }; 
+            CLASS = SDLMain; 
+            LANGUAGE = ObjC; 
+            SUPERCLASS = NSObject; 
+        }
+    ); 
+    IBVersion = 1; 
+}
\ No newline at end of file

Added: trunk/windstille/src/macosx/SDLMain.nib/info.nib
===================================================================
--- trunk/windstille/src/macosx/SDLMain.nib/info.nib	                        (rev 0)
+++ trunk/windstille/src/macosx/SDLMain.nib/info.nib	2010-10-24 21:04:55 UTC (rev 3415)
@@ -0,0 +1,21 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple Computer//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IBDocumentLocation</key>
+	<string>62 117 356 240 0 0 1152 848 </string>
+	<key>IBEditorPositions</key>
+	<dict>
+		<key>29</key>
+		<string>62 362 195 44 0 0 1152 848 </string>
+	</dict>
+	<key>IBFramework Version</key>
+	<string>291.0</string>
+	<key>IBOpenObjects</key>
+	<array>
+		<integer>29</integer>
+	</array>
+	<key>IBSystem Version</key>
+	<string>6L60</string>
+</dict>
+</plist>

Added: trunk/windstille/src/macosx/SDLMain.nib/objects.nib
===================================================================
(Binary files differ)


Property changes on: trunk/windstille/src/macosx/SDLMain.nib/objects.nib
___________________________________________________________________
Added: svn:mime-type
   + application/octet-stream



From grumbel at mail.berlios.de  Sun Oct 24 23:13:26 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 23:13:26 +0200
Subject: [Windstille-commit] r3416 - trunk/windstille/src/display
Message-ID: <20101024211327.0CB12481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 23:13:26 +0200 (Sun, 24 Oct 2010)
New Revision: 3416

Modified:
   trunk/windstille/src/display/opengl_state.cpp
Log:
Only use glActiveTexture() when GLEW_ARB_multitexture is available


Modified: trunk/windstille/src/display/opengl_state.cpp
===================================================================
--- trunk/windstille/src/display/opengl_state.cpp	2010-10-24 21:04:55 UTC (rev 3415)
+++ trunk/windstille/src/display/opengl_state.cpp	2010-10-24 21:13:26 UTC (rev 3416)
@@ -275,9 +275,12 @@
   {
     if (impl->texture[i] != global_state->impl->texture[i])
     { 
-      // FIXME: glActiveTexture() makes the game crash on Matrox
-      // G450, without that line it works
-      glActiveTexture(GL_TEXTURE0 + i);
+      if (GLEW_ARB_multitexture)
+      {
+        // Matrox G450 can't do multitexturing
+        glActiveTexture(GL_TEXTURE0 + i);
+      }
+
       if (impl->texture[i])
       {
         global_state->impl->texture[i] = impl->texture[i];



From grumbel at mail.berlios.de  Sun Oct 24 23:13:50 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Sun, 24 Oct 2010 23:13:50 +0200
Subject: [Windstille-commit] r3417 - trunk/windstille/src/display
Message-ID: <20101024211350.C7F53481082@sheep.berlios.de>

Author: grumbel
Date: 2010-10-24 23:13:50 +0200 (Sun, 24 Oct 2010)
New Revision: 3417

Modified:
   trunk/windstille/src/display/texture.cpp
Log:
Use math::is_power_of_two() instead of static function


Modified: trunk/windstille/src/display/texture.cpp
===================================================================
--- trunk/windstille/src/display/texture.cpp	2010-10-24 21:13:26 UTC (rev 3416)
+++ trunk/windstille/src/display/texture.cpp	2010-10-24 21:13:50 UTC (rev 3417)
@@ -30,11 +30,6 @@
 #include "display/assert_gl.hpp"
 #include "util/util.hpp"
 
-static inline bool is_power_of_2(int v)
-{
-  return (v & (v-1)) == 0;
-}
-
 TexturePtr
 Texture::create(const Pathname& filename)
 {
@@ -71,7 +66,7 @@
 {
   if (!GLEW_ARB_texture_non_power_of_two)
   {
-    if (!is_power_of_2(m_width) || !is_power_of_2(m_height))
+    if (!math::is_power_of_two(m_width) || !math::is_power_of_two(m_height))
     {
       std::cout  << "Texture::Texture(): texture dimensions have non power of two size: " << m_width << "x" << m_height;
 
@@ -108,7 +103,7 @@
 
   if (!GLEW_ARB_texture_non_power_of_two)
   {
-    if (!is_power_of_2(image->get_width()) || !is_power_of_2(image->get_height()))
+    if (!math::is_power_of_two(image->get_width()) || !math::is_power_of_two(image->get_height()))
     {
       std::ostringstream str;
       str << "Texture::Texture(): image dimensions have non power of two size: " 



From grumbel at mail.berlios.de  Mon Oct 25 06:55:39 2010
From: grumbel at mail.berlios.de (grumbel at mail.berlios.de)
Date: Mon, 25 Oct 2010 06:55:39 +0200
Subject: [Windstille-commit] r3418 - trunk/windstille
Message-ID: <20101025045539.660AC481089@sheep.berlios.de>

Author: grumbel
Date: 2010-10-25 06:55:38 +0200 (Mon, 25 Oct 2010)
New Revision: 3418

Modified:
   trunk/windstille/SConscript
   trunk/windstille/scons_enhancements.py
Log:
Turned SCons enhancements into Configuration class


Modified: trunk/windstille/SConscript
===================================================================
--- trunk/windstille/SConscript	2010-10-24 21:13:50 UTC (rev 3417)
+++ trunk/windstille/SConscript	2010-10-25 04:55:38 UTC (rev 3418)
@@ -26,46 +26,6 @@
 
 CacheDir('cache')
 
-def MakeEnvironment(packages, cfg):
-    env = Environment(ENV=os.environ)
-
-    for pkg in packages:
-        if type(pkg) == str:
-            if pkg in cfg:
-                env.Append(**cfg[pkg])
-            else:
-                raise Exception("Unknown package: %s" % pkg)
-        elif type(pkg) == dict:
-            env.Append(**pkg)
-        else:
-            raise Exception("Unknown package type: %s" % pkg)
-
-    return env
-
-def BuildProgram(target, sources, packages = [], cfg = {}):
-    env = MakeEnvironment(packages, cfg)
-    return env.Program(target, sources)
-
-def BuildStaticLibrary(target, sources, packages = [], cfg = {}):
-    env = MakeEnvironment(packages, cfg)
-    return env.StaticLibrary(target, sources)
-
-def ParseConfig(cmd):
-    env = Environment()
-    env['ENV']['PATH'] = os.environ['PATH']
-    env.ParseConfig(cmd)
-
-    cfg = {}
-
-    for var in [ 'CCFLAGS', 'CPPDEFINES', 'CPPPATH', 'LIBS', 'LIBPATH' ]:
-        if var in env and env[var] != []:
-            cfg[var]  = env[var] 
-
-    # if 'CCFLAGS' in cfg:
-    #     cfg['CXXFLAGS'] = cfg['CCFLAGS']
-
-    return cfg
-
 class Project:
     def __init__(self):
         self.features = {
@@ -107,7 +67,7 @@
             print "Error: C++ compiler missing"
             Exit(1)
 
-        self.cfg = {}
+        self.cfg = Configuration()
         cfg = self.cfg
 
         # preset compiler flags
@@ -189,7 +149,7 @@
                                     'LIBS' : [ File('libsquirrel.a') ],
                                     'CPPDEFINES' : [] # empty, but it is needed later on
                                     }
-        
+
         cfg['windstille']    = { 'CPPPATH' : [ '.', 'src', 'src/scripting' ] }
         cfg['test']          = { 'CPPDEFINES' : [ '__TEST__' ],
                                  'OBJPREFIX'  : "test__" }
@@ -202,14 +162,6 @@
         cfg['wst_system']    = { 'LIBS' : [ File('libwst_system.a') ] }
         cfg['wst_util']      = { 'LIBS' : [ File('libwst_util.a') ] }
 
-        if False:
-            print
-            print "Current Configuration:"
-            print "======================"
-            for k, v in self.cfg.items():
-                print "cfg['%s'] = %s" % (k, v)
-            print
-
         if conf.Check32bit() == "64bit":
             # conf.env.Append(CXXFLAGS="-D_SQ64")
             self.features["64bit"] = True
@@ -231,7 +183,7 @@
     def build_all(self):
         if sys.platform == 'darwin':        
             self.build_sdl_main()
-        
+
         self.build_squirrel()
         self.build_miniswig()
         self.build_binreloc()                
@@ -249,10 +201,10 @@
         if self.features['64bit']:
             pkg['CPPDEFINES'] = ['_SQ64']
 
-        BuildStaticLibrary('squirrel',
+        self.cfg.StaticLibrary('squirrel',
                            Glob('external/SQUIRREL2/squirrel/*.cpp') +
                            Glob('external/SQUIRREL2/sqstdlib/*.cpp'),
-                           [pkg], self.cfg)
+                           [pkg])
 
     def build_miniswig(self):
         miniswig_env = Environment()
@@ -284,34 +236,34 @@
                     miniswig_bin)
 
     def build_binreloc(self):
-        BuildStaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
-                           [ { 'CPPDEFINES' : ["ENABLE_BINRELOC"] } ], self.cfg)
+        self.cfg.StaticLibrary("binreloc", ["external/binreloc-2.0/binreloc.c"],
+                           [ { 'CPPDEFINES' : ["ENABLE_BINRELOC"] } ])
 
     def build_sdl_main(self):
-        BuildStaticLibrary("sdlmain", ["src/macosx/SDLmain.m"], 
-                           [ 'SDL' ], self.cfg)
-                           
+        self.cfg.StaticLibrary("sdlmain", ["src/macosx/SDLmain.m"], 
+                           [ 'SDL' ])
+
     def build_wstlib(self):
         pkgs = [ 'default', 'windstille', 'binreloc' ]
-        BuildStaticLibrary('wst_util',
+        self.cfg.StaticLibrary('wst_util',
                            Glob('src/lisp/*.cpp') +
                            Glob('src/util/*.cpp'),
-                           pkgs, self.cfg)
-        BuildStaticLibrary('wst_math', Glob('src/math/*.cpp'), pkgs, self.cfg)
-        BuildStaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'), pkgs, self.cfg)
-        BuildStaticLibrary('wst_particles', Glob('src/particles/*.cpp'), pkgs, self.cfg)
-        BuildStaticLibrary('wst_sound', Glob('src/sound/*.cpp'), pkgs, self.cfg)
-        BuildStaticLibrary('wst_display', 
+                           pkgs)
+        self.cfg.StaticLibrary('wst_math', Glob('src/math/*.cpp'), pkgs)
+        self.cfg.StaticLibrary('wst_navgraph', Glob('src/navigation/*.cpp'), pkgs)
+        self.cfg.StaticLibrary('wst_particles', Glob('src/particles/*.cpp'), pkgs)
+        self.cfg.StaticLibrary('wst_sound', Glob('src/sound/*.cpp'), pkgs)
+        self.cfg.StaticLibrary('wst_display', 
                            Glob('src/font/*.cpp') +
                            Glob('src/display/*.cpp') +
                            Glob('src/scenegraph/*.cpp') +
                            Glob('src/sprite2d/*.cpp') +
                            Glob('src/sprite3d/*.cpp'),
-                           pkgs + [ 'freetype', 'SDL', 'SDL_image' ], self.cfg)
-        BuildStaticLibrary('wst_system', Glob('src/system/*.cpp'), pkgs + [ 'SDL' ], self.cfg)
+                           pkgs + [ 'freetype', 'SDL', 'SDL_image' ])
+        self.cfg.StaticLibrary('wst_system', Glob('src/system/*.cpp'), pkgs + [ 'SDL' ])
 
     def build_windstille(self):
-        BuildProgram('windstille',
+        self.cfg.Program('windstille',
                      Glob('src/app/*.cpp') +
                      Glob('src/armature/*.cpp') +
                      Glob('src/collision/*.cpp') +
@@ -331,8 +283,7 @@
                        'SDL', 'SDL_image',
                        'OpenAL', 'ogg', 'vorbis', 'vorbisfile', 
                        'squirrel', 'png', 'binreloc',
-                       'boost_signals', 'boost_filesystem' ],
-                     self.cfg)
+                       'boost_signals', 'boost_filesystem' ])
 
     def build_windstille_editor(self):
         pkgs = [ 'default',
@@ -342,7 +293,7 @@
                  'boost_filesystem',
                  'gtkglextmm-1.2' , 'gtkmm-2.4', 'SDL', 'curl', 'png', 'binreloc', 'OpenGL', 'GLEW',
                  'binreloc', 'jpeg' ]
-        BuildProgram('windstille-editor', Glob('src/editor/*.cpp'), pkgs, self.cfg)
+        self.cfg.Program('windstille-editor', Glob('src/editor/*.cpp'), pkgs)
 
         # FIXME: temporary dirty hack
         # test_editor_env = editor_env.Clone(OBJPREFIX="test_")
@@ -357,37 +308,37 @@
                  'SDL_image', 'OpenGL', 'GLEW', 'png', 'boost_filesystem',
                  'OpenAL', 'ogg', 'vorbis', 'vorbisfile', 'SDL']
 
-        BuildProgram("slideshow", Glob("extra/slideshow/*.cpp") + Glob("extra/slideshow/plugins/*.cpp"),
-                     pkgs + [ { 'CPPPATH' : 'extra/' } ], self.cfg)
-        BuildProgram("shadertest", Glob("extra/shadertest/*.cpp"), pkgs, self.cfg)
-        BuildProgram("lensflare", Glob("extra/lensflare/*.cpp"), pkgs, self.cfg)
-        BuildProgram("memleak", Glob("extra/memleak/*.cpp"), pkgs, self.cfg)
+        self.cfg.Program("slideshow", Glob("extra/slideshow/*.cpp") + Glob("extra/slideshow/plugins/*.cpp"),
+                     pkgs + [ { 'CPPPATH' : 'extra/' } ])
+        self.cfg.Program("shadertest", Glob("extra/shadertest/*.cpp"), pkgs)
+        self.cfg.Program("lensflare", Glob("extra/lensflare/*.cpp"), pkgs)
+        self.cfg.Program("memleak", Glob("extra/memleak/*.cpp"), pkgs)
 
         for filename in Glob("extra/*.cpp", strings=True):
-            BuildProgram(filename[:-4], filename, pkgs, self.cfg)
+            self.cfg.Program(filename[:-4], filename, pkgs)
 
     def build_test_apps(self):
         pkgs = [ 'test', 'windstille' ]
 
-        BuildProgram("test_babyxml", ["src/util/baby_xml.cpp"], pkgs, self.cfg)
-        BuildProgram("test_response_curve", ["src/util/response_curve.cpp"], pkgs, self.cfg)
-        BuildProgram("test_random", ["src/math/random.cpp"], pkgs, self.cfg)
-        BuildProgram("test_pathname", ["src/util/pathname.cpp"], pkgs + [ 'boost_filesystem' ], self.cfg)
-        BuildProgram("test_directory", ["src/util/directory.cpp"], pkgs + [ 'boost_filesystem', 'wst_util' ], self.cfg)
-        BuildProgram("test_easing", ["src/math/easing.cpp"], pkgs, self.cfg)
-        BuildProgram("reader_test", ["test/read_test.cpp"], pkgs + [ 'wst_util', 'SDL' ], self.cfg)
+        self.cfg.Program("test_babyxml", ["src/util/baby_xml.cpp"], pkgs)
+        self.cfg.Program("test_response_curve", ["src/util/response_curve.cpp"], pkgs)
+        self.cfg.Program("test_random", ["src/math/random.cpp"], pkgs)
+        self.cfg.Program("test_pathname", ["src/util/pathname.cpp"], pkgs + [ 'boost_filesystem' ])
+        self.cfg.Program("test_directory", ["src/util/directory.cpp"], pkgs + [ 'boost_filesystem', 'wst_util' ])
+        self.cfg.Program("test_easing", ["src/math/easing.cpp"], pkgs)
+        self.cfg.Program("reader_test", ["test/read_test.cpp"], pkgs + [ 'wst_util', 'SDL' ])
 
-        BuildProgram("test_scissor_drawable", ["test/scissor_drawable/scissor_drawable.cpp"],
-                     pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
-                              'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
-                              'binreloc' ],
-                     self.cfg)
+        self.cfg.Program("test_scissor_drawable", ["test/scissor_drawable/scissor_drawable.cpp"],
+                         pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
+                                  'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math',
+                                  'wst_sound', 'wst_system', 'wst_util',
+                                  'binreloc' ])
 
-        BuildProgram("test_shader_drawable", [ "test/shader_drawable/shader_drawable.cpp" ],
-                     pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
-                              'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math', 'wst_sound', 'wst_system', 'wst_util',
-                              'binreloc' ],
-                     self.cfg)
+        self.cfg.Program("test_shader_drawable", [ "test/shader_drawable/shader_drawable.cpp" ],
+                         pkgs + [ 'SDL', 'OpenGL', 'GLEW', 'png', 'SDL_image', 'boost_filesystem', 
+                                  'wst_particles', 'wst_navgraph', 'wst_display', 'wst_math',
+                                  'wst_sound', 'wst_system', 'wst_util',
+                                  'binreloc' ])
 
     def build_windstille_data(self):
         data_env = self.env.Clone()

Modified: trunk/windstille/scons_enhancements.py
===================================================================
--- trunk/windstille/scons_enhancements.py	2010-10-24 21:13:50 UTC (rev 3417)
+++ trunk/windstille/scons_enhancements.py	2010-10-25 04:55:38 UTC (rev 3418)
@@ -1 +1,73 @@
+# Make all normal SConstruct calls available
+from SCons.Script import *
+
+def MakeEnvironment(packages, cfg):
+    env = Environment(ENV=os.environ)
+
+    for pkg in packages:
+        if type(pkg) == str:
+            if pkg in cfg:
+                env.Append(**cfg[pkg])
+            else:
+                raise Exception("Unknown package: %s" % pkg)
+        elif type(pkg) == dict:
+            env.Append(**pkg)
+        else:
+            raise Exception("Unknown package type: %s" % pkg)
+
+    return env
+
+def BuildProgram(target, sources, packages = [], cfg = {}):
+    env = MakeEnvironment(packages, cfg)
+    return env.Program(target, sources)
+
+def BuildStaticLibrary(target, sources, packages = [], cfg = {}):
+    env = MakeEnvironment(packages, cfg)
+    return env.StaticLibrary(target, sources)
+
+def ParseConfig(cmd):
+    env = Environment()
+    env['ENV']['PATH'] = os.environ['PATH']
+    env.ParseConfig(cmd)
+
+    cfg = {}
+
+    for var in [ 'CCFLAGS', 'CPPDEFINES', 'CPPPATH', 'LIBS', 'LIBPATH' ]:
+        if var in env and env[var] != []:
+            cfg[var]  = env[var] 
+
+    # if 'CCFLAGS' in cfg:
+    #     cfg['CXXFLAGS'] = cfg['CCFLAGS']
+
+    return cfg
+
+class Configuration:
+    def __init__(self):
+        self.cfg = {}
+    
+    def __getitem__(self, key):
+        return self.cfg[key]
+
+    def __setitem__(self, key, value):
+        self.cfg[key] = value
+
+    def __delitem__(self, key):
+        del self.cfg[key]
+
+    def Program(self, target, sources, packages = []):
+        env = MakeEnvironment(packages, self.cfg)
+        return env.Program(target, sources)
+
+    def StaticLibrary(self, target, sources, packages = []):
+        env = MakeEnvironment(packages, self.cfg)
+        return env.StaticLibrary(target, sources)
+
+    def debug_print(self):
+        print
+        print "Current Configuration:"
+        print "======================"
+        for k, v in self.cfg.items():
+            print "cfg['%s'] = %s" % (k, v)
+        print
+
 # EOF #



